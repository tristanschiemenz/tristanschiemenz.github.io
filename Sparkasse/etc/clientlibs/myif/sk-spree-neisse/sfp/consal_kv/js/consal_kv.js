/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist/index.html";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 13);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

var Config = function() {
    this.serviceUrl = "";
    this.mediaUrl = "";
    this.resourceUrl = "";
    this.style = "";

    this.aid = "";
    this.typ = "";
    this.tkz = "";
    this.produkt = "";
    this.mandant = "";

    this.mAttr = {};
};

Config.prototype.reset = function() {
    var template = new Config();

    Object.keys(template).forEach(function(key) {
        if (typeof template[key] === "string")
            this[key] = template[key];
        else if (typeof template[key] === "object")
            this[key] = {};
    }, this);
};

Config.prototype.attr = function(sName, sVal) {
    if (arguments.length === 1) {
        if (this.mAttr.hasOwnProperty(sName)) {
            return this.mAttr[sName];
        }
        return "";
    } else if (arguments.length === 2) {
        this.mAttr[sName] = sVal;
    }
}

module.exports = new Config();


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.2.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( ">tbody", elem )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with computed style
	var valueIsBorderBox,
		styles = getStyles( elem ),
		val = curCSS( elem, name, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Computed unit is not pixels. Stop here and return.
	if ( rnumnonpx.test( val ) ) {
		return val;
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = isBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ name ] );

	// Fall back to offsetWidth/Height when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	if ( val === "auto" ) {
		val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
	}

	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var doc, docElem, rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		doc = elem.ownerDocument;
		docElem = doc.documentElement;
		win = doc.defaultView;

		return {
			top: rect.top + win.pageYOffset - docElem.clientTop,
			left: rect.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( jQuery.isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

var Util = {
    getDefaultStyle: function() {
        return "ukv";
    },

    getDefaultMandant: function() {
        return "ukv";
    },

    parseAsDateObject: function(val) {
        var res = this.parseAsDate(val);

        if (res) {
            return new Date(res.jjjj + "-" + res.mm + "-" + res.tt);
        }
    },

    parseAsFloat: function(val) {
        if (/^\d+,?\d*$/.test(val)) {
            val = val.replace(/,/g, '.');

            return parseFloat(val);
        }
    },

    parseAsDate: function(val, bRaw) {
        var regEx = /^(\d\d?).(\d\d?).(\d{4})$/;

        var res = val.match(regEx);

        if (res) {
            res[1] = parseInt(res[1], 10);
            res[2] = parseInt(res[2], 10);
            res[3] = parseInt(res[3], 10);

            if (!(res[1] >= 1 && res[1] <= 31)) {
                return;
            } else if (!(res[2] >= 1 && res[2] <= 12)) {
                return;
            } else if (res[1] === 31) {
                switch(res[2]) {
                    case 1:
                    case 3:
                    case 5:
                    case 7:
                    case 8:
                    case 10:
                    case 12:
                        break;
                    default:
                        return;
                }
            } else if (res[1] === 30 && res[2] === 2) {
                return;
            }
            if (!(res[3] >= 1900 && res[3] <= 2100)) {
                return;
            }

            return {
                tt : bRaw ? res[1] : this.twoDigitInt(res[1]),
                mm : bRaw ? res[2] : this.twoDigitInt(res[2]),
                jjjj : res[3]
            };
        }
    },

    parseAsDateAndFormatAsString: function(val) {
        var res = Util.parseAsDate(val);

        if (res) {
            return res.tt + "." + res.mm + "." + res.jjjj;
        }
    },

    toDateAsString: function(tt, mm, jjjj) {
        var ttAsN = this.twoDigitInt(tt);
        if (!tt || !ttAsN) {
            return "";
        }

        var mmAsN = this.twoDigitInt(mm);
        if (!mm || !mmAsN) {
            return "";
        }

        return ttAsN + "." + mmAsN + "." + jjjj;
    },

    twoDigitInt: function(val) {
        if (typeof val !== "number") {
            try {
                val = parseInt(val);
            } catch(e) {
                val = 1;
            }
        }

        if (val < 10) {
            return  "0" + val;
        }

        return val;
    },

    isPromise: function (value) {
        if (value !== null && value !== undefined && typeof value === 'object') {
            if (typeof value.then === "function") {
                var promiseThenSrc = String($.Deferred().then);
                var valueThenSrc = String(value.then);
                return promiseThenSrc === valueThenSrc;
            }
        }

        return false;
    },

    getProp: function(obj, aProps) {
        if (!obj)
            return null;

        var val = obj;
        for(var i=0; i<aProps.length; i++) {
            val = val[aProps[i]];

            if (val === undefined || val === null) {
                return null;
            }
        }

        return val;
    },

    nextVersicherungsbeginnTomorrow: function(bAsString) {
        var current = new Date();
        current.setDate(current.getDate()+1);

        if (bAsString) {
            return this.twoDigitInt(current.getDate()) + "." + this.twoDigitInt(current.getMonth()+1) + "." + current.getFullYear();
        } else {
            return {
                tt : current.getDate(),
                mm : current.getMonth()+1,
                jjjj : current.getFullYear()
            };
        }
    },

    nextVersicherungsbeginn: function (bAsString) {
        var now = new Date();
        if (now.getMonth() == 11) {
            var current = new Date(now.getFullYear() + 1, 0, 1);
        } else {
            var current = new Date(now.getFullYear(), now.getMonth() + 1, 1);
        }

        if (bAsString) {
            return this.twoDigitInt(current.getDate()) + "." + this.twoDigitInt(current.getMonth()+1) + "." + current.getFullYear();
        } else {
            return {
                tt : current.getDate(),
                mm : current.getMonth()+1,
                jjjj : current.getFullYear()
            };
        }

    },

    now: function() {
        var now = new Date();
        var month = now.getMonth()+1;
        now = new Date(now.getFullYear() + "-" + this.twoDigitInt(month) + "-" + this.twoDigitInt(now.getDate()));

        return now;
    },

    isInPast: function(date) {
        var now = this.now();

        return (now.getTime() > date.getTime());
    },

    isInFuture: function(date) {
        var now = this.now();

        return (now.getTime() < date.getTime());
    },

    isToday: function(date) {
        var now = this.now();

        //return (now.getTime() === date.getTime());
        return now.getFullYear()==date.getFullYear() && now.getMonth()==date.getMonth() && now.getDate()==date.getDate();
    },

    diffInMonths: function(d1, d2) {
        if (!d2) {
            d2 = new Date();
            d2 = new Date(d2.getFullYear() + "-" + this.twoDigitInt(d2.getMonth()+1) + "-" + this.twoDigitInt(d2.getDate()));
        }

        var months;
        months = (d2.getFullYear() - d1.getFullYear()) * 12;
        months -= d1.getMonth() + 1;
        months += d2.getMonth();
        return months <= 0 ? 0 : months;
    },

    calculate: function(val, factor) {
        var value = val;
        if (typeof val === "string") {
            value = parseFloat(val.replace(",", "."));
        }

        value = value * factor;
        return String(Number(value).toFixed(2)).replace(".", ",");
    },

    calculateAlter: function(geburtsdatum) {
        if (typeof geburtsdatum === "string") {
            geburtsdatum = this.parseAsDateObject(geburtsdatum);
        }

        var now = new Date();
        var alter = now.getFullYear() - geburtsdatum.getFullYear();
        var month = now.getMonth() - geburtsdatum.getMonth();
        if (month < 0 || (month === 0 && now.getDate() < geburtsdatum.getDate())) {
            alter--;
        }
        return alter;
    },

    buildGeburtsdatumAsString: function(nAlter) {
        var now = new Date();
        return "01." + this.twoDigitInt(now.getMonth()+1) + "." + (now.getFullYear()-nAlter);
    },

    isVolljaehrig: function(geburtsdatum) {
        return this.calculateAlter(geburtsdatum) >= 18;
    },

    copyOf: function(val) {
        var typeOfVal = typeof val;

        if (typeOfVal === "boolean" || typeOfVal === "number" || typeOfVal === "string" || val === null) {
            return val;
        } else if (typeOfVal === "object") {
            var res;
            if ($.isArray(val)) {
                res = [];

                val.forEach(function(currVal) {
                    var copyOfVal = Util.copyOf(currVal);

                    if (copyOfVal !== undefined) {
                        res.push(copyOfVal);
                    }
                });

                return res;
            } else {
                res = {};

                for(var prop in val) {
                    var copyOfVal = Util.copyOf(val[prop]);

                    if (copyOfVal !== undefined) {
                        res[prop] = copyOfVal;
                    }
                }

                return res;
            }
        }
    },

    merge: function(oSourceObject, oTargetObject) {
        for(var prop in oSourceObject) {
            if (oTargetObject[prop] && typeof oTargetObject[prop] === "object" && oSourceObject[prop] && typeof oSourceObject[prop === "object"]) {
                Util.merge(oSourceObject[prop], oTargetObject[prop]);
            } else {
                oTargetObject[prop] = oSourceObject[prop];
            }
        }
    },

    getTextFromEncodedObject: function(json, quote) {
        if (typeof json==='string') {
            return json;
        }
        if (Array.isArray(json)) {
            var erg = "";
            for (var i=0; i<json.length; i++)
                erg += Util.getTextFromEncodedObject(json[i]);
            return  erg;
        }

        if (!quote)
            quote = '"';

        var erg = '<';
        erg += json.type;
        if (json.attributes) {
            for (var a in json.attributes) {
                erg += ' ';
                erg += a;
                erg += '=';
                erg += quote;
                erg += json.attributes[a];
                erg += quote;
            }
        }
        erg += '>';

        if (json.content) {
            for (var i=0; i<json.content.length; i++)
                erg += Util.getTextFromEncodedObject(json.content[i]);
        }

        erg += '</';
        erg += json.type;
        erg += '>';
        return erg;
    }


};

module.exports = Util;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (true) {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}.call(this));


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

var Util = __webpack_require__(2);

var INTERNAL_ATTR_NAME = "kv_ref";

function _getItemByPseudoId(sAttrValue, root, type) {
    var sIdWithVal = type || "";
    var sIdWithVal = sIdWithVal + "[" + INTERNAL_ATTR_NAME + "='" + sAttrValue + "']";
    var aItems = root ? root.find(sIdWithVal) : $(sIdWithVal);

    if (aItems.length === 0) {
        return null;
    }

    return aItems.length > 0 ? $(aItems[0]) : null;
};

function _getItemsByPseudoId(sAttrValue, root, type) {
    var sIdWithVal = type || "";
    var sIdWithVal = sIdWithVal + "[" + INTERNAL_ATTR_NAME + "='" + sAttrValue + "']";
    var aItems = root ? root.find(sIdWithVal) : $(sIdWithVal);

    if (aItems.length === 0) {
        return null;
    }

    return aItems;
};

function _getLastItemByPseudoId(sAttrValue, root, type) {
    var sIdWithVal = type || "";
    var sIdWithVal = sIdWithVal + "[" + INTERNAL_ATTR_NAME + "='" + sAttrValue + "']";
    var aItems = root ? root.find(sIdWithVal) : $(sIdWithVal);

    if (aItems.length === 0) {
        return null;
    }

    return aItems.length > 0 ? $(aItems[aItems.length-1]) : null;
};

module.exports = {
    scrollTo: function(rootElement) {
        $("html, body").animate({
            scrollTop: $(rootElement).offset().top
        }, 500);
    },

    scrollToFirstError: function(rootElement) {
        var firstError = rootElement.find(".error").first();

        if (firstError.length) {
            $("html, body").animate({
                scrollTop: $(firstError).offset().top
            }, 500);
        }
    },

    getAttrNameOfPseudoId: function() {
        return INTERNAL_ATTR_NAME;
    },

    itemWithPseudoIdExists: function(sAttrValue, root) {
        var item = _getItemByPseudoId(sAttrValue, root);

        return (item !== null);
    },

    lastItemWithPseudoIdExists: function(sAttrValue, root) {
        var item = _getLastItemByPseudoId(sAttrValue, root);

        return (item !== null);
    },

    getItemByPseudoId: function(sAttrValue, root, type) {
        var item = _getItemByPseudoId(sAttrValue, root, type);

        if (item !== null) {
            return item;
        } else {
            console.log("??? item with " + INTERNAL_ATTR_NAME + " and value '" + sAttrValue + "' not found!");
            return $();
        }
    },

    getItemsByPseudoId: function(sAttrValue, root, type) {
        var items = _getItemsByPseudoId(sAttrValue, root, type);

        if (items !== null) {
            return items;
        } else {
            console.log("??? item with " + INTERNAL_ATTR_NAME + " and value '" + sAttrValue + "' not found!");
            return $();
        }
    },

    getLastItemByPseudoId: function(sAttrValue, root, type) {
        var item = _getLastItemByPseudoId(sAttrValue, root, type);

        if (item !== null) {
            return item;
        } else {
            console.log("??? item with " + INTERNAL_ATTR_NAME + " and value '" + sAttrValue + "' not found!");
            return $();
        }
    },

    determineGesamtebeitragTextAndValue: function(tarif, zahlungsweise) {
    	var labelText;
        var factor;
        switch(zahlungsweise) {
            case "vierteljährlich":
                labelText = "Vierteljährlicher Gesamtbeitrag";
                factor = 3;
                break;
            case "halbjährlich":
                labelText = "Halbjährlicher Gesamtbeitrag";
                factor = 6;
                break;
            case "jährlich":
                labelText = "Jährlicher Gesamtbeitrag";
                factor = 12;
                break;
            default:
                labelText = "Monatlicher Gesamtbeitrag";
                factor = 1;
                break;
        }

        if (tarif) {
            var value = Util.calculate(tarif.beitrag, factor);

            return {
                text: labelText,
                value: value
            };
        }
    },

    determineZahlbeitragTextAndValue: function(beitrag, zahlungsweise) {
        var labelText;
        var factor;
        switch(zahlungsweise) {
            case "vierteljährlich":
                labelText = "Vierteljährlicher Gesamtbeitrag";
                factor = 3;
                break;
            case "halbjährlich":
                labelText = "Halbjährlicher Gesamtbeitrag";
                factor = 6;
                break;
            case "jährlich":
                labelText = "Jährlicher Gesamtbeitrag";
                factor = 12;
                break;
            default:
                labelText = "Monatlicher Gesamtbeitrag";
                factor = 1;
                break;
        }

        var value = Util.calculate(beitrag, factor);

        return {
            text: labelText,
            value: value
        };
    },

    getUnmaskedValue: function ($input, event) {
        var unmaskedValue = $input[0].inputmask.unmaskedvalue();

        if (event.key === ".") {
            var regEx = /^\d$/;
            var res = regEx.exec(unmaskedValue);
            var caret;
            if (res) {
                unmaskedValue = "0" + unmaskedValue;
                caret = 3;
            } else {
                regEx = /^(\d\d)(\d)$/;
                res = regEx.exec(unmaskedValue);

                if (res) {
                    unmaskedValue = res[1] + "0" + res[2];
                    caret = 6;
                }
            }

            if (res) {
                $input.val($input[0].inputmask.format(unmaskedValue));
                $input[0].setSelectionRange(caret, caret);
            }
        }

        return unmaskedValue;
    },

    buildGeschlechtSelect : function(currentSelection) {
        var select = $("<select />");
        var optionMaennlich = $("<option value='HERR'>Herr</option>");
        var optionWeiblich = $("<option value='FRAU'>Frau</option>");
        select.append($("<option>Bitte auswählen</option>"));
        select.append(optionMaennlich);
        select.append(optionWeiblich);

        if (currentSelection === "HERR") {
            optionMaennlich.attr("selected", "selected");
        } else if (currentSelection === "FRAU") {
            optionWeiblich.attr("selected", "selected");
        }

        return select;
    },

    getError: function(validationResult, propName) {
        if (!validationResult) {
            return false;
        } else if (validationResult.state !== "NOK") {
            return false;
        }

        var errorText;

        if (validationResult.validationErrors) {
            validationResult.validationErrors.some(function(oValidationError) {
                if (oValidationError.fieldName === propName) {
                    errorText = oValidationError.message;
                    return true;
                }
                return false;
            });
        }

        if (errorText) {
            errorText = errorText.replace("KV." + propName + ".displayname", "");
            errorText = errorText.replace(/\s\s/, " ");
        }

        return errorText;
    },

    showLoading: function() {
        $.showLoading({name: 'circle-fade'});
    },

    hideLoading: function() {
        $.hideLoading();
    }
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

var SchrittRendererHelper = __webpack_require__(4);

var SchrittRenderer = function(oProdukt, sRenderStyle) {
    this.oProdukt = oProdukt;
    this.sRenderStyle = sRenderStyle;
};

SchrittRenderer.prototype._getTemplate = function() {
    var d = $.Deferred();

    var schrittTemplate = this._getTemplateImport();
    d.resolve(schrittTemplate);

    return d.promise();
};

SchrittRenderer.prototype._getTemplateImport = function() {
    throw new Error("not implemented");
};    

SchrittRenderer.prototype.render = function(validationResult) {
    throw new Error("not implemented");
};

SchrittRenderer.prototype.setBusy = function(bBusy) {
    if (bBusy)
        SchrittRendererHelper.showLoading();
    else 
        SchrittRendererHelper.hideLoading(); 
};

SchrittRenderer.prototype.setBO = function(oBO) {
    this.oBO = oBO;
};

SchrittRenderer.prototype.getBO = function() {
    return this.oBO;
};

module.exports = SchrittRenderer;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

module.exports = {
    callAsync: function(oBO, sURL, nMs) {
        nMs = nMs || 1500;

        var deferred = $.Deferred();


        var ASYNC_MODE = "asyncMode";
        var ASYNC_TOKEN = "asyncToken";

        var oBO = Util.copyOf(oBO);
        oBO[ASYNC_MODE] = "REQUEST";

        var fnAfterRequest = function(result, iCountPerform) {
            var bResponseHandable = false;
            var bOk = false;
            var bRepeat = (iCountPerform < 30);

            if (typeof result === "object") {
                if (result.hasOwnProperty("state")) {
                    if (result.state === "RETRY") {
                        oBO[ASYNC_MODE] = "PERFORM";
                        if (result.hasOwnProperty("asyncToken")) {
                            oBO[ASYNC_TOKEN] = result["asyncToken"];
                        }
                    }

                    //bis 29.08.2019
                    /*else if (result.state === "OK") {
                        bRepeat = false;
                        bOk = true;
                        deferred.resolve(result);
                    }
                    else if (result.state === "NOK" || result.state === "EXCEPTION") {
                        bRepeat = false;
                        bOk = true;
                        deferred.resolve(result);
                    }*/

                    //ab 30.08.2019
                    else if (result.state === "OK") {
                        bRepeat = false;
                        bOk = true;
                        deferred.resolve(result);
                    }
                    else if (result.state === "NOK") {
                        bRepeat = false;
                        bOk = true;
                        deferred.resolve(result);
                    }
                    else if (result.state === "EXCEPTION") {
                        bRepeat = false;
                        bOk = false; //reject erfolgt unten
	                }
                    else if (result.state === "FAIL") { //technischer Abbruch
	                	if (typeof state['stateTechnical'] !== 'undefined' && state.stateTechnical !== null) {
	                		result.state = state.stateTechnical;
	                	}
	                    bRepeat = false;
	                    bOk = false; //reject erfolgt unten
	                }
                    else if (result.state === "SUCCESS") { //technisches OK
	                	if (typeof state['stateTechnical'] !== 'undefined' && state.stateTechnical !== null) {
	                		result.state = state.stateTechnical;
	                	}
	                    bRepeat = false;
                    	bOk = true;
                        deferred.resolve(result);
                    }
                }
            }

            if (bRepeat) {
                setTimeout(function() {
                    $.ajax({
                        type: "POST",
                        url: sURL,
                        data: JSON.stringify(oBO),
                        contentType: "application/json"
                    }).always(function(result) {
                        fnAfterRequest(result, iCountPerform+1);
                    });
                }, iCountPerform === 1 ? 0 : nMs);
            } else if (!bOk) {
                deferred.reject(result);
            }
        };

        $.ajax({
            type: "POST",
            url: sURL,
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).always(function(result) {
            fnAfterRequest(result, 1);
        });

        return deferred.promise();
    }


};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRendererHelper = __webpack_require__(4);
var Util = __webpack_require__(2);


function updateFrage(oFrage, value, fragen, deep) {
    fragen.forEach(function(oFrage2, nFrageIndex2) {
    	if (oFrage2.masterFrageId && oFrage2.masterFrageId.length>0 && oFrage2.masterFrageId==oFrage.externalfrageId) {
        	var oItemWithPseudoId = SchrittRendererHelper.getItemByPseudoId(oFrage2.externalfrageId);

        	var active = (oFrage2.masterFrageWert && oFrage2.masterFrageWert.value === value);
        	/*if (active)
                oItemWithPseudoId.show();
            else
                oItemWithPseudoId.hide();*/

        	if (active)
        		oItemWithPseudoId.find('input, select, textarea').removeAttr('disabled');
        	else
        		oItemWithPseudoId.find('input, select, textarea').attr('disabled', '');
    	}

    	if (deep==true && oFrage.fragen) {
    		oFrage2.fragen.forEach(function(soFrage2, snFrageIndex2) {
    			var curAntwort = soFrage2.antworten && soFrage2.antworten.length === 1 ? soFrage2.antworten[0] : "";
    			updateFrage(soFrage2, curAntwort, oFrage2.fragen, deep);
    		});
    	}
    });
}


var frageHelper = {
    getReactionOfSubfragen: function(oFrage, sVal) {
        var aSubfragen = oFrage.fragen;

        var reactionAvailable = false;
        var show = false;
        if (aSubfragen && aSubfragen.length > 0) {

            aSubfragen.some(function(oSubfrage) {
                if (oFrage.externalfrageId === oSubfrage.masterFrageId) {
                    reactionAvailable = true;

                    show = (oSubfrage.masterFrageWert && oSubfrage.masterFrageWert.value === sVal);
                }

                return reactionAvailable;
            });
        }

        return {
            reactionAvailable : reactionAvailable,
            show : show
        };
    },

    buildAndAppendFragen: function buildAndAppendFragen(schrittTemplate, enabled, fnFrageValidator, oParentFrage, aFragen, bWithImage, bNumbered, oPrevSibling, bHide, bIgnoreToDisplayErrors) {
        var rootElement = this.rootElement;
        var positionToAddAfter = oPrevSibling;

        var nFrageCounter = 1;

        aFragen.forEach(function(oFrage, nFrageIndex) {
            var fnRowTemplate;
            var frageRow;
            var input;
            var fnInputTemplate;

            if (!oFrage.fragetext && oFrage.fragetextDOM) {
                oFrage.fragetext = Util.getTextFromEncodedObject(JSON.parse(oFrage.fragetextDOM));
                oFrage.fragetextDOM = null;
            }

            if (oFrage.antworttyp === "LABEL") {
                fnRowTemplate = _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

                frageRow = $(fnRowTemplate({label: oFrage.fragetext, id: oFrage.fragenr, required: (oFrage.required ? "*" : ""), content: _.template(schrittTemplate.emptyContent)()}));
                frageRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), oFrage.externalfrageId);

                if (!SchrittRendererHelper.itemWithPseudoIdExists(oFrage.externalfrageId, rootElement)) {
                    if (oFrage.hilfetext || oFrage.infotext) {
                        var hilfetext = oFrage.hilfetext || oFrage.infotext;
                        var helpTextTemplate = _.template(schrittTemplate.helpText);
                        var helpText = $(helpTextTemplate({helptext: hilfetext}));
                        frageRow.find("label").first().append(helpText);
                    }

                    frageRow.insertAfter(positionToAddAfter);
                } else {
                    frageRow = SchrittRendererHelper.getItemByPseudoId(oFrage.externalfrageId, rootElement);
                }
            } else if (oFrage.antworttyp === "DATE") {
                fnRowTemplate = bNumbered ? (oFrage.fragetyp === "TARIFIERUNGS_FRAGE" ? _.template(schrittTemplate.labeledContentNumberedWithMediumColumnsRowTemplate) : _.template(schrittTemplate.labeledContentNumberedAndIdWithMediumColumnsRowTemplate) ) : _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

                fnInputTemplate = _.template(schrittTemplate.dateInputTemplate);
                input = $(fnInputTemplate({}));

                frageRow = $(fnRowTemplate({label: oFrage.fragetext, number: nFrageCounter++, id: oFrage.fragenr, required: (oFrage.required ? "*" : ""), content: input[0].outerHTML}));
                frageRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), oFrage.externalfrageId);
                if (bHide) {
                    frageRow.hide();
                }

                if (!SchrittRendererHelper.itemWithPseudoIdExists(oFrage.externalfrageId, rootElement)) {
                    frageRow.insertAfter(positionToAddAfter);

                    input = frageRow.find("input");
                    input.val(oFrage.antworten && oFrage.antworten.length === 1 ? oFrage.antworten[0] : "");
                    if (enabled) {
                        //input.inputmask("99.99.9999", {alias: "date"});
                        input.inputmask({alias: "datum"});
                        var inputHandler = (function(oFrage) {

                            return function(event) {
                                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                                var valueAsValidDateString = Util.parseAsDateAndFormatAsString($(this).val());

                                if (valueAsValidDateString) {
                                    oFrage.antworten = [valueAsValidDateString];
                                } else {
                                	if ($(this)[0].inputmask.getemptymask()==unmaskedValue) {
                                		oFrage.antworten = [""];
                                	} else {
                                		oFrage.antworten = [unmaskedValue];
                                	}

                                }

                                updateFrage(oFrage, valueAsValidDateString, aFragen, true);

                            };
                        })(oFrage);
                        input.keyup(inputHandler);
                        input.blur(inputHandler);
                    } else {
                        input.prop("disabled", true);
                    }

                    if (oFrage.hilfetext || oFrage.infotext) {
                        var hilfetext = oFrage.hilfetext || oFrage.infotext;
                        var helpTextTemplate = _.template(schrittTemplate.helpText);
                        var helpText = $(helpTextTemplate({helptext: hilfetext}));
                        frageRow.find("label").first().append(helpText);
                    }
                } else {
                    frageRow = SchrittRendererHelper.getItemByPseudoId(oFrage.externalfrageId, rootElement);
                }
            } else if (oFrage.antworttyp === "STRING" || oFrage.antworttyp === "FLOAT") {
                fnRowTemplate = bNumbered ? (oFrage.fragetyp === "TARIFIERUNGS_FRAGE" ? _.template(schrittTemplate.labeledContentNumberedWithMediumColumnsRowTemplate) : _.template(schrittTemplate.labeledContentNumberedAndIdWithMediumColumnsRowTemplate) ) : _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

                fnInputTemplate = _.template(schrittTemplate.stringInputTemplate);
                input = $(fnInputTemplate({}));

                frageRow = $(fnRowTemplate({label: oFrage.fragetext, number: nFrageCounter++, id: oFrage.fragenr, required: (oFrage.required ? "*" : ""), content: input[0].outerHTML}));
                frageRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), oFrage.externalfrageId);
                if (bHide) {
                    frageRow.hide();
                }

                if (!SchrittRendererHelper.itemWithPseudoIdExists(oFrage.externalfrageId, rootElement)) {
                    frageRow.insertAfter(positionToAddAfter);

                    input = frageRow.find("input");
                    var value = oFrage.antworten && oFrage.antworten.length === 1 ? oFrage.antworten[0] : "";
                    input.val(value);
                    if (enabled) {
                        var inputHandler = (function(oFrage) {

                            return function(event) {
                                oFrage.antworten = [$(this).val()];
                            };
                        })(oFrage);
                        input.keyup(inputHandler);
                        input.blur(inputHandler);

                        updateFrage(oFrage, value, aFragen, true);
                    } else {
                        input.prop("disabled", true);
                    }
                } else {
                    frageRow = SchrittRendererHelper.getItemByPseudoId(oFrage.externalfrageId, rootElement);
                }
            } else if (oFrage.antworttyp === "MEHRFACH_AUSWAHL") {
                fnRowTemplate = bNumbered ? (oFrage.fragetyp === "TARIFIERUNGS_FRAGE" ? _.template(schrittTemplate.labeledContentNumberedWithMediumColumnsRowTemplate) : _.template(schrittTemplate.labeledContentNumberedAndIdWithMediumColumnsRowTemplate) ) : _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

                if (oFrage.antwortMoeglichkeiten.length === 2) {
                    fnRowTemplate = bNumbered ? (oFrage.fragetyp === "TARIFIERUNGS_FRAGE" ? _.template(schrittTemplate.radioInputWith2ItemsNumberedTemplate) : _.template(schrittTemplate.radioInputWith2ItemsNumberedWithIdTemplate) ) : _.template(schrittTemplate.radioInputWith2ItemsTemplate);

                    frageRow = $(fnRowTemplate({label: oFrage.fragetext, number: nFrageCounter++, id: oFrage.fragenr, required: (oFrage.required ? "*" : ""), name: oFrage.externalfrageId, idOne: oFrage.externalfrageId + "_1", idTwo: oFrage.externalfrageId + "_2", valueOne: oFrage.antwortMoeglichkeiten[0].value, valueTwo: oFrage.antwortMoeglichkeiten[1].value}));
                    frageRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), oFrage.externalfrageId);
                    if (bHide) {
                        frageRow.hide();
                    }
                    if (!SchrittRendererHelper.itemWithPseudoIdExists(oFrage.externalfrageId, rootElement)) {
                        frageRow.insertAfter(positionToAddAfter);

                        if (oFrage.antworten && oFrage.antworten.length === 1) {
                            if (oFrage.antworten[0] === oFrage.antwortMoeglichkeiten[0].value) {
                                frageRow.find("input").eq(0).attr("checked", "checked");
                            } else if (oFrage.antworten[0] === oFrage.antwortMoeglichkeiten[1].value) {
                                frageRow.find("input").eq(1).attr("checked", "checked");
                            }
                        }
                        if (enabled) {
                            frageRow.find("input").change((function(oFrage) {
                                return function() {
                                    var value = $(this).val();
                                    if (value === undefined || value === null || value === "") {
                                        oFrage.antworten = [];
                                    } else {
                                        oFrage.antworten = [value];

                                        var reaction = frageHelper.getReactionOfSubfragen(oFrage, value);

                                        if (reaction.reactionAvailable) {
                                            oFrage.fragen.forEach(function(oSubfrage) {
                                                var oItemWithPseudoId = SchrittRendererHelper.getItemByPseudoId(oSubfrage.externalfrageId);

                                                if (reaction.show)
                                                    oItemWithPseudoId.show();
                                                else
                                                    oItemWithPseudoId.hide();
                                            });
                                        }
                                    }

                                    updateFrage(oFrage, value, aFragen, true);
                                }
                            })(oFrage));
                        } else {
                            frageRow.find("input").prop("disabled", true);
                        }

                        if (oFrage.hilfetext || oFrage.infotext) {
                            var hilfetext = oFrage.hilfetext || oFrage.infotext;
                            var helpTextTemplate = _.template(schrittTemplate.helpText);
                            var helpText = $(helpTextTemplate({helptext: hilfetext}));
                            frageRow.find("label").first().append(helpText);
                        }
                     } else {
                        frageRow = SchrittRendererHelper.getLastItemByPseudoId(oFrage.externalfrageId, rootElement);
                    }

                } else {
                    var select = $("<select />");
                    // TODO check when to add
                    var automBerechnung = !oFrage.antwortMoeglichkeiten || oFrage.antwortMoeglichkeiten.length!=1 || !'Autom. Berechnung'==oFrage.antwortMoeglichkeiten[0];
                    if (automBerechnung==true) {
                        select.append($("<option>Bitte auswählen</option>"));
                    } else if (oFrage.antwortMoeglichkeiten.length>0){
                    	oFrage.antworten = [oFrage.antwortMoeglichkeiten[0].key ? oFrage.antwortMoeglichkeiten[0].key : oFrage.antwortMoeglichkeiten[0].value];
                    }
                    oFrage.antwortMoeglichkeiten.forEach(function(antwortMoeglichkeit, antwortIndex) {
                        var newOption = $("<option />", {
                            value: antwortMoeglichkeit.key ? antwortMoeglichkeit.key : antwortMoeglichkeit.value,
                            text: antwortMoeglichkeit.value
                        });
                        select.append(newOption);
                        if (oFrage.antworten && oFrage.antworten.some(function(currentAntwort) {
                            if (antwortMoeglichkeit.key !== undefined && antwortMoeglichkeit.key !== null) {
                                return currentAntwort === antwortMoeglichkeit.key;
                            }
                            return currentAntwort === antwortMoeglichkeit.value;
                        })) {
                            newOption.attr("selected", "selected");
                        }
                    });

                    frageRow = $(fnRowTemplate({label: oFrage.fragetext, number: nFrageCounter++, id: oFrage.fragenr, required: (oFrage.required ? "*" : ""), content: select.prop("outerHTML")}));
                    frageRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), oFrage.externalfrageId);
                    if (!SchrittRendererHelper.itemWithPseudoIdExists(oFrage.externalfrageId, rootElement)) {
                        frageRow.insertAfter(positionToAddAfter);
                        if (bHide) {
                            frageRow.hide();
                        }
                        if (enabled) {
                            frageRow.find("select").change((function(oFrage) {
                                return function() {
                                    var value = $(this).val();
                                    if (value === undefined || value === null || value === "") {
                                        oFrage.antworten = [];
                                    } else {
                                        oFrage.antworten = [value];
                                    }

                                    var reaction = frageHelper.getReactionOfSubfragen(oFrage, value);

                                    if (reaction.reactionAvailable) {
                                        oFrage.fragen.forEach(function(oSubfrage) {
                                            var oItemWithPseudoId = SchrittRendererHelper.getItemByPseudoId(oSubfrage.externalfrageId);

                                            if (reaction.show)
                                                oItemWithPseudoId.show();
                                            else
                                                oItemWithPseudoId.hide();
                                        });
                                    }

                                    updateFrage(oFrage, value, aFragen, true);
                                }
                            })(oFrage));
                        } else {
                            frageRow.find("select").prop("disabled", true);
                        }

                        if (oFrage.hilfetext || oFrage.infotext) {
                            var hilfetext = oFrage.hilfetext || oFrage.infotext;
                            var helpTextTemplate = _.template(schrittTemplate.helpText);
                            var helpText = $(helpTextTemplate({helptext: hilfetext}));
                            frageRow.find("label").first().append(helpText);
                        }
                    } else {
                        frageRow = SchrittRendererHelper.getItemByPseudoId(oFrage.externalfrageId, rootElement);
                    }
                }

            }

            var ignoreShowErrorsForSubfragen = false;
            if (frageRow) {
                var validationErrorForFrage = SchrittRendererHelper.getError(this.validationResult, "vp." + oFrage.externalfrageId);
                if (!validationErrorForFrage) {
                    validationErrorForFrage = SchrittRendererHelper.getError(this.validationResult, "vp.fragen" + oFrage.externalfrageId);
                }

                frageRow.find(".error").remove();

                if (validationErrorForFrage && (bIgnoreToDisplayErrors === undefined || bIgnoreToDisplayErrors !== true)) {
                    var questionLabel = frageRow.find("label").first();
                    var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                    var errorQuestion = $(fnErrorText({error: validationErrorForFrage}));

                    errorQuestion.insertAfter(questionLabel);
                    ignoreShowErrorsForSubfragen = true;
                }

                var validationForFrageObject = (function(oFrage, frageRow) {
                    return {
                        fnErrorRemoval: function() {
                            frageRow.find(".error").remove();
                        },
                        fnValidation: function() {
                            var deferred = $.Deferred();
                            var promise = deferred.promise();

                            var ok = false;

                            if (oParentFrage === null || (oParentFrage !== null && (oParentFrage.antworttyp === "LABEL" || (oParentFrage.antworttyp !== "LABEL" && oParentFrage.externalfrageId === oFrage.masterFrageId &&
                                oParentFrage.antworten.some(function(antwort) {
                                return antwort === oFrage.masterFrageWert.value;
                            }))))) {
                                if (oFrage.antworttyp === "DATE") {
                                    if (oFrage.antworten.length > 0) {
                                    	if (oFrage.required) {
                                    		ok = !!Util.parseAsDate(oFrage.antworten[0]);
                                    	} else {
                                    		ok = $.trim(oFrage.antworten[0]).length == 0;
                                    	}
                                    } else if (!oFrage.required) {
                                    	ok = true;
                                    }
                                } else if (oFrage.antworttyp === "MEHRFACH_AUSWAHL") {
                                    if (oFrage.antworten.length > 0) {
                                    	if (oFrage.required) {
                                    		ok = !!oFrage.antworten[0];
                                    	} else {
                                    		ok = $.trim(oFrage.antworten[0]).length == 0;
                                    	}
                                    } else if (!oFrage.required) {
                                    	ok = true;
                                    }
                                } else if (oFrage.antworttyp === "FLOAT") {
                                    if (oFrage.antworten.length > 0) {
                                    	if (oFrage.required) {
                                    		ok = (Util.parseAsFloat(oFrage.antworten[0]) !== undefined && Util.parseAsFloat(oFrage.antworten[0]) !== NaN);
                                    	} else {
                                    		ok = $.trim(oFrage.antworten[0]).length == 0;
                                    	}
                                    } else if (!oFrage.required) {
                                    	ok = true;
                                    }
                                } else {
                                    ok = true;
                                }
                            } else {
                                ok = true;
                            }
                            deferred.resolve(ok);

                            return promise;
                        },
                        fnAddError: function() {
                            var errorText;
                            if (oFrage.required) {
                                if (oFrage.antworten.length === 0)
                                    errorText = "Die Beantwortung der Frage ist erforderlich.";
                                else
                                    errorText = "Die Beantwortung der Frage ist ungültig.";
                            } else {
                                errorText = "Die Beantwortung der Frage ist ungültig.";
                            }
                            var questionLabel = frageRow.find("label").first();
                            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                            var errorQuestion = $(fnErrorText({error: errorText}));

                            errorQuestion.insertAfter(questionLabel);
                        }
                    };
                })(oFrage, frageRow);
                fnFrageValidator(oFrage, validationForFrageObject);


                positionToAddAfter = frageRow;
            }

            if (oFrage.fragen && oFrage.fragen.length > 0) {
                var currAntwort = oFrage.antworten && oFrage.antworten.length === 1 ? oFrage.antworten[0] : null;
                var oReactionOfSubfragen = frageHelper.getReactionOfSubfragen(oFrage, currAntwort);
                var hideSubfragen = oReactionOfSubfragen.reactionAvailable && !oReactionOfSubfragen.show;
                positionToAddAfter = buildAndAppendFragen.call(this, schrittTemplate, enabled, fnFrageValidator, oFrage, oFrage.fragen, false, false, positionToAddAfter, hideSubfragen, ignoreShowErrorsForSubfragen);
            }

        }, this);


        aFragen.forEach(function(oFrage, nFrageIndex) {
        	var currAntwort = oFrage.antworten && oFrage.antworten.length === 1 ? oFrage.antworten[0] : null;
        	updateFrage(oFrage, currAntwort, aFragen, true);
        }, this);

        return positionToAddAfter;
    }
};

module.exports = frageHelper;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

var Produkt = function(sName) {
    this.name = sName;
}

Produkt.prototype.render = function() {
    throw new Error("not implemented");
};

Produkt.prototype.berechne = function() {
    throw new Error("not implemented");
};

module.exports = Produkt;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRendererHelper = __webpack_require__(4);
var Util = __webpack_require__(2);

function updateFrage(oFrage, value, fragen, deep) {
    fragen.forEach(function(oFrage2, nFrageIndex2) {
    	if (oFrage2.masterFrageId && oFrage2.masterFrageId.length>0 && oFrage2.masterFrageId==oFrage.externalfrageId) {
        	var oItemWithPseudoId = SchrittRendererHelper.getItemByPseudoId(oFrage2.externalfrageId);

        	var active = (oFrage2.masterFrageWert && oFrage2.masterFrageWert.value === value);
        	/*if (active)
                oItemWithPseudoId.show();
            else
                oItemWithPseudoId.hide();*/

        	if (active)
        		oItemWithPseudoId.find('input, select, textarea').removeAttr('disabled');
        	else
        		oItemWithPseudoId.find('input, select, textarea').attr('disabled', '');
    	}

    	if (deep==true && oFrage.fragen) {
    		oFrage2.fragen.forEach(function(soFrage2, snFrageIndex2) {
    			var curAntwort = soFrage2.antworten && soFrage2.antworten.length === 1 ? soFrage2.antworten[0] : "";
    			updateFrage(soFrage2, curAntwort, oFrage2.fragen, deep);
    		});
    	}
    });
}

var frageHelper = {
    getReactionOfSubfragen: function(oFrage, sVal) {
        var aSubfragen = oFrage.fragen;

        var reactionAvailable = false;
        var show = false;
        if (aSubfragen && aSubfragen.length > 0) {

            aSubfragen.some(function(oSubfrage) {
                if (oFrage.externalfrageId === oSubfrage.masterFrageId) {
                    reactionAvailable = true;

                    show = (oSubfrage.masterFrageWert && oSubfrage.masterFrageWert.value === sVal);
                }

                return reactionAvailable;
            });
        }

        return {
            reactionAvailable : reactionAvailable,
            show : show
        };
    },

    buildAndAppendFragen: function buildAndAppendFragen(schrittTemplate, enabled, fnFrageValidator, oParentFrage, aFragen, bWithImage, bNumbered, oPrevSibling, bHide, bIgnoreToDisplayErrors) {
        var rootElement = this.rootElement;
        var positionToAddAfter = oPrevSibling;

        var nFrageCounter = 1;

        aFragen.forEach(function(oFrage, nFrageIndex) {
            var fnRowTemplate;
            var frageRow;
            var input;
            var fnInputTemplate;

            if (!oFrage.fragetext && oFrage.fragetextDOM) {
                oFrage.fragetext = Util.getTextFromEncodedObject(JSON.parse(oFrage.fragetextDOM));
                oFrage.fragetextDOM = null;
            }

            if (oFrage.antworttyp === "LABEL") {
                //fnRowTemplate = bNumbered ? _.template(schrittTemplate.labeledNrContentWithMediumColumnsRowTemplate) : _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);
            	fnRowTemplate = _.template(schrittTemplate.labeledFrageContentWithMediumColumnsRowTemplate);

                frageRow = $(fnRowTemplate({label: oFrage.fragetext, number: nFrageCounter, id: oFrage.fragenr, required: (oFrage.required ? "*" : ""), content: _.template(schrittTemplate.emptyContent)()}));
                frageRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), oFrage.externalfrageId);

                if (!SchrittRendererHelper.itemWithPseudoIdExists(oFrage.externalfrageId, rootElement)) {
                    if (oFrage.hilfetext || oFrage.infotext) {
                        var hilfetext = oFrage.hilfetext || oFrage.infotext;
                        var helpTextTemplate = _.template(schrittTemplate.helpText);
                        var helpText = $(helpTextTemplate({helptext: hilfetext}));
                        helpText.insertAfter(frageRow.find("label"));
                    }

                    frageRow.insertAfter(positionToAddAfter);
                } else {
                    frageRow = SchrittRendererHelper.getItemByPseudoId(oFrage.externalfrageId, rootElement);
                }
            } else if (oFrage.antworttyp === "DATE") {
                fnRowTemplate = bNumbered ? (oFrage.fragetyp === "TARIFIERUNGS_FRAGE" ? _.template(schrittTemplate.labeledContentNumberedWithMediumColumnsRowTemplate) : _.template(schrittTemplate.labeledContentNumberedAndIdWithMediumColumnsRowTemplate) ) : _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

                fnInputTemplate = _.template(schrittTemplate.dateInputTemplate);
                input = $(fnInputTemplate({}));

                frageRow = $(fnRowTemplate({label: oFrage.fragetext, number: nFrageCounter++, id: oFrage.fragenr, required: (oFrage.required ? "*" : ""), content: input[0].outerHTML}));
                frageRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), oFrage.externalfrageId);
                if (bHide) {
                    frageRow.hide();
                }

                if (!SchrittRendererHelper.itemWithPseudoIdExists(oFrage.externalfrageId, rootElement)) {
                    frageRow.insertAfter(positionToAddAfter);

                    input = frageRow.find("input");
                    input.val(oFrage.antworten && oFrage.antworten.length === 1 ? oFrage.antworten[0] : "");
                    if (enabled) {
                        //input.inputmask("99.99.9999", {alias: "date"});
                        input.inputmask({alias: "datum"});
                        var inputHandler = (function(oFrage) {

                            return function(event) {
                                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                                var valueAsValidDateString = Util.parseAsDateAndFormatAsString($(this).val());

                                if (valueAsValidDateString) {
                                    oFrage.antworten = [valueAsValidDateString];
                                } else {
                                    if ($(this)[0].inputmask.getemptymask()==unmaskedValue) {
                                		oFrage.antworten = [""];
                                	} else {
                                		oFrage.antworten = [unmaskedValue];
                                	}
                                }

                                updateFrage(oFrage, valueAsValidDateString, aFragen, true);
                            };
                        })(oFrage);
                        input.keyup(inputHandler);
                        input.blur(inputHandler);
                    } else {
                        input.prop("disabled", true);
                    }

                    if (oFrage.hilfetext || oFrage.infotext) {
                        var hilfetext = oFrage.hilfetext || oFrage.infotext;
                        var helpTextTemplate = _.template(schrittTemplate.helpText);
                        var helpText = $(helpTextTemplate({helptext: hilfetext}));
                        helpText.insertAfter(input);
                    }
                } else {
                    frageRow = SchrittRendererHelper.getItemByPseudoId(oFrage.externalfrageId, rootElement);
                }
            } else if (oFrage.antworttyp === "STRING" || oFrage.antworttyp === "FLOAT") {
                fnRowTemplate = bNumbered ? (oFrage.fragetyp === "TARIFIERUNGS_FRAGE" ? _.template(schrittTemplate.labeledContentNumberedWithMediumColumnsRowTemplate) : _.template(schrittTemplate.labeledContentNumberedAndIdWithMediumColumnsRowTemplate) ) : _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

                fnInputTemplate = _.template(schrittTemplate.stringInputTemplate);
                input = $(fnInputTemplate({}));

                frageRow = $(fnRowTemplate({label: oFrage.fragetext, number: nFrageCounter++, id: oFrage.fragenr, required: (oFrage.required ? "*" : ""), content: input[0].outerHTML}));
                frageRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), oFrage.externalfrageId);
                if (bHide) {
                    frageRow.hide();
                }

                if (!SchrittRendererHelper.itemWithPseudoIdExists(oFrage.externalfrageId, rootElement)) {
                    frageRow.insertAfter(positionToAddAfter);

                    input = frageRow.find("input");
                    var value = oFrage.antworten && oFrage.antworten.length === 1 ? oFrage.antworten[0] : "";
                    input.val(value);
                    if (enabled) {
                        var inputHandler = (function(oFrage) {

                            return function(event) {
                                oFrage.antworten = [$(this).val()];
                            };
                        })(oFrage);
                        input.keyup(inputHandler);
                        input.blur(inputHandler);

                        updateFrage(oFrage, value, aFragen, true);
                    } else {
                        input.prop("disabled", true);
                    }
                } else {
                    frageRow = SchrittRendererHelper.getItemByPseudoId(oFrage.externalfrageId, rootElement);
                }
            } else if (oFrage.antworttyp === "MEHRFACH_AUSWAHL") {
                fnRowTemplate = bNumbered ? (oFrage.fragetyp === "TARIFIERUNGS_FRAGE" ? _.template(schrittTemplate.labeledContentNumberedWithMediumColumnsRowTemplate) : _.template(schrittTemplate.labeledContentNumberedAndIdWithMediumColumnsRowTemplate) ) : _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

                if (oFrage.antwortMoeglichkeiten.length === 2) {
                    fnRowTemplate = bNumbered ? (oFrage.fragetyp === "TARIFIERUNGS_FRAGE" ? _.template(schrittTemplate.radioInputWith2ItemsNumberedTemplate) : _.template(schrittTemplate.radioInputWith2ItemsNumberedWithIdTemplate) ) : _.template(schrittTemplate.radioInputWith2ItemsTemplate);

                    frageRow = $(fnRowTemplate({label: oFrage.fragetext, number: nFrageCounter++, id: oFrage.fragenr, required: (oFrage.required ? "*" : ""), name: oFrage.externalfrageId, idOne: oFrage.externalfrageId + "_1", idTwo: oFrage.externalfrageId + "_2", valueOne: oFrage.antwortMoeglichkeiten[0].value, valueTwo: oFrage.antwortMoeglichkeiten[1].value}));
                	frageRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), oFrage.externalfrageId);
                    if (bHide) {
                        frageRow.hide();
                    }
                    if (!SchrittRendererHelper.itemWithPseudoIdExists(oFrage.externalfrageId, rootElement)) {
                        frageRow.insertAfter(positionToAddAfter);

                        if (oFrage.antworten && oFrage.antworten.length === 1) {
                            if (oFrage.antworten[0] === oFrage.antwortMoeglichkeiten[0].value) {
                                frageRow.find("input").eq(0).attr("checked", "checked");
                            } else if (oFrage.antworten[0] === oFrage.antwortMoeglichkeiten[1].value) {
                                frageRow.find("input").eq(1).attr("checked", "checked");
                            }
                        }
                        if (enabled) {
                            frageRow.find("input").click((function(oFrage) {
                                return function() {
                                    var clickedInput = $(this);
                                    frageRow.find("input").each(function(index, elem) {
                                        elem = $(elem);
                                        if (elem.is(clickedInput)) {
                                            elem.next().addClass("checked");
                                        } else {
                                            elem.next().removeClass("checked");
                                        }
                                    })

                                    var value = $(this).val();
                                    if (value === undefined || value === null || value === "") {
                                        oFrage.antworten = [];
                                    } else {
                                        oFrage.antworten = [value];

                                        var reaction = frageHelper.getReactionOfSubfragen(oFrage, value);

                                        if (reaction.reactionAvailable) {
                                            oFrage.fragen.forEach(function(oSubfrage) {
                                                var oItemsWithPseudoId = SchrittRendererHelper.getItemsByPseudoId(oSubfrage.externalfrageId);

                                                if (reaction.show)
                                                	oItemsWithPseudoId.show();
                                                else
                                                	oItemsWithPseudoId.hide();
                                            });
                                        }
                                    }

                                    updateFrage(oFrage, value, aFragen, true);
                                }
                            })(oFrage));
                        } else {
                            frageRow.find("input").prop("disabled", true);
                        }

                        if (oFrage.hilfetext || oFrage.infotext) {
                            var hilfetext = oFrage.hilfetext || oFrage.infotext;
                            var helpTextTemplate = _.template(schrittTemplate.helpText);
                            var helpText = $(helpTextTemplate({helptext: hilfetext}));
                            helpText.insertAfter(frageRow.find("input").eq(0).siblings("label").first());
                        }
                    } else {
                        frageRow = SchrittRendererHelper.getLastItemByPseudoId(oFrage.externalfrageId, rootElement);
                    }
                } else {
                    var select = $("<select />");
                    // TODO check when to add
                    var automBerechnung = !oFrage.antwortMoeglichkeiten || oFrage.antwortMoeglichkeiten.length!=1 || !'Autom. Berechnung'==oFrage.antwortMoeglichkeiten[0];
                    if (automBerechnung==true) {
                        select.append($("<option>Bitte auswählen</option>"));
                    } else if (oFrage.antwortMoeglichkeiten.length>0){
                    	oFrage.antworten = [oFrage.antwortMoeglichkeiten[0].key ? oFrage.antwortMoeglichkeiten[0].key : oFrage.antwortMoeglichkeiten[0].value];
                    }
                    oFrage.antwortMoeglichkeiten.forEach(function(antwortMoeglichkeit, antwortIndex) {
                        var newOption = $("<option />", {
                            value: antwortMoeglichkeit.key ? antwortMoeglichkeit.key : antwortMoeglichkeit.value,
                            text: antwortMoeglichkeit.value
                        });
                        select.append(newOption);
                        if (oFrage.antworten && oFrage.antworten.some(function(currentAntwort) {
                            if (antwortMoeglichkeit.key !== undefined && antwortMoeglichkeit.key !== null) {
                                return currentAntwort === antwortMoeglichkeit.key;
                            }
                            return currentAntwort === antwortMoeglichkeit.value;
                        })) {
                            newOption.attr("selected", "selected");
                        }
                    });

                    frageRow = $(fnRowTemplate({label: oFrage.fragetext, number: nFrageCounter++, id: oFrage.fragenr, required: (oFrage.required ? "*" : ""), content: select.prop("outerHTML")}));
                    frageRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), oFrage.externalfrageId);
                    if (!SchrittRendererHelper.itemWithPseudoIdExists(oFrage.externalfrageId, rootElement)) {
                        frageRow.insertAfter(positionToAddAfter);
                        if (bHide) {
                            frageRow.hide();
                        }
                        if (enabled) {
                            frageRow.find("select").change((function(oFrage) {
                                return function() {
                                    var value = $(this).val();
                                    if (value === undefined || value === null || value === "") {
                                        oFrage.antworten = [];
                                    } else {
                                        oFrage.antworten = [value];
                                    }

                                    var reaction = frageHelper.getReactionOfSubfragen(oFrage, value);

                                    if (reaction.reactionAvailable) {
                                        oFrage.fragen.forEach(function(oSubfrage) {
                                            var oItemWithPseudoId = SchrittRendererHelper.getItemByPseudoId(oSubfrage.externalfrageId);

                                            if (reaction.show)
                                                oItemWithPseudoId.show();
                                            else
                                                oItemWithPseudoId.hide();
                                        });
                                    }

                                    updateFrage(oFrage, value, aFragen, true);
                                }
                            })(oFrage));
                        } else {
                            frageRow.find("select").prop("disabled", true);
                        }

                        if (oFrage.hilfetext || oFrage.infotext) {
                            var hilfetext = oFrage.hilfetext || oFrage.infotext;
                            var helpTextTemplate = _.template(schrittTemplate.helpText);
                            var helpText = $(helpTextTemplate({helptext: hilfetext}));
                            helpText.insertAfter(frageRow.find("select"));
                        }
                    } else {
                        frageRow = SchrittRendererHelper.getItemByPseudoId(oFrage.externalfrageId, rootElement);
                    }
                }

            }

            var ignoreShowErrorsForSubfragen = false;
            if (frageRow) {
                var validationErrorForFrage = SchrittRendererHelper.getError(this.validationResult, "vp." + oFrage.externalfrageId);
                if (!validationErrorForFrage) {
                    validationErrorForFrage = SchrittRendererHelper.getError(this.validationResult, "vp.fragen" + oFrage.externalfrageId);
                }

                frageRow.find(".error").remove();

                if (validationErrorForFrage && (bIgnoreToDisplayErrors === undefined || bIgnoreToDisplayErrors !== true)) {
                    var questionLabel = frageRow.find("label").first();
                    var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                    var errorQuestion = $(fnErrorText({error: validationErrorForFrage}));

                    errorQuestion.insertBefore(questionLabel);
                    ignoreShowErrorsForSubfragen = true;
                }

                var validationForFrageObject = (function(oFrage, frageRow) {
                    return {
                        fnErrorRemoval: function() {
                            frageRow.find(".error").remove();
                        },
                        fnValidation: function() {
                            var deferred = $.Deferred();
                            var promise = deferred.promise();

                            var ok = false;

                            if (oParentFrage === null || (oParentFrage !== null && (oParentFrage.antworttyp === "LABEL" || (oParentFrage.antworttyp !== "LABEL" && oParentFrage.externalfrageId === oFrage.masterFrageId &&
                                oParentFrage.antworten.some(function(antwort) {
                                return antwort === oFrage.masterFrageWert.value;
                            }))))) {
                                if (oFrage.antworttyp === "DATE") {
                                    if (oFrage.antworten.length > 0) {
                                        if (oFrage.required) {
                                    		ok = !!Util.parseAsDate(oFrage.antworten[0]);
                                    	} else {
                                    		ok = $.trim(oFrage.antworten[0]).length == 0;
                                    	}
                                    } else if (!oFrage.required) {
                                    	ok = true;
                                    }
                                } else if (oFrage.antworttyp === "MEHRFACH_AUSWAHL") {
                                    if (oFrage.antworten.length > 0) {
                                        if (oFrage.required) {
                                    		ok = !!oFrage.antworten[0];
                                    	} else {
                                    		ok = $.trim(oFrage.antworten[0]).length == 0;
                                    	}
                                    } else if (!oFrage.required) {
                                    	ok = true;
                                    }
                                } else if (oFrage.antworttyp === "FLOAT") {
                                    if (oFrage.antworten.length > 0) {
                                        if (oFrage.required) {
                                    		ok = (Util.parseAsFloat(oFrage.antworten[0]) !== undefined && Util.parseAsFloat(oFrage.antworten[0]) !== NaN);
                                    	} else {
                                    		ok = $.trim(oFrage.antworten[0]).length == 0;
                                    	}
                                    } else if (!oFrage.required) {
                                    	ok = true;
                                    }
                                } else {
                                    ok = true;
                                }
                            } else {
                                ok = true;
                            }
                            deferred.resolve(ok);

                            return promise;
                        },
                        fnAddError: function() {
                            var errorText;
                            if (oFrage.required) {
                                if (oFrage.antworten.length === 0)
                                    errorText = "Die Beantwortung der Frage ist erforderlich.";
                                else
                                    errorText = "Die Beantwortung der Frage ist ungültig.";
                            } else {
                                errorText = "Die Beantwortung der Frage ist ungültig.";
                            }
                            var questionLabel = frageRow.find("label").first();
                            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                            var errorQuestion = $(fnErrorText({error: errorText}));

                            errorQuestion.insertBefore(questionLabel);
                        }
                    };
                })(oFrage, frageRow);
                fnFrageValidator(oFrage, validationForFrageObject);

                positionToAddAfter = frageRow.last();
            }

            if (oFrage.fragen && oFrage.fragen.length > 0) {
                var currAntwort = oFrage.antworten && oFrage.antworten.length === 1 ? oFrage.antworten[0] : null;
                var oReactionOfSubfragen = frageHelper.getReactionOfSubfragen(oFrage, currAntwort);
                var hideSubfragen = oReactionOfSubfragen.reactionAvailable && !oReactionOfSubfragen.show;
                positionToAddAfter = buildAndAppendFragen.call(this, schrittTemplate, enabled, fnFrageValidator, oFrage, oFrage.fragen, false, false, positionToAddAfter, hideSubfragen, ignoreShowErrorsForSubfragen);
                positionToAddAfter = positionToAddAfter.last();
            }
        }, this);

        return positionToAddAfter;
    }
};

module.exports = frageHelper;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

var ProduktTrHelper = __webpack_require__(6);

module.exports = {
    einstieg: function(oBO) {
        var deferred = $.Deferred();

        var reqBO = {
            mandant: Config.mandant,
            context: oBO.context,
            aid: Config.aid,
            typ: null,
            tkz: Config.tkz,
            versicherungsbeginn: null
        };



        /*$.ajax({
            type: "POST",
            url: Config.serviceUrl + "akd/einstieg",
            data: JSON.stringify(reqBO),
            contentType: "application/json"
        }).then(function(result) {*/

        ProduktTrHelper.callAsync(reqBO, Config.serviceUrl + "akd/einstieg").done(function(result) {
            Config.mandant = result.mandant;

            var propEinstellung = "einstellung";
            if (result.hasOwnProperty(propEinstellung)) {
                oBO[propEinstellung] = Util.copyOf(result[propEinstellung]);
            }
            oBO.famAKD = result.famAKD;

            if (result.hasOwnProperty("context") && result.context && result.context.id) {
            	if (!oBO.context)
            		oBO.context = {};
            	oBO.context.id = result.context.id;
            }

            deferred.resolve(oBO);
        }).fail(function() {
            deferred.reject();
        });

        return deferred.promise();
    },

    getTexte: function(oBO) {
        var deferred = $.Deferred();

        var oBO = Util.copyOf(oBO);
        oBO.mandant = Config.mandant;
        oBO.aid = Config.aid;
        oBO.texteTyp = null;

        if (arguments.length > 1) {
            oBO.texteTyp = Array.prototype.slice.call(arguments, 1).join(",");
        }

        return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
                deferred.resolve(result.ergebnisTexte);
            } else {
                deferred.reject({});
            }

        });

        return deferred.promise();
    },

    antrag: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "akd/antrag",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
                deferred.resolve(result);
            } else if (result.state === "NOK") {
                var errorText;
                if (result.validationErrors && result.validationErrors.length > 0) {
                    errorText = result.validationErrors[0].message;
                }
                deferred.reject(errorText);
            } else {
                deferred.reject();
            }
        }) ;

        return deferred.promise();
    },

    berechnen: function(context, versicherungsbeginn, personenUnter20, personenBis64, personenAb65) {
        var oBO = {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            typ: null,
            tkz: Config.tkz,
            versicherungsbeginn: versicherungsbeginn,
            anzahlUnter20: personenUnter20,
            anzahlUnter65: personenBis64,
            anzahlAb65: personenAb65
        };

        return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "akd/berechnung",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });
    },

    check: function(oBO) {
        return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "akd/pruefung",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });
    },

    getBLZSuggestionsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
            	deferred.resolve(result);
            } else {
            	deferred.resolve({});
            }
        }) ;

        return deferred.promise();
    },

    checkKonto: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
            	deferred.resolve(result);
            } else {
            	deferred.resolve({});
            }
        }) ;

        return deferred.promise();
    },

    getIbanSuggestionsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
            	deferred.resolve(result);
            } else {
            	deferred.resolve({});
            }
        }) ;

        return deferred.promise();
    },

    getBetreuerlisteFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
                deferred.resolve(result.ergebnisBetreuerliste); //???
            } else if (result.state === "NOK") {
                var errorText;
                if (result.validationErrors && result.validationErrors.length > 0) {
                    errorText = result.validationErrors[0].message;
                }
                deferred.reject(errorText);
            } else {
                deferred.reject();
            }

        }) ;

        return deferred.promise();
    },

    getIddDetails: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
            	var idd = {
            	   data: result.ergebnisIddDetails
            	};
            	if (result.ergebnisIddVisitenkartenURL) {
            		idd.visitenkartenURL = result.ergebnisIddVisitenkartenURL;
            	}
                deferred.resolve(idd);
            } else if (result.state === "NOK") {
                var errorText;
                if (result.validationErrors && result.validationErrors.length > 0) {
                    errorText = result.validationErrors[0].message;
                }
                deferred.reject(errorText);
            } else {
                deferred.reject();
            }
        }) ;

        return deferred.promise();
    },

    getBetreuerdetailsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
                deferred.resolve(result.ergebnisBetreuerdetails);
            } else {
                deferred.reject();
            }
        }) ;

        return deferred.promise();
    },

    getDruckstueckTariferklaerungUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckVorschlagUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckBeiblattAnzeigepflichtUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckVvgUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckVertragsinformationUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckDatenschutzUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckTariferklaerung: function(oBO) {
        $.ajax({
            type: "POST",
            url: this.getDruckstueckTariferklaerungUrl(),
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });
    },

    abschluss: function(oBO) {
        var deferred = $.Deferred();

        /*
        ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "akd/abschluss").done(function(result) {
            if (result.ergebnisVollzug) {
                deferred.resolve(result.ergebnisVollzug);
            } else if (result.ergebnisVorbereitung) {
                deferred.resolve(result.ergebnisVorbereitung);
            } else {
                deferred.resolve();
            }
        }).fail(function(result) {
            if (result.state === "NOK") {
                if (result.validationErrors && result.validationErrors.length > 0) {
                    if (result.validationErrors.some(function(validationError) {
                        return (validationError.fieldName === "bildcode" || validationError.fieldName === "vn.bildcode");
                    })) {
                        deferred.reject("token");
                        return;
                    }
                    deferred.reject(result.validationErrors);
                }
            } else if (result.state === "EXCEPTION") {
                var exception = result.exeption;

                if (exception) {
                    if (exception.errorCode === "claimWrongToken" || exception.errorCode === "Bildcode ist inkorrekt!" ||
                        (exception.errorCode === "wrongInputData" && exception.message === "Systemfehler: Token ungültig!")) {
                        deferred.reject("token");
                    } else {
                        deferred.reject(exception.errorCode);
                    }
                    return;
                }
            } else {
                deferred.reject("unknown");
            }
        });*/

        var cb = function(result) {
        	if (result.state === "OK") {
        		if (result.ergebnisVollzug) {
                    deferred.resolve(result.ergebnisVollzug);
                } else if (result.ergebnisVorbereitung) {
                    deferred.resolve(result.ergebnisVorbereitung);
                } else {
                    deferred.resolve();
                }
        	} else if (result.state === "NOK") {
                if (result.validationErrors && result.validationErrors.length > 0) {
                    if (result.validationErrors.some(function(validationError) {
                        return (validationError.fieldName === "bildcode" || validationError.fieldName === "vn.bildcode");
                    })) {
                        deferred.reject("token");
                        return;
                    }
                    deferred.reject(result.validationErrors);
                }
            } else if (result.state === "EXCEPTION") {
                var exception = result.exeption;

                if (exception) {
                    if (exception.errorCode === "claimWrongToken" || exception.errorCode === "Bildcode ist inkorrekt!" ||
                        (exception.errorCode === "wrongInputData" && exception.message === "Systemfehler: Token ungültig!")) {
                        deferred.reject("token");
                    } else {
                        deferred.reject(exception.errorCode);
                    }
                    return;
                }
            } else {
                deferred.reject("unknown");
            }
        };

        ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "akd/abschluss").done(cb).fail(cb);

        return deferred.promise();
    },

    getCaptcha: function(oBO) {
        var deferred = $.Deferred();

        ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "akd/abschluss").done(function(result) {
            deferred.resolve(result.ergebnisVorbereitung);
        }).fail(function(result) {
            deferred.reject(result);
        });

        return deferred.promise();
    },


};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

var ProduktTrHelper = __webpack_require__(6);

module.exports = {
    einstieg : function(oBO) {
        var dataBO = {
            mandant: Config.mandant,
            aid: Config.aid,
            context: oBO.context,
            bedarfsart: "FRAGEN",
            fragenBuendelname: null,
            fragenVp: {
                anrede: null,
                name: null,
                vorname: null,
                geburtsdatum: "01.01.1995",
                id: null,
                vn: false,
                versicherungsbeginn: null,
                beruf: null,
                taetigkeitsstatus: null,
                versorgerBeruf: null,
                versorgerTaetigkeitsstatus: null,
                versicherungsstatus: null,
                gkv: null,
                versicherungsnummer: null,
                staatsangehoerigkeit: null
            },
            tarifeBuendelname: null,
            tarifeVp: null,
            tarifeFragen: null
        };

        var reqBO = {
            "mandant": Config.mandant,
            "aid": Config.aid,
            "bedarfsart": "EINSTIEG",
            "einstiegBuendelname": null,
            "fragenBuendelname": null,
            "fragenVp": null,
            "tarifeBuendelname": null,
            "tarifeVp": null,
            "tarifeFragen": null
        };

        var gesamtDeferred = $.Deferred();

        // einstieg bedarf
        var einstiegBedarfDeferred = $.Deferred();

        this.einstiegBedarf(reqBO).then(function(result) {
            einstiegBedarfDeferred.resolve(result);
        }).fail(function() {
            einstiegBedarfDeferred.reject();
        });

        // einstieg
        var einstiegDeferred = $.Deferred();

        /*$.ajax({
            type: "POST",
            url: Config.serviceUrl + "zv/bedarf",
            data: JSON.stringify(dataBO),
            contentType: "application/json"
        }).then(function(result) {*/
        ProduktTrHelper.callAsync(dataBO, Config.serviceUrl + "zv/bedarf").then(function(result) {
            einstiegDeferred.resolve(result);
        }).fail(function() {
            einstiegDeferred.reject();
        });

        $.when(einstiegBedarfDeferred, einstiegDeferred).done(function(einstiegBedarfResult, einstiegResult) {
            var result = { ergebnisEinstieg: einstiegBedarfResult.ergebnisEinstieg, ergebnisFragen: einstiegResult.ergebnisFragen };

            if (einstiegBedarfResult.hasOwnProperty("context") &&  einstiegBedarfResult.context && einstiegBedarfResult.context.id) {
           		result.context = {};
           		result.context.id = einstiegBedarfResult.context.id;
            }
            else if (einstiegResult.hasOwnProperty("context") &&  einstiegResult.context && einstiegResult.context.id) {
           		result.context = {};
           		result.context.id = einstiegResult.context.id;
            }

            gesamtDeferred.resolve(result);
        }).fail(function() {
            gesamtDeferred.reject();
        })

        return gesamtDeferred.promise();
    },

    einstiegBedarf: function(oBO) {
        /*return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "zv/bedarf",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });*/

    	return ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "zv/bedarf");
    },

    einstiegTarife: function(oBO) {
        /*return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "zv/bedarf",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });*/

    	return ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "zv/bedarf");
    },

    einstiegWeiter: function(oBO) {
        /*return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "zv/einstieg",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });*/

    	var deferred = $.Deferred();

        var oTexteBO = Util.copyOf(oBO);
        oTexteBO.typ = "TEXTE";
        oTexteBO.texteTarif = oBO.tarif;
        delete oTexteBO["tarif"];
        var getTextePromise = this.getTexte(oTexteBO, "Anzeigepflicht");

        var berechnenPromise = ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "zv/einstieg");

        $.when(getTextePromise, berechnenPromise).then(function(textResult, berechnenResult) {
            //var result = berechnenResult[0]; //merge: original -> NOK
        	var result = berechnenResult;
            result.texte = textResult[0].ergebnisTexte;

            deferred.resolve(result);
        });

        return deferred.promise();
    },

    einstiegBerechnen: function(oBO) {
        return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "zv/berechnen",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });
    },

    einstiegPruefen: function(oBO) {
        return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "zv/pruefen",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });
    },

    getTexte: function(oBO) {
        var deferred = $.Deferred();

        var oBO = Util.copyOf(oBO);
        oBO.mandant = Config.mandant;
        oBO.aid = Config.aid;
        oBO.texteTyp = null;

        if (arguments.length > 1) {
            oBO.texteTyp = Array.prototype.slice.call(arguments, 1).join(",");
        }

        return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
                deferred.resolve(result.ergebnisTexte);
            } else {
                deferred.reject({});
            }
        });

        return deferred.promise();
    },

    antrag: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "zv/antrag",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
                deferred.resolve(result);
            } else if (result.state === "NOK") {
                var errorText;
                if (result.validationErrors && result.validationErrors.length > 0) {
                    errorText = result.validationErrors[0].message;
                }
                deferred.reject(errorText);
            } else {
                deferred.reject();
            }
        }) ;

        return deferred.promise();
    },

    getBerufSuggestionsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
            	deferred.resolve(result.ergebnisBeruf);
            } else {
                deferred.resolve({});
            }
        }) ;

        return deferred.promise();
    },

    getBLZSuggestionsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
            	deferred.resolve(result);
            } else {
                deferred.resolve({});
            }
        }) ;

        return deferred.promise();
    },

    checkKonto: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
        	if (result.state === "OK") {
        		deferred.resolve(result);
            } else {
                deferred.resolve({});
            }
        }) ;

        return deferred.promise();
    },

    getIbanSuggestionsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
        	if (result.state === "OK") {
        		deferred.resolve(result);
            } else {
                deferred.resolve({});
            }
        }) ;

        return deferred.promise();
    },

    getIddDetails: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
            	var idd = {
             	   data: result.ergebnisIddDetails
             	};
             	if (result.ergebnisIddVisitenkartenURL) {
             		idd.visitenkartenURL = result.ergebnisIddVisitenkartenURL;
             	}
                deferred.resolve(idd);
            } else if (result.state === "NOK") {
                var errorText;
                if (result.validationErrors && result.validationErrors.length > 0) {
                    errorText = result.validationErrors[0].message;
                }
                deferred.reject(errorText);
            } else {
                deferred.reject();
            }
        }) ;

        return deferred.promise();
    },

    getBetreuerlisteFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
                deferred.resolve(result.ergebnisBetreuerliste);
            } else if (result.state === "NOK") {
                var errorText;
                if (result.validationErrors && result.validationErrors.length > 0) {
                    errorText = result.validationErrors[0].message;
                }
                deferred.reject(errorText);
            } else {
                deferred.reject();
            }
        }) ;

        return deferred.promise();
    },

    getBetreuerdetailsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
                deferred.resolve(result.ergebnisBetreuerdetails);
            } else {
	            deferred.reject();
	        }
        }) ;

        return deferred.promise();
    },

    abschluss: function(oBO) {
        var deferred = $.Deferred();

        var cb = function(result) {
            if (result.state === "OK") {
                if (result.ergebnisVollzug) {
                    deferred.resolve(result.ergebnisVollzug);
                } else if (result.ergebnisVorbereitung) {
                    deferred.resolve(result.ergebnisVorbereitung);
                } else {
                    deferred.resolve();
                }
                return;
            } else if (result.state === "NOK") {
                if (result.validationErrors && result.validationErrors.length > 0) {
                    if (result.validationErrors.some(function(validationError) {
                        return (validationError.fieldName === "bildcode" || validationError.fieldName === "vn.bildcode");
                    })) {
                        deferred.reject("token");
                        return;
                    }
                    deferred.reject(result.validationErrors);
                }
            } else if (result.state === "EXCEPTION") {
                var exception = result.exeption;

                if (exception) {
                    if (exception.errorCode === "claimWrongToken" || exception.errorCode === "Bildcode ist inkorrekt!" ||
                        (exception.errorCode === "wrongInputData" && exception.message === "Systemfehler: Token ungültig!")) {
                        deferred.reject("token");
                    } else {
                        deferred.reject(exception.errorCode);
                    }
                    return;
                }
            } else {
                deferred.reject("unknown");
            }
        };

        /*$.ajax({
            type: "POST",
            url: Config.serviceUrl + "zv/abschluss",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {*/
        ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "zv/abschluss").done(cb).fail(cb);

        return deferred.promise();
    },

    getCaptcha: function(oBO) {
        var deferred = $.Deferred();

        ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "zv/abschluss").done(function(result) {
            deferred.resolve(result.ergebnisVorbereitung);
        }).fail(function(result) {
            deferred.reject(result);
        });

        return deferred.promise();
    },

    getDruckstueckTariferklaerungUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckVorschlagUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckBeiblattAnzeigepflichtUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckVvgUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckVertragsinformationUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckDatenschutzUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckTariferklaerung: function(oBO) {
        $.ajax({
            type: "POST",
            url: this.getDruckstueckTariferklaerungUrl(),
            //async:    false,
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });
    }
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

var ProduktTrHelper = __webpack_require__(6);

var ProduktTr = {
    einstieg : function(oBO) {
        var dataBO = Util.copyOf(oBO);
        dataBO.mandant = Config.mandant;
        dataBO.aid = Config.aid;

        var deferred = $.Deferred();

        var cb = function(result) {
            if (result.hasOwnProperty("context") && result.context && result.context.id) {
            	if (!oBO.context)
            		oBO.context = {};
            	oBO.context.id = result.context.id;
            }

            var oTexteBO = {
            	"mandant": dataBO.mandant,
                "aid": dataBO.aid,
                "context": oBO.context /*{
                  "id": null,
                  "mode": "TEST"
            	}*/,
                "typ": "TEXTE",
                "texteVP": {
                    "anrede": "HERR",
                    "name": "TestVP",
                    "vorname": "Peter",
                    "geburtsdatum": "01.01.1980",
                    "id": "1",
                    "vn": false,
                    "versicherungsbeginn": Util.nextVersicherungsbeginn(true),
                    "beruf": "Software Engineer",
                    "taetigkeitsstatus": "Angestellter",
                    "versorgerBeruf": null,
                    "versorgerTaetigkeitsstatus": null,
                    "versicherungsstatus": "freiwillig gesetzlich versichert",
                    "gkv": "KKH",
                    "versicherungsnummer": null,
                    "staatsangehoerigkeit": null
                },
                "texteTarif": result.vpTarife[0]
            };

            ProduktTr.getTexte(oTexteBO, "Anzeigepflicht").done(function(textResult) {
                result.texte = textResult.ergebnisTexte;
                deferred.resolve(result);
            });
        };
        ProduktTrHelper.callAsync(dataBO, Config.serviceUrl + "zv/einstieg").done(cb).fail(cb);


        return deferred.promise();
    },

    einstiegBerechnen: function(oBO) {
        /*return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "zv/berechnen",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });*/

        //var deferred = $.Deferred();

        return ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "zv/berechnen");

        //return deferred.promise();
    },

    getTexte: function(oBO) {
        var deferred = $.Deferred();

        var oBO = Util.copyOf(oBO);
        oBO.mandant = Config.mandant;
        oBO.aid = Config.aid;
        oBO.texteTyp = null;

        if (arguments.length > 1) {
            oBO.texteTyp = Array.prototype.slice.call(arguments, 1).join(",");
        }

        return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            var result = {};
            if (result.state === "OK") {
                deferred.resolve(result.ergebnisTexte);
            } else {
                deferred.reject({});
            }
        });

        return deferred.promise();
    },

    getBerufSuggestionsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
            	deferred.resolve(result.ergebnisBeruf);
            } else {
                deferred.reject({});
            }
        }) ;

        return deferred.promise();
    },

    getBLZSuggestionsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
            	deferred.resolve(result);
            } else {
                deferred.reject({});
            }
        });

        return deferred.promise();
    },

    checkKonto: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
        	if (result.state === "OK") {
            	deferred.resolve(result);
            } else {
                deferred.reject({});
            }
        }) ;

        return deferred.promise();
    },

    getIbanSuggestionsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
        	if (result.state === "OK") {
            	deferred.resolve(result);
            } else {
                deferred.reject({});
            }
        }) ;

        return deferred.promise();
    },

    getIddDetails: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
            	var idd = {
              	   data: result.ergebnisIddDetails
              	};
              	if (result.ergebnisIddVisitenkartenURL) {
              		idd.visitenkartenURL = result.ergebnisIddVisitenkartenURL;
              	}
                deferred.resolve(idd);
            } else if (result.state === "NOK") {
                var errorText;
                if (result.validationErrors && result.validationErrors.length > 0) {
                    errorText = result.validationErrors[0].message;
                }
                deferred.reject(errorText);
            } else {
                deferred.reject();
            }
        }) ;

        return deferred.promise();
    },

    pruefung: function(oBO) {
        return $.ajax({
            type: "POST",
            url: Config.serviceUrl + "zv/pruefen",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });
    },

    antrag: function(oBO) {
        var deferred = $.Deferred();

        var cb = function(result) {
            if (result.state === "OK") {
                deferred.resolve(result);
            } else if (result.state === "NOK") {
                var errorText;
                if (result.validationErrors && result.validationErrors.length > 0) {
                    errorText = result.validationErrors[0].message;
                }
                deferred.reject(errorText);
            } else {
                deferred.reject();
            }
        };
        ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "zv/antrag").done(cb).fail(cb);

        return deferred.promise();
    },

    abschluss: function(oBO) {
        var deferred = $.Deferred();

        var cb = function(result) {
        	if (result.state === "OK") {
        		if (result.ergebnisVollzug) {
                    deferred.resolve(result.ergebnisVollzug);
                } else if (result.ergebnisVorbereitung) {
                    deferred.resolve(result.ergebnisVorbereitung);
                } else {
                    deferred.resolve();
                }
        	} else if (result.state === "NOK") {
                if (result.validationErrors && result.validationErrors.length > 0) {
                    if (result.validationErrors.some(function(validationError) {
                        return (validationError.fieldName === "bildcode" || validationError.fieldName === "vn.bildcode");
                    })) {
                        deferred.reject("token");
                        return;
                    }
                    deferred.reject(result.validationErrors);
                }
            } else if (result.state === "EXCEPTION") {
                var exception = result.exeption;

                if (exception) {
                    if (exception.errorCode === "claimWrongToken" || exception.errorCode === "Bildcode ist inkorrekt!" ||
                        (exception.errorCode === "wrongInputData" && exception.message === "Systemfehler: Token ungültig!")) {
                        deferred.reject("token");
                    } else {
                        deferred.reject(exception.errorCode);
                    }
                    return;
                }
            } else {
                deferred.reject("unknown");
            }
        };

        ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "zv/abschluss").done(cb).fail(cb);

        return deferred.promise();
    },

    getCaptcha: function(oBO) {
        var deferred = $.Deferred();

        ProduktTrHelper.callAsync(oBO, Config.serviceUrl + "zv/abschluss").done(function(data) {
            var result = data.ergebnisVorbereitung;
            deferred.resolve(result);
        }).fail(function(data) {
            deferred.reject(data);
        });

        return deferred.promise();
    },

    getBetreuerlisteFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
                deferred.resolve(result.ergebnisBetreuerliste);
            } else if (result.state === "NOK") {
                var errorText;
                if (result.validationErrors && result.validationErrors.length > 0) {
                    errorText = result.validationErrors[0].message;
                }
                deferred.reject(errorText);
            } else {
                deferred.reject();
            }
        }) ;

        return deferred.promise();
    },

    getBetreuerdetailsFor: function(oBO) {
        var deferred = $.Deferred();

        $.ajax({
            type: "POST",
            url: Config.serviceUrl + "suche",
            data: JSON.stringify(oBO),
            contentType: "application/json"
        }).done(function(result) {
            if (result.state === "OK") {
                deferred.resolve(result.ergebnisBetreuerdetails);
            } else {
	            deferred.reject();
	        }
        }) ;

        return deferred.promise();
    },

    getDruckstueckTariferklaerungUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckVorschlagUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckBeiblattAnzeigepflichtUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckVvgUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckVertragsinformationUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckDatenschutzUrl: function() {
        return Config.serviceUrl + "druckstueck";
    },

    getDruckstueckTariferklaerung: function(oBO) {
        $.ajax({
            type: "POST",
            url: this.getDruckstueckTariferklaerungUrl(),
            data: JSON.stringify(oBO),
            contentType: "application/json"
        });
    }

};

module.exports = ProduktTr;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(14);
module.exports = __webpack_require__(15);


/***/ }),
/* 14 */
/***/ (function(module, exports) {



/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var App = __webpack_require__(16);

App.init().then(function() {
    App.run();
});

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

module.exports = {
    init: function() {
        var deferred = $.Deferred();

        $(document).ready(function() {
            __webpack_require__(17);
            __webpack_require__(18);
            __webpack_require__(19);
            __webpack_require__(20);
            deferred.resolve();
        });    

        return deferred.promise();
    },

    run: function() {
        var kvoMainContentContainer = $(".kvo-main-content-container").eq(0);
        var dataBaseServiceUrl = kvoMainContentContainer.attr("data-base-service-url");
        var dataMediaUrl = kvoMainContentContainer.attr("data-media-url");
        var dataResourceUrl = kvoMainContentContainer.attr("data-resource-url");
        var dataStyle = kvoMainContentContainer.attr("data-style") || Util.getDefaultStyle();
        var dataAid = kvoMainContentContainer.attr("data-aid") || "";
        var dataTyp = kvoMainContentContainer.attr("data-typ") || "";
        var dataTkz = kvoMainContentContainer.attr("data-tkz") || "";
        var dataProdukt = kvoMainContentContainer.attr("data-produkt") || "";
        var dataMandant = kvoMainContentContainer.attr("data-mandant") || Util.getDefaultMandant();

        if (dataTyp !== "zv" && dataTyp !== "gg" && dataTyp !== "akd") {
            // TODO: handle error
            console.log("bad product type specified");
            return;
        }
        try {
            dataTkz = parseInt(dataTkz, 10);
        } catch(e) {
            // TODO: handle error
            console.log("no tkz provided!!!");
            return;
        }
        /*switch(dataStyle) {
            case "oev":
            case "if6":
                break;
            default:
                dataStyle = "oev";
                break;
        }*/
        

        Config.reset();
        Config.serviceUrl = dataBaseServiceUrl;
        Config.mediaUrl = dataMediaUrl;
        Config.resourceUrl = dataResourceUrl;
        Config.style = dataStyle;

        Config.aid = dataAid;
        Config.typ = dataTyp;
        Config.tkz = dataTkz;        
        Config.produkt = dataProdukt;
        Config.mandant = dataMandant;

        var produktTr;
        var produktModule;
        var mode;
        var context;

        switch(dataTyp) {
            case "akd":
                produktTr = __webpack_require__(10);
                produktModule = __webpack_require__(21);
                break;
            case "gg":
                produktTr = __webpack_require__(11);
                produktModule = __webpack_require__(44);
                break;
            case "zv":
                produktTr = __webpack_require__(12);
                produktModule = __webpack_require__(71);
                break;
            default:
                console.log("unsupported productType  '" + dataTyp + "'");
        }

        if (produktTr && produktModule) {
            if (dataStyle === "if6") {                
                mode = "SPK";
                context = "if6";
                Config.style = "default";
            }
            else
                context = "oev";
            var produkt = new produktModule(dataProdukt, {}, context, mode);
            produkt.render().then(function() {
                produkt.setBusy(true);

                produktTr.einstieg({context: { mode : mode }, tkz: dataTkz, additions:null}).then(function(oResult) {
                    produkt.updateBO(oResult);
                    produkt.render();
                }).always(function() {
                    produkt.setBusy(false);
                });
            });
        }
    }
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

if (!$.hasOwnProperty("autocomplete")) {
    var
        utils = (function () {
            return {

                extend: function (target, source) {
                    return $.extend(target, source);
                },

                createNode: function (html) {
                    var div = document.createElement('div');
                    div.innerHTML = html;
                    return div.firstChild;
                }

            };
        }()),

        keys = {
            ESC: 27,
            TAB: 9,
            RETURN: 13,
            UP: 38,
            DOWN: 40
        };

    function Autocomplete(el, options) {
        var noop = function () { },
            that = this,
            defaults = {
                autoSelectFirst: false,
                appendTo: 'body',
                serviceUrl: null,
                lookup: null,
                onSelect: null,
                width: 'auto',
                minChars: 1,
                maxHeight: 300,
                deferRequestBy: 0,
                params: {},
                formatResult: Autocomplete.formatResult,
                delimiter: null,
                zIndex: 9999,
                type: 'GET',
                noCache: false,
                onSearchStart: noop,
                onSearchComplete: noop,
                containerClass: 'autocomplete-suggestions',
                tabDisabled: false,
                dataType: 'text',
                lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
                    return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;
                },
                paramName: 'query',
                transformResult: function (response) {
                    return typeof response === 'string' ? $.parseJSON(response) : response;
                }
            };

        // Shared variables:
        that.element = el;
        that.el = $(el);
        that.suggestions = [];
        that.badQueries = [];
        that.selectedIndex = -1;
        that.currentValue = that.element.value;
        that.intervalId = 0;
        that.cachedResponse = [];
        that.onChangeInterval = null;
        that.onChange = null;
        that.ignoreValueChange = false;
        that.isLocal = false;
        that.suggestionsContainer = null;
        that.options = $.extend({}, defaults, options);
        that.classes = {
            selected: 'autocomplete-selected',
            suggestion: 'autocomplete-suggestion'
        };

        // Initialize and set options:
        that.initialize();
        that.setOptions(options);
    }

    Autocomplete.utils = utils;

    $.Autocomplete = Autocomplete;

    Autocomplete.formatResult = function (suggestion, currentValue) {
        var reEscape = new RegExp('(\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'].join('|\\') + ')', 'g'),
            pattern = '(' + currentValue.replace(reEscape, '\\$1') + ')';

        return suggestion.value.replace(new RegExp(pattern, 'gi'), '<strong>$1<\/strong>');
    };

    Autocomplete.prototype = {

        killerFn: null,

        initialize: function () {
            var that = this,
                suggestionSelector = '.' + that.classes.suggestion,
                selected = that.classes.selected,
                options = that.options,
                container;

            // Remove autocomplete attribute to prevent native suggestions:
            that.element.setAttribute('autocomplete', 'off');

            that.killerFn = function (e) {
                if ($(e.target).closest('.' + that.options.containerClass).length === 0) {
                    that.killSuggestions();
                    that.disableKillerFn();
                }
            };

            // Determine suggestions width:
            if (!options.width) {
                options.width = that.el.outerWidth();
            }

            that.suggestionsContainer = Autocomplete.utils.createNode('<div class="' + options.containerClass + '" style="position: absolute; display: none;"></div>');

            container = $(that.suggestionsContainer);

            container.appendTo(options.appendTo).width(options.width);

            // Listen for mouse over event on suggestions list:
            container.on('mouseover.autocomplete', suggestionSelector, function () {
                that.activate($(this).data('index'));
            });

            // Deselect active element when mouse leaves suggestions container:
            container.on('mouseout.autocomplete', function () {
                that.selectedIndex = -1;
                container.children('.' + selected).removeClass(selected);
            });

            // Listen for click event on suggestions list:
            container.on('click.autocomplete', suggestionSelector, function () {
                that.select($(this).data('index'), false);
            });

            that.fixPosition();

            // Opera does not like keydown:
            if (window.opera) {
                that.el.on('keypress.autocomplete', function (e) { that.onKeyPress(e); });
            } else {
                that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });
            }

            that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });
            that.el.on('blur.autocomplete', function () { that.onBlur(); });
            that.el.on('focus.autocomplete', function () { that.fixPosition(); });
        },

        onBlur: function () {
            this.enableKillerFn();
        },

        setOptions: function (suppliedOptions) {
            var that = this,
                options = that.options;

            utils.extend(options, suppliedOptions);

            that.isLocal = $.isArray(options.lookup);

            if (that.isLocal) {
                options.lookup = that.verifySuggestionsFormat(options.lookup);
            }

            // Adjust height, width and z-index:
            $(that.suggestionsContainer).css({
                'max-height': options.maxHeight + 'px',
                'width': options.width + 'px',
                'z-index': options.zIndex
            });
        },

        clearCache: function () {
            this.cachedResponse = [];
            this.badQueries = [];
        },

        clear: function () {
            this.clearCache();
            this.currentValue = null;
            this.suggestions = [];
        },

        disable: function () {
            this.disabled = true;
        },

        enable: function () {
            this.disabled = false;
        },

        fixPosition: function () {
            var that = this,
                offset;

            // Don't adjsut position if custom container has been specified:
            if (that.options.appendTo !== 'body') {
                return;
            }

            offset = that.el.offset();

            $(that.suggestionsContainer).css({
                top: (offset.top + that.el.outerHeight()) + 'px',
                left: offset.left + 'px'
            });
        },

        enableKillerFn: function () {
            var that = this;
            $(document).on('click.autocomplete', that.killerFn);
        },

        disableKillerFn: function () {
            var that = this;
            $(document).off('click.autocomplete', that.killerFn);
        },

        killSuggestions: function () {
            var that = this;
            that.stopKillSuggestions();
            that.intervalId = window.setInterval(function () {
                that.hide();
                that.stopKillSuggestions();
            }, 300);
        },

        stopKillSuggestions: function () {
            window.clearInterval(this.intervalId);
        },

        onKeyPress: function (e) {
            var that = this;

            // If suggestions are hidden and user presses arrow down, display suggestions:
            if (!that.disabled && !that.visible && e.keyCode === keys.DOWN && that.currentValue) {
                that.suggest();
                return;
            }

            if (that.disabled || !that.visible) {
                return;
            }

            switch (e.keyCode) {
                case keys.ESC:
                    that.el.val(that.currentValue);
                    that.hide();
                    break;
                case keys.TAB:
                case keys.RETURN:
                    if (that.selectedIndex === -1) {
                        that.hide();
                        return;
                    }
                    that.select(that.selectedIndex, e.keyCode === keys.RETURN);
                    if (e.keyCode === keys.TAB && this.options.tabDisabled === false) {
                        return;
                    }
                    break;
                case keys.UP:
                    that.moveUp();
                    break;
                case keys.DOWN:
                    that.moveDown();
                    break;
                default:
                    return;
            }

            // Cancel event if function did not return:
            e.stopImmediatePropagation();
            e.preventDefault();
        },

        onKeyUp: function (e) {
            var that = this;

            if (that.disabled) {
                return;
            }

            switch (e.keyCode) {
                case keys.UP:
                case keys.DOWN:
                    return;
            }

            clearInterval(that.onChangeInterval);

            if (that.currentValue !== that.el.val()) {
                if (that.options.deferRequestBy > 0) {
                    // Defer lookup in case when value changes very quickly:
                    that.onChangeInterval = setInterval(function () {
                        that.onValueChange();
                    }, that.options.deferRequestBy);
                } else {
                    that.onValueChange();
                }
            }
        },

        onValueChange: function () {
            var that = this,
                q;

            clearInterval(that.onChangeInterval);
            that.currentValue = that.element.value;

            q = that.getQuery(that.currentValue);
            that.selectedIndex = -1;

            if (that.ignoreValueChange) {
                that.ignoreValueChange = false;
                return;
            }

            if (q.length < that.options.minChars) {
                that.hide();
            } else {
                that.getSuggestions(q);
            }
        },

        getQuery: function (value) {
            var delimiter = this.options.delimiter,
                parts;

            if (!delimiter) {
                return $.trim(value);
            }
            parts = value.split(delimiter);
            return $.trim(parts[parts.length - 1]);
        },

        getSuggestionsLocal: function (query) {
            var that = this,
                queryLowerCase = query.toLowerCase(),
                filter = that.options.lookupFilter;

            return {
                suggestions: $.grep(that.options.lookup, function (suggestion) {
                    return filter(suggestion, query, queryLowerCase);
                })
            };
        },

        getSuggestions: function (q) {
            var response,
                that = this,
                options = that.options,
                serviceUrl = options.serviceUrl;

            response = that.isLocal ? that.getSuggestionsLocal(q) : that.cachedResponse[q];

            if (response && $.isArray(response.suggestions)) {
                that.suggestions = response.suggestions;
                that.suggest();
            } else if (!that.isBadQuery(q)) {
                options.params[options.paramName] = q;
                if (options.onSearchStart.call(that.element, options.params) === false) {
                    return;
                }
                if ($.isFunction(options.serviceUrl)) {
                    serviceUrl = options.serviceUrl.call(that.element, q);
                }

                var handleNext = function (data) {
                    that.processResponse(data, q);
                    options.onSearchComplete.call(that.element, q);
                };
                if ($.isFunction(options.ajaxFn)) {
                    options.ajaxFn.call(that.element, q).done(handleNext);
                } else {
                    $.ajax({
                        url: serviceUrl,
                        data: options.ignoreParams ? null : options.params,
                        type: options.type,
                        dataType: options.dataType
                    }).done(handleNext);
                }
            }
        },

        isBadQuery: function (q) {
            var badQueries = this.badQueries,
                i = badQueries.length;

            while (i--) {
                if (q.indexOf(badQueries[i]) === 0) {
                    return true;
                }
            }

            return false;
        },

        hide: function () {
            var that = this;
            that.visible = false;
            that.selectedIndex = -1;
            $(that.suggestionsContainer).hide();
        },

        suggest: function () {
            if (this.suggestions.length === 0) {
                this.hide();
                return;
            }

            var that = this,
                formatResult = that.options.formatResult,
                value = that.getQuery(that.currentValue),
                className = that.classes.suggestion,
                classSelected = that.classes.selected,
                container = $(that.suggestionsContainer),
                html = '';

            // Build suggestions inner HTML:
            $.each(that.suggestions, function (i, suggestion) {
                html += '<div class="' + className + '" data-index="' + i + '">' + formatResult(suggestion, value) + '</div>';
            });

            container.html(html).show();
            that.visible = true;

            // Select first value by default:
            if (that.options.autoSelectFirst) {
                that.selectedIndex = 0;
                container.children().first().addClass(classSelected);
            }
        },

        verifySuggestionsFormat: function (suggestions) {
            // If suggestions is string array, convert them to supported format:
            if (suggestions.length && typeof suggestions[0] === 'string') {
                return $.map(suggestions, function (value) {
                    return { value: value, data: null };
                });
            }

            return suggestions;
        },

        processResponse: function (response, originalQuery) {
            var that = this,
                options = that.options,
                result = options.transformResult(response, originalQuery);

            if (options.noVerifySuggestionFormat !== true) 
                result.suggestions = verifySuggestionsFormat.call(that, result.suggestions);

            // Cache results if cache is not disabled:
            if (!options.noCache) {
                that.cachedResponse[result[options.paramName]] = result;
                if (result.suggestions.length === 0) {
                    that.badQueries.push(result[options.paramName]);
                }
            }

            // Display suggestions only if returned query matches current value:
            if (originalQuery === that.getQuery(that.currentValue)) {
                that.suggestions = result.suggestions;
                that.suggest();
            }
        },

        activate: function (index) {
            var that = this,
                activeItem,
                selected = that.classes.selected,
                container = $(that.suggestionsContainer),
                children = container.children();

            container.children('.' + selected).removeClass(selected);

            that.selectedIndex = index;

            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {
                activeItem = children.get(that.selectedIndex);
                $(activeItem).addClass(selected);
                return activeItem;
            }

            return null;
        },

        select: function (i, shouldIgnoreNextValueChange) {
            var that = this,
                suggestion = that.suggestions[i],
                selectedValue = suggestion.value;

            if (selectedValue) {
                that.el.val(selectedValue);

                if (!suggestion.suggest) {
                    that.currentValue = selectedValue;
                    that.getSuggestions(selectedValue);
                } else {
                    that.ignoreValueChange = shouldIgnoreNextValueChange;
                    that.hide();
                    that.onSelect(i);
                }
            }
        },

        moveUp: function () {
            var that = this;

            if (that.selectedIndex === -1) {
                return;
            }

            if (that.selectedIndex === 0) {
                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);
                that.selectedIndex = -1;
                that.el.val(that.currentValue);
                return;
            }

            that.adjustScroll(that.selectedIndex - 1);
        },

        moveDown: function () {
            var that = this;

            if (that.selectedIndex === (that.suggestions.length - 1)) {
                return;
            }

            that.adjustScroll(that.selectedIndex + 1);
        },

        adjustScroll: function (index) {
            var that = this,
                activeItem = that.activate(index),
                offsetTop,
                upperBound,
                lowerBound,
                heightDelta = 25;

            if (!activeItem) {
                return;
            }

            offsetTop = activeItem.offsetTop;
            upperBound = $(that.suggestionsContainer).scrollTop();
            lowerBound = upperBound + that.options.maxHeight - heightDelta;

            if (offsetTop < upperBound) {
                $(that.suggestionsContainer).scrollTop(offsetTop);
            } else if (offsetTop > lowerBound) {
                $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);
            }

            that.el.val(that.getValue(that.suggestions[index].value));
        },

        onSelect: function (index) {
            var that = this,
                onSelectCallback = that.options.onSelect,
                suggestion = that.suggestions[index];

            that.el.val(that.getValue(suggestion.value));

            if ($.isFunction(onSelectCallback)) {
                onSelectCallback.call(that.element, suggestion);
            }
        },

        getValue: function (value) {
            var that = this,
                delimiter = that.options.delimiter,
                currentValue,
                parts;

            if (that.options.onValueFromSelection) {
                value = that.options.onValueFromSelection.call(that.element, value);
            }

            if (!delimiter) {
                return value;
            }

            currentValue = that.currentValue;
            parts = currentValue.split(delimiter);

            if (parts.length === 1) {
                return value;
            }

            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;
        },

        dispose: function () {
            var that = this;
            that.el.off('.autocomplete').removeData('autocomplete');
            that.disableKillerFn();
            $(that.suggestionsContainer).remove();
        }
    };

    // Create chainable jQuery plugin:
    $.fn.autocomplete = function (options, args) {
        var dataKey = 'autocomplete';
        // If function invoked without argument return
        // instance of the first matched element:
        if (arguments.length === 0) {
            return this.first().data(dataKey);
        }

        return this.each(function () {
            var inputElement = $(this),
                instance = inputElement.data(dataKey);

            if (typeof options === 'string') {
                if (instance && typeof instance[options] === 'function') {
                    instance[options](args);
                }
            } else {
                // If instance already exists, destroy it:
                if (instance && instance.dispose) {
                    instance.dispose();
                }
                instance = new Autocomplete(this, options);
                inputElement.data(dataKey, instance);
            }
        });
    };

}

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var jQuery = __webpack_require__(1);
var h=true,o=null,q=false;
(function(f){var l=q,I=h,j=window.av_ghi;j||(j=function(){});var C=q;if(f.browser&&f.browser.msie)C=h;else if(navigator.userAgent){var v=navigator.userAgent.toLowerCase();((/(chrome)[ \/]([\w.]+)/.exec(v)||/(webkit)[ \/]([\w.]+)/.exec(v)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(v)||/(msie) ([\w.]+)/.exec(v)||v.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(v)||[])[1]||"")=="msie"&&(C=h)}var J=(C?"paste":"input")+".iban",K=window.orientation!=void 0,E="DE",G="DEFF FFFF FFFF FFFF FFFF FF",
L="__",H="AAFF AAAA AAAA AAAA AAAA AAAA AAAA AAA",a=[];a.__=34;a.AD=24;a.AE=23;a.AL=28;a.AT=20;a.sAT=20;a.AZ=28;a.BA=20;a.BE=16;a.sBE=16;a.BG=22;a.sBG=22;a.BH=22;a.CH=21;a.sCH=21;a.CR=21;a.CY=28;a.sCY=28;a.CZ=24;a.sCZ=24;a.DE=22;a.dDE=22;a.sDE=22;a.DK=18;a.sDK=18;a.DO=28;a.EE=20;a.sEE=20;a.ES=24;a.sES=24;a.FI=18;a.sFI=18;a.FO=18;a.sFO=18;a.FR=27;a.sFR=27;a.GB=22;a.sGB=22;a.GE=22;a.GI=23;a.sGI=23;a.GL=18;a.sGL=18;a.GR=27;a.sGR=27;a.GT=28;a.HR=21;a.HU=28;a.sHU=28;a.IE=22;a.sIE=22;a.IL=23;a.IS=26;a.sIS=
26;a.IT=27;a.sIT=27;a.KW=30;a.KZ=20;a.LB=28;a.LI=21;a.sLI=21;a.LT=20;a.sLT=20;a.LU=20;a.sLU=20;a.LV=21;a.sLV=21;a.MC=27;a.sMC=27;a.MD=24;a.ME=22;a.MK=19;a.MR=27;a.MT=31;a.sMT=31;a.MU=30;a.NL=18;a.sNL=18;a.NO=15;a.sNO=15;a.PK=24;a.PL=28;a.sPL=28;a.PS=29;a.PT=25;a.sPT=25;a.RO=24;a.sRO=24;a.RS=22;a.SA=24;a.SE=24;a.sSE=24;a.SI=19;a.sSI=19;a.SK=24;a.sSK=24;a.SM=27;a.TN=24;a.TR=26;a.VG=24;var e=[];e.__=H;e.AD="ADFF FFFF FFFF AAAA AAAA AAAA";e.AE="AEFF FFFF FFFF FFFF FFFF FFF";e.AL="ALFF FFFF FFFF AAAA AAAA AAAA AAAA";
e.AT="ATFF FFFF FFFF FFFF FFFF";e.AZ="AZFF UUUU AAAA AAAA AAAA AAAA AAAA";e.BA="BAFF FFFF FFFF FFFF FFFF";e.BE="BEFF FFFF FFFF FFFF";e.BG="BGFF UUUU FFFF FFAA AAAA AA";e.BH="BHFF UUUU AAAA AAAA AAAA AA";e.CH="CHFF FFFF FAAA AAAA AAAA A";e.CR="CRFF FFFF FFFF FFFF FFFF F";e.CY="CYFF FFFF FFFF AAAA AAAA AAAA AAAA";e.CZ="CZFF FFFF FFFF FFFF FFFF FFFF";e.DE="DEFF FFFF FFFF FFFF FFFF FF";e.DK="DKFF FFFF FFFF FFFF FF";e.DO="DOFF UUUU FFFF FFFF FFFF FFFF FFFF";e.EE="EEFF FFFF FFFF FFFF FFFF";e.ES="ESFF FFFF FFFF FFFF FFFF FFFF";
e.FI="FIFF FFFF FFFF FFFF FF";e.FO="FOFF FFFF FFFF FFFF FF";e.FR="FRFF FFFF FFFF FFAA AAAA AAAA AFF";e.GB="GBFF UUUU FFFF FFFF FFFF FF";e.GE="GEFF UUFF FFFF FFFF FFFF FF";e.GI="GIFF UUUU AAAA AAAA AAAA AAA";e.GL="GLFF FFFF FFFF FFFF FF";e.GR="GRFF FFFF FFFA AAAA AAAA AAAA AAA";e.GT="GTFF AAAA AAAA AAAA AAAA AAAA AAAA";e.HR="HRFF FFFF FFFF FFFF FFFF F";e.HU="HUFF FFFF FFFF FFFF FFFF FFFF FFFF";e.IE="IEFF UUUU FFFF FFFF FFFF FF";e.IL="ILFF FFFF FFFF FFFF FFFF FFF";e.IS="ISFF FFFF FFFF FFFF FFFF FFFF FF";
e.IT="ITFF UFFF FFFF FFFA AAAA AAAA AAA";e.KW="KWFF UUUU AAAA AAAA AAAA AAAA AAAA AA";e.KZ="KZFF FFFA AAAA AAAA AAAA";e.LB="LBFF FFFF AAAA AAAA AAAA AAAA AAAA";e.LI="LIFF FFFF FAAA AAAA AAAA A";e.LT="LTFF FFFF FFFF FFFF FFFF";e.LU="LUFF FFFA AAAA AAAA AAAA";e.LV="LVFF UUUU AAAA AAAA AAAA A";e.MC="MCFF FFFF FFFF FFAA AAAA AAAA AFF";e.MD="MDFF UUFF FFFF FFFF FFFF FFFF";e.ME="MEFF FFFF FFFF FFFF FFFF FF";e.MK="MKFF FFFA AAAA AAAA AFF";e.MR="MRFF FFFF FFFF FFFF FFFF FFFF FFF";e.MT="MTFF UUUU FFFF FAAA AAAA AAAA AAAA AAA";
e.MU="MUFF UUUU FFFF FFFF FFFF FFFF FFFU UU";e.NL="NLFF UUUU FFFF FFFF FF";e.NO="NOFF FFFF FFFF FFF";e.PK="PKFF UUUU AAAA AAAA AAAA AAAA";e.PL="PLFF FFFF FFFF FFFF FFFF FFFF FFFF";e.PS="PSFF UUUU AAAA AAAA AAAA AAAA AAAA A";e.PT="PTFF FFFF FFFF FFFF FFFF FFFF F";e.RO="ROFF UUUU AAAA AAAA AAAA AAAA";e.RS="RSFF FFFF FFFF FFFF FFFF FF";e.SA="SAFF FFAA AAAA AAAA AAAA AAAA";e.SE="SEFF FFFF FFFF FFFF FFFF FFFF";e.SI="SIFF FFFF FFFF FFFF FFF";e.SK="SKFF FFFF FFFF FFFF FFFF FFFF";e.SM="SMFF UFFF FFFF FFFA AAAA AAAA AAA";
e.TN="TNFF FFFF FFFF FFFF FFFF FFFF";e.TR="TRFF FFFF FAAA AAAA AAAA AAAA AA";e.VG="VGFF UUUU FFFF FFFF FFFF FFFF";f.fn.extend({c:function(d,a,e,n,b){var g=f(this);a<2&&(a=2);a=g.autocomplete({minLength:a,noVerifySuggestionFormat:h,transformResult:function(d,b){if(d.state=="OK"&&d.ergebnisBlz&&d.ergebnisBlz.vorschlaege){for(var a=/^(\d+) (.*)#(.*)$/,m=[],n=0;n<d.ergebnisBlz.vorschlaege.length;n++){var g=a.exec(d.ergebnisBlz.vorschlaege[n].text);if(g){var f=g[1];e!=o&&(f=e.call(o,g[1],b));m.push({value:g[1]+
" "+g[2],data:f,k:g[1],name:g[2],b:g[3],suggest:h})}}return{suggestions:m}}return{suggestions:[]}},ajaxFn:function(a){b!=o&&(a=b.call(o,a));return typeof d.dataFunction==="function"?d.dataFunction.call(o,a):f.ajax({url:d.searchUrl,dataType:"text",data:typeof d.dataTransformator==="function"?d.dataTransformator.call(o,a):{banc:a}}).done(function(d){return d})},onSelect:function(b){g.val(b.data);g.trigger("change");n!=o&&setTimeout(function(){n.call(o,b.k,b.name,b.b)},0);d.bancfield!=o&&(f(d.bancfield).val(b.name),
f(d.bancfield).trigger("change"));d.bicfield!=o&&(b.b==o?f(d.bicfield).val(""):f(d.bicfield).val(b.b),f(d.bicfield).trigger("change"))},formatResult:function(d,b){for(var a="",m=5;m<14&&m<b.length;m++)if(b.charAt(m)=="_"){if(a.length>0)break}else b.charAt(m)>="0"&&b.charAt(m)<="9"&&(a+=b.charAt(m));a=f.Autocomplete.formatResult(d,a.length==0?b:a);d.suggest||(a="Meinten Sie: <i>"+a+"</i>");return a}});if(a.data("autocomplete"))a.data("autocomplete")._renderItem=function(d,b){var a=b.label.indexOf("#");
if(a>0)b.b=b.label.substring(a+1),b.label=b.label.substring(0,a);return f("<li>").data("item.autocomplete",b).append("<a><i>"+b.label+"</i></a>").appendTo(d)};else if(a.data("ui-autocomplete"))a.data("ui-autocomplete")._renderItem=function(d,b){var a=b.label.indexOf("#");if(a>0)b.b=b.label.substring(a+1),b.label=b.label.substring(0,a);return f("<li>").data("ui-autocomplete-item",b).append("<a><i>"+b.label+"</i></a>").appendTo(d)}},d:function(d,a,e,n){var b=f(this);b.blur(function(){var g=f(this).val();
a!=o&&(g=a.call(o,g));if(g.length==0)d.bancfield!=o&&(f(d.bancfield).val(""),f(d.bancfield).trigger("change")),d.bicfield!=o&&(f(d.bicfield).val(""),f(d.bicfield).trigger("change"));else{var p=g;if(g.charAt(0)=="$"){var j=g,p=g.indexOf("$",2);p!=-1&&(j=g.substring(0,p),p=g.substring(p+1),p.length>0&&(n!=o&&(g=n.call(o,p),p=g[0]),f(this).val(p)));d.onerror!=o&&d.onerror.call(o,j)}else j=p,n!=o&&(g=n.call(o,p),p=g[0],j=g[1]),f(this).val(p),j&&j.length>0&&(j.length!=8?(d.bancfield!=o&&(f(d.bancfield).val(""),
f(d.bancfield).trigger("change")),d.bicfield!=o&&(f(d.bicfield).val(""),f(d.bicfield).trigger("change")),d.onerror!=o&&d.onerror.call(o,"$ERR.BANCCODE_INCOMPLETE: '"+j+"'")):typeof d.dataFunction==="function"?d.dataFunction.call(o,j).done(function(b){b.state=="OK"&&b.ergebnisBlz&&b.ergebnisBlz.vorschlaege&&(b.ergebnisBlz.vorschlaege.length==1?(b=/^(\d+) (.*)#(.*)$/.exec(b.ergebnisBlz.vorschlaege[0].text),e!=o&&e.call(o,b[1],b[2],b[3]),d.bancfield!=o&&(f(d.bancfield).val(b[2]),f(d.bancfield).trigger("change")),
d.bicfield!=o&&(b[3]==o?f(d.bicfield).val(""):f(d.bicfield).val(b[3]),f(d.bicfield).trigger("change"))):d.onerror!=o&&d.onerror.call(o,"$ERR.BANCCODE_INVALID"))}):f.ajax({url:d.searchUrl,dataType:"text",data:typeof d.dataTransformator==="function"?d.dataTransformator.call(o,j):{banc:j},success:function(a){var m=decodeURIComponent(a),a=typeof d.linesTransformator==="function"?d.linesTransformator.call(o,m,a):m.match(/[^\r\n]+/g);if(a!=o&&a.length==1){var n=a[0],a=o,g=n.indexOf("#");g>0&&(a=n.substring(g+
1),n=n.substring(0,g));g=n.indexOf(" ");m=n.substring(0,g);n=n.substring(g+1);e==o?(b.val(m),b.trigger("change")):e.call(o,m,n,a);d.bancfield!=o&&(f(d.bancfield).val(n),f(d.bancfield).trigger("change"));d.bicfield!=o&&(a!=o?f(d.bicfield).val(a):f(d.bicfield).val(""),f(d.bicfield).trigger("change"))}else d.onerror!=o&&d.onerror.call(o,"$ERR.BANCCODE_INVALID")}}))}})},av_suggest_banc:function(d){var a=f.extend({bancfield:o,bicfield:o,searchUrl:"AvSearchBanccode",onerror:o},d);return this.each(function(){var d=
f(this);d.c(a,2);d.d(a)})},av_suggest_data:function(d){var a=f.extend({searchUrl:"AvSearchData"},d);return this.each(function(){f(this).autocomplete({minLength:2,transformResult:function(d){if(d.state=="OK"&&d.ergebnisData&&d.ergebnisData.vorschlaege){for(var a=[],b=0;b<d.ergebnisData.vorschlaege.length;b++)a.push({value:d.ergebnisData.vorschlaege[b],suggest:h});return{suggestions:a}}return{suggestions:[]}},ajaxFn:function(d){return typeof a.dataFunction==="function"?a.dataFunction.call(o,d):f.ajax({url:a.searchUrl,
dataType:"text",data:typeof a.dataTransformator==="function"?a.dataTransformator.call(o,d):{banc:d}}).done(function(d){return d})},formatResult:function(d,a){var b=f.Autocomplete.formatResult(d,a);d.suggest||(b="Meinten Sie: <i>"+b+"</i>");return b}})})},a:function(d,a){if(this.length!=0)if(typeof d=="number")return a=typeof a=="number"?a:d,this.each(function(){if(this.setSelectionRange)this.setSelectionRange(d,a);else if(this.createTextRange){var e=this.createTextRange();e.collapse(h);e.moveEnd("character",
a);e.moveStart("character",d);e.select()}});else{if(this[0].setSelectionRange)d=this[0].selectionStart,a=this[0].selectionEnd;else if(document.selection&&document.selection.createRange)var e=document.selection.createRange(),d=0-e.duplicate().moveStart("character",-1E5),a=d+e.text.length;return{f:d,end:a}}},j:function(d,a){switch(d){case "A":if(a>="0"&&a<="9"||a>="a"&&a<="z"||a>="A"&&a<="Z")return a;break;case "B":if(a>="0"&&a<="9"||a>="a"&&a<="z"||a>="A"&&a<="Z")return a.toUpperCase();break;case "C":if(a>=
"a"&&a<="z"||a>="A"&&a<="Z")return a;break;case "F":if(a>="0"&&a<="9")return a;break;case "L":if(a>="a"&&a<="z"||a>="A"&&a<="Z")return a.toLowerCase();break;case "U":if(a>="a"&&a<="z"||a>="A"&&a<="Z")return a.toUpperCase();break;case "W":if(a>="0"&&a<="9"||a>="a"&&a<="z"||a>="A"&&a<="Z")return a.toLowerCase()}return o},av_format_iban:function(a,j,f){var n,b=0;if(a.length>1){var g=e[(a.charAt(0)+a.charAt(1)).toUpperCase()];g?(n=g,b=2):n=G}for(var g=n.split(""),p="",l=2;l<g.length;l++)g[l]!=" "&&(g[l]=
"_");if(j)for(;b<a.length&&(a.charAt(b)=="_"||!(a.charAt(b)>="0"&&a.charAt(b)<="9"||a.charAt(b)>="a"&&a.charAt(b)<="z"||a.charAt(b)>="A"&&a.charAt(b)<="Z"));b++);else for(;b<a.length&&(a.charAt(b)=="_"||a.charAt(b)==" "||!(a.charAt(b)>="0"&&a.charAt(b)<="9"||a.charAt(b)>="a"&&a.charAt(b)<="z"||a.charAt(b)>="A"&&a.charAt(b)<="Z"));b++);for(l=2;l<g.length&&b<a.length;l++){if(b>=a.length)break;if(g[l]=="_"){var B=this.j(n.charAt(l),a.charAt(b));if(B!=o)if(g[l]=B,b++,j)for(;b<a.length&&(a.charAt(b)==
"_"||!(a.charAt(b)>="0"&&a.charAt(b)<="9"||a.charAt(b)>="a"&&a.charAt(b)<="z"||a.charAt(b)>="A"&&a.charAt(b)<="Z"));b++);else for(;b<a.length&&(a.charAt(b)=="_"||a.charAt(b)==" "||!(a.charAt(b)>="0"&&a.charAt(b)<="9"||a.charAt(b)>="a"&&a.charAt(b)<="z"||a.charAt(b)>="A"&&a.charAt(b)<="Z"));b++);}}if(j)for(;b<a.length&&!(a.charAt(b)>="0"&&a.charAt(b)<="9"||a.charAt(b)>="a"&&a.charAt(b)<="z"||a.charAt(b)>="A"&&a.charAt(b)<="Z");b++);else for(;b<a.length&&(a.charAt(b)=="_"||a.charAt(b)==" "||!(a.charAt(b)>=
"0"&&a.charAt(b)<="9"||a.charAt(b)>="a"&&a.charAt(b)<="z"||a.charAt(b)>="A"&&a.charAt(b)<="Z"));b++);if(b<a.length){j=b;for(n=g.length;b<a.length;b++)if(a.charAt(b)>="0"&&a.charAt(b)<="9"||a.charAt(b)>="a"&&a.charAt(b)<="z"||a.charAt(b)>="A"&&a.charAt(b)<="Z")n++,n%5==0&&(p+=" "),p+=a.charAt(b);f!=o&&f.call(o,"$ERR.IBAN_FORMAT",j)}return g.join("")+p},av_suggest_iban_simple:function(a){var e=f.extend({bancfield:o,bicfield:o,searchUrl:"AvSearchBanccode",formatOnBlur:h,onerror:o},a);return this.each(function(){var a=
f(this);a.c(e,2,function(a,b){return b.substring(0,4)+" "+a.substring(0,4)+" "+a.substring(4)+b.substring(14)},function(d){var b=a.val();l&&j("val: "+b);l&&j("bc: "+d);d=b.substring(0,4)+" "+d.substring(0,4)+" "+d.substring(4)+b.substring(14);l&&j("newval: \n"+d+"\n123456789 123456789 123456789");a.val(d);a.trigger("change");for(var e=0;e<d.length;e++)if(d.charAt(e)=="_"){setTimeout(function(){a.a(e)},0);break}},function(a){l&&j("onsearch: "+a);for(var b="",d=0;d<a.length;d++)a.charAt(d)!=" "&&(b+=
a.charAt(d));return b.length>5&&(b.charAt(0)=="d"||b.charAt(0)=="D")&&(b.charAt(1)=="e"||b.charAt(1)=="E")?(a=b.length<=12?b.substring(4):b.substring(4,12),j("onsearch: searchText="+a),a):""});a.d(e,function(){var d=a.val(),b=h,g=a.m(d,q,function(){b=q});l&&j("val: "+d+", fval="+g);if(g.indexOf("_")!=-1)return e.formatOnBlur==h?"$ERR.IBAN_INCOMPLETE$"+g:"$ERR.IBAN_INCOMPLETE";else if(b==q)return e.formatOnBlur==h?"$ERR.IBAN_EXCEEDED$"+g:"$ERR.IBAN_EXCEEDED";return g},function(d){var b=a.val();a.val(b.substring(0,
4)+" "+d.substring(0,4)+" "+d.substring(4)+b.substring(14));a.trigger("change")},function(d){a.val();for(var b="",g=0,j=0;j<d.length;j++)d.charAt(j)==" "||d.charAt(j)=="_"||(g++,g>4?f+=d.charAt(j):b+=d.charAt(j));var f="";if(b.length>1&&(b.charAt(0)=="d"||b.charAt(0)=="D")&&(b.charAt(1)=="e"||b.charAt(1)=="E"))f="";if(e.formatOnBlur!=h)return[d,f];b="";g=q;for(j=d.length-1;j>=0;j--){if(!g&&(d.charAt(j)!=" "||d.charAt(j)!="_"))g=h;g&&(b=(d.charAt(j)=="_"?" ":d.charAt(j))+b)}return[b,f]})})},av_suggest_iban:function(d){var m=
f.extend({bancfield:o,bicfield:o,searchUrl:"AvSearchBanccode",onerror:o,strict:q,type:"DE",i:o,l:"9",g:"a",h:"?"},d),A=q,n=q,b=h,g=h,p=q,w="",B=[],y=[],v=0,z=E,C=o;m.type.toUpperCase()=="SEPAF"?(g=q,b=h,p=q,w="s"):m.type.toUpperCase()=="SEPAU"?(p=b=g=q,w="s"):m.type.toUpperCase()=="ALLF"?(g=q,b=h,p=q,w=""):m.type.toUpperCase()=="ALLU"?(p=b=g=q,w=""):m.type.toUpperCase()=="ANYF"?(g=q,p=b=h,w=""):m.type.toUpperCase()=="ANYU"?(b=g=q,p=h,w=""):(b=g=h,p=q,w="d");var B=[],y=[],v=0,x;for(x in a)if(w.length==
0||x.indexOf(w)==0){var d=x.charAt(x.length-2),F=x.charAt(x.length-1);l&&j("cc="+x+", cc0="+d+", cc1="+F);B[d]=d;y[d]||(y[d]=[]);y[d][F]=F;v==0&&d!="_"&&(v=d)}return this.each(function(){function d(b){l&&j("init: val="+b);var s;l&&j("detectPrefix: onlyDE="+g,", val="+b);s="";for(var c=0;c<b.length&&b.charAt(c)==" ";c++);if(c<b.length&&(b.charAt(c)>="a"&&b.charAt(c)<="z"||b.charAt(c)>="A"&&b.charAt(c)<="Z")){var u=b.charAt(c).toUpperCase();l&&j("detectPrefix: cc0="+u);if(B[u]){for(c++;c<b.length&&
b.charAt(c)==" ";c++);var r=0;if(c<b.length&&b.charAt(c)>="a"&&b.charAt(c)<="z"||b.charAt(c)>="A"&&b.charAt(c)<="Z")r=b.charAt(c).toUpperCase(),c++;if(r==0&&p)r="_";else if(r==0&&y[u])for(var f in y[u]){r=f.charAt(1);break}l&&j("detectPrefix: cc1="+r);r!=0&&(s=u+r)}}n=A=q;u=a[w+s];u>0?(n=h,z=s):z=p?L:E;z=="DE"&&(A=h);l&&j("detectPrefix: val="+b+"   -> prefix="+z+", len="+u+", isDE="+A+", pos="+c);s=c;if(m.i!=o&&((c=e[z])||(c=p?H:G),C!=c)){l&&j("init: prefix="+z+", lastformat="+C+", format="+c);C=
c;u=z+"99";for(r=4;r<c.length;r++){f=c.charAt(r);switch(f){case "A":f=m.h;break;case "B":f=m.h;break;case "C":f=m.g;break;case "F":f=m.l;break;case "L":f=m.g;break;case "U":f=m.g;break;case "W":f=m.h}u+=f}l&&j("tooltip: "+u);m.i.call(o,u)}c=2;n||(c=s=0);r=z;u=a[w+r];u<1&&(r=E,u=a[w+r]);for(f=2;f<u;f++)f%4==0&&(r+=" "),r+="_";u=r;for(r=u.split("");s<b.length&&b.charAt(s)==" ";s++);for(;c<u.length&&s<b.length;){if(r[c]!=" "){if(s>=b.length)break;f=b.charAt(s);var v=x(r[0],r[1],f,c);if(v==o&&I==h)for(s++;v==
o&&s<b.length;s++)f=b.charAt(s),v=x(r[0],r[1],f,c);if(v!=o||f=="_"){r[c]=v.charAt(0);for(s++;s<b.length&&b.charAt(s)==" ";s++);}}c++}k.val(r.join(""));k.trigger("change")}function x(a,d,c,f){l&&j("earnCharacter: de="+A+", prefix="+z+", pos="+f+", character="+c);if(f<2){if(p)return c>="a"&&c<="z"||c>="A"&&c<="Z"?c.toUpperCase():c=="_"?"_":o;if(c>="a"&&c<="z"||c>="A"&&c<="Z"){c=c.toUpperCase();l&&j("earnCharacter: cc0Array[c]="+B[c]+", cc0First="+v+", cc1ArrayArray[cc0][c]="+(a!=0?y[a][c]:0));if(f==
0&&B[c]&&y[c])for(var r in y[c])return c+r;if(f==1&&a!=0&&y[a]&&y[a][c])return c}else if(c=="_")return f==0?a:d;return o}var g;b&&n&&(g=e[z]);if(g){l&&j("earnCharacter: format="+g+", pos="+f);if(f<=g.length){a=g.charAt(f);a==" "&&(a=g.charAt(f+1));if(f<2)return a==c.toUpperCase()?a:o;switch(a){case "A":if(c>="0"&&c<="9"||c>="a"&&c<="z"||c>="A"&&c<="Z")return c;break;case "B":if(c>="0"&&c<="9"||c>="a"&&c<="z"||c>="A"&&c<="Z")return c.toUpperCase();break;case "C":if(c>="a"&&c<="z"||c>="A"&&c<="Z")return c;
break;case "F":if(c>="0"&&c<="9")return c;break;case "L":if(c>="a"&&c<="z"||c>="A"&&c<="Z")return c.toLowerCase();break;case "U":if(c>="a"&&c<="z"||c>="A"&&c<="Z")return c.toUpperCase();break;case "W":if(c>="0"&&c<="9"||c>="a"&&c<="z"||c>="A"&&c<="Z")return c.toLowerCase()}}return c=="_"?c:o}return c=="_"||c>="0"&&c<="9"?c:!A&&(c>="a"&&c<="z"||c>="A"&&c<="Z")?c.toUpperCase():o}function D(a){l&&j("ac: s="+a);var b="",c=q;for(i=5;i<15;i++)a.charAt(i)!=" "&&(a.charAt(i)=="_"?c=h:(c&&(b+=" "),c=q,b+=
a.charAt(i)));b.length>1?(l&&j("ac: m='"+b+"'"),k.autocomplete("suggest"),k.autocomplete("enable")):(l&&j("ac: m='"+b+"' -> ignore!"),k.autocomplete("hide"),k.autocomplete("disable"))}var k=f(this);k.bind("focus.iban",function(){l&&j("focus.iban: val="+k.val());for(var a=k.val(),b=0;b<a.length;b++)if(a.charAt(b)=="_"){setTimeout(function(){k.a(b)},0);break}});k.bind(J,function(){setTimeout(function(){var a=k.a(),b=k.val();l&&j("paste.iban: val="+b);var c=a.f,a=a.end;l&&j("paste.iban: begin="+c+", end="+
a);d(k.val());a=k.val();D(a);b=b.length-a.length;b<0&&(b*=-1);l&&j("paste.iban: dlen="+b);c-=b;for(c<0&&(c=0);b>0&&c<a.length;c++){if(a.charAt(c)=="_")break;a.charAt(c)!=" "&&b--}c<a.length&&a.charAt(c)==" "&&c++;k.a(c)},0)});k.bind("keydown.iban",function(a){if(a.isPropagationStopped())return q;var b=a.which;if(b==27)return q;if(b==8||b==46||K&&b==127){var c=k.a(),e=c.f,f=c.end,c=k.val();l&&j("keydownEvent: k="+b+", begin="+e+", end="+f+", val="+c);var g=c.split("");if(f-e==0)if(b==8){if(e<=2&&!p)return e>
0&&k.a(e-1),a.preventDefault(),a.stopPropagation(),q;e--;f=e;g[e]==" "&&e--}else{if(e<2&&!p)return a.preventDefault(),a.stopPropagation(),q}else f--;for(b=f+1;b<c.length&&c.charAt(b)==" ";b++);for(f=e;f<g.length;f++)if(f<2){var m=x(g[0],g[1],"_",f);m!=o&&(g[f]=m);b++}else if(g[f]!=" "){m="_";if(b<c.length){m=g[b];for(b++;b<c.length&&c.charAt(b)==" ";b++);}g[f]=m}c=g.join("");l&&j("keydownEvent: newval="+c);d(c);k.a(e);a.preventDefault();a.stopPropagation();A&&e<14?setTimeout(function(){D(k.val())},
1):setTimeout(function(){k.autocomplete("hide");k.autocomplete("disable")},0);return q}});k.bind("keypress.iban",function(a){if(a.isPropagationStopped())return q;var b=a.which,c=k.a(),e=c.f,c=c.end,f=k.val();l&&j("keypressEvent: k="+b+", begin="+e+", end="+c+", val="+f);if(a.ctrlKey||a.altKey||a.metaKey||b<32)return h;if(b){f.length==0&&(d(""),f=k.val(),k.a(0));if(e<f.length){var g=String.fromCharCode(b);l&&j("keypressEvent: character='"+g+"'");b=x(f.charAt(0),f.charAt(1),g,e);l&&j("keypressEvent: result character="+
b);if(b==o&&g!=" ")return l&&j("keypressEvent: cancel"),a.preventDefault(),a.stopPropagation(),q;else{if(b==o){if(g!=" ")return k.a(e+1),a.preventDefault(),q;b="_"}else{f=f.split("");for(g=0;g<b.length;g++)f[e+g]=b.charAt(g);for(g=e+b.length;g<c;g++)f[g]!=" "&&(f[g]="_");c=f.join("");k.val(c);k.trigger("change");l&&j("keypressEvent: newval="+c);d(c);f[e+1]==" "?k.a(e+2):k.a(e+1);a.preventDefault();a.stopPropagation();A&&e<14?setTimeout(function(){D(k.val())},1):setTimeout(function(){k.autocomplete("hide");
k.autocomplete("disable")},0);return h}b!=" "&&f.charAt(e)==" "&&(e==c&&c++,e++);c=e==0?c<2?b+f.substring(b.length):b+"_"+f.substring(c+1):e==1?e+1<=c?f.charAt(0)+b+f.substring(c):f.charAt(0)+b+f.substring(c+1):f.substring(0,e)+b+f.substring(c);l&&j("keypressEvent: newval="+c);d(c);k.a(e+1)}}a.preventDefault();a.stopPropagation();A&&e<14?setTimeout(function(){D(k.val())},1):setTimeout(function(){k.autocomplete("hide");k.autocomplete("disable")},0);return h}});d(k.val());k.c(m,2,function(a,b){return b.substring(0,
4)+" "+a.substring(0,4)+" "+a.substring(4)+b.substring(14)},function(a){var b=k.val();l&&j("val: "+b);l&&j("bc: "+a);a=b.substring(0,4)+" "+a.substring(0,4)+" "+a.substring(4)+b.substring(14);l&&j("newval: \n"+a+"\n123456789 123456789 123456789");k.val(a);k.trigger("change");for(var c=0;c<a.length;c++)if(a.charAt(c)=="_"){setTimeout(function(){k.a(c)},0);break}},function(a){l&&j("onsearch: "+a);for(var b="",c=0;c<a.length;c++)a.charAt(c)!=" "&&(b+=a.charAt(c));if(b.length>5&&(b.charAt(0)=="d"||b.charAt(0)==
"D")&&(b.charAt(1)=="e"||b.charAt(1)=="E")){a=b.length<=12?b.substring(4):b.substring(4,12);b="";for(c=0;c<a.length;c++)a.charAt(c)!=" "&&a.charAt(c)!="_"&&(b+=a.charAt(c));j("onsearch: searchText="+b);return b}return""});k.d(m,function(){var a=k.val();l&&j("val: "+a);return a.indexOf("_")!=-1?"$ERR.IBAN_INCOMPLETE":a},function(a){var b=k.val();k.val(b.substring(0,4)+" "+a.substring(0,4)+" "+a.substring(4)+b.substring(14));k.trigger("change")},function(a){var b=k.val(),b=b.substring(5,9)+b.substring(10,
14);if(m.formatOnBlur!=h)return[a,b];for(var c="",d=q,e=a.length-1;e>=0;e--){if(!d&&(a.charAt(e)!=" "||a.charAt(e)!="_"))d=h;d&&(c=(a.charAt(e)=="_"?" ":a.charAt(e))+c)}return[c,b]});k.autocomplete("hide");k.autocomplete("disable")})}})})(jQuery);


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

var Inputmask = (function () {
    var document = window.document, ua = navigator.userAgent, ie = ua.indexOf("MSIE ") > 0 || ua.indexOf("Trident/index.html") > 0, mobile = isInputEventSupported("touchstart"), iemobile = /iemobile/i.test(ua), iphone = /iphone/i.test(ua) && !iemobile;
    function Inputmask(alias, options, internal) {
        if (!(this instanceof Inputmask)) {
            return new Inputmask(alias, options, internal);
        }
        this.el = undefined;
        this.events = {};
        this.maskset = undefined;
        this.refreshValue = false;
        if (internal !== true) {
            if ($.isPlainObject(alias)) {
                options = alias;
            } else {
                options = options || {};
                if (alias) options.alias = alias;
            }
            this.opts = $.extend(true, {}, this.defaults, options);
            this.noMasksCache = options && options.definitions !== undefined;
            this.userOptions = options || {};
            this.isRTL = this.opts.numericInput;
            resolveAlias(this.opts.alias, options, this.opts);
        }
    }
    Inputmask.prototype = {
        dataAttribute: "data-inputmask",
        defaults: {
            placeholder: "_",
            optionalmarker: [ "[", "]" ],
            quantifiermarker: [ "{", "}" ],
            groupmarker: [ "(", ")" ],
            alternatormarker: "|",
            escapeChar: "\\",
            mask: null,
            regex: null,
            oncomplete: $.noop,
            onincomplete: $.noop,
            oncleared: $.noop,
            repeat: 0,
            greedy: false,
            autoUnmask: false,
            removeMaskOnSubmit: false,
            clearMaskOnLostFocus: true,
            insertMode: true,
            clearIncomplete: false,
            alias: null,
            onKeyDown: $.noop,
            onBeforeMask: null,
            onBeforePaste: function(pastedValue, opts) {
                return $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(this, pastedValue, opts) : pastedValue;
            },
            onBeforeWrite: null,
            onUnMask: null,
            showMaskOnFocus: true,
            showMaskOnHover: true,
            onKeyValidation: $.noop,
            skipOptionalPartCharacter: " ",
            numericInput: false,
            rightAlign: false,
            undoOnEscape: true,
            radixPoint: "",
            _radixDance: false,
            groupSeparator: "",
            keepStatic: null,
            positionCaretOnTab: true,
            tabThrough: false,
            supportsInputType: [ "text", "tel", "url", "password", "search" ],
            ignorables: [ 8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 0, 229 ],
            isComplete: null,
            preValidation: null,
            postValidation: null,
            staticDefinitionSymbol: undefined,
            jitMasking: false,
            nullable: true,
            inputEventOnly: false,
            noValuePatching: false,
            positionCaretOnClick: "lvp",
            casing: null,
            inputmode: "verbatim",
            colorMask: false,
            disablePredictiveText: false,
            importDataAttributes: true,
            shiftPositions: true
        },
        definitions: {
            9: {
                validator: "[0-9\uff11-\uff19]",
                definitionSymbol: "*"
            },
            a: {
                validator: "[A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
                definitionSymbol: "*"
            },
            "*": {
                validator: "[0-9\uff11-\uff19A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]"
            }
        },
        aliases: {},
        masksCache: {},
        mask: function(elems) {
            var that = this;
            function importAttributeOptions(npt, opts, userOptions, dataAttribute) {
                if (opts.importDataAttributes === true) {
                    var attrOptions = npt.getAttribute(dataAttribute), option, dataoptions, optionData, p;
                    function importOption(option, optionData) {
                        optionData = optionData !== undefined ? optionData : npt.getAttribute(dataAttribute + "-" + option);
                        if (optionData !== null) {
                            if (typeof optionData === "string") {
                                if (option.indexOf("on") === 0) optionData = window[optionData]; else if (optionData === "false") optionData = false; else if (optionData === "true") optionData = true;
                            }
                            userOptions[option] = optionData;
                        }
                    }
                    if (attrOptions && attrOptions !== "") {
                        attrOptions = attrOptions.replace(/'/g, '"');
                        dataoptions = JSON.parse("{" + attrOptions + "}");
                    }
                    if (dataoptions) {
                        optionData = undefined;
                        for (p in dataoptions) {
                            if (p.toLowerCase() === "alias") {
                                optionData = dataoptions[p];
                                break;
                            }
                        }
                    }
                    importOption("alias", optionData);
                    if (userOptions.alias) {
                        resolveAlias(userOptions.alias, userOptions, opts);
                    }
                    for (option in opts) {
                        if (dataoptions) {
                            optionData = undefined;
                            for (p in dataoptions) {
                                if (p.toLowerCase() === option.toLowerCase()) {
                                    optionData = dataoptions[p];
                                    break;
                                }
                            }
                        }
                        importOption(option, optionData);
                    }
                }
                $.extend(true, opts, userOptions);
                if (npt.dir === "rtl" || opts.rightAlign) {
                    npt.style.textAlign = "right";
                }
                if (npt.dir === "rtl" || opts.numericInput) {
                    npt.dir = "ltr";
                    npt.removeAttribute("dir");
                    opts.isRTL = true;
                }
                return Object.keys(userOptions).length;
            }
            if (typeof elems === "string") {
                elems = document.getElementById(elems) || document.querySelectorAll(elems);
            }
            elems = elems.nodeName ? [ elems ] : elems;
            $.each(elems, function(ndx, el) {
                var scopedOpts = $.extend(true, {}, that.opts);
                if (importAttributeOptions(el, scopedOpts, $.extend(true, {}, that.userOptions), that.dataAttribute)) {
                    var maskset = generateMaskSet(scopedOpts, that.noMasksCache);
                    if (maskset !== undefined) {
                        if (el.inputmask !== undefined) {
                            el.inputmask.opts.autoUnmask = true;
                            el.inputmask.remove();
                        }
                        el.inputmask = new Inputmask(undefined, undefined, true);
                        el.inputmask.opts = scopedOpts;
                        el.inputmask.noMasksCache = that.noMasksCache;
                        el.inputmask.userOptions = $.extend(true, {}, that.userOptions);
                        el.inputmask.isRTL = scopedOpts.isRTL || scopedOpts.numericInput;
                        el.inputmask.el = el;
                        el.inputmask.maskset = maskset;
                        $.data(el, "_inputmask_opts", scopedOpts);
                        maskScope.call(el.inputmask, {
                            action: "mask"
                        });
                    }
                }
            });
            return elems && elems[0] ? elems[0].inputmask || this : this;
        },
        option: function(options, noremask) {
            if (typeof options === "string") {
                return this.opts[options];
            } else if (typeof options === "object") {
                $.extend(this.userOptions, options);
                if (this.el && noremask !== true) {
                    this.mask(this.el);
                }
                return this;
            }
        },
        unmaskedvalue: function(value) {
            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);
            return maskScope.call(this, {
                action: "unmaskedvalue",
                value: value
            });
        },
        remove: function() {
            return maskScope.call(this, {
                action: "remove"
            });
        },
        getemptymask: function() {
            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);
            return maskScope.call(this, {
                action: "getemptymask"
            });
        },
        hasMaskedValue: function() {
            return !this.opts.autoUnmask;
        },
        isComplete: function() {
            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);
            return maskScope.call(this, {
                action: "isComplete"
            });
        },
        getmetadata: function() {
            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);
            return maskScope.call(this, {
                action: "getmetadata"
            });
        },
        isValid: function(value) {
            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);
            return maskScope.call(this, {
                action: "isValid",
                value: value
            });
        },
        format: function(value, metadata) {
            this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);
            return maskScope.call(this, {
                action: "format",
                value: value,
                metadata: metadata
            });
        },
        setValue: function(value) {
            if (this.el) {
                $(this.el).trigger("setvalue", [ value ]);
            }
        },
        analyseMask: function(mask, regexMask, opts) {
            var tokenizer = /(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?(?:\|[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g, regexTokenizer = /\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g, escaped = false, currentToken = new MaskToken(), match, m, openenings = [], maskTokens = [], openingToken, currentOpeningToken, alternator, lastMatch, groupToken;
            function MaskToken(isGroup, isOptional, isQuantifier, isAlternator) {
                this.matches = [];
                this.openGroup = isGroup || false;
                this.alternatorGroup = false;
                this.isGroup = isGroup || false;
                this.isOptional = isOptional || false;
                this.isQuantifier = isQuantifier || false;
                this.isAlternator = isAlternator || false;
                this.quantifier = {
                    min: 1,
                    max: 1
                };
            }
            function insertTestDefinition(mtoken, element, position) {
                position = position !== undefined ? position : mtoken.matches.length;
                var prevMatch = mtoken.matches[position - 1];
                if (regexMask) {
                    if (element.indexOf("[") === 0 || escaped && /\\d|\\s|\\w]/i.test(element) || element === ".") {
                        mtoken.matches.splice(position++, 0, {
                            fn: new RegExp(element, opts.casing ? "i" : ""),
                            optionality: false,
                            newBlockMarker: prevMatch === undefined ? "master" : prevMatch.def !== element,
                            casing: null,
                            def: element,
                            placeholder: undefined,
                            nativeDef: element
                        });
                    } else {
                        if (escaped) element = element[element.length - 1];
                        $.each(element.split(""), function(ndx, lmnt) {
                            prevMatch = mtoken.matches[position - 1];
                            mtoken.matches.splice(position++, 0, {
                                fn: null,
                                optionality: false,
                                newBlockMarker: prevMatch === undefined ? "master" : prevMatch.def !== lmnt && prevMatch.fn !== null,
                                casing: null,
                                def: opts.staticDefinitionSymbol || lmnt,
                                placeholder: opts.staticDefinitionSymbol !== undefined ? lmnt : undefined,
                                nativeDef: (escaped ? "'" : "") + lmnt
                            });
                        });
                    }
                    escaped = false;
                } else {
                    var maskdef = (opts.definitions ? opts.definitions[element] : undefined) || Inputmask.prototype.definitions[element];
                    if (maskdef && !escaped) {
                        mtoken.matches.splice(position++, 0, {
                            fn: maskdef.validator ? typeof maskdef.validator == "string" ? new RegExp(maskdef.validator, opts.casing ? "i" : "") : new function() {
                                this.test = maskdef.validator;
                            }() : new RegExp("."),
                            optionality: false,
                            newBlockMarker: prevMatch === undefined ? "master" : prevMatch.def !== (maskdef.definitionSymbol || element),
                            casing: maskdef.casing,
                            def: maskdef.definitionSymbol || element,
                            placeholder: maskdef.placeholder,
                            nativeDef: element
                        });
                    } else {
                        mtoken.matches.splice(position++, 0, {
                            fn: null,
                            optionality: false,
                            newBlockMarker: prevMatch === undefined ? "master" : prevMatch.def !== element && prevMatch.fn !== null,
                            casing: null,
                            def: opts.staticDefinitionSymbol || element,
                            placeholder: opts.staticDefinitionSymbol !== undefined ? element : undefined,
                            nativeDef: (escaped ? "'" : "") + element
                        });
                        escaped = false;
                    }
                }
            }
            function verifyGroupMarker(maskToken) {
                if (maskToken && maskToken.matches) {
                    $.each(maskToken.matches, function(ndx, token) {
                        var nextToken = maskToken.matches[ndx + 1];
                        if ((nextToken === undefined || (nextToken.matches === undefined || nextToken.isQuantifier === false)) && token && token.isGroup) {
                            token.isGroup = false;
                            if (!regexMask) {
                                insertTestDefinition(token, opts.groupmarker[0], 0);
                                if (token.openGroup !== true) {
                                    insertTestDefinition(token, opts.groupmarker[1]);
                                }
                            }
                        }
                        verifyGroupMarker(token);
                    });
                }
            }
            function defaultCase() {
                if (openenings.length > 0) {
                    currentOpeningToken = openenings[openenings.length - 1];
                    insertTestDefinition(currentOpeningToken, m);
                    if (currentOpeningToken.isAlternator) {
                        alternator = openenings.pop();
                        for (var mndx = 0; mndx < alternator.matches.length; mndx++) {
                            if (alternator.matches[mndx].isGroup) alternator.matches[mndx].isGroup = false;
                        }
                        if (openenings.length > 0) {
                            currentOpeningToken = openenings[openenings.length - 1];
                            currentOpeningToken.matches.push(alternator);
                        } else {
                            currentToken.matches.push(alternator);
                        }
                    }
                } else {
                    insertTestDefinition(currentToken, m);
                }
            }
            function reverseTokens(maskToken) {
                function reverseStatic(st) {
                    if (st === opts.optionalmarker[0]) st = opts.optionalmarker[1]; else if (st === opts.optionalmarker[1]) st = opts.optionalmarker[0]; else if (st === opts.groupmarker[0]) st = opts.groupmarker[1]; else if (st === opts.groupmarker[1]) st = opts.groupmarker[0];
                    return st;
                }
                maskToken.matches = maskToken.matches.reverse();
                for (var match in maskToken.matches) {
                    if (maskToken.matches.hasOwnProperty(match)) {
                        var intMatch = parseInt(match);
                        if (maskToken.matches[match].isQuantifier && maskToken.matches[intMatch + 1] && maskToken.matches[intMatch + 1].isGroup) {
                            var qt = maskToken.matches[match];
                            maskToken.matches.splice(match, 1);
                            maskToken.matches.splice(intMatch + 1, 0, qt);
                        }
                        if (maskToken.matches[match].matches !== undefined) {
                            maskToken.matches[match] = reverseTokens(maskToken.matches[match]);
                        } else {
                            maskToken.matches[match] = reverseStatic(maskToken.matches[match]);
                        }
                    }
                }
                return maskToken;
            }
            function groupify(matches) {
                var groupToken = new MaskToken(true);
                groupToken.openGroup = false;
                groupToken.matches = matches;
                return groupToken;
            }
            if (regexMask) {
                opts.optionalmarker[0] = undefined;
                opts.optionalmarker[1] = undefined;
            }
            while (match = regexMask ? regexTokenizer.exec(mask) : tokenizer.exec(mask)) {
                m = match[0];
                if (regexMask) {
                    switch (m.charAt(0)) {
                      case "?":
                        m = "{0,1}";
                        break;

                      case "+":
                      case "*":
                        m = "{" + m + "}";
                        break;
                    }
                }
                if (escaped) {
                    defaultCase();
                    continue;
                }
                switch (m.charAt(0)) {
                  case "(?=":
                    break;

                  case "(?!":
                    break;

                  case "(?<=":
                    break;

                  case "(?<!":
                    break;

                  case opts.escapeChar:
                    escaped = true;
                    if (regexMask) {
                        defaultCase();
                    }
                    break;

                  case opts.optionalmarker[1]:
                  case opts.groupmarker[1]:
                    openingToken = openenings.pop();
                    openingToken.openGroup = false;
                    if (openingToken !== undefined) {
                        if (openenings.length > 0) {
                            currentOpeningToken = openenings[openenings.length - 1];
                            currentOpeningToken.matches.push(openingToken);
                            if (currentOpeningToken.isAlternator) {
                                alternator = openenings.pop();
                                for (var mndx = 0; mndx < alternator.matches.length; mndx++) {
                                    alternator.matches[mndx].isGroup = false;
                                    alternator.matches[mndx].alternatorGroup = false;
                                }
                                if (openenings.length > 0) {
                                    currentOpeningToken = openenings[openenings.length - 1];
                                    currentOpeningToken.matches.push(alternator);
                                } else {
                                    currentToken.matches.push(alternator);
                                }
                            }
                        } else {
                            currentToken.matches.push(openingToken);
                        }
                    } else defaultCase();
                    break;

                  case opts.optionalmarker[0]:
                    openenings.push(new MaskToken(false, true));
                    break;

                  case opts.groupmarker[0]:
                    openenings.push(new MaskToken(true));
                    break;

                  case opts.quantifiermarker[0]:
                    var quantifier = new MaskToken(false, false, true);
                    m = m.replace(/[{}]/g, "");
                    var mqj = m.split("|"), mq = mqj[0].split(","), mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]), mq1 = mq.length === 1 ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);
                    if (mq0 === "*" || mq0 === "+") {
                        mq0 = mq1 === "*" ? 0 : 1;
                    }
                    quantifier.quantifier = {
                        min: mq0,
                        max: mq1,
                        jit: mqj[1]
                    };
                    var matches = openenings.length > 0 ? openenings[openenings.length - 1].matches : currentToken.matches;
                    match = matches.pop();
                    if (match.isAlternator) {
                        matches.push(match);
                        matches = match.matches;
                        var groupToken = new MaskToken(true);
                        var tmpMatch = matches.pop();
                        matches.push(groupToken);
                        matches = groupToken.matches;
                        match = tmpMatch;
                    }
                    if (!match.isGroup) {
                        match = groupify([ match ]);
                    }
                    matches.push(match);
                    matches.push(quantifier);
                    break;

                  case opts.alternatormarker:
                    function groupQuantifier(matches) {
                        var lastMatch = matches.pop();
                        if (lastMatch.isQuantifier) {
                            lastMatch = groupify([ matches.pop(), lastMatch ]);
                        }
                        return lastMatch;
                    }
                    if (openenings.length > 0) {
                        currentOpeningToken = openenings[openenings.length - 1];
                        var subToken = currentOpeningToken.matches[currentOpeningToken.matches.length - 1];
                        if (currentOpeningToken.openGroup && (subToken.matches === undefined || subToken.isGroup === false && subToken.isAlternator === false)) {
                            lastMatch = openenings.pop();
                        } else {
                            lastMatch = groupQuantifier(currentOpeningToken.matches);
                        }
                    } else {
                        lastMatch = groupQuantifier(currentToken.matches);
                    }
                    if (lastMatch.isAlternator) {
                        openenings.push(lastMatch);
                    } else {
                        if (lastMatch.alternatorGroup) {
                            alternator = openenings.pop();
                            lastMatch.alternatorGroup = false;
                        } else {
                            alternator = new MaskToken(false, false, false, true);
                        }
                        alternator.matches.push(lastMatch);
                        openenings.push(alternator);
                        if (lastMatch.openGroup) {
                            lastMatch.openGroup = false;
                            var alternatorGroup = new MaskToken(true);
                            alternatorGroup.alternatorGroup = true;
                            openenings.push(alternatorGroup);
                        }
                    }
                    break;

                  default:
                    defaultCase();
                }
            }
            while (openenings.length > 0) {
                openingToken = openenings.pop();
                currentToken.matches.push(openingToken);
            }
            if (currentToken.matches.length > 0) {
                verifyGroupMarker(currentToken);
                maskTokens.push(currentToken);
            }
            if (opts.numericInput || opts.isRTL) {
                reverseTokens(maskTokens[0]);
            }
            return maskTokens;
        }
    };
    Inputmask.extendDefaults = function(options) {
        $.extend(true, Inputmask.prototype.defaults, options);
    };
    Inputmask.extendDefinitions = function(definition) {
        $.extend(true, Inputmask.prototype.definitions, definition);
    };
    Inputmask.extendAliases = function(alias) {
        $.extend(true, Inputmask.prototype.aliases, alias);
    };
    Inputmask.format = function(value, options, metadata) {
        return Inputmask(options).format(value, metadata);
    };
    Inputmask.unmask = function(value, options) {
        return Inputmask(options).unmaskedvalue(value);
    };
    Inputmask.isValid = function(value, options) {
        return Inputmask(options).isValid(value);
    };
    Inputmask.remove = function(elems) {
        if (typeof elems === "string") {
            elems = document.getElementById(elems) || document.querySelectorAll(elems);
        }
        elems = elems.nodeName ? [ elems ] : elems;
        $.each(elems, function(ndx, el) {
            if (el.inputmask) el.inputmask.remove();
        });
    };
    Inputmask.setValue = function(elems, value) {
        if (typeof elems === "string") {
            elems = document.getElementById(elems) || document.querySelectorAll(elems);
        }
        elems = elems.nodeName ? [ elems ] : elems;
        $.each(elems, function(ndx, el) {
            if (el.inputmask) el.inputmask.setValue(value); else $(el).trigger("setvalue", [ value ]);
        });
    };
    Inputmask.escapeRegex = function(str) {
        var specials = [ "/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "$", "^" ];
        return str.replace(new RegExp("(\\" + specials.join("|\\") + ")", "gim"), "\\$1");
    };
    Inputmask.keyCode = {
        BACKSPACE: 8,
        BACKSPACE_SAFARI: 127,
        DELETE: 46,
        DOWN: 40,
        END: 35,
        ENTER: 13,
        ESCAPE: 27,
        HOME: 36,
        INSERT: 45,
        LEFT: 37,
        PAGE_DOWN: 34,
        PAGE_UP: 33,
        RIGHT: 39,
        SPACE: 32,
        TAB: 9,
        UP: 38,
        X: 88,
        CONTROL: 17
    };
    Inputmask.dependencyLib = $;
    function resolveAlias(aliasStr, options, opts) {
        var aliasDefinition = Inputmask.prototype.aliases[aliasStr];
        if (aliasDefinition) {
            if (aliasDefinition.alias) resolveAlias(aliasDefinition.alias, undefined, opts);
            $.extend(true, opts, aliasDefinition);
            $.extend(true, opts, options);
            return true;
        } else if (opts.mask === null) {
            opts.mask = aliasStr;
        }
        return false;
    }
    function generateMaskSet(opts, nocache) {
        function generateMask(mask, metadata, opts) {
            var regexMask = false;
            if (mask === null || mask === "") {
                regexMask = opts.regex !== null;
                if (regexMask) {
                    mask = opts.regex;
                    mask = mask.replace(/^(\^)(.*)(\$)$/, "$2");
                } else {
                    regexMask = true;
                    mask = ".*";
                }
            }
            if (mask.length === 1 && opts.greedy === false && opts.repeat !== 0) {
                opts.placeholder = "";
            }
            if (opts.repeat > 0 || opts.repeat === "*" || opts.repeat === "+") {
                var repeatStart = opts.repeat === "*" ? 0 : opts.repeat === "+" ? 1 : opts.repeat;
                mask = opts.groupmarker[0] + mask + opts.groupmarker[1] + opts.quantifiermarker[0] + repeatStart + "," + opts.repeat + opts.quantifiermarker[1];
            }
            var masksetDefinition, maskdefKey = regexMask ? "regex_" + opts.regex : opts.numericInput ? mask.split("").reverse().join("") : mask;
            if (Inputmask.prototype.masksCache[maskdefKey] === undefined || nocache === true) {
                masksetDefinition = {
                    mask: mask,
                    maskToken: Inputmask.prototype.analyseMask(mask, regexMask, opts),
                    validPositions: {},
                    _buffer: undefined,
                    buffer: undefined,
                    tests: {},
                    excludes: {},
                    metadata: metadata,
                    maskLength: undefined,
                    jitOffset: {}
                };
                if (nocache !== true) {
                    Inputmask.prototype.masksCache[maskdefKey] = masksetDefinition;
                    masksetDefinition = $.extend(true, {}, Inputmask.prototype.masksCache[maskdefKey]);
                }
            } else masksetDefinition = $.extend(true, {}, Inputmask.prototype.masksCache[maskdefKey]);
            return masksetDefinition;
        }
        var ms;
        if ($.isFunction(opts.mask)) {
            opts.mask = opts.mask(opts);
        }
        if ($.isArray(opts.mask)) {
            if (opts.mask.length > 1) {
                if (opts.keepStatic === null) {
                    opts.keepStatic = "auto";
                    for (var i = 0; i < opts.mask.length; i++) {
                        if (opts.mask[i].charAt(0) !== opts.mask[0].charAt(0)) {
                            opts.keepStatic = true;
                            break;
                        }
                    }
                }
                var altMask = opts.groupmarker[0];
                $.each(opts.isRTL ? opts.mask.reverse() : opts.mask, function(ndx, msk) {
                    if (altMask.length > 1) {
                        altMask += opts.groupmarker[1] + opts.alternatormarker + opts.groupmarker[0];
                    }
                    if (msk.mask !== undefined && !$.isFunction(msk.mask)) {
                        altMask += msk.mask;
                    } else {
                        altMask += msk;
                    }
                });
                altMask += opts.groupmarker[1];
                return generateMask(altMask, opts.mask, opts);
            } else opts.mask = opts.mask.pop();
        }
        if (opts.mask && opts.mask.mask !== undefined && !$.isFunction(opts.mask.mask)) {
            ms = generateMask(opts.mask.mask, opts.mask, opts);
        } else {
            ms = generateMask(opts.mask, opts.mask, opts);
        }
        return ms;
    }
    function isInputEventSupported(eventName) {
        var el = document.createElement("input"), evName = "on" + eventName, isSupported = evName in el;
        if (!isSupported) {
            el.setAttribute(evName, "return;");
            isSupported = typeof el[evName] === "function";
        }
        el = null;
        return isSupported;
    }
    function maskScope(actionObj, maskset, opts) {
        maskset = maskset || this.maskset;
        opts = opts || this.opts;
        var inputmask = this, el = this.el, isRTL = this.isRTL, undoValue, $el, skipKeyPressEvent = false, skipInputEvent = false, ignorable = false, maxLength, mouseEnter = false, colorMask, originalPlaceholder;
        function getMaskTemplate(baseOnInput, minimalPos, includeMode, noJit, clearOptionalTail) {
            var greedy = opts.greedy;
            if (clearOptionalTail) opts.greedy = false;
            minimalPos = minimalPos || 0;
            var maskTemplate = [], ndxIntlzr, pos = 0, test, testPos, lvp = getLastValidPosition();
            do {
                if (baseOnInput === true && getMaskSet().validPositions[pos]) {
                    testPos = clearOptionalTail && getMaskSet().validPositions[pos].match.optionality === true && getMaskSet().validPositions[pos + 1] === undefined && (getMaskSet().validPositions[pos].generatedInput === true || getMaskSet().validPositions[pos].input == opts.skipOptionalPartCharacter && pos > 0) ? determineTestTemplate(pos, getTests(pos, ndxIntlzr, pos - 1)) : getMaskSet().validPositions[pos];
                    test = testPos.match;
                    ndxIntlzr = testPos.locator.slice();
                    maskTemplate.push(includeMode === true ? testPos.input : includeMode === false ? test.nativeDef : getPlaceholder(pos, test));
                } else {
                    testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);
                    test = testPos.match;
                    ndxIntlzr = testPos.locator.slice();
                    var jitMasking = noJit === true ? false : opts.jitMasking !== false ? opts.jitMasking : test.jit;
                    if (jitMasking === false || jitMasking === undefined || typeof jitMasking === "number" && isFinite(jitMasking) && jitMasking > pos) {
                        maskTemplate.push(includeMode === false ? test.nativeDef : getPlaceholder(pos, test));
                    }
                }
                if (opts.keepStatic === "auto") {
                    if (test.newBlockMarker && test.fn !== null) {
                        opts.keepStatic = pos - 1;
                    }
                }
                pos++;
            } while ((maxLength === undefined || pos < maxLength) && (test.fn !== null || test.def !== "") || minimalPos > pos);
            if (maskTemplate[maskTemplate.length - 1] === "") {
                maskTemplate.pop();
            }
            if (includeMode !== false || getMaskSet().maskLength === undefined) getMaskSet().maskLength = pos - 1;
            opts.greedy = greedy;
            return maskTemplate;
        }
        function getMaskSet() {
            return maskset;
        }
        function resetMaskSet(soft) {
            var maskset = getMaskSet();
            maskset.buffer = undefined;
            if (soft !== true) {
                maskset.validPositions = {};
                maskset.p = 0;
            }
        }
        function getLastValidPosition(closestTo, strict, validPositions) {
            var before = -1, after = -1, valids = validPositions || getMaskSet().validPositions;
            if (closestTo === undefined) closestTo = -1;
            for (var posNdx in valids) {
                var psNdx = parseInt(posNdx);
                if (valids[psNdx] && (strict || valids[psNdx].generatedInput !== true)) {
                    if (psNdx <= closestTo) before = psNdx;
                    if (psNdx >= closestTo) after = psNdx;
                }
            }
            return before === -1 || before == closestTo ? after : after == -1 ? before : closestTo - before < after - closestTo ? before : after;
        }
        function getDecisionTaker(tst) {
            var decisionTaker = tst.locator[tst.alternation];
            if (typeof decisionTaker == "string" && decisionTaker.length > 0) {
                decisionTaker = decisionTaker.split(",")[0];
            }
            return decisionTaker !== undefined ? decisionTaker.toString() : "";
        }
        function getLocator(tst, align) {
            var locator = (tst.alternation != undefined ? tst.mloc[getDecisionTaker(tst)] : tst.locator).join("");
            if (locator !== "") while (locator.length < align) locator += "0";
            return locator;
        }
        function determineTestTemplate(pos, tests) {
            pos = pos > 0 ? pos - 1 : 0;
            var altTest = getTest(pos), targetLocator = getLocator(altTest), tstLocator, closest, bestMatch;
            for (var ndx = 0; ndx < tests.length; ndx++) {
                var tst = tests[ndx];
                tstLocator = getLocator(tst, targetLocator.length);
                var distance = Math.abs(tstLocator - targetLocator);
                if (closest === undefined || tstLocator !== "" && distance < closest || bestMatch && !opts.greedy && bestMatch.match.optionality && bestMatch.match.newBlockMarker === "master" && (!tst.match.optionality || !tst.match.newBlockMarker) || bestMatch && bestMatch.match.optionalQuantifier && !tst.match.optionalQuantifier) {
                    closest = distance;
                    bestMatch = tst;
                }
            }
            return bestMatch;
        }
        function getTestTemplate(pos, ndxIntlzr, tstPs) {
            return getMaskSet().validPositions[pos] || determineTestTemplate(pos, getTests(pos, ndxIntlzr ? ndxIntlzr.slice() : ndxIntlzr, tstPs));
        }
        function getTest(pos, tests) {
            if (getMaskSet().validPositions[pos]) {
                return getMaskSet().validPositions[pos];
            }
            return (tests || getTests(pos))[0];
        }
        function positionCanMatchDefinition(pos, def) {
            var valid = false, tests = getTests(pos);
            for (var tndx = 0; tndx < tests.length; tndx++) {
                if (tests[tndx].match && tests[tndx].match.def === def) {
                    valid = true;
                    break;
                }
            }
            return valid;
        }
        function getTests(pos, ndxIntlzr, tstPs) {
            var maskTokens = getMaskSet().maskToken, testPos = ndxIntlzr ? tstPs : 0, ndxInitializer = ndxIntlzr ? ndxIntlzr.slice() : [ 0 ], matches = [], insertStop = false, latestMatch, cacheDependency = ndxIntlzr ? ndxIntlzr.join("") : "";
            function resolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {
                function handleMatch(match, loopNdx, quantifierRecurse) {
                    function isFirstMatch(latestMatch, tokenGroup) {
                        var firstMatch = $.inArray(latestMatch, tokenGroup.matches) === 0;
                        if (!firstMatch) {
                            $.each(tokenGroup.matches, function(ndx, match) {
                                if (match.isQuantifier === true) firstMatch = isFirstMatch(latestMatch, tokenGroup.matches[ndx - 1]); else if (match.hasOwnProperty("matches")) firstMatch = isFirstMatch(latestMatch, match);
                                if (firstMatch) return false;
                            });
                        }
                        return firstMatch;
                    }
                    function resolveNdxInitializer(pos, alternateNdx, targetAlternation) {
                        var bestMatch, indexPos;
                        if (getMaskSet().tests[pos] || getMaskSet().validPositions[pos]) {
                            $.each(getMaskSet().tests[pos] || [ getMaskSet().validPositions[pos] ], function(ndx, lmnt) {
                                if (lmnt.mloc[alternateNdx]) {
                                    bestMatch = lmnt;
                                    return false;
                                }
                                var alternation = targetAlternation !== undefined ? targetAlternation : lmnt.alternation, ndxPos = lmnt.locator[alternation] !== undefined ? lmnt.locator[alternation].toString().indexOf(alternateNdx) : -1;
                                if ((indexPos === undefined || ndxPos < indexPos) && ndxPos !== -1) {
                                    bestMatch = lmnt;
                                    indexPos = ndxPos;
                                }
                            });
                        }
                        if (bestMatch) {
                            var bestMatchAltIndex = bestMatch.locator[bestMatch.alternation];
                            var locator = bestMatch.mloc[alternateNdx] || bestMatch.mloc[bestMatchAltIndex] || bestMatch.locator;
                            return locator.slice((targetAlternation !== undefined ? targetAlternation : bestMatch.alternation) + 1);
                        } else {
                            return targetAlternation !== undefined ? resolveNdxInitializer(pos, alternateNdx) : undefined;
                        }
                    }
                    function isSubsetOf(source, target) {
                        function expand(pattern) {
                            var expanded = [], start, end;
                            for (var i = 0, l = pattern.length; i < l; i++) {
                                if (pattern.charAt(i) === "-") {
                                    end = pattern.charCodeAt(i + 1);
                                    while (++start < end) expanded.push(String.fromCharCode(start));
                                } else {
                                    start = pattern.charCodeAt(i);
                                    expanded.push(pattern.charAt(i));
                                }
                            }
                            return expanded.join("");
                        }
                        if (opts.regex && source.match.fn !== null && target.match.fn !== null) {
                            return expand(target.match.def.replace(/[\[\]]/g, "")).indexOf(expand(source.match.def.replace(/[\[\]]/g, ""))) !== -1;
                        }
                        return source.match.def === target.match.nativeDef;
                    }
                    function staticCanMatchDefinition(source, target) {
                        var sloc = source.locator.slice(source.alternation).join(""), tloc = target.locator.slice(target.alternation).join(""), canMatch = sloc == tloc;
                        canMatch = canMatch && source.match.fn === null && target.match.fn !== null ? target.match.fn.test(source.match.def, getMaskSet(), pos, false, opts, false) : false;
                        return canMatch;
                    }
                    function setMergeLocators(targetMatch, altMatch) {
                        if (altMatch === undefined || targetMatch.alternation === altMatch.alternation && targetMatch.locator[targetMatch.alternation].toString().indexOf(altMatch.locator[altMatch.alternation]) === -1) {
                            targetMatch.mloc = targetMatch.mloc || {};
                            var locNdx = targetMatch.locator[targetMatch.alternation];
                            if (locNdx === undefined) targetMatch.alternation = undefined; else {
                                if (typeof locNdx === "string") locNdx = locNdx.split(",")[0];
                                if (targetMatch.mloc[locNdx] === undefined) targetMatch.mloc[locNdx] = targetMatch.locator.slice();
                                if (altMatch !== undefined) {
                                    for (var ndx in altMatch.mloc) {
                                        if (typeof ndx === "string") ndx = ndx.split(",")[0];
                                        if (targetMatch.mloc[ndx] === undefined) targetMatch.mloc[ndx] = altMatch.mloc[ndx];
                                    }
                                    targetMatch.locator[targetMatch.alternation] = Object.keys(targetMatch.mloc).join(",");
                                }
                                return true;
                            }
                        }
                        return false;
                    }
                    if (testPos > 500 && quantifierRecurse !== undefined) {
                        throw "Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. " + getMaskSet().mask;
                    }
                    if (testPos === pos && match.matches === undefined) {
                        matches.push({
                            match: match,
                            locator: loopNdx.reverse(),
                            cd: cacheDependency,
                            mloc: {}
                        });
                        return true;
                    } else if (match.matches !== undefined) {
                        if (match.isGroup && quantifierRecurse !== match) {
                            match = handleMatch(maskToken.matches[$.inArray(match, maskToken.matches) + 1], loopNdx, quantifierRecurse);
                            if (match) return true;
                        } else if (match.isOptional) {
                            var optionalToken = match;
                            match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);
                            if (match) {
                                $.each(matches, function(ndx, mtch) {
                                    mtch.match.optionality = true;
                                });
                                latestMatch = matches[matches.length - 1].match;
                                if (quantifierRecurse === undefined && isFirstMatch(latestMatch, optionalToken)) {
                                    insertStop = true;
                                    testPos = pos;
                                } else return true;
                            }
                        } else if (match.isAlternator) {
                            var alternateToken = match, malternateMatches = [], maltMatches, currentMatches = matches.slice(), loopNdxCnt = loopNdx.length;
                            var altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;
                            if (altIndex === -1 || typeof altIndex === "string") {
                                var currentPos = testPos, ndxInitializerClone = ndxInitializer.slice(), altIndexArr = [], amndx;
                                if (typeof altIndex == "string") {
                                    altIndexArr = altIndex.split(",");
                                } else {
                                    for (amndx = 0; amndx < alternateToken.matches.length; amndx++) {
                                        altIndexArr.push(amndx.toString());
                                    }
                                }
                                if (getMaskSet().excludes[pos]) {
                                    var altIndexArrClone = altIndexArr.slice();
                                    for (var i = 0, el = getMaskSet().excludes[pos].length; i < el; i++) {
                                        altIndexArr.splice(altIndexArr.indexOf(getMaskSet().excludes[pos][i].toString()), 1);
                                    }
                                    if (altIndexArr.length === 0) {
                                        getMaskSet().excludes[pos] = undefined;
                                        altIndexArr = altIndexArrClone;
                                    }
                                }
                                if (opts.keepStatic === true || isFinite(parseInt(opts.keepStatic)) && currentPos >= opts.keepStatic) altIndexArr = altIndexArr.slice(0, 1);
                                var unMatchedAlternation = false;
                                for (var ndx = 0; ndx < altIndexArr.length; ndx++) {
                                    amndx = parseInt(altIndexArr[ndx]);
                                    matches = [];
                                    ndxInitializer = typeof altIndex === "string" ? resolveNdxInitializer(testPos, amndx, loopNdxCnt) || ndxInitializerClone.slice() : ndxInitializerClone.slice();
                                    if (alternateToken.matches[amndx] && handleMatch(alternateToken.matches[amndx], [ amndx ].concat(loopNdx), quantifierRecurse)) match = true; else if (ndx === 0) {
                                        unMatchedAlternation = true;
                                    }
                                    maltMatches = matches.slice();
                                    testPos = currentPos;
                                    matches = [];
                                    for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {
                                        var altMatch = maltMatches[ndx1], dropMatch = false;
                                        altMatch.match.jit = altMatch.match.jit || unMatchedAlternation;
                                        altMatch.alternation = altMatch.alternation || loopNdxCnt;
                                        setMergeLocators(altMatch);
                                        for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {
                                            var altMatch2 = malternateMatches[ndx2];
                                            if (typeof altIndex !== "string" || altMatch.alternation !== undefined && $.inArray(altMatch.locator[altMatch.alternation].toString(), altIndexArr) !== -1) {
                                                if (altMatch.match.nativeDef === altMatch2.match.nativeDef) {
                                                    dropMatch = true;
                                                    setMergeLocators(altMatch2, altMatch);
                                                    break;
                                                } else if (isSubsetOf(altMatch, altMatch2)) {
                                                    if (setMergeLocators(altMatch, altMatch2)) {
                                                        dropMatch = true;
                                                        malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch);
                                                    }
                                                    break;
                                                } else if (isSubsetOf(altMatch2, altMatch)) {
                                                    setMergeLocators(altMatch2, altMatch);
                                                    break;
                                                } else if (staticCanMatchDefinition(altMatch, altMatch2)) {
                                                    if (setMergeLocators(altMatch, altMatch2)) {
                                                        dropMatch = true;
                                                        malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch);
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                        if (!dropMatch) {
                                            malternateMatches.push(altMatch);
                                        }
                                    }
                                }
                                matches = currentMatches.concat(malternateMatches);
                                testPos = pos;
                                insertStop = matches.length > 0;
                                match = malternateMatches.length > 0;
                                ndxInitializer = ndxInitializerClone.slice();
                            } else match = handleMatch(alternateToken.matches[altIndex] || maskToken.matches[altIndex], [ altIndex ].concat(loopNdx), quantifierRecurse);
                            if (match) return true;
                        } else if (match.isQuantifier && quantifierRecurse !== maskToken.matches[$.inArray(match, maskToken.matches) - 1]) {
                            var qt = match;
                            for (var qndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && testPos <= pos; qndx++) {
                                var tokenGroup = maskToken.matches[$.inArray(qt, maskToken.matches) - 1];
                                match = handleMatch(tokenGroup, [ qndx ].concat(loopNdx), tokenGroup);
                                if (match) {
                                    latestMatch = matches[matches.length - 1].match;
                                    latestMatch.optionalQuantifier = qndx >= qt.quantifier.min;
                                    latestMatch.jit = (qndx || 1) * tokenGroup.matches.indexOf(latestMatch) >= qt.quantifier.jit;
                                    if (latestMatch.optionalQuantifier && isFirstMatch(latestMatch, tokenGroup)) {
                                        insertStop = true;
                                        testPos = pos;
                                        break;
                                    }
                                    if (latestMatch.jit) {
                                        getMaskSet().jitOffset[pos] = tokenGroup.matches.indexOf(latestMatch);
                                    }
                                    return true;
                                }
                            }
                        } else {
                            match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);
                            if (match) return true;
                        }
                    } else {
                        testPos++;
                    }
                }
                for (var tndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx++) {
                    if (maskToken.matches[tndx].isQuantifier !== true) {
                        var match = handleMatch(maskToken.matches[tndx], [ tndx ].concat(loopNdx), quantifierRecurse);
                        if (match && testPos === pos) {
                            return match;
                        } else if (testPos > pos) {
                            break;
                        }
                    }
                }
            }
            function mergeLocators(pos, tests) {
                var locator = [];
                if (!$.isArray(tests)) tests = [ tests ];
                if (tests.length > 0) {
                    if (tests[0].alternation === undefined) {
                        locator = determineTestTemplate(pos, tests.slice()).locator.slice();
                        if (locator.length === 0) locator = tests[0].locator.slice();
                    } else {
                        $.each(tests, function(ndx, tst) {
                            if (tst.def !== "") {
                                if (locator.length === 0) locator = tst.locator.slice(); else {
                                    for (var i = 0; i < locator.length; i++) {
                                        if (tst.locator[i] && locator[i].toString().indexOf(tst.locator[i]) === -1) {
                                            locator[i] += "," + tst.locator[i];
                                        }
                                    }
                                }
                            }
                        });
                    }
                }
                return locator;
            }
            if (pos > -1) {
                if (ndxIntlzr === undefined) {
                    var previousPos = pos - 1, test;
                    while ((test = getMaskSet().validPositions[previousPos] || getMaskSet().tests[previousPos]) === undefined && previousPos > -1) {
                        previousPos--;
                    }
                    if (test !== undefined && previousPos > -1) {
                        ndxInitializer = mergeLocators(previousPos, test);
                        cacheDependency = ndxInitializer.join("");
                        testPos = previousPos;
                    }
                }
                if (getMaskSet().tests[pos] && getMaskSet().tests[pos][0].cd === cacheDependency) {
                    return getMaskSet().tests[pos];
                }
                for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {
                    var match = resolveTestFromToken(maskTokens[mtndx], ndxInitializer, [ mtndx ]);
                    if (match && testPos === pos || testPos > pos) {
                        break;
                    }
                }
            }
            if (matches.length === 0 || insertStop) {
                matches.push({
                    match: {
                        fn: null,
                        optionality: false,
                        casing: null,
                        def: "",
                        placeholder: ""
                    },
                    locator: [],
                    mloc: {},
                    cd: cacheDependency
                });
            }
            if (ndxIntlzr !== undefined && getMaskSet().tests[pos]) {
                return $.extend(true, [], matches);
            }
            getMaskSet().tests[pos] = $.extend(true, [], matches);
            return getMaskSet().tests[pos];
        }
        function getBufferTemplate() {
            if (getMaskSet()._buffer === undefined) {
                getMaskSet()._buffer = getMaskTemplate(false, 1);
                if (getMaskSet().buffer === undefined) getMaskSet().buffer = getMaskSet()._buffer.slice();
            }
            return getMaskSet()._buffer;
        }
        function getBuffer(noCache) {
            if (getMaskSet().buffer === undefined || noCache === true) {
                getMaskSet().buffer = getMaskTemplate(true, getLastValidPosition(), true);
                if (getMaskSet()._buffer === undefined) getMaskSet()._buffer = getMaskSet().buffer.slice();
            }
            return getMaskSet().buffer;
        }
        function refreshFromBuffer(start, end, buffer) {
            var i, p;
            if (start === true) {
                resetMaskSet();
                start = 0;
                end = buffer.length;
            } else {
                for (i = start; i < end; i++) {
                    delete getMaskSet().validPositions[i];
                }
            }
            p = start;
            for (i = start; i < end; i++) {
                resetMaskSet(true);
                if (buffer[i] !== opts.skipOptionalPartCharacter) {
                    var valResult = isValid(p, buffer[i], true, true);
                    if (valResult !== false) {
                        resetMaskSet(true);
                        p = valResult.caret !== undefined ? valResult.caret : valResult.pos + 1;
                    }
                }
            }
        }
        function casing(elem, test, pos) {
            switch (opts.casing || test.casing) {
              case "upper":
                elem = elem.toUpperCase();
                break;

              case "lower":
                elem = elem.toLowerCase();
                break;

              case "title":
                var posBefore = getMaskSet().validPositions[pos - 1];
                if (pos === 0 || posBefore && posBefore.input === String.fromCharCode(Inputmask.keyCode.SPACE)) {
                    elem = elem.toUpperCase();
                } else {
                    elem = elem.toLowerCase();
                }
                break;

              default:
                if ($.isFunction(opts.casing)) {
                    var args = Array.prototype.slice.call(arguments);
                    args.push(getMaskSet().validPositions);
                    elem = opts.casing.apply(this, args);
                }
            }
            return elem;
        }
        function checkAlternationMatch(altArr1, altArr2, na) {
            var altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1), isMatch = false, naArr = na !== undefined ? na.split(",") : [], naNdx;
            for (var i = 0; i < naArr.length; i++) {
                if ((naNdx = altArr1.indexOf(naArr[i])) !== -1) {
                    altArr1.splice(naNdx, 1);
                }
            }
            for (var alndx = 0; alndx < altArr1.length; alndx++) {
                if ($.inArray(altArr1[alndx], altArrC) !== -1) {
                    isMatch = true;
                    break;
                }
            }
            return isMatch;
        }
        function alternate(pos, c, strict, fromSetValid, rAltPos) {
            var validPsClone = $.extend(true, {}, getMaskSet().validPositions), lastAlt, alternation, isValidRslt = false, altPos, prevAltPos, i, validPos, decisionPos, lAltPos = rAltPos !== undefined ? rAltPos : getLastValidPosition();
            if (lAltPos === -1 && rAltPos === undefined) {
                lastAlt = 0;
                prevAltPos = getTest(lastAlt);
                alternation = prevAltPos.alternation;
            } else {
                for (;lAltPos >= 0; lAltPos--) {
                    altPos = getMaskSet().validPositions[lAltPos];
                    if (altPos && altPos.alternation !== undefined) {
                        if (prevAltPos && prevAltPos.locator[altPos.alternation] !== altPos.locator[altPos.alternation]) {
                            break;
                        }
                        lastAlt = lAltPos;
                        alternation = getMaskSet().validPositions[lastAlt].alternation;
                        prevAltPos = altPos;
                    }
                }
            }
            if (alternation !== undefined) {
                decisionPos = parseInt(lastAlt);
                getMaskSet().excludes[decisionPos] = getMaskSet().excludes[decisionPos] || [];
                if (pos !== true) {
                    getMaskSet().excludes[decisionPos].push(getDecisionTaker(prevAltPos));
                }
                var validInputsClone = [], staticInputsBeforePos = 0;
                for (i = decisionPos; i < getLastValidPosition(undefined, true) + 1; i++) {
                    validPos = getMaskSet().validPositions[i];
                    if (validPos && validPos.generatedInput !== true) {
                        validInputsClone.push(validPos.input);
                    } else if (i < pos) staticInputsBeforePos++;
                    delete getMaskSet().validPositions[i];
                }
                while (getMaskSet().excludes[decisionPos] && getMaskSet().excludes[decisionPos].length < 10) {
                    var posOffset = staticInputsBeforePos * -1, validInputs = validInputsClone.slice();
                    getMaskSet().tests[decisionPos] = undefined;
                    resetMaskSet(true);
                    isValidRslt = true;
                    while (validInputs.length > 0) {
                        var input = validInputs.shift();
                        if (!(isValidRslt = isValid(getLastValidPosition(undefined, true) + 1, input, false, fromSetValid, true))) {
                            break;
                        }
                    }
                    if (isValidRslt && c !== undefined) {
                        var targetLvp = getLastValidPosition(pos) + 1;
                        for (i = decisionPos; i < getLastValidPosition() + 1; i++) {
                            validPos = getMaskSet().validPositions[i];
                            if ((validPos === undefined || validPos.match.fn == null) && i < pos + posOffset) {
                                posOffset++;
                            }
                        }
                        pos = pos + posOffset;
                        isValidRslt = isValid(pos > targetLvp ? targetLvp : pos, c, strict, fromSetValid, true);
                    }
                    if (!isValidRslt) {
                        resetMaskSet();
                        prevAltPos = getTest(decisionPos);
                        getMaskSet().validPositions = $.extend(true, {}, validPsClone);
                        if (getMaskSet().excludes[decisionPos]) {
                            var decisionTaker = getDecisionTaker(prevAltPos);
                            if (getMaskSet().excludes[decisionPos].indexOf(decisionTaker) !== -1) {
                                isValidRslt = alternate(pos, c, strict, fromSetValid, decisionPos - 1);
                                break;
                            }
                            getMaskSet().excludes[decisionPos].push(decisionTaker);
                            for (i = decisionPos; i < getLastValidPosition(undefined, true) + 1; i++) delete getMaskSet().validPositions[i];
                        } else {
                            isValidRslt = alternate(pos, c, strict, fromSetValid, decisionPos - 1);
                            break;
                        }
                    } else break;
                }
            }
            getMaskSet().excludes[decisionPos] = undefined;
            return isValidRslt;
        }
        function isValid(pos, c, strict, fromSetValid, fromAlternate, validateOnly) {
            function isSelection(posObj) {
                return isRTL ? posObj.begin - posObj.end > 1 || posObj.begin - posObj.end === 1 : posObj.end - posObj.begin > 1 || posObj.end - posObj.begin === 1;
            }
            strict = strict === true;
            var maskPos = pos;
            if (pos.begin !== undefined) {
                maskPos = isRTL ? pos.end : pos.begin;
            }
            function _isValid(position, c, strict) {
                var rslt = false;
                $.each(getTests(position), function(ndx, tst) {
                    var test = tst.match;
                    getBuffer(true);
                    rslt = test.fn != null ? test.fn.test(c, getMaskSet(), position, strict, opts, isSelection(pos)) : (c === test.def || c === opts.skipOptionalPartCharacter) && test.def !== "" ? {
                        c: getPlaceholder(position, test, true) || test.def,
                        pos: position
                    } : false;
                    if (rslt !== false) {
                        var elem = rslt.c !== undefined ? rslt.c : c, validatedPos = position;
                        elem = elem === opts.skipOptionalPartCharacter && test.fn === null ? getPlaceholder(position, test, true) || test.def : elem;
                        if (rslt.remove !== undefined) {
                            if (!$.isArray(rslt.remove)) rslt.remove = [ rslt.remove ];
                            $.each(rslt.remove.sort(function(a, b) {
                                return b - a;
                            }), function(ndx, lmnt) {
                                revalidateMask({
                                    begin: lmnt,
                                    end: lmnt + 1
                                });
                            });
                        }
                        if (rslt.insert !== undefined) {
                            if (!$.isArray(rslt.insert)) rslt.insert = [ rslt.insert ];
                            $.each(rslt.insert.sort(function(a, b) {
                                return a - b;
                            }), function(ndx, lmnt) {
                                isValid(lmnt.pos, lmnt.c, true, fromSetValid);
                            });
                        }
                        if (rslt !== true && rslt.pos !== undefined && rslt.pos !== position) {
                            validatedPos = rslt.pos;
                        }
                        if (rslt !== true && rslt.pos === undefined && rslt.c === undefined) {
                            return false;
                        }
                        if (!revalidateMask(pos, $.extend({}, tst, {
                            input: casing(elem, test, validatedPos)
                        }), fromSetValid, validatedPos)) {
                            rslt = false;
                        }
                        return false;
                    }
                });
                return rslt;
            }
            var result = true, positionsClone = $.extend(true, {}, getMaskSet().validPositions);
            if ($.isFunction(opts.preValidation) && !strict && fromSetValid !== true && validateOnly !== true) {
                result = opts.preValidation(getBuffer(), maskPos, c, isSelection(pos), opts, getMaskSet());
            }
            if (result === true) {
                trackbackPositions(undefined, maskPos, true);
                if (maxLength === undefined || maskPos < maxLength) {
                    result = _isValid(maskPos, c, strict);
                    if ((!strict || fromSetValid === true) && result === false && validateOnly !== true) {
                        var currentPosValid = getMaskSet().validPositions[maskPos];
                        if (currentPosValid && currentPosValid.match.fn === null && (currentPosValid.match.def === c || c === opts.skipOptionalPartCharacter)) {
                            result = {
                                caret: seekNext(maskPos)
                            };
                        } else {
                            if ((opts.insertMode || getMaskSet().validPositions[seekNext(maskPos)] === undefined) && (!isMask(maskPos, true) || getMaskSet().jitOffset[maskPos])) {
                                if (getMaskSet().jitOffset[maskPos] && getMaskSet().validPositions[seekNext(maskPos)] === undefined) {
                                    result = isValid(maskPos + getMaskSet().jitOffset[maskPos], c, strict);
                                    if (result !== false) result.caret = maskPos;
                                } else for (var nPos = maskPos + 1, snPos = seekNext(maskPos); nPos <= snPos; nPos++) {
                                    result = _isValid(nPos, c, strict);
                                    if (result !== false) {
                                        result = trackbackPositions(maskPos, result.pos !== undefined ? result.pos : nPos) || result;
                                        maskPos = nPos;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (result === false && opts.keepStatic !== false && (opts.regex == null || isComplete(getBuffer())) && !strict && fromAlternate !== true) {
                    result = alternate(maskPos, c, strict, fromSetValid);
                }
                if (result === true) {
                    result = {
                        pos: maskPos
                    };
                }
            }
            if ($.isFunction(opts.postValidation) && result !== false && !strict && fromSetValid !== true && validateOnly !== true) {
                var postResult = opts.postValidation(getBuffer(true), pos.begin !== undefined ? isRTL ? pos.end : pos.begin : pos, result, opts);
                if (postResult !== undefined) {
                    if (postResult.refreshFromBuffer && postResult.buffer) {
                        var refresh = postResult.refreshFromBuffer;
                        refreshFromBuffer(refresh === true ? refresh : refresh.start, refresh.end, postResult.buffer);
                    }
                    result = postResult === true ? result : postResult;
                }
            }
            if (result && result.pos === undefined) {
                result.pos = maskPos;
            }
            if (result === false || validateOnly === true) {
                resetMaskSet(true);
                getMaskSet().validPositions = $.extend(true, {}, positionsClone);
            }
            return result;
        }
        function trackbackPositions(originalPos, newPos, fillOnly) {
            var result;
            if (originalPos === undefined) {
                for (originalPos = newPos - 1; originalPos > 0; originalPos--) {
                    if (getMaskSet().validPositions[originalPos]) break;
                }
            }
            for (var ps = originalPos; ps < newPos; ps++) {
                if (getMaskSet().validPositions[ps] === undefined && !isMask(ps, true)) {
                    var vp = ps == 0 ? getTest(ps) : getMaskSet().validPositions[ps - 1];
                    if (vp) {
                        var tests = getTests(ps).slice();
                        if (tests[tests.length - 1].match.def === "") tests.pop();
                        var bestMatch = determineTestTemplate(ps, tests);
                        bestMatch = $.extend({}, bestMatch, {
                            input: getPlaceholder(ps, bestMatch.match, true) || bestMatch.match.def
                        });
                        bestMatch.generatedInput = true;
                        revalidateMask(ps, bestMatch, true);
                        if (fillOnly !== true) {
                            var cvpInput = getMaskSet().validPositions[newPos].input;
                            getMaskSet().validPositions[newPos] = undefined;
                            result = isValid(newPos, cvpInput, true, true);
                        }
                    }
                }
            }
            return result;
        }
        function revalidateMask(pos, validTest, fromSetValid, validatedPos) {
            function IsEnclosedStatic(pos, valids, selection) {
                var posMatch = valids[pos];
                if (posMatch !== undefined && (posMatch.match.fn === null && posMatch.match.optionality !== true || posMatch.input === opts.radixPoint)) {
                    var prevMatch = selection.begin <= pos - 1 ? valids[pos - 1] && valids[pos - 1].match.fn === null && valids[pos - 1] : valids[pos - 1], nextMatch = selection.end > pos + 1 ? valids[pos + 1] && valids[pos + 1].match.fn === null && valids[pos + 1] : valids[pos + 1];
                    return prevMatch && nextMatch;
                }
                return false;
            }
            var begin = pos.begin !== undefined ? pos.begin : pos, end = pos.end !== undefined ? pos.end : pos;
            if (pos.begin > pos.end) {
                begin = pos.end;
                end = pos.begin;
            }
            validatedPos = validatedPos !== undefined ? validatedPos : begin;
            if (begin !== end || opts.insertMode && getMaskSet().validPositions[validatedPos] !== undefined && fromSetValid === undefined) {
                var positionsClone = $.extend(true, {}, getMaskSet().validPositions), lvp = getLastValidPosition(undefined, true), i;
                getMaskSet().p = begin;
                for (i = lvp; i >= begin; i--) {
                    if (getMaskSet().validPositions[i] && getMaskSet().validPositions[i].match.nativeDef === "+") {
                        opts.isNegative = false;
                    }
                    delete getMaskSet().validPositions[i];
                }
                var valid = true, j = validatedPos, vps = getMaskSet().validPositions, needsValidation = false, posMatch = j, i = j;
                if (validTest) {
                    getMaskSet().validPositions[validatedPos] = $.extend(true, {}, validTest);
                    posMatch++;
                    j++;
                    if (begin < end) i++;
                }
                for (;i <= lvp; i++) {
                    var t = positionsClone[i];
                    if (t !== undefined && (i >= end || i >= begin && t.generatedInput !== true && IsEnclosedStatic(i, positionsClone, {
                        begin: begin,
                        end: end
                    }))) {
                        while (getTest(posMatch).match.def !== "") {
                            if (needsValidation === false && positionsClone[posMatch] && positionsClone[posMatch].match.nativeDef === t.match.nativeDef) {
                                getMaskSet().validPositions[posMatch] = $.extend(true, {}, positionsClone[posMatch]);
                                getMaskSet().validPositions[posMatch].input = t.input;
                                trackbackPositions(undefined, posMatch, true);
                                j = posMatch + 1;
                                valid = true;
                            } else if (opts.shiftPositions && positionCanMatchDefinition(posMatch, t.match.def)) {
                                var result = isValid(posMatch, t.input, true, true);
                                valid = result !== false;
                                j = result.caret || result.insert ? getLastValidPosition() : posMatch + 1;
                                needsValidation = true;
                            } else {
                                valid = t.generatedInput === true || t.input === opts.radixPoint && opts.numericInput === true;
                            }
                            if (valid) break;
                            if (!valid && posMatch > end && isMask(posMatch, true) && (t.match.fn !== null || posMatch > getMaskSet().maskLength)) {
                                break;
                            }
                            posMatch++;
                        }
                        if (getTest(posMatch).match.def == "") valid = false;
                        posMatch = j;
                    }
                    if (!valid) break;
                }
                if (!valid) {
                    getMaskSet().validPositions = $.extend(true, {}, positionsClone);
                    resetMaskSet(true);
                    return false;
                }
            } else if (validTest) {
                getMaskSet().validPositions[validatedPos] = $.extend(true, {}, validTest);
            }
            resetMaskSet(true);
            return true;
        }
        function isMask(pos, strict) {
            var test = getTestTemplate(pos).match;
            if (test.def === "") test = getTest(pos).match;
            if (test.fn != null) {
                return test.fn;
            }
            if (strict !== true && pos > -1) {
                var tests = getTests(pos);
                return tests.length > 1 + (tests[tests.length - 1].match.def === "" ? 1 : 0);
            }
            return false;
        }
        function seekNext(pos, newBlock) {
            var position = pos + 1;
            while (getTest(position).match.def !== "" && (newBlock === true && (getTest(position).match.newBlockMarker !== true || !isMask(position)) || newBlock !== true && !isMask(position))) {
                position++;
            }
            return position;
        }
        function seekPrevious(pos, newBlock) {
            var position = pos, tests;
            if (position <= 0) return 0;
            while (--position > 0 && (newBlock === true && getTest(position).match.newBlockMarker !== true || newBlock !== true && !isMask(position) && (tests = getTests(position),
            tests.length < 2 || tests.length === 2 && tests[1].match.def === ""))) {}
            return position;
        }
        function writeBuffer(input, buffer, caretPos, event, triggerEvents) {
            if (event && $.isFunction(opts.onBeforeWrite)) {
                var result = opts.onBeforeWrite.call(inputmask, event, buffer, caretPos, opts);
                if (result) {
                    if (result.refreshFromBuffer) {
                        var refresh = result.refreshFromBuffer;
                        refreshFromBuffer(refresh === true ? refresh : refresh.start, refresh.end, result.buffer || buffer);
                        buffer = getBuffer(true);
                    }
                    if (caretPos !== undefined) caretPos = result.caret !== undefined ? result.caret : caretPos;
                }
            }
            if (input !== undefined) {
                input.inputmask._valueSet(buffer.join(""));
                if (caretPos !== undefined && (event === undefined || event.type !== "blur")) {
                    caret(input, caretPos);
                } else renderColorMask(input, caretPos, buffer.length === 0);
                if (triggerEvents === true) {
                    var $input = $(input), nptVal = input.inputmask._valueGet();
                    skipInputEvent = true;
                    $input.trigger("input");
                    setTimeout(function() {
                        if (nptVal === getBufferTemplate().join("")) {
                            $input.trigger("cleared");
                        } else if (isComplete(buffer) === true) {
                            $input.trigger("complete");
                        }
                    }, 0);
                }
            }
        }
        function getPlaceholder(pos, test, returnPL) {
            test = test || getTest(pos).match;
            if (test.placeholder !== undefined || returnPL === true) {
                return $.isFunction(test.placeholder) ? test.placeholder(opts) : test.placeholder;
            } else if (test.fn === null) {
                if (pos > -1 && getMaskSet().validPositions[pos] === undefined) {
                    var tests = getTests(pos), staticAlternations = [], prevTest;
                    if (tests.length > 1 + (tests[tests.length - 1].match.def === "" ? 1 : 0)) {
                        for (var i = 0; i < tests.length; i++) {
                            if (tests[i].match.optionality !== true && tests[i].match.optionalQuantifier !== true && (tests[i].match.fn === null || (prevTest === undefined || tests[i].match.fn.test(prevTest.match.def, getMaskSet(), pos, true, opts) !== false))) {
                                staticAlternations.push(tests[i]);
                                if (tests[i].match.fn === null) prevTest = tests[i];
                                if (staticAlternations.length > 1) {
                                    if (/[0-9a-bA-Z]/.test(staticAlternations[0].match.def)) {
                                        return opts.placeholder.charAt(pos % opts.placeholder.length);
                                    }
                                }
                            }
                        }
                    }
                }
                return test.def;
            }
            return opts.placeholder.charAt(pos % opts.placeholder.length);
        }
        function HandleNativePlaceholder(npt, value) {
            if (ie) {
                if (npt.inputmask._valueGet() !== value && (npt.placeholder !== value || npt.placeholder === "")) {
                    var buffer = getBuffer().slice(), nptValue = npt.inputmask._valueGet();
                    if (nptValue !== value) {
                        var lvp = getLastValidPosition();
                        if (lvp === -1 && nptValue === getBufferTemplate().join("")) {
                            buffer = [];
                        } else if (lvp !== -1) {
                            clearOptionalTail(buffer);
                        }
                        writeBuffer(npt, buffer);
                    }
                }
            } else if (npt.placeholder !== value) {
                npt.placeholder = value;
                if (npt.placeholder === "") npt.removeAttribute("placeholder");
            }
        }
        var EventRuler = {
            on: function(input, eventName, eventHandler) {
                var ev = function(e) {
                    var that = this;
                    if (that.inputmask === undefined && this.nodeName !== "FORM") {
                        var imOpts = $.data(that, "_inputmask_opts");
                        if (imOpts) new Inputmask(imOpts).mask(that); else EventRuler.off(that);
                    } else if (e.type !== "setvalue" && this.nodeName !== "FORM" && (that.disabled || that.readOnly && !(e.type === "keydown" && (e.ctrlKey && e.keyCode === 67) || opts.tabThrough === false && e.keyCode === Inputmask.keyCode.TAB))) {
                        e.preventDefault();
                    } else {
                        switch (e.type) {
                          case "input":
                            if (skipInputEvent === true) {
                                skipInputEvent = false;
                                return e.preventDefault();
                            }
                            if (mobile) {
                                var args = arguments;
                                setTimeout(function() {
                                    eventHandler.apply(that, args);
                                    caret(that, that.inputmask.caretPos, undefined, true);
                                }, 0);
                                return false;
                            }
                            break;

                          case "keydown":
                            skipKeyPressEvent = false;
                            skipInputEvent = false;
                            break;

                          case "keypress":
                            if (skipKeyPressEvent === true) {
                                return e.preventDefault();
                            }
                            skipKeyPressEvent = true;
                            break;

                          case "click":
                            if (iemobile || iphone) {
                                var args = arguments;
                                setTimeout(function() {
                                    eventHandler.apply(that, args);
                                }, 0);
                                return false;
                            }
                            break;
                        }
                        var returnVal = eventHandler.apply(that, arguments);
                        if (returnVal === false) {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        return returnVal;
                    }
                };
                input.inputmask.events[eventName] = input.inputmask.events[eventName] || [];
                input.inputmask.events[eventName].push(ev);
                if ($.inArray(eventName, [ "submit", "reset" ]) !== -1) {
                    if (input.form !== null) $(input.form).on(eventName, ev);
                } else {
                    $(input).on(eventName, ev);
                }
            },
            off: function(input, event) {
                if (input.inputmask && input.inputmask.events) {
                    var events;
                    if (event) {
                        events = [];
                        events[event] = input.inputmask.events[event];
                    } else {
                        events = input.inputmask.events;
                    }
                    $.each(events, function(eventName, evArr) {
                        while (evArr.length > 0) {
                            var ev = evArr.pop();
                            if ($.inArray(eventName, [ "submit", "reset" ]) !== -1) {
                                if (input.form !== null) $(input.form).off(eventName, ev);
                            } else {
                                $(input).off(eventName, ev);
                            }
                        }
                        delete input.inputmask.events[eventName];
                    });
                }
            }
        };
        var EventHandlers = {
            keydownEvent: function(e) {
                var input = this, $input = $(input), k = e.keyCode, pos = caret(input);
                if (k === Inputmask.keyCode.BACKSPACE || k === Inputmask.keyCode.DELETE || iphone && k === Inputmask.keyCode.BACKSPACE_SAFARI || e.ctrlKey && k === Inputmask.keyCode.X && !isInputEventSupported("cut")) {
                    e.preventDefault();
                    handleRemove(input, k, pos);
                    writeBuffer(input, getBuffer(true), getMaskSet().p, e, input.inputmask._valueGet() !== getBuffer().join(""));
                } else if (k === Inputmask.keyCode.END || k === Inputmask.keyCode.PAGE_DOWN) {
                    e.preventDefault();
                    var caretPos = seekNext(getLastValidPosition());
                    caret(input, e.shiftKey ? pos.begin : caretPos, caretPos, true);
                } else if (k === Inputmask.keyCode.HOME && !e.shiftKey || k === Inputmask.keyCode.PAGE_UP) {
                    e.preventDefault();
                    caret(input, 0, e.shiftKey ? pos.begin : 0, true);
                } else if ((opts.undoOnEscape && k === Inputmask.keyCode.ESCAPE || k === 90 && e.ctrlKey) && e.altKey !== true) {
                    checkVal(input, true, false, undoValue.split(""));
                    $input.trigger("click");
                } else if (k === Inputmask.keyCode.INSERT && !(e.shiftKey || e.ctrlKey)) {
                    opts.insertMode = !opts.insertMode;
                    input.setAttribute("im-insert", opts.insertMode);
                } else if (opts.tabThrough === true && k === Inputmask.keyCode.TAB) {
                    if (e.shiftKey === true) {
                        if (getTest(pos.begin).match.fn === null) {
                            pos.begin = seekNext(pos.begin);
                        }
                        pos.end = seekPrevious(pos.begin, true);
                        pos.begin = seekPrevious(pos.end, true);
                    } else {
                        pos.begin = seekNext(pos.begin, true);
                        pos.end = seekNext(pos.begin, true);
                        if (pos.end < getMaskSet().maskLength) pos.end--;
                    }
                    if (pos.begin < getMaskSet().maskLength) {
                        e.preventDefault();
                        caret(input, pos.begin, pos.end);
                    }
                }
                opts.onKeyDown.call(this, e, getBuffer(), caret(input).begin, opts);
                ignorable = $.inArray(k, opts.ignorables) !== -1;
            },
            keypressEvent: function(e, checkval, writeOut, strict, ndx) {
                var input = this, $input = $(input), k = e.which || e.charCode || e.keyCode;
                if (checkval !== true && (!(e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable))) {
                    if (k === Inputmask.keyCode.ENTER && undoValue !== getBuffer().join("")) {
                        undoValue = getBuffer().join("");
                        setTimeout(function() {
                            $input.trigger("change");
                        }, 0);
                    }
                    return true;
                } else {
                    if (k) {
                        if (k === 46 && e.shiftKey === false && opts.radixPoint !== "") k = opts.radixPoint.charCodeAt(0);
                        var pos = checkval ? {
                            begin: ndx,
                            end: ndx
                        } : caret(input), forwardPosition, c = String.fromCharCode(k), offset = 0;
                        if (opts._radixDance && opts.numericInput) {
                            var caretPos = getBuffer().indexOf(opts.radixPoint.charAt(0)) + 1;
                            if (pos.begin <= caretPos) {
                                if (k === opts.radixPoint.charCodeAt(0)) offset = 1;
                                pos.begin -= 1;
                                pos.end -= 1;
                            }
                        }
                        getMaskSet().writeOutBuffer = true;
                        var valResult = isValid(pos, c, strict);
                        if (valResult !== false) {
                            resetMaskSet(true);
                            forwardPosition = valResult.caret !== undefined ? valResult.caret : seekNext(valResult.pos.begin ? valResult.pos.begin : valResult.pos);
                            getMaskSet().p = forwardPosition;
                        }
                        forwardPosition = (opts.numericInput && valResult.caret === undefined ? seekPrevious(forwardPosition) : forwardPosition) + offset;
                        if (writeOut !== false) {
                            setTimeout(function() {
                                opts.onKeyValidation.call(input, k, valResult, opts);
                            }, 0);
                            if (getMaskSet().writeOutBuffer && valResult !== false) {
                                var buffer = getBuffer();
                                writeBuffer(input, buffer, forwardPosition, e, checkval !== true);
                            }
                        }
                        e.preventDefault();
                        if (checkval) {
                            if (valResult !== false) valResult.forwardPosition = forwardPosition;
                            return valResult;
                        }
                    }
                }
            },
            pasteEvent: function(e) {
                var input = this, ev = e.originalEvent || e, $input = $(input), inputValue = input.inputmask._valueGet(true), caretPos = caret(input), tempValue;
                if (isRTL) {
                    tempValue = caretPos.end;
                    caretPos.end = caretPos.begin;
                    caretPos.begin = tempValue;
                }
                var valueBeforeCaret = inputValue.substr(0, caretPos.begin), valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);
                if (valueBeforeCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(0, caretPos.begin).join("")) valueBeforeCaret = "";
                if (valueAfterCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(caretPos.end).join("")) valueAfterCaret = "";
                if (window.clipboardData && window.clipboardData.getData) {
                    inputValue = valueBeforeCaret + window.clipboardData.getData("Text") + valueAfterCaret;
                } else if (ev.clipboardData && ev.clipboardData.getData) {
                    inputValue = valueBeforeCaret + ev.clipboardData.getData("text/plain") + valueAfterCaret;
                } else return true;
                var pasteValue = inputValue;
                if ($.isFunction(opts.onBeforePaste)) {
                    pasteValue = opts.onBeforePaste.call(inputmask, inputValue, opts);
                    if (pasteValue === false) {
                        return e.preventDefault();
                    }
                    if (!pasteValue) {
                        pasteValue = inputValue;
                    }
                }
                checkVal(input, false, false, pasteValue.toString().split(""));
                writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()), e, undoValue !== getBuffer().join(""));
                return e.preventDefault();
            },
            inputFallBackEvent: function(e) {
                function radixPointHandler(input, inputValue, caretPos) {
                    if (inputValue.charAt(caretPos.begin - 1) === "." && opts.radixPoint !== "") {
                        inputValue = inputValue.split("");
                        inputValue[caretPos.begin - 1] = opts.radixPoint.charAt(0);
                        inputValue = inputValue.join("");
                    }
                    return inputValue;
                }
                function ieMobileHandler(input, inputValue, caretPos) {
                    if (iemobile) {
                        var inputChar = inputValue.replace(getBuffer().join(""), "");
                        if (inputChar.length === 1) {
                            var iv = inputValue.split("");
                            iv.splice(caretPos.begin, 0, inputChar);
                            inputValue = iv.join("");
                        }
                    }
                    return inputValue;
                }
                var input = this, inputValue = input.inputmask._valueGet();
                if (getBuffer().join("") !== inputValue) {
                    var caretPos = caret(input);
                    inputValue = radixPointHandler(input, inputValue, caretPos);
                    inputValue = ieMobileHandler(input, inputValue, caretPos);
                    if (getBuffer().join("") !== inputValue) {
                        var buffer = getBuffer().join(""), offset = !opts.numericInput && inputValue.length > buffer.length ? -1 : 0, frontPart = inputValue.substr(0, caretPos.begin), backPart = inputValue.substr(caretPos.begin), frontBufferPart = buffer.substr(0, caretPos.begin + offset), backBufferPart = buffer.substr(caretPos.begin + offset);
                        var selection = caretPos, entries = "", isEntry = false;
                        if (frontPart !== frontBufferPart) {
                            var fpl = (isEntry = frontPart.length >= frontBufferPart.length) ? frontPart.length : frontBufferPart.length, i;
                            for (i = 0; frontPart.charAt(i) === frontBufferPart.charAt(i) && i < fpl; i++) ;
                            if (isEntry) {
                                selection.begin = i - offset;
                                entries += frontPart.slice(i, selection.end);
                            }
                        }
                        if (backPart !== backBufferPart) {
                            if (backPart.length > backBufferPart.length) {
                                entries += backPart.slice(0, 1);
                            } else {
                                if (backPart.length < backBufferPart.length) {
                                    selection.end += backBufferPart.length - backPart.length;
                                    if (!isEntry && opts.radixPoint !== "" && backPart === "" && frontPart.charAt(selection.begin + offset - 1) === opts.radixPoint) {
                                        selection.begin--;
                                        entries = opts.radixPoint;
                                    }
                                }
                            }
                        }
                        writeBuffer(input, getBuffer(), {
                            begin: selection.begin + offset,
                            end: selection.end + offset
                        });
                        if (entries.length > 0) {
                            $.each(entries.split(""), function(ndx, entry) {
                                var keypress = new $.Event("keypress");
                                keypress.which = entry.charCodeAt(0);
                                ignorable = false;
                                EventHandlers.keypressEvent.call(input, keypress);
                            });
                        } else {
                            if (selection.begin === selection.end - 1) {
                                selection.begin = seekPrevious(selection.begin + 1);
                                if (selection.begin === selection.end - 1) {
                                    caret(input, selection.begin);
                                } else {
                                    caret(input, selection.begin, selection.end);
                                }
                            }
                            var keydown = new $.Event("keydown");
                            keydown.keyCode = opts.numericInput ? Inputmask.keyCode.BACKSPACE : Inputmask.keyCode.DELETE;
                            EventHandlers.keydownEvent.call(input, keydown);
                        }
                        e.preventDefault();
                    }
                }
            },
            beforeInputEvent: function(e) {
                if (e.cancelable) {
                    var input = this;
                    switch (e.inputType) {
                      case "insertText":
                        $.each(e.data.split(""), function(ndx, entry) {
                            var keypress = new $.Event("keypress");
                            keypress.which = entry.charCodeAt(0);
                            ignorable = false;
                            EventHandlers.keypressEvent.call(input, keypress);
                        });
                        return e.preventDefault();

                      case "deleteContentBackward":
                        var keydown = new $.Event("keydown");
                        keydown.keyCode = Inputmask.keyCode.BACKSPACE;
                        EventHandlers.keydownEvent.call(input, keydown);
                        return e.preventDefault();

                      case "deleteContentForward":
                        var keydown = new $.Event("keydown");
                        keydown.keyCode = Inputmask.keyCode.DELETE;
                        EventHandlers.keydownEvent.call(input, keydown);
                        return e.preventDefault();
                    }
                }
            },
            setValueEvent: function(e) {
                this.inputmask.refreshValue = false;
                var input = this, value = e && e.detail ? e.detail[0] : arguments[1], value = value || input.inputmask._valueGet(true);
                if ($.isFunction(opts.onBeforeMask)) value = opts.onBeforeMask.call(inputmask, value, opts) || value;
                value = value.split("");
                checkVal(input, true, false, value);
                undoValue = getBuffer().join("");
                if ((opts.clearMaskOnLostFocus || opts.clearIncomplete) && input.inputmask._valueGet() === getBufferTemplate().join("")) {
                    input.inputmask._valueSet("");
                }
            },
            focusEvent: function(e) {
                var input = this, nptValue = input.inputmask._valueGet();
                if (opts.showMaskOnFocus) {
                    if (nptValue !== getBuffer().join("")) {
                        writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()));
                    } else if (mouseEnter === false) {
                        caret(input, seekNext(getLastValidPosition()));
                    }
                }
                if (opts.positionCaretOnTab === true && mouseEnter === false) {
                    EventHandlers.clickEvent.apply(input, [ e, true ]);
                }
                undoValue = getBuffer().join("");
            },
            mouseleaveEvent: function(e) {
                var input = this;
                mouseEnter = false;
                if (opts.clearMaskOnLostFocus && document.activeElement !== input) {
                    HandleNativePlaceholder(input, originalPlaceholder);
                }
            },
            clickEvent: function(e, tabbed) {
                function doRadixFocus(clickPos) {
                    if (opts.radixPoint !== "") {
                        var vps = getMaskSet().validPositions;
                        if (vps[clickPos] === undefined || vps[clickPos].input === getPlaceholder(clickPos)) {
                            if (clickPos < seekNext(-1)) return true;
                            var radixPos = $.inArray(opts.radixPoint, getBuffer());
                            if (radixPos !== -1) {
                                for (var vp in vps) {
                                    if (radixPos < vp && vps[vp].input !== getPlaceholder(vp)) {
                                        return false;
                                    }
                                }
                                return true;
                            }
                        }
                    }
                    return false;
                }
                var input = this;
                setTimeout(function() {
                    if (document.activeElement === input) {
                        var selectedCaret = caret(input);
                        if (tabbed) {
                            if (isRTL) {
                                selectedCaret.end = selectedCaret.begin;
                            } else {
                                selectedCaret.begin = selectedCaret.end;
                            }
                        }
                        if (selectedCaret.begin === selectedCaret.end) {
                            switch (opts.positionCaretOnClick) {
                              case "none":
                                break;

                              case "select":
                                caret(input, 0, getBuffer().length);
                                break;

                              case "ignore":
                                caret(input, seekNext(getLastValidPosition()));
                                break;

                              case "radixFocus":
                                if (doRadixFocus(selectedCaret.begin)) {
                                    var radixPos = getBuffer().join("").indexOf(opts.radixPoint);
                                    caret(input, opts.numericInput ? seekNext(radixPos) : radixPos);
                                    break;
                                }

                              default:
                                var clickPosition = selectedCaret.begin, lvclickPosition = getLastValidPosition(clickPosition, true), lastPosition = seekNext(lvclickPosition);
                                if (clickPosition < lastPosition) {
                                    caret(input, !isMask(clickPosition, true) && !isMask(clickPosition - 1, true) ? seekNext(clickPosition) : clickPosition);
                                } else {
                                    var lvp = getMaskSet().validPositions[lvclickPosition], tt = getTestTemplate(lastPosition, lvp ? lvp.match.locator : undefined, lvp), placeholder = getPlaceholder(lastPosition, tt.match);
                                    if (placeholder !== "" && getBuffer()[lastPosition] !== placeholder && tt.match.optionalQuantifier !== true && tt.match.newBlockMarker !== true || !isMask(lastPosition, opts.keepStatic) && tt.match.def === placeholder) {
                                        var newPos = seekNext(lastPosition);
                                        if (clickPosition >= newPos || clickPosition === lastPosition) {
                                            lastPosition = newPos;
                                        }
                                    }
                                    caret(input, lastPosition);
                                }
                                break;
                            }
                        }
                    }
                }, 0);
            },
            cutEvent: function(e) {
                var input = this, $input = $(input), pos = caret(input), ev = e.originalEvent || e;
                var clipboardData = window.clipboardData || ev.clipboardData, clipData = isRTL ? getBuffer().slice(pos.end, pos.begin) : getBuffer().slice(pos.begin, pos.end);
                clipboardData.setData("text", isRTL ? clipData.reverse().join("") : clipData.join(""));
                if (document.execCommand) document.execCommand("copy");
                handleRemove(input, Inputmask.keyCode.DELETE, pos);
                writeBuffer(input, getBuffer(), getMaskSet().p, e, undoValue !== getBuffer().join(""));
            },
            blurEvent: function(e) {
                var $input = $(this), input = this;
                if (input.inputmask) {
                    HandleNativePlaceholder(input, originalPlaceholder);
                    var nptValue = input.inputmask._valueGet(), buffer = getBuffer().slice();
                    if (nptValue !== "" || colorMask !== undefined) {
                        if (opts.clearMaskOnLostFocus) {
                            if (getLastValidPosition() === -1 && nptValue === getBufferTemplate().join("")) {
                                buffer = [];
                            } else {
                                clearOptionalTail(buffer);
                            }
                        }
                        if (isComplete(buffer) === false) {
                            setTimeout(function() {
                                $input.trigger("incomplete");
                            }, 0);
                            if (opts.clearIncomplete) {
                                resetMaskSet();
                                if (opts.clearMaskOnLostFocus) {
                                    buffer = [];
                                } else {
                                    buffer = getBufferTemplate().slice();
                                }
                            }
                        }
                        writeBuffer(input, buffer, undefined, e);
                    }
                    if (undoValue !== getBuffer().join("")) {
                        undoValue = buffer.join("");
                        $input.trigger("change");
                    }
                }
            },
            mouseenterEvent: function(e) {
                var input = this;
                mouseEnter = true;
                if (document.activeElement !== input && opts.showMaskOnHover) {
                    HandleNativePlaceholder(input, (isRTL ? getBuffer().slice().reverse() : getBuffer()).join(""));
                }
            },
            submitEvent: function(e) {
                if (undoValue !== getBuffer().join("")) {
                    $el.trigger("change");
                }
                if (opts.clearMaskOnLostFocus && getLastValidPosition() === -1 && el.inputmask._valueGet && el.inputmask._valueGet() === getBufferTemplate().join("")) {
                    el.inputmask._valueSet("");
                }
                if (opts.clearIncomplete && isComplete(getBuffer()) === false) {
                    el.inputmask._valueSet("");
                }
                if (opts.removeMaskOnSubmit) {
                    el.inputmask._valueSet(el.inputmask.unmaskedvalue(), true);
                    setTimeout(function() {
                        writeBuffer(el, getBuffer());
                    }, 0);
                }
            },
            resetEvent: function(e) {
                el.inputmask.refreshValue = true;
                setTimeout(function() {
                    $el.trigger("setvalue");
                }, 0);
            }
        };
        function checkVal(input, writeOut, strict, nptvl, initiatingEvent) {
            var inputmask = this || input.inputmask, inputValue = nptvl.slice(), charCodes = "", initialNdx = -1, result = undefined;
            function isTemplateMatch(ndx, charCodes) {
                var charCodeNdx = getMaskTemplate(true, 0, false).slice(ndx, seekNext(ndx)).join("").replace(/'/g, "").indexOf(charCodes);
                return charCodeNdx !== -1 && !isMask(ndx) && (getTest(ndx).match.nativeDef === charCodes.charAt(0) || getTest(ndx).match.fn === null && getTest(ndx).match.nativeDef === "'" + charCodes.charAt(0) || getTest(ndx).match.nativeDef === " " && (getTest(ndx + 1).match.nativeDef === charCodes.charAt(0) || getTest(ndx + 1).match.fn === null && getTest(ndx + 1).match.nativeDef === "'" + charCodes.charAt(0)));
            }
            resetMaskSet();
            if (!strict && opts.autoUnmask !== true) {
                var staticInput = getBufferTemplate().slice(0, seekNext(-1)).join(""), matches = inputValue.join("").match(new RegExp("^" + Inputmask.escapeRegex(staticInput), "g"));
                if (matches && matches.length > 0) {
                    inputValue.splice(0, matches.length * staticInput.length);
                    initialNdx = seekNext(initialNdx);
                }
            } else {
                initialNdx = seekNext(initialNdx);
            }
            if (initialNdx === -1) {
                getMaskSet().p = seekNext(initialNdx);
                initialNdx = 0;
            } else getMaskSet().p = initialNdx;
            inputmask.caretPos = {
                begin: initialNdx
            };
            $.each(inputValue, function(ndx, charCode) {
                if (charCode !== undefined) {
                    if (getMaskSet().validPositions[ndx] === undefined && inputValue[ndx] === getPlaceholder(ndx) && isMask(ndx, true) && isValid(ndx, inputValue[ndx], true, undefined, undefined, true) === false) {
                        getMaskSet().p++;
                    } else {
                        var keypress = new $.Event("_checkval");
                        keypress.which = charCode.charCodeAt(0);
                        charCodes += charCode;
                        var lvp = getLastValidPosition(undefined, true);
                        if (!isTemplateMatch(initialNdx, charCodes)) {
                            result = EventHandlers.keypressEvent.call(input, keypress, true, false, strict, inputmask.caretPos.begin);
                            if (result) {
                                initialNdx = inputmask.caretPos.begin + 1;
                                charCodes = "";
                            }
                        } else {
                            result = EventHandlers.keypressEvent.call(input, keypress, true, false, strict, lvp + 1);
                        }
                        if (result) {
                            writeBuffer(undefined, getBuffer(), result.forwardPosition, keypress, false);
                            inputmask.caretPos = {
                                begin: result.forwardPosition,
                                end: result.forwardPosition
                            };
                        }
                    }
                }
            });
            if (writeOut) writeBuffer(input, getBuffer(), result ? result.forwardPosition : undefined, initiatingEvent || new $.Event("checkval"), initiatingEvent && initiatingEvent.type === "input");
        }
        function unmaskedvalue(input) {
            if (input) {
                if (input.inputmask === undefined) {
                    return input.value;
                }
                if (input.inputmask && input.inputmask.refreshValue) {
                    EventHandlers.setValueEvent.call(input);
                }
            }
            var umValue = [], vps = getMaskSet().validPositions;
            for (var pndx in vps) {
                if (vps[pndx].match && vps[pndx].match.fn != null) {
                    umValue.push(vps[pndx].input);
                }
            }
            var unmaskedValue = umValue.length === 0 ? "" : (isRTL ? umValue.reverse() : umValue).join("");
            if ($.isFunction(opts.onUnMask)) {
                var bufferValue = (isRTL ? getBuffer().slice().reverse() : getBuffer()).join("");
                unmaskedValue = opts.onUnMask.call(inputmask, bufferValue, unmaskedValue, opts);
            }
            return unmaskedValue;
        }
        function caret(input, begin, end, notranslate) {
            function translatePosition(pos) {
                if (isRTL && typeof pos === "number" && (!opts.greedy || opts.placeholder !== "") && el) {
                    pos = el.inputmask._valueGet().length - pos;
                }
                return pos;
            }
            var range;
            if (begin !== undefined) {
                if ($.isArray(begin)) {
                    end = isRTL ? begin[0] : begin[1];
                    begin = isRTL ? begin[1] : begin[0];
                }
                if (begin.begin !== undefined) {
                    end = isRTL ? begin.begin : begin.end;
                    begin = isRTL ? begin.end : begin.begin;
                }
                if (typeof begin === "number") {
                    begin = notranslate ? begin : translatePosition(begin);
                    end = notranslate ? end : translatePosition(end);
                    end = typeof end == "number" ? end : begin;
                    var scrollCalc = parseInt(((input.ownerDocument.defaultView || window).getComputedStyle ? (input.ownerDocument.defaultView || window).getComputedStyle(input, null) : input.currentStyle).fontSize) * end;
                    input.scrollLeft = scrollCalc > input.scrollWidth ? scrollCalc : 0;
                    input.inputmask.caretPos = {
                        begin: begin,
                        end: end
                    };
                    if (input === document.activeElement) {
                        if ("selectionStart" in input) {
                            input.selectionStart = begin;
                            input.selectionEnd = end;
                        } else if (window.getSelection) {
                            range = document.createRange();
                            if (input.firstChild === undefined || input.firstChild === null) {
                                var textNode = document.createTextNode("");
                                input.appendChild(textNode);
                            }
                            range.setStart(input.firstChild, begin < input.inputmask._valueGet().length ? begin : input.inputmask._valueGet().length);
                            range.setEnd(input.firstChild, end < input.inputmask._valueGet().length ? end : input.inputmask._valueGet().length);
                            range.collapse(true);
                            var sel = window.getSelection();
                            sel.removeAllRanges();
                            sel.addRange(range);
                        } else if (input.createTextRange) {
                            range = input.createTextRange();
                            range.collapse(true);
                            range.moveEnd("character", end);
                            range.moveStart("character", begin);
                            range.select();
                        }
                        renderColorMask(input, {
                            begin: begin,
                            end: end
                        });
                    }
                }
            } else {
                if ("selectionStart" in input) {
                    begin = input.selectionStart;
                    end = input.selectionEnd;
                } else if (window.getSelection) {
                    range = window.getSelection().getRangeAt(0);
                    if (range.commonAncestorContainer.parentNode === input || range.commonAncestorContainer === input) {
                        begin = range.startOffset;
                        end = range.endOffset;
                    }
                } else if (document.selection && document.selection.createRange) {
                    range = document.selection.createRange();
                    begin = 0 - range.duplicate().moveStart("character", -input.inputmask._valueGet().length);
                    end = begin + range.text.length;
                }
                return {
                    begin: notranslate ? begin : translatePosition(begin),
                    end: notranslate ? end : translatePosition(end)
                };
            }
        }
        function determineLastRequiredPosition(returnDefinition) {
            var buffer = getMaskTemplate(true, getLastValidPosition(), true, true), bl = buffer.length, pos, lvp = getLastValidPosition(), positions = {}, lvTest = getMaskSet().validPositions[lvp], ndxIntlzr = lvTest !== undefined ? lvTest.locator.slice() : undefined, testPos;
            for (pos = lvp + 1; pos < buffer.length; pos++) {
                testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);
                ndxIntlzr = testPos.locator.slice();
                positions[pos] = $.extend(true, {}, testPos);
            }
            var lvTestAlt = lvTest && lvTest.alternation !== undefined ? lvTest.locator[lvTest.alternation] : undefined;
            for (pos = bl - 1; pos > lvp; pos--) {
                testPos = positions[pos];
                if ((testPos.match.optionality || testPos.match.optionalQuantifier && testPos.match.newBlockMarker || lvTestAlt && (lvTestAlt !== positions[pos].locator[lvTest.alternation] && testPos.match.fn != null || testPos.match.fn === null && testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","), lvTestAlt.toString().split(",")) && getTests(pos)[0].def !== "")) && buffer[pos] === getPlaceholder(pos, testPos.match)) {
                    bl--;
                } else break;
            }
            return returnDefinition ? {
                l: bl,
                def: positions[bl] ? positions[bl].match : undefined
            } : bl;
        }
        function clearOptionalTail(buffer) {
            buffer.length = 0;
            var template = getMaskTemplate(true, 0, true, undefined, true), lmnt, validPos;
            while (lmnt = template.shift(), lmnt !== undefined) buffer.push(lmnt);
            return buffer;
        }
        function isComplete(buffer) {
            if ($.isFunction(opts.isComplete)) return opts.isComplete(buffer, opts);
            if (opts.repeat === "*") return undefined;
            var complete = false, lrp = determineLastRequiredPosition(true), aml = seekPrevious(lrp.l);
            if (lrp.def === undefined || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {
                complete = true;
                for (var i = 0; i <= aml; i++) {
                    var test = getTestTemplate(i).match;
                    if (test.fn !== null && getMaskSet().validPositions[i] === undefined && test.optionality !== true && test.optionalQuantifier !== true || test.fn === null && buffer[i] !== getPlaceholder(i, test)) {
                        complete = false;
                        break;
                    }
                }
            }
            return complete;
        }
        function handleRemove(input, k, pos, strict, fromIsValid) {
            if (opts.numericInput || isRTL) {
                if (k === Inputmask.keyCode.BACKSPACE) {
                    k = Inputmask.keyCode.DELETE;
                } else if (k === Inputmask.keyCode.DELETE) {
                    k = Inputmask.keyCode.BACKSPACE;
                }
                if (isRTL) {
                    var pend = pos.end;
                    pos.end = pos.begin;
                    pos.begin = pend;
                }
            }
            if (k === Inputmask.keyCode.BACKSPACE && pos.end - pos.begin < 1) {
                pos.begin = seekPrevious(pos.begin);
                if (getMaskSet().validPositions[pos.begin] !== undefined && getMaskSet().validPositions[pos.begin].input === opts.groupSeparator) {
                    pos.begin--;
                }
            } else if (k === Inputmask.keyCode.DELETE && pos.begin === pos.end) {
                pos.end = isMask(pos.end, true) && (getMaskSet().validPositions[pos.end] && getMaskSet().validPositions[pos.end].input !== opts.radixPoint) ? pos.end + 1 : seekNext(pos.end) + 1;
                if (getMaskSet().validPositions[pos.begin] !== undefined && getMaskSet().validPositions[pos.begin].input === opts.groupSeparator) {
                    pos.end++;
                }
            }
            revalidateMask(pos);
            if (strict !== true && opts.keepStatic !== false || opts.regex !== null) {
                var result = alternate(true);
                if (result) {
                    var newPos = result.caret !== undefined ? result.caret : result.pos ? seekNext(result.pos.begin ? result.pos.begin : result.pos) : getLastValidPosition(-1, true);
                    if (k !== Inputmask.keyCode.DELETE || pos.begin > newPos) {
                        pos.begin == newPos;
                    }
                }
            }
            var lvp = getLastValidPosition(pos.begin, true);
            if (lvp < pos.begin || pos.begin === -1) {
                getMaskSet().p = seekNext(lvp);
            } else if (strict !== true) {
                getMaskSet().p = pos.begin;
                if (fromIsValid !== true) {
                    while (getMaskSet().p < lvp && getMaskSet().validPositions[getMaskSet().p] === undefined) {
                        getMaskSet().p++;
                    }
                }
            }
        }
        function initializeColorMask(input) {
            var computedStyle = (input.ownerDocument.defaultView || window).getComputedStyle(input, null);
            function findCaretPos(clientx) {
                var e = document.createElement("span"), caretPos;
                for (var style in computedStyle) {
                    if (isNaN(style) && style.indexOf("font") !== -1) {
                        e.style[style] = computedStyle[style];
                    }
                }
                e.style.textTransform = computedStyle.textTransform;
                e.style.letterSpacing = computedStyle.letterSpacing;
                e.style.position = "absolute";
                e.style.height = "auto";
                e.style.width = "auto";
                e.style.visibility = "hidden";
                e.style.whiteSpace = "nowrap";
                document.body.appendChild(e);
                var inputText = input.inputmask._valueGet(), previousWidth = 0, itl;
                for (caretPos = 0, itl = inputText.length; caretPos <= itl; caretPos++) {
                    e.innerHTML += inputText.charAt(caretPos) || "_";
                    if (e.offsetWidth >= clientx) {
                        var offset1 = clientx - previousWidth;
                        var offset2 = e.offsetWidth - clientx;
                        e.innerHTML = inputText.charAt(caretPos);
                        offset1 -= e.offsetWidth / 3;
                        caretPos = offset1 < offset2 ? caretPos - 1 : caretPos;
                        break;
                    }
                    previousWidth = e.offsetWidth;
                }
                document.body.removeChild(e);
                return caretPos;
            }
            var template = document.createElement("div");
            template.style.width = computedStyle.width;
            template.style.textAlign = computedStyle.textAlign;
            colorMask = document.createElement("div");
            input.inputmask.colorMask = colorMask;
            colorMask.className = "im-colormask";
            input.parentNode.insertBefore(colorMask, input);
            input.parentNode.removeChild(input);
            colorMask.appendChild(input);
            colorMask.appendChild(template);
            input.style.left = template.offsetLeft + "px";
            $(colorMask).on("mouseleave", function(e) {
                return EventHandlers.mouseleaveEvent.call(input, [ e ]);
            });
            $(colorMask).on("mouseenter", function(e) {
                return EventHandlers.mouseenterEvent.call(input, [ e ]);
            });
            $(colorMask).on("click", function(e) {
                caret(input, findCaretPos(e.clientX));
                return EventHandlers.clickEvent.call(input, [ e ]);
            });
        }
        Inputmask.prototype.positionColorMask = function(input, template) {
            input.style.left = template.offsetLeft + "px";
        };
        function renderColorMask(input, caretPos, clear) {
            var maskTemplate = [], isStatic = false, test, testPos, ndxIntlzr, pos = 0;
            function setEntry(entry) {
                if (entry === undefined) entry = "";
                if (!isStatic && (test.fn === null || testPos.input === undefined)) {
                    isStatic = true;
                    maskTemplate.push("<span class='im-static'>" + entry);
                } else if (isStatic && (test.fn !== null && testPos.input !== undefined || test.def === "")) {
                    isStatic = false;
                    var mtl = maskTemplate.length;
                    maskTemplate[mtl - 1] = maskTemplate[mtl - 1] + "</span>";
                    maskTemplate.push(entry);
                } else maskTemplate.push(entry);
            }
            function setCaret() {
                if (document.activeElement === input) {
                    maskTemplate.splice(caretPos.begin, 0, caretPos.begin === caretPos.end || caretPos.end > getMaskSet().maskLength ? '<mark class="im-caret" style="border-right-width: 1px;border-right-style: solid;">' : '<mark class="im-caret-select">');
                    maskTemplate.splice(caretPos.end + 1, 0, "</mark>");
                }
            }
            if (colorMask !== undefined) {
                var buffer = getBuffer();
                if (caretPos === undefined) {
                    caretPos = caret(input);
                } else if (caretPos.begin === undefined) {
                    caretPos = {
                        begin: caretPos,
                        end: caretPos
                    };
                }
                if (clear !== true) {
                    var lvp = getLastValidPosition();
                    do {
                        if (getMaskSet().validPositions[pos]) {
                            testPos = getMaskSet().validPositions[pos];
                            test = testPos.match;
                            ndxIntlzr = testPos.locator.slice();
                            setEntry(buffer[pos]);
                        } else {
                            testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);
                            test = testPos.match;
                            ndxIntlzr = testPos.locator.slice();
                            if (opts.jitMasking === false || pos < lvp || typeof opts.jitMasking === "number" && isFinite(opts.jitMasking) && opts.jitMasking > pos) {
                                setEntry(getPlaceholder(pos, test));
                            } else isStatic = false;
                        }
                        pos++;
                    } while ((maxLength === undefined || pos < maxLength) && (test.fn !== null || test.def !== "") || lvp > pos || isStatic);
                    if (isStatic) setEntry();
                    setCaret();
                }
                var template = colorMask.getElementsByTagName("div")[0];
                template.innerHTML = maskTemplate.join("");
                input.inputmask.positionColorMask(input, template);
            }
        }
        function mask(elem) {
            function isElementTypeSupported(input, opts) {
                function patchValueProperty(npt) {
                    var valueGet;
                    var valueSet;
                    function patchValhook(type) {
                        if ($.valHooks && ($.valHooks[type] === undefined || $.valHooks[type].inputmaskpatch !== true)) {
                            var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function(elem) {
                                return elem.value;
                            };
                            var valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function(elem, value) {
                                elem.value = value;
                                return elem;
                            };
                            $.valHooks[type] = {
                                get: function(elem) {
                                    if (elem.inputmask) {
                                        if (elem.inputmask.opts.autoUnmask) {
                                            return elem.inputmask.unmaskedvalue();
                                        } else {
                                            var result = valhookGet(elem);
                                            return getLastValidPosition(undefined, undefined, elem.inputmask.maskset.validPositions) !== -1 || opts.nullable !== true ? result : "";
                                        }
                                    } else return valhookGet(elem);
                                },
                                set: function(elem, value) {
                                    var $elem = $(elem), result;
                                    result = valhookSet(elem, value);
                                    if (elem.inputmask) {
                                        $elem.trigger("setvalue", [ value ]);
                                    }
                                    return result;
                                },
                                inputmaskpatch: true
                            };
                        }
                    }
                    function getter() {
                        if (this.inputmask) {
                            return this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : getLastValidPosition() !== -1 || opts.nullable !== true ? document.activeElement === this && opts.clearMaskOnLostFocus ? (isRTL ? clearOptionalTail(getBuffer().slice()).reverse() : clearOptionalTail(getBuffer().slice())).join("") : valueGet.call(this) : "";
                        } else return valueGet.call(this);
                    }
                    function setter(value) {
                        valueSet.call(this, value);
                        if (this.inputmask) {
                            $(this).trigger("setvalue", [ value ]);
                        }
                    }
                    function installNativeValueSetFallback(npt) {
                        EventRuler.on(npt, "mouseenter", function(event) {
                            var $input = $(this), input = this, value = input.inputmask._valueGet();
                            if (value !== getBuffer().join("")) {
                                $input.trigger("setvalue");
                            }
                        });
                    }
                    if (!npt.inputmask.__valueGet) {
                        if (opts.noValuePatching !== true) {
                            if (Object.getOwnPropertyDescriptor) {
                                if (typeof Object.getPrototypeOf !== "function") {
                                    Object.getPrototypeOf = typeof "test".__proto__ === "object" ? function(object) {
                                        return object.__proto__;
                                    } : function(object) {
                                        return object.constructor.prototype;
                                    };
                                }
                                var valueProperty = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(npt), "value") : undefined;
                                if (valueProperty && valueProperty.get && valueProperty.set) {
                                    valueGet = valueProperty.get;
                                    valueSet = valueProperty.set;
                                    Object.defineProperty(npt, "value", {
                                        get: getter,
                                        set: setter,
                                        configurable: true
                                    });
                                } else if (npt.tagName !== "INPUT") {
                                    valueGet = function() {
                                        return this.textContent;
                                    };
                                    valueSet = function(value) {
                                        this.textContent = value;
                                    };
                                    Object.defineProperty(npt, "value", {
                                        get: getter,
                                        set: setter,
                                        configurable: true
                                    });
                                }
                            } else if (document.__lookupGetter__ && npt.__lookupGetter__("value")) {
                                valueGet = npt.__lookupGetter__("value");
                                valueSet = npt.__lookupSetter__("value");
                                npt.__defineGetter__("value", getter);
                                npt.__defineSetter__("value", setter);
                            }
                            npt.inputmask.__valueGet = valueGet;
                            npt.inputmask.__valueSet = valueSet;
                        }
                        npt.inputmask._valueGet = function(overruleRTL) {
                            return isRTL && overruleRTL !== true ? valueGet.call(this.el).split("").reverse().join("") : valueGet.call(this.el);
                        };
                        npt.inputmask._valueSet = function(value, overruleRTL) {
                            valueSet.call(this.el, value === null || value === undefined ? "" : overruleRTL !== true && isRTL ? value.split("").reverse().join("") : value);
                        };
                        if (valueGet === undefined) {
                            valueGet = function() {
                                return this.value;
                            };
                            valueSet = function(value) {
                                this.value = value;
                            };
                            patchValhook(npt.type);
                            installNativeValueSetFallback(npt);
                        }
                    }
                }
                var elementType = input.getAttribute("type");
                var isSupported = input.tagName === "INPUT" && $.inArray(elementType, opts.supportsInputType) !== -1 || input.isContentEditable || input.tagName === "TEXTAREA";
                if (!isSupported) {
                    if (input.tagName === "INPUT") {
                        var el = document.createElement("input");
                        el.setAttribute("type", elementType);
                        isSupported = el.type === "text";
                        el = null;
                    } else isSupported = "partial";
                }
                if (isSupported !== false) {
                    patchValueProperty(input);
                } else input.inputmask = undefined;
                return isSupported;
            }
            EventRuler.off(elem);
            var isSupported = isElementTypeSupported(elem, opts);
            if (isSupported !== false) {
                el = elem;
                $el = $(el);
                originalPlaceholder = el.placeholder;
                maxLength = el !== undefined ? el.maxLength : undefined;
                if (maxLength === -1) maxLength = undefined;
                if (opts.colorMask === true) {
                    initializeColorMask(el);
                }
                if (mobile) {
                    if ("inputmode" in el) {
                        el.inputmode = opts.inputmode;
                        el.setAttribute("inputmode", opts.inputmode);
                    }
                    if (opts.disablePredictiveText === true) {
                        if ("autocorrect" in el) {
                            el.autocorrect = false;
                        } else {
                            if (opts.colorMask !== true) {
                                initializeColorMask(el);
                            }
                            el.type = "password";
                        }
                    }
                }
                if (isSupported === true) {
                    el.setAttribute("im-insert", opts.insertMode);
                    EventRuler.on(el, "submit", EventHandlers.submitEvent);
                    EventRuler.on(el, "reset", EventHandlers.resetEvent);
                    EventRuler.on(el, "blur", EventHandlers.blurEvent);
                    EventRuler.on(el, "focus", EventHandlers.focusEvent);
                    if (opts.colorMask !== true) {
                        EventRuler.on(el, "click", EventHandlers.clickEvent);
                        EventRuler.on(el, "mouseleave", EventHandlers.mouseleaveEvent);
                        EventRuler.on(el, "mouseenter", EventHandlers.mouseenterEvent);
                    }
                    EventRuler.on(el, "paste", EventHandlers.pasteEvent);
                    EventRuler.on(el, "cut", EventHandlers.cutEvent);
                    EventRuler.on(el, "complete", opts.oncomplete);
                    EventRuler.on(el, "incomplete", opts.onincomplete);
                    EventRuler.on(el, "cleared", opts.oncleared);
                    if (!mobile && opts.inputEventOnly !== true) {
                        EventRuler.on(el, "keydown", EventHandlers.keydownEvent);
                        EventRuler.on(el, "keypress", EventHandlers.keypressEvent);
                    } else {
                        el.removeAttribute("maxLength");
                    }
                    EventRuler.on(el, "input", EventHandlers.inputFallBackEvent);
                    EventRuler.on(el, "beforeinput", EventHandlers.beforeInputEvent);
                }
                EventRuler.on(el, "setvalue", EventHandlers.setValueEvent);
                undoValue = getBufferTemplate().join("");
                if (el.inputmask._valueGet(true) !== "" || opts.clearMaskOnLostFocus === false || document.activeElement === el) {
                    var initialValue = $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, el.inputmask._valueGet(true), opts) || el.inputmask._valueGet(true) : el.inputmask._valueGet(true);
                    if (initialValue !== "") checkVal(el, true, false, initialValue.split(""));
                    var buffer = getBuffer().slice();
                    undoValue = buffer.join("");
                    if (isComplete(buffer) === false) {
                        if (opts.clearIncomplete) {
                            resetMaskSet();
                        }
                    }
                    if (opts.clearMaskOnLostFocus && document.activeElement !== el) {
                        if (getLastValidPosition() === -1) {
                            buffer = [];
                        } else {
                            clearOptionalTail(buffer);
                        }
                    }
                    if (opts.clearMaskOnLostFocus === false || opts.showMaskOnFocus && document.activeElement === el || el.inputmask._valueGet(true) !== "") writeBuffer(el, buffer);
                    if (document.activeElement === el) {
                        caret(el, seekNext(getLastValidPosition()));
                    }
                }
            }
        }
        var valueBuffer;
        if (actionObj !== undefined) {
            switch (actionObj.action) {
              case "isComplete":
                el = actionObj.el;
                return isComplete(getBuffer());

              case "unmaskedvalue":
                if (el === undefined || actionObj.value !== undefined) {
                    valueBuffer = actionObj.value;
                    valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, valueBuffer, opts) || valueBuffer : valueBuffer).split("");
                    checkVal.call(this, undefined, false, false, valueBuffer);
                    if ($.isFunction(opts.onBeforeWrite)) opts.onBeforeWrite.call(inputmask, undefined, getBuffer(), 0, opts);
                }
                return unmaskedvalue(el);

              case "mask":
                mask(el);
                break;

              case "format":
                valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, actionObj.value, opts) || actionObj.value : actionObj.value).split("");
                checkVal.call(this, undefined, true, false, valueBuffer);
                if (actionObj.metadata) {
                    return {
                        value: isRTL ? getBuffer().slice().reverse().join("") : getBuffer().join(""),
                        metadata: maskScope.call(this, {
                            action: "getmetadata"
                        }, maskset, opts)
                    };
                }
                return isRTL ? getBuffer().slice().reverse().join("") : getBuffer().join("");

              case "isValid":
                if (actionObj.value) {
                    valueBuffer = actionObj.value.split("");
                    checkVal.call(this, undefined, true, true, valueBuffer);
                } else {
                    actionObj.value = getBuffer().join("");
                }
                var buffer = getBuffer();
                var rl = determineLastRequiredPosition(), lmib = buffer.length - 1;
                for (;lmib > rl; lmib--) {
                    if (isMask(lmib)) break;
                }
                buffer.splice(rl, lmib + 1 - rl);
                return isComplete(buffer) && actionObj.value === getBuffer().join("");

              case "getemptymask":
                return getBufferTemplate().join("");

              case "remove":
                if (el && el.inputmask) {
                    $.data(el, "_inputmask_opts", null);
                    $el = $(el);
                    el.inputmask._valueSet(opts.autoUnmask ? unmaskedvalue(el) : el.inputmask._valueGet(true));
                    EventRuler.off(el);
                    if (el.inputmask.colorMask) {
                        colorMask = el.inputmask.colorMask;
                        colorMask.removeChild(el);
                        colorMask.parentNode.insertBefore(el, colorMask);
                        colorMask.parentNode.removeChild(colorMask);
                    }
                    var valueProperty;
                    if (Object.getOwnPropertyDescriptor && Object.getPrototypeOf) {
                        valueProperty = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(el), "value");
                        if (valueProperty) {
                            if (el.inputmask.__valueGet) {
                                Object.defineProperty(el, "value", {
                                    get: el.inputmask.__valueGet,
                                    set: el.inputmask.__valueSet,
                                    configurable: true
                                });
                            }
                        }
                    } else if (document.__lookupGetter__ && el.__lookupGetter__("value")) {
                        if (el.inputmask.__valueGet) {
                            el.__defineGetter__("value", el.inputmask.__valueGet);
                            el.__defineSetter__("value", el.inputmask.__valueSet);
                        }
                    }
                    el.inputmask = undefined;
                }
                return el;
                break;

              case "getmetadata":
                if ($.isArray(maskset.metadata)) {
                    var maskTarget = getMaskTemplate(true, 0, false).join("");
                    $.each(maskset.metadata, function(ndx, mtdt) {
                        if (mtdt.mask === maskTarget) {
                            maskTarget = mtdt;
                            return false;
                        }
                    });
                    return maskTarget;
                }
                return maskset.metadata;
            }
        }
    }

    Inputmask.extendDefinitions({
        A: {
            validator: "[A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
            casing: "upper"
        },
        "&": {
            validator: "[0-9A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",
            casing: "upper"
        },
        "#": {
            validator: "[0-9A-Fa-f]",
            casing: "upper"
        }
    });
    Inputmask.extendAliases({
        cssunit: {
            regex: "[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"
        },
        url: {
            regex: "(https?|ftp)//.*",
            autoUnmask: false
        },
        ip: {
            mask: "i[i[i]].i[i[i]].i[i[i]].i[i[i]]",
            definitions: {
                i: {
                    validator: function(chrs, maskset, pos, strict, opts) {
                        if (pos - 1 > -1 && maskset.buffer[pos - 1] !== ".") {
                            chrs = maskset.buffer[pos - 1] + chrs;
                            if (pos - 2 > -1 && maskset.buffer[pos - 2] !== ".") {
                                chrs = maskset.buffer[pos - 2] + chrs;
                            } else chrs = "0" + chrs;
                        } else chrs = "00" + chrs;
                        return new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(chrs);
                    }
                }
            },
            onUnMask: function(maskedValue, unmaskedValue, opts) {
                return maskedValue;
            },
            inputmode: "numeric"
        },
        email: {
            mask: "*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",
            greedy: false,
            casing: "lower",
            onBeforePaste: function(pastedValue, opts) {
                pastedValue = pastedValue.toLowerCase();
                return pastedValue.replace("mailto:", "");
            },
            definitions: {
                "*": {
                    validator: "[0-9\uff11-\uff19A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5!#$%&'*+/=?^_`{|}~-]"
                },
                "-": {
                    validator: "[0-9A-Za-z-]"
                }
            },
            onUnMask: function(maskedValue, unmaskedValue, opts) {
                return maskedValue;
            },
            inputmode: "email"
        },
        mac: {
            mask: "##:##:##:##:##:##"
        },
        vin: {
            mask: "V{13}9{4}",
            definitions: {
                V: {
                    validator: "[A-HJ-NPR-Za-hj-npr-z\\d]",
                    casing: "upper"
                }
            },
            clearIncomplete: true,
            autoUnmask: true
        }
    });


    var formatCode = {
            d: [ "[1-9]|[12][0-9]|3[01]", Date.prototype.setDate, "day", Date.prototype.getDate ],
            dd: [ "0[1-9]|[12][0-9]|3[01]", Date.prototype.setDate, "day", function() {
                return pad(Date.prototype.getDate.call(this), 2);
            } ],
            ddd: [ "" ],
            dddd: [ "" ],
            m: [ "[1-9]|1[012]", Date.prototype.setMonth, "month", function() {
                return Date.prototype.getMonth.call(this) + 1;
            } ],
            mm: [ "0[1-9]|1[012]", Date.prototype.setMonth, "month", function() {
                return pad(Date.prototype.getMonth.call(this) + 1, 2);
            } ],
            mmm: [ "" ],
            mmmm: [ "" ],
            yy: [ "[0-9]{2}", Date.prototype.setFullYear, "year", function() {
                return pad(Date.prototype.getFullYear.call(this), 2);
            } ],
            yyyy: [ "[0-9]{4}", Date.prototype.setFullYear, "year", function() {
                return pad(Date.prototype.getFullYear.call(this), 4);
            } ],
            h: [ "[1-9]|1[0-2]", Date.prototype.setHours, "hours", Date.prototype.getHours ],
            hh: [ "0[1-9]|1[0-2]", Date.prototype.setHours, "hours", function() {
                return pad(Date.prototype.getHours.call(this), 2);
            } ],
            hhh: [ "[0-9]+", Date.prototype.setHours, "hours", Date.prototype.getHours ],
            H: [ "1?[0-9]|2[0-3]", Date.prototype.setHours, "hours", Date.prototype.getHours ],
            HH: [ "0[0-9]|1[0-9]|2[0-3]", Date.prototype.setHours, "hours", function() {
                return pad(Date.prototype.getHours.call(this), 2);
            } ],
            HHH: [ "[0-9]+", Date.prototype.setHours, "hours", Date.prototype.getHours ],
            M: [ "[1-5]?[0-9]", Date.prototype.setMinutes, "minutes", Date.prototype.getMinutes ],
            MM: [ "0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]", Date.prototype.setMinutes, "minutes", function() {
                return pad(Date.prototype.getMinutes.call(this), 2);
            } ],
            ss: [ "[0-5][0-9]", Date.prototype.setSeconds, "seconds", function() {
                return pad(Date.prototype.getSeconds.call(this), 2);
            } ],
            l: [ "[0-9]{3}", Date.prototype.setMilliseconds, "milliseconds", function() {
                return pad(Date.prototype.getMilliseconds.call(this), 3);
            } ],
            L: [ "[0-9]{2}", Date.prototype.setMilliseconds, "milliseconds", function() {
                return pad(Date.prototype.getMilliseconds.call(this), 2);
            } ],
            t: [ "[ap]" ],
            tt: [ "[ap]m" ],
            T: [ "[AP]" ],
            TT: [ "[AP]M" ],
            Z: [ "" ],
            o: [ "" ],
            S: [ "" ]
        }, formatAlias = {
            isoDate: "yyyy-mm-dd",
            isoTime: "HH:MM:ss",
            isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
            isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
        };
        function getTokenizer(opts) {
            if (!opts.tokenizer) {
                var tokens = [];
                for (var ndx in formatCode) {
                    if (tokens.indexOf(ndx[0]) === -1) tokens.push(ndx[0]);
                }
                opts.tokenizer = "(" + tokens.join("+|") + ")+?|.";
                opts.tokenizer = new RegExp(opts.tokenizer, "g");
            }
            return opts.tokenizer;
        }
        function isValidDate(dateParts, currentResult) {
            return !isFinite(dateParts.rawday) || dateParts.day == "29" && !isFinite(dateParts.rawyear) || new Date(dateParts.date.getFullYear(), isFinite(dateParts.rawmonth) ? dateParts.month : dateParts.date.getMonth() + 1, 0).getDate() >= dateParts.day ? currentResult : false;
        }
        function isDateInRange(dateParts, opts) {
            var result = true;
            if (opts.min) {
                if (dateParts["rawyear"]) {
                    var rawYear = dateParts["rawyear"].replace(/[^0-9]/g, ""), minYear = opts.min.year.substr(0, rawYear.length);
                    result = minYear <= rawYear;
                }
                if (dateParts["year"] === dateParts["rawyear"]) {
                    if (opts.min.date.getTime() === opts.min.date.getTime()) {
                        result = opts.min.date.getTime() <= dateParts.date.getTime();
                    }
                }
            }
            if (result && opts.max && opts.max.date.getTime() === opts.max.date.getTime()) {
                result = opts.max.date.getTime() >= dateParts.date.getTime();
            }
            return result;
        }
        function parse(format, dateObjValue, opts, raw) {
            var mask = "", match;
            while (match = getTokenizer(opts).exec(format)) {
                if (dateObjValue === undefined) {
                    if (formatCode[match[0]]) {
                        mask += "(" + formatCode[match[0]][0] + ")";
                    } else {
                        switch (match[0]) {
                          case "[":
                            mask += "(";
                            break;

                          case "]":
                            mask += ")?";
                            break;

                          default:
                            mask += Inputmask.escapeRegex(match[0]);
                        }
                    }
                } else {
                    if (formatCode[match[0]]) {
                        if (raw !== true && formatCode[match[0]][3]) {
                            var getFn = formatCode[match[0]][3];
                            mask += getFn.call(dateObjValue.date);
                        } else if (formatCode[match[0]][2]) mask += dateObjValue["raw" + formatCode[match[0]][2]]; else mask += match[0];
                    } else mask += match[0];
                }
            }
            return mask;
        }
        function pad(val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = "0" + val;
            return val;
        }
        function analyseMask(maskString, format, opts) {
            var dateObj = {
                date: new Date(1, 0, 1)
            }, targetProp, mask = maskString, match, dateOperation, targetValidator;
            function extendProperty(value) {
                var correctedValue = value.replace(/[^0-9]/g, "0");
                if (correctedValue != value) {
                    var enteredPart = value.replace(/[^0-9]/g, ""), min = (opts.min && opts.min[targetProp] || value).toString(), max = (opts.max && opts.max[targetProp] || value).toString();
                    correctedValue = enteredPart + (enteredPart < min.slice(0, enteredPart.length) ? min.slice(enteredPart.length) : enteredPart > max.slice(0, enteredPart.length) ? max.slice(enteredPart.length) : correctedValue.toString().slice(enteredPart.length));
                }
                return correctedValue;
            }
            function setValue(dateObj, value, opts) {
                dateObj[targetProp] = extendProperty(value);
                dateObj["raw" + targetProp] = value;
                if (dateOperation !== undefined) dateOperation.call(dateObj.date, targetProp == "month" ? parseInt(dateObj[targetProp]) - 1 : dateObj[targetProp]);
            }
            if (typeof mask === "string") {
                while (match = getTokenizer(opts).exec(format)) {
                    var value = mask.slice(0, match[0].length);
                    if (formatCode.hasOwnProperty(match[0])) {
                        targetValidator = formatCode[match[0]][0];
                        targetProp = formatCode[match[0]][2];
                        dateOperation = formatCode[match[0]][1];
                        setValue(dateObj, value, opts);
                    }
                    mask = mask.slice(value.length);
                }
                return dateObj;
            } else if (mask && typeof mask === "object" && mask.hasOwnProperty("date")) {
                return mask;
            }
            return undefined;
        }
        Inputmask.extendAliases({
            datetime: {
                mask: function(opts) {
                    formatCode.S = opts.i18n.ordinalSuffix.join("|");
                    opts.inputFormat = formatAlias[opts.inputFormat] || opts.inputFormat;
                    opts.displayFormat = formatAlias[opts.displayFormat] || opts.displayFormat || opts.inputFormat;
                    opts.outputFormat = formatAlias[opts.outputFormat] || opts.outputFormat || opts.inputFormat;
                    opts.placeholder = opts.placeholder !== "" ? opts.placeholder : opts.inputFormat.replace(/[\[\]]/, "");
                    opts.regex = parse(opts.inputFormat, undefined, opts);
                    return null;
                },
                placeholder: "",
                inputFormat: "isoDateTime",
                displayFormat: undefined,
                outputFormat: undefined,
                min: null,
                max: null,
                i18n: {
                    dayNames: [ "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" ],
                    monthNames: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                    ordinalSuffix: [ "st", "nd", "rd", "th" ]
                },
                postValidation: function(buffer, pos, currentResult, opts) {
                    opts.min = analyseMask(opts.min, opts.inputFormat, opts);
                    opts.max = analyseMask(opts.max, opts.inputFormat, opts);
                    var result = currentResult, dateParts = analyseMask(buffer.join(""), opts.inputFormat, opts);
                    if (result && dateParts.date.getTime() === dateParts.date.getTime()) {
                        result = isValidDate(dateParts, result);
                        result = result && isDateInRange(dateParts, opts);
                    }
                    if (pos && result && currentResult.pos !== pos) {
                        return {
                            buffer: parse(opts.inputFormat, dateParts, opts),
                            refreshFromBuffer: {
                                start: pos,
                                end: currentResult.pos
                            }
                        };
                    }
                    return result;
                },
                onKeyDown: function(e, buffer, caretPos, opts) {
                    var input = this;
                    if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {
                        var today = new Date(), match, date = "";
                        while (match = getTokenizer(opts).exec(opts.inputFormat)) {
                            if (match[0].charAt(0) === "d") {
                                date += pad(today.getDate(), match[0].length);
                            } else if (match[0].charAt(0) === "m") {
                                date += pad(today.getMonth() + 1, match[0].length);
                            } else if (match[0] === "yyyy") {
                                date += today.getFullYear().toString();
                            } else if (match[0].charAt(0) === "y") {
                                date += pad(today.getYear(), match[0].length);
                            }
                        }
                        input.inputmask._valueSet(date);
                        $(input).trigger("setvalue");
                    }
                },
                onUnMask: function(maskedValue, unmaskedValue, opts) {
                    return parse(opts.outputFormat, analyseMask(maskedValue, opts.inputFormat, opts), opts, true);
                },
                casing: function(elem, test, pos, validPositions) {
                    if (test.nativeDef.indexOf("[ap]") == 0) return elem.toLowerCase();
                    if (test.nativeDef.indexOf("[AP]") == 0) return elem.toUpperCase();
                    return elem;
                },
                insertMode: false,
                shiftPositions: false
            }
        });

        Inputmask.extendAliases({
      	  'datum': {
      		  inputFormat: 'dd.mm.yyyy',
      		  placeholder: '_',
      		  separator: '.',
      		  alias: 'datetime'
      	  },
      	});
	return Inputmask;
})();


if ($.fn.inputmask === undefined) {
    $.fn.inputmask = function(fn, options) {
        var nptmask, input = this[0];
        if (options === undefined) options = {};
        if (typeof fn === "string") {
            switch (fn) {
              case "unmaskedvalue":
                return input && input.inputmask ? input.inputmask.unmaskedvalue() : $(input).val();

              case "remove":
                return this.each(function() {
                    if (this.inputmask) this.inputmask.remove();
                });

              case "getemptymask":
                return input && input.inputmask ? input.inputmask.getemptymask() : "";

              case "hasMaskedValue":
                return input && input.inputmask ? input.inputmask.hasMaskedValue() : false;

              case "isComplete":
                return input && input.inputmask ? input.inputmask.isComplete() : true;

              case "getmetadata":
                return input && input.inputmask ? input.inputmask.getmetadata() : undefined;

              case "setvalue":
                Inputmask.setValue(input, options);
                break;

              case "option":
                if (typeof options === "string") {
                    if (input && input.inputmask !== undefined) {
                        return input.inputmask.option(options);
                    }
                } else {
                    return this.each(function() {
                        if (this.inputmask !== undefined) {
                            return this.inputmask.option(options);
                        }
                    });
                }
                break;

              default:
                options.alias = fn;
                nptmask = new Inputmask(options);
                return this.each(function() {
                    nptmask.mask(this);
                });
            }
        } else if (Array.isArray(fn)) {
            options.alias = fn;
            nptmask = new Inputmask(options);
            return this.each(function() {
                nptmask.mask(this);
            });
        } else if (typeof fn == "object") {
            nptmask = new Inputmask(fn);
            if (fn.mask === undefined && fn.alias === undefined) {
                return this.each(function() {
                    if (this.inputmask !== undefined) {
                        return this.inputmask.option(fn);
                    } else nptmask.mask(this);
                });
            } else {
                return this.each(function() {
                    nptmask.mask(this);
                });
            }
        } else if (fn === undefined) {
            return this.each(function() {
                nptmask = new Inputmask(options);
                nptmask.mask(this);
            });
        }
    };
}


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);

/*!
 * loading.css -https://github.com/Dn9x/loading.js
 * Version - 1.0.0
 * Licensed under the MIT license - http://opensource.org/licenses/MIT
 *
 * Copyright (c) 2016 Dn9x
 */
var defaultWidth = 100;
var _methods = {
    top: function (options) {
        var _loading = document.createElement("div");

        //_loading.setAttribute('id', '_loading');
        _loading.setAttribute('class', 'consal_kv-loading');
        _loading.style.position = "fixed";
        _loading.style.width = defaultWidth + "px";
        _loading.style.height = "0px";
        _loading.style.top = "50%";
        _loading.style.left = "50%";
        _loading.style['z-index'] = 99999;
        _loading.style['text-align'] = "center";

        for (var i in options) {
            if (i == 'width') {
                _loading.style[i] = options[i] + 'px';
                defaultWidth = options[i];
            }
            if (i == 'height') {
                _loading.style[i] = options[i] + 'px';
            }
        }

        var clientWidth = document.body.clientWidth;
        var v = (clientWidth - defaultWidth) / 2;
        _loading.style.left = v + 'px';

        return _loading;
    }
};

_methods['line-pulse'] = function () {
    var _loading = _methods.top({
        "width": "100",
        "height": "20"
    });
    for (var i = 0; i < 4; i++) {
        var _cell = document.createElement("div");
        _loading.appendChild(_cell);
    }

    _loading.setAttribute('class', 'consal_kv-line-pulse');

    return _loading;
};

_methods['jump-pulse'] = function () {

    var _loading = _methods.top({
        "width": "100",
        "height": "20"
    });
    for (var i = 0; i < 4; i++) {
        var _cell = document.createElement("div");
        _loading.appendChild(_cell);
    }

    _loading.classList.add('consal_kv-jump-pulse');

    return _loading;
};

_methods['circle-turn'] = function () {
    var _cell1 = document.createElement("div");

    var _loading = _methods.top({
        "width": "25",
        "height": "25"
    });
    _loading.appendChild(_cell1);
    _loading.classList.add('consal_kv-circle-turn');

    return _loading;
};

_methods['circle-turn-scale'] = function () {
    var _cell1 = document.createElement("div");

    var _loading = _methods.top({
        "width": "25",
        "height": "25"
    });
    _loading.appendChild(_cell1);
    _loading.classList.add('consal_kv-circle-turn-scale');

    return _loading;
};

_methods['circle-fade'] = function () {
    var _loading = _methods.top({
        "width": "50",
        "height": "72"
    });
    for (var i = 0; i < 8; i++) {
        var _cell = document.createElement("div");
        _loading.appendChild(_cell);
    }
    _loading.classList.add('consal_kv-circle-fade');

    return _loading;
};

_methods['square-flip'] = function () {
    var _loading = _methods.top({
        "width": "50",
        "height": "0"
    });
    for (var i = 0; i < 1; i++) {
        var _cell = document.createElement("div");
        _loading.appendChild(_cell);
    }
    _loading.classList.add('consal_kv-square-flip');

    return _loading;
};

_methods['line-scale'] = function () {
    var _loading = _methods.top({
        "width": "60",
        "height": "40"
    });
    for (var i = 0; i < 5; i++) {
        var _cell = document.createElement("div");
        _loading.appendChild(_cell);
    }
    _loading.classList.add('consal_kv-line-scale');

    return _loading;
};

$.showLoading = function () {
    var defaultOptions = {
        name: 'line-pulse',
        maskClick: false,
        callback: function () { }
    };

    if (arguments) {
        if (typeof arguments[0] === 'string') {
            defaultOptions.name = arguments[0];
        } else if (typeof arguments[0] === 'object') {
            for (var i in arguments[0]) {
                defaultOptions[i] = arguments[0][i];
            }
        }
    }

    $.hideLoading();

    var _mask = document.createElement("div");

    //_mask.setAttribute('id', '_mask');
    _mask.setAttribute('class', 'consal_kv-mask');
    _mask.style.position = "fixed";
    _mask.style.top = "0";
    _mask.style.left = "0";
    _mask.style.bottom = "0";
    _mask.style.right = "0";
    _mask.style.overflow = "hidden";
    _mask.style['z-index'] = 99998;
    //_mask.style['background-color'] = '#000';
    //_mask.style.opacity = 0.25;
    _mask.style.zoom = 1;

    if (defaultOptions.allowHide) {
        _mask.addEventListener('click', function () {
            $.hideLoading();
        }, false);
    }

    $('#consal_kv').append(_mask);
    $('#consal_kv').append(_methods[defaultOptions.name]());

    
    defaultOptions.callback();
};

$.hideLoading = function () {
    var _mask = $('#consal_kv div.consal_kv-mask');
    var _loading = $('#consal_kv div.consal_kv-loading');
    if (typeof _mask !== 'undefined' && _mask.length === 0 && typeof _loading !== 'undefined' && _loading.length === 0) {
        return;
    }
    _mask.remove();
    _loading.remove();
};

$(window).resize(function () {
    var _loading = $('#consal_kv div.consal_kv-loading');
    if (typeof _loading === 'object' && _loading.length != 0) {
        var clientWidth = document.body.clientWidth;
        var v = (clientWidth - defaultWidth) / 2;
        _loading.css("left", v + 'px');
    }
});


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var Produkt = __webpack_require__(8);
var ProduktTr = __webpack_require__(10);
var ProduktStatus = __webpack_require__(22);
var ProduktRendererFactory = __webpack_require__(23);
var Util = __webpack_require__(2);
var Config = __webpack_require__(0);

var AKDProdukt = function(name, oBO, sStyle, mode) {
    Produkt.call(this, name);

    this.status = ProduktStatus.SCHRITT1;
    this.style = sStyle;
    this.mode = mode;

    this.renderer = ProduktRendererFactory.getSchritt1RendererByStyle(sStyle, this);
    this.updateBO(oBO);

    this.vorbelegung = {};
    if (window["kvo_betreuer"]) {
        this.vorbelegung.betreuer = Util.copyOf(window["kvo_betreuer"]);
    }
    if (window["kvo_daten"]) {
        this.vorbelegung.daten = Util.copyOf(window["kvo_daten"]);
    }
};

AKDProdukt.prototype = Object.create(Produkt.prototype);
var _super_ = Produkt.prototype;

AKDProdukt.prototype.setBusy = function(bBusy) {
    this.renderer.setBusy(bBusy);
};

AKDProdukt.prototype.updateBO = function(oBO) {
    this.data = oBO;

    var schritt1BO = {
        versicherungsbeginn : Util.nextVersicherungsbeginnTomorrow(true),
        personenUnter20: 0,
        personenBis64: 1,
        personenAb65: 0,
        berechnenMoeglich: true,
        famAKD: ''
    };
    if (oBO.hasOwnProperty("famAKD")) {
        schritt1BO.famAKD = oBO.famAKD;
        if (oBO.famAKD==='v1') {
            schritt1BO.personenUnter20 = 1;
        } else if (oBO.famAKD==='v2') {
            schritt1BO.personenUnter20 = 1;
        }
    }
    if (oBO.einstellung) {
        schritt1BO.einstellung = Util.copyOf(oBO.einstellung);
    }

    var schritt1Ueberspringen = false;
    if (this.vorbelegung) {
        if (this.vorbelegung.daten) {
            var versicherungsbeginnOK = false;
            var personenUnter20OK = false;
            var personenBis64OK = false;
            var personenAb65OK = false;

            if (this.vorbelegung.daten.versicherungsbeginn) {
                var versicherungsbeginnUebergabe = Util.parseAsDateAndFormatAsString(this.vorbelegung.daten.versicherungsbeginn);

                if (versicherungsbeginnUebergabe) {
                    schritt1BO.versicherungsbeginn = versicherungsbeginnUebergabe;
                    versicherungsbeginnOK = true;
                }
            }
            if (this.vorbelegung.daten.hasOwnProperty("personenUnter20")) {
                var personenUnter20Uebergabe = parseInt(this.vorbelegung.daten.personenUnter20, 10);
                if (personenUnter20Uebergabe !== NaN && personenUnter20Uebergabe >= 0 && personenUnter20Uebergabe <= 5) {
                    schritt1BO.personenUnter20 = personenUnter20Uebergabe;
                    personenUnter20OK = true;
                }
            }
            if (this.vorbelegung.daten.hasOwnProperty("personenBis64")) {
                var personenBis64Uebergabe = parseInt(this.vorbelegung.daten.personenBis64, 10);
                if (personenBis64Uebergabe !== NaN && personenBis64Uebergabe >= 0 && personenBis64Uebergabe <= 5) {
                    schritt1BO.personenBis64 = personenBis64Uebergabe;
                    personenBis64OK = true;
                }
            }
            if (this.vorbelegung.daten.hasOwnProperty("personenAb65")) {
                var personenAb65Uebergabe = parseInt(this.vorbelegung.daten.personenAb65, 10);
                if (personenAb65Uebergabe !== NaN && personenAb65Uebergabe >= 0 && personenAb65Uebergabe <= 5) {
                    schritt1BO.personenAb65 = personenAb65Uebergabe;
                    personenAb65OK = true;
                }
            }
            if (versicherungsbeginnOK) {
                if (personenBis64OK && personenAb65OK && !this.vorbelegung.daten.hasOwnProperty("personenUnter20")) {
                    if (schritt1BO.personenBis64+schritt1BO.personenAb65>0 && schritt1BO.personenBis64+schritt1BO.personenAb65 <= 5) {
                        schritt1BO.berechnenMoeglich = false;
                        this.initialBerechnung = this.berechnen(false, schritt1BO.versicherungsbeginn,
                            schritt1BO.personenUnter20, schritt1BO.personenBis64, schritt1BO.personenAb65);
                    }
                } else if (personenBis64OK && personenAb65OK && personenUnter20OK) {
                    if (schritt1BO.personenBis64+schritt1BO.personenAb65+schritt1BO.personenUnter20>0 && schritt1BO.personenBis64+schritt1BO.personenAb65+schritt1BO.personenUnter20 <= 5) {
                        schritt1BO.berechnenMoeglich = false;
                        this.initialBerechnung = this.berechnen(false, schritt1BO.versicherungsbeginn,
                            schritt1BO.personenUnter20, schritt1BO.personenBis64, schritt1BO.personenAb65);
                    }
                }
            }
        }
    }
    this.schritt1BO = schritt1BO;

    this.renderer.setBO(schritt1BO);
};

AKDProdukt.prototype.render = function(validationResult) {
    var berechnungDeferred = $.Deferred();
    var berechnungPromise;

    if (this.initialBerechnung) {
        berechnungPromise = this.initialBerechnung;
    } else {
        berechnungDeferred.resolve(validationResult || this.validationResult);
    }
    this.initialBerechnung = null;
    berechnungPromise = berechnungDeferred.promise();

    var deferred = $.Deferred();
    berechnungPromise.then(function(validationResult) {
        this.renderer.render(validationResult).always(function() {
            deferred.resolve();
        });
    }.bind(this));

    return deferred.promise();
};

AKDProdukt.prototype.berechnen = function(noRendering, versicherungsbeginn, personenUnter20, personenBis64, personenAb65) {
    var defer = $.Deferred();

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    ProduktTr.berechnen(context, versicherungsbeginn, personenUnter20, personenBis64, personenAb65).done(function(oResult) {
        if (oResult.state === "NOK" || oResult.state === "EXCEPTION") {
            defer.reject();
        } else {
            defer.resolve(oResult);
        }

        if (!noRendering) {
            this.validationResult = null;
            this.setBusy(true);
            this.render(oResult).then(function() {
                this.setBusy(false);
            }.bind(this));
        } else {
            this.validationResult = oResult;
        }
    }.bind(this));

    return defer.promise();
};

AKDProdukt.prototype.zurueck = function() {
    if (this.status === ProduktStatus.SCHRITT2) {
        this.status = ProduktStatus.SCHRITT1;

        this.renderer = ProduktRendererFactory.getSchritt1RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt1BO);
        this.renderer.render().then(function() {
            this.renderer.render(this.schritt1ValidationResult);
        }.bind(this));
    } else if (this.status === ProduktStatus.SCHRITT3) {
        this.status = ProduktStatus.SCHRITT2;

        this.renderer = ProduktRendererFactory.getSchritt2RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt2BO);
        this.renderer.render();
    } else if (this.status === ProduktStatus.SCHRITT4) {
        this.status = ProduktStatus.SCHRITT3;

        this.renderer = ProduktRendererFactory.getSchritt3RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt3BO);
        this.renderer.render();
    }

};

AKDProdukt.prototype.weiter = function(oBO, oResult) {
    if (this.status === ProduktStatus.SCHRITT1) {
        var REF_VP = {
            geburtsdatum : null,
            anrede : null,
            vorname : null,
            name : null,
            isVn: false
        };
        var i;

        if (!this.schritt2BO) {
            this.schritt2BO = {
                produkt : this.name,
                einstellung : Util.copyOf(this.data.einstellung),
                famAKD : oBO.famAKD,
                tarifErgebnisse: null,
                versicherungsbeginn: null,
                svLand: ["Afghanistan","Ägypten","Albanien","Algerien","Andorra","Argentinien","Aserbaidschan","Äthiopien","Australien","Bahamas","Bahrain","Bangladesch","Barbados","Belgien","Belize","Benin","Birma","Bolivien","Bosnien-Herzegowina","Botsuana","Brasilien","Brunei","Bulgarien","Burkina Faso","Burundi","Chile","China (Volksrepublik)","Costa Rica","Curacao","Dänemark","Deutschland","Dominica","Dominikanische Republik","Ecuador","Elfenbeinküste","El Salvador","Estland","Fidschi","Finnland","Frankreich","Gambia","Georgien","Ghana","Grenada","Griechenland","Grossbritannien","Guatemala","Guyana","Haiti","Hongkong","Indien","Indonesien","Irak","Iran","Irland","Island","Isle of Man","Israel","Italien","Jamaica","Japan","Jemen","Jordanien","Jugoslawien (ehemaliges)","Kambodscha","Kamerun","Kanada","Katar","Kenia","Kolumbien","Kongo","Kroatien","Kuba","Kuwait","Laos","Lesotho","Lettland","Libanon","Liberia","Libyen","Liechtenstein","Litauen","Luxemburg","Madagaskar","Malawi","Malaysia","Mali","Malta","Marokko","Mauretanien","Mauritius","Mazedonien","Mexiko","Moldawien","Monaco","Myanmar (früher Birma)","Neuseeland","Nicaragua","Niederlande","Niederländische Antillen","Niger","Nigeria","Norwegen","Österreich","Pakistan","Panama","Papua-Neuguinea","Paraguay","Peru","Philippinen","Polen","Portugal","Ruanda","Rumänien","Russische Föderation","Sambia","Samoa","San Marino","Santa Lucia","Schweden","Schweiz","Senegal","Seychellen","Sierra Leone","Simbabwe","Singapur","Slowakische Republik","Slowenien","Somalia","Sonstige Nationalität","Sowjetunion (ehemalige)","Spanien","Sri Lanka","St.Vincent","Südafrika","Südkorea","Surinam","Swasiland","Syrien","Taiwan","Tansania","Thailand","Togo","Trinidad und Tobago","Tschechische Republik","Tschechoslowakei","Tunesien","Türkei","Uganda","Ukraine","Ungarn","Uruguay","Vatikanstadt","Venezuela","Vereinigte Arabische Emirate","Vereinigte Staaten","Vietnam","Zaire","Zentralafrika","Zypern"],
                betreuer: {
                    manuelleAuswahl: null,
                    auswahlListe : null
                },
                vn : {
                    anrede : null,
                    titel : null,
                    vorname : null,
                    name : null,
                    geburtsdatum : null,
                    plz : null,
                    ort : null,
                    strasse : null,
                    hausnr : null,
                    telefon : null,
                    mail : null,
                    staatsangehoerigkeit : null,
                    zahlungsdaten : {
                        zahlungsart : "Bankeinzug per Lastschrift",
                        zahlungsweise : "jährlich",
                        iban : {
                            selected : false,
                            no : null,
                            bic : false
                        },
                        kto : {
                            selected : false,
                            no : null,
                            blz : null
                        },
                        bank : null,
                        ksmSelected: false
                    }
                },
                vpsUnter20: [],
                vpsBis64: [],
                vpsAb65: []
            };

            for(i=0; i<oBO.personenUnter20; i++) {
                this.schritt2BO.vpsUnter20.push(Util.copyOf(REF_VP));
            }
            for(i=0; i<oBO.personenBis64; i++) {
                this.schritt2BO.vpsBis64.push(Util.copyOf(REF_VP));
            }
            for(i=0; i<oBO.personenAb65; i++) {
                this.schritt2BO.vpsAb65.push(Util.copyOf(REF_VP));
            }
        }
        this.schritt2BO.tarifErgebnisse = {
            gesamtbeitrag: oResult.gesamtbeitrag,
            tarifUnter20: Util.copyOf(oResult.tarifUnter20),
            tarifUnter65: Util.copyOf(oResult.tarifUnter65),
            tarifAb65: Util.copyOf(oResult.tarifAb65)
        };
        this.schritt2BO.versicherungsbeginn = this.schritt1BO.versicherungsbeginn;

        if (this.schritt2BO.vpsUnter20.length !== oBO.personenUnter20) {
            if (this.schritt2BO.vpsUnter20.length < oBO.personenUnter20) {
                while (this.schritt2BO.vpsUnter20.length < oBO.personenUnter20) {
                    this.schritt2BO.vpsUnter20.push(Util.copyOf(REF_VP));
                }
            } else if (this.schritt2BO.vpsUnter20.length > oBO.personenUnter20) {
                while(this.schritt2BO.vpsUnter20.length > oBO.personenUnter20) {
                    this.schritt2BO.vpsUnter20.splice(this.schritt2BO.vpsUnter20.length-1, 1);
                }
            }
        }
        if (this.schritt2BO.vpsBis64.length !== oBO.personenBis64) {
            if (this.schritt2BO.vpsBis64.length < oBO.personenBis64) {
                while (this.schritt2BO.vpsBis64.length < oBO.personenBis64) {
                    this.schritt2BO.vpsBis64.push(Util.copyOf(REF_VP));
                }
            } else if (this.schritt2BO.vpsBis64.length > oBO.personenBis64) {
                while(this.schritt2BO.vpsBis64.length > oBO.personenBis64) {
                    this.schritt2BO.vpsBis64.splice(this.schritt2BO.vpsBis64.length-1, 1);
                }
            }
        }
        if (this.schritt2BO.vpsAb65.length !== oBO.personenAb65) {
            if (this.schritt2BO.vpsAb65.length < oBO.personenAb65) {
                while (this.schritt2BO.vpsAb65.length < oBO.personenAb65) {
                    this.schritt2BO.vpsAb65.push(Util.copyOf(REF_VP));
                }
            } else if (this.schritt2BO.vpsAb65.length > oBO.personenAb65) {
                while(this.schritt2BO.vpsAb65.length > oBO.personenAb65) {
                    this.schritt2BO.vpsAb65.splice(this.schritt2BO.vpsAb65.length-1, 1);
                }
            }
        }
        if (this.vorbelegung.betreuer) {
            this.schritt2BO.einstellung.betreuer = Util.copyOf(this.vorbelegung.betreuer);
            this.data.einstellung.betreuerFestDefiniert = true;
            this.schritt2BO.einstellung.betreuerFestDefiniert = this.data.einstellung.betreuerFestDefiniert;
            if (this.data.einstellung.betreuerFinal==true)
            	delete this.vorbelegung["betreuer"];
        }
        if (this.vorbelegung.daten) {
            if (this.vorbelegung.daten.vn) {
                if (this.vorbelegung.daten.vn.anrede === "maennlich")
                    this.schritt2BO.vn.anrede = "HERR";
                else if (this.vorbelegung.daten.vn.anrede === "weiblich")
                    this.schritt2BO.vn.anrede = "FRAU";
                this.schritt2BO.vn.vorname = this.vorbelegung.daten.vn.vorname;
                this.schritt2BO.vn.name = this.vorbelegung.daten.vn.name;
                this.schritt2BO.vn.geburtsdatum = this.vorbelegung.daten.vn.geburtsdatum;
                this.schritt2BO.vn.plz = this.vorbelegung.daten.vn.plz;
                this.schritt2BO.vn.ort = this.vorbelegung.daten.vn.ort;
                this.schritt2BO.vn.strasse = this.vorbelegung.daten.vn.strasse;
                this.schritt2BO.vn.hausnr = this.vorbelegung.daten.vn.hausNr;
                this.schritt2BO.vn.telefon = this.vorbelegung.daten.vn.telefon;
                this.schritt2BO.vn.mail = this.vorbelegung.daten.vn.email;
                this.schritt2BO.vn.vorname = this.vorbelegung.daten.vn.vorname;
            }
            var vnSet = false;
            if (this.vorbelegung.daten.vpsUnter20 && this.vorbelegung.daten.vpsUnter20.length > 0) {
                if (this.vorbelegung.daten.vpsUnter20.length === this.schritt2BO.vpsUnter20.length) {
                    for(i=0; i<this.vorbelegung.daten.vpsUnter20.length; i++) {
                        if (this.vorbelegung.daten.vpsUnter20[i].anrede === "maennlich")
                            this.schritt2BO.vpsUnter20[i].anrede = "HERR";
                        else if (this.vorbelegung.daten.vpsUnter20[i].anrede === "weiblich")
                            this.schritt2BO.vpsUnter20[i].anrede = "FRAU";

                        this.schritt2BO.vpsUnter20[i].name = this.vorbelegung.daten.vpsUnter20[i].name;
                        this.schritt2BO.vpsUnter20[i].vorname = this.vorbelegung.daten.vpsUnter20[i].vorname;
                        this.schritt2BO.vpsUnter20[i].geburtsdatum = this.vorbelegung.daten.vpsUnter20[i].geburtsdatum;

                        if (!vnSet &&
                            this.schritt2BO.vpsUnter20[i].anrede === this.schritt2BO.vn.anrede &&
                            this.schritt2BO.vpsUnter20[i].name === this.schritt2BO.vn.name &&
                            this.schritt2BO.vpsUnter20[i].vorname === this.schritt2BO.vn.vorname &&
                            this.schritt2BO.vpsUnter20[i].geburtsdatum === this.schritt2BO.vn.geburtsdatum) {
                            this.schritt2BO.vpsUnter20[i].isVn = true;
                            vnSet = true;
                        }
                    }
                }
            }
            if (this.vorbelegung.daten.vpsBis64 && this.vorbelegung.daten.vpsBis64.length > 0) {
                if (this.vorbelegung.daten.vpsBis64.length === this.schritt2BO.vpsBis64.length) {
                    for(i=0; i<this.vorbelegung.daten.vpsBis64.length; i++) {
                        if (this.vorbelegung.daten.vpsBis64[i].anrede === "maennlich")
                            this.schritt2BO.vpsBis64[i].anrede = "HERR";
                        else if (this.vorbelegung.daten.vpsBis64[i].anrede === "weiblich")
                            this.schritt2BO.vpsBis64[i].anrede = "FRAU";

                        this.schritt2BO.vpsBis64[i].name = this.vorbelegung.daten.vpsBis64[i].name;
                        this.schritt2BO.vpsBis64[i].vorname = this.vorbelegung.daten.vpsBis64[i].vorname;
                        this.schritt2BO.vpsBis64[i].geburtsdatum = this.vorbelegung.daten.vpsBis64[i].geburtsdatum;

                        if (!vnSet &&
                            this.schritt2BO.vpsBis64[i].anrede === this.schritt2BO.vn.anrede &&
                            this.schritt2BO.vpsBis64[i].name === this.schritt2BO.vn.name &&
                            this.schritt2BO.vpsBis64[i].vorname === this.schritt2BO.vn.vorname &&
                            this.schritt2BO.vpsBis64[i].geburtsdatum === this.schritt2BO.vn.geburtsdatum) {
                            this.schritt2BO.vpsBis64[i].isVn = true;
                            vnSet = true;
                        }
                    }
                }
            }
            if (this.vorbelegung.daten.vpsAb65 && this.vorbelegung.daten.vpsAb65.length > 0) {
                if (this.vorbelegung.daten.vpsAb65.length === this.schritt2BO.vpsAb65.length) {
                    for(i=0; i<this.vorbelegung.daten.vpsAb65.length; i++) {
                        if (this.vorbelegung.daten.vpsAb65[i].anrede === "maennlich")
                            this.schritt2BO.vpsAb65[i].anrede = "HERR";
                        else if (this.vorbelegung.daten.vpsAb65[i].anrede === "weiblich")
                            this.schritt2BO.vpsAb65[i].anrede = "FRAU";

                        this.schritt2BO.vpsAb65[i].name = this.vorbelegung.daten.vpsAb65[i].name;
                        this.schritt2BO.vpsAb65[i].vorname = this.vorbelegung.daten.vpsAb65[i].vorname;
                        this.schritt2BO.vpsAb65[i].geburtsdatum = this.vorbelegung.daten.vpsAb65[i].geburtsdatum;

                        if (!vnSet &&
                            this.schritt2BO.vpsAb65[i].anrede === this.schritt2BO.vn.anrede &&
                            this.schritt2BO.vpsAb65[i].name === this.schritt2BO.vn.name &&
                            this.schritt2BO.vpsAb65[i].vorname === this.schritt2BO.vn.vorname &&
                            this.schritt2BO.vpsAb65[i].geburtsdatum === this.schritt2BO.vn.geburtsdatum) {
                            this.schritt2BO.vpsAb65[i].isVn = true;
                            vnSet = true;
                        }
                    }
                }
            }
            if (this.vorbelegung.daten.bankdaten) {
                if (this.vorbelegung.daten.bankdaten.kontoNr != null && this.vorbelegung.daten.bankdaten.kontoNr.length > 0) {
                    this.schritt2BO.zahlungsdaten.kto.selected = true;
                    this.schritt2BO.zahlungsdaten.kto.no = this.vorbelegung.daten.bankdaten.kontoNr;
                    this.schritt2BO.zahlungsdaten.kto.blz = this.vorbelegung.daten.bankdaten.blz;
                    this.schritt2BO.zahlungsdaten.bank = this.vorbelegung.daten.bankdaten.bankname;
                }
                else if (this.vorbelegung.daten.bankdaten.iban != null && this.vorbelegung.daten.bankdaten.iban.length > 0) {
                    this.schritt2BO.zahlungsdaten.iban.selected = true;
                    this.schritt2BO.zahlungsdaten.iban.no = this.vorbelegung.daten.bankdaten.iban;
                    this.schritt2BO.zahlungsdaten.kto.bic = this.vorbelegung.daten.bankdaten.blz;
                    this.schritt2BO.zahlungsdaten.bank = this.vorbelegung.daten.bankdaten.bankname;
                }
            }
            delete this.vorbelegung["daten"];
        }

        this.schritt1ValidationResult = this.validationResult;
        this.status = ProduktStatus.SCHRITT2;

        this.renderer = ProduktRendererFactory.getSchritt2RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt2BO);

        var oTarif = this.schritt1ValidationResult.tarifUnter20 || this.schritt1ValidationResult.tarifUnter65 || this.schritt1ValidationResult.tarifAb65;

        var context = this.data.context;
        if (!context)
        	context = {};
        context.mode = this.mode;

        ProduktTr.getTexte({
            "mandant": Config.mandant,
            "aid": Config.aid,
            "context": context /*{
                "id": null,
                "mode": "TEST"
            }*/,
            "typ": "TEXTE",
            "texteVP": {
                "anrede": "HERR",
                "name": "TestVP",
                "vorname": "Peter",
                "geburtsdatum": "01.01.2000",
                "id": "1",
                "vn": false,
                "versicherungsbeginn": this.schritt1BO.versicherungsbeginn,
                "beruf": null,
                "taetigkeitsstatus": null,
                "versorgerBeruf": null,
                "versorgerTaetigkeitsstatus": null,
                "versicherungsstatus": null,
                "gkv": null,
                "versicherungsnummer": null,
                "staatsangehoerigkeit": "Deutschland"
            },
            "texteTarif": oTarif
        }, "Lastschrift").done(function(oTextResult) {
            this.schritt2BO.texte = {
                lastschrift : JSON.parse(oTextResult.ergebnisTexte.Lastschrift)
            };

            this.renderer.render();
        }.bind(this)).fail(function() {
            defer.reject();
        });

    } else if (this.status === ProduktStatus.SCHRITT2) {
        this.schritt3BO = this.schritt2BO;
        this.status = ProduktStatus.SCHRITT3;

        this.renderer = ProduktRendererFactory.getSchritt3RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt3BO);

        var oTarif = this.schritt2BO.tarifErgebnisse.tarifUnter20 || this.schritt2BO.tarifErgebnisse.tarifUnter65 || this.schritt2BO.tarifErgebnisse.tarifAb65;

        var context = this.data.context;
        if (!context)
        	context = {};
        context.mode = this.mode;

        ProduktTr.getTexte({
            "mandant": Config.mandant,
            "aid": Config.aid,
            "context": context/*{
                "id": null,
                "mode": "TEST"
            }*/,
            "typ": "TEXTE",
            "texteVP": {
                "anrede": "HERR",
                "name": "TestVP",
                "vorname": "Peter",
                "geburtsdatum": this.schritt3BO.vn.geburtsdatum,
                "id": "1",
                "vn": false,
                "versicherungsbeginn": this.schritt3BO.versicherungsbeginn,
                "beruf": null,
                "taetigkeitsstatus": null,
                "versorgerBeruf": null,
                "versorgerTaetigkeitsstatus": null,
                "versicherungsstatus": null,
                "gkv": null,
                "versicherungsnummer": null,
                "staatsangehoerigkeit": null
            },
            "texteTarif": oTarif
        }, "Papierverzicht", "Abschlusserklaerung", "Beratungsverzicht", "Vertragsinformation", "DatenschutzTitle", "Vertragsgrundlagen", "VertragsinformationTitle", "Datenschutz").done(function(oTextResult) {
            Util.merge({
                papierverzicht : JSON.parse(oTextResult.ergebnisTexte.Papierverzicht),
                abschlusserklaerung : JSON.parse(oTextResult.ergebnisTexte.Abschlusserklaerung),
                beratungsverzicht : JSON.parse(oTextResult.ergebnisTexte.Beratungsverzicht),
                vertragsinformation: JSON.parse(oTextResult.ergebnisTexte.Vertragsinformation),

                datenschutzTitle : JSON.parse(oTextResult.ergebnisTexte.DatenschutzTitle),
                vertragsgrundlagen: JSON.parse(oTextResult.ergebnisTexte.Vertragsgrundlagen),
                vertragsinformationTitle : JSON.parse(oTextResult.ergebnisTexte.VertragsinformationTitle),
                datenschutz : JSON.parse(oTextResult.ergebnisTexte.Datenschutz),
            }, this.schritt3BO.texte);

            this.renderer.render();
        }.bind(this));
    } else if (this.status === ProduktStatus.SCHRITT3) {
        if (!this.schritt4BO) {
            this.schritt4BO = {
                    produkt : this.name,
                    einstellung : Util.copyOf(this.data.einstellung),
                    vk : {
                        accepted: false,
                    },
                    vvg : {
                        accepted: false,
                        downloaded: false
                    },
                    datenschutzerklaerung : {
                        accepted: false,
                        downloaded: false
                    },
                    noBeratung : {
                        accepted: false,
                    },
                    noPapierunterlagen : {
                        accepted: false,
                    }
            };
        } else {
            this.schritt4BO.vvg.accepted = false;
            this.schritt4BO.datenschutzerklaerung.accepted = false;
        }
        this.schritt4BO.produkt = this.schritt3BO.produkt;
        this.schritt4BO.capt = {
            bildCode: null,
            token: null
        };
        this.schritt4BO.betreuer = null;
        this.schritt4BO.texte = Util.copyOf(this.schritt3BO.texte);

        if (this.data.einstellung.betreuerwahl) {
            if (this.schritt3BO.betreuer.auswahlListe && this.schritt3BO.betreuer.manuelleAuswahl) {
                this.schritt3BO.betreuer.auswahlListe.some(function(currentBetreuer) {
                    if (currentBetreuer.selected) {
                        this.schritt4BO.betreuer = Util.copyOf(currentBetreuer);
                        delete this.schritt4BO.betreuer["selected"];
                        return true;
                    }
                    return false;
                }, this);
            }
        } else if (this.data.einstellung.betreuer) {
            this.schritt4BO.betreuer = Util.copyOf(this.data.einstellung.betreuer);
            if (this.data.einstellung.betreuerFinal!=true && this.vorbelegung.betreuer) {
            	this.schritt4BO.betreuer = Util.copyOf(this.vorbelegung.betreuer);
            }
        }

        this.schritt4BO.tarifErgebnisse = Util.copyOf(this.schritt3BO.tarifErgebnisse);
        this.schritt4BO.versicherungsbeginn = Util.copyOf(this.schritt3BO.versicherungsbeginn);
        this.schritt4BO.vn = Util.copyOf(this.schritt3BO.vn);
        this.schritt4BO.vpsUnter20 = Util.copyOf(this.schritt3BO.vpsUnter20);
        this.schritt4BO.vpsBis64 = Util.copyOf(this.schritt3BO.vpsBis64);
        this.schritt4BO.vpsAb65 = Util.copyOf(this.schritt3BO.vpsAb65);

        this.status = ProduktStatus.SCHRITT4;

        var context = this.data.context;
        if (!context)
        	context = {};
        context.mode = this.mode;

        ProduktTr.getIddDetails({
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            typ: "IDDDETAILS",
            iddDetails: this.schritt4BO.betreuer ? this.schritt4BO.betreuer : this.schritt3BO.einstellung.betreuer
        }).done(function(iddDetails) {
            this.schritt4BO.iddDetails = iddDetails;

            this.renderer = ProduktRendererFactory.getSchritt4RendererByStyle(this.style, this);
            this.renderer.setBO(this.schritt4BO);
            this.renderer.render();
        }.bind(this));
    }
};

AKDProdukt.prototype.pruefe = function(oBO) {
    var vpsUnter20 = [];
    var vpsUnter65 = [];
    var vpsAb65 = [];
    var versicherungsbeginn = oBO.versicherungsbeginn;

    oBO.vpsUnter20.forEach(function(vp, index) {
        var newBO = {
            "anrede": vp.anrede,
            "name": vp.name,
            "vorname": vp.vorname,
            "geburtsdatum": vp.geburtsdatum,
            "id": String(index+1),
            "vn": vp.isVn,
            "versicherungsbeginn": versicherungsbeginn,
            "beruf": "Kind",
            "taetigkeitsstatus": "Kind",
            "versorgerBeruf": "Software Engineer",
            "versorgerTaetigkeitsstatus": "Angestellter",
            "versicherungsstatus": "familienversichert",
            "gkv": null /*"KKH"*/,
            "versicherungsnummer": null,
            "staatsangehoerigkeit": null
        };
        vpsUnter65.push(newBO);
    });
    oBO.vpsBis64.forEach(function(vp, index) {
        var newBO = {
            "anrede": vp.anrede,
            "name": vp.name,
            "vorname": vp.vorname,
            "geburtsdatum": vp.geburtsdatum,
            "id": String(index+1),
            "vn": vp.isVn,
            "versicherungsbeginn": versicherungsbeginn,
            "beruf": "Software Engineer",
            "taetigkeitsstatus": "Angestellter",
            "versorgerBeruf": null,
            "versorgerTaetigkeitsstatus": null,
            "versicherungsstatus": "freiwillig gesetzlich versichert",
            "gkv": null /*"KKH"*/,
            "versicherungsnummer": null,
            "staatsangehoerigkeit": null
        };
        vpsUnter65.push(newBO);
    });
    oBO.vpsAb65.forEach(function(vp, index) {
        var newBO = {
            "anrede": vp.anrede,
            "name": vp.name,
            "vorname": vp.vorname,
            "geburtsdatum": vp.geburtsdatum,
            "id": String(index+1+oBO.vpsBis64.length),
            "vn": vp.isVn,
            "versicherungsbeginn": versicherungsbeginn,
            "beruf": "Software Engineer",
            "taetigkeitsstatus": "Angestellter",
            "versorgerBeruf": null,
            "versorgerTaetigkeitsstatus": null,
            "versicherungsstatus": "freiwillig gesetzlich versichert",
            "gkv": null /*"KKH"*/,
            "versicherungsnummer": null,
            "staatsangehoerigkeit": null
        };
        vpsAb65.push(newBO);
    });
    var tarifeUnter20 = oBO.tarifErgebnisse.tarifUnter20 === null ? [] : [Util.copyOf(oBO.tarifErgebnisse.tarifUnter20)];
    var tarifeUnter65 = oBO.tarifErgebnisse.tarifUnter65 === null ? [] : [Util.copyOf(oBO.tarifErgebnisse.tarifUnter65)];
    var tarifeAb65 = oBO.tarifErgebnisse.tarifAb65 === null ? [] : [Util.copyOf(oBO.tarifErgebnisse.tarifAb65)];
    function tarifAuswahlen(tarif) {
        tarif.ausgewaehlt = true;
    }
    var i;
    for(i=1; i<oBO.vpsUnter20.length; i++) {
        tarifeUnter20.push(Util.copyOf(oBO.tarifErgebnisse.tarifUnter20));
    }
    for(i=1; i<oBO.vpsBis64.length; i++) {
        tarifeUnter65.push(Util.copyOf(oBO.tarifErgebnisse.tarifUnter65));
    }
    for(i=1; i<oBO.vpsAb65.length; i++) {
        tarifeAb65.push(Util.copyOf(oBO.tarifErgebnisse.tarifAb65));
    }
    tarifeUnter65.forEach(tarifAuswahlen);
    tarifeAb65.forEach(tarifAuswahlen);

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.check({
        mandant: Config.mandant,
        context: context,
        aid: Config.aid,
        tkz: Config.tkz,
        versicherungsbeginn: oBO.versicherungsbeginn,
        vpsUnter65: vpsUnter65,
        vpsAb65: vpsAb65,
        tarifeUnter65: tarifeUnter65,
        tarifeAb65: tarifeAb65
    });
};

AKDProdukt.prototype.checkKonto = function(blz, konto) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.checkKonto({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "KONTO",
        kategorie: null,
        kontoBlz: blz,
        kontoNummer: konto
    });
};

AKDProdukt.prototype.checkIBAN = function(iban) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.checkKonto({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "IBAN",
        kategorie: null,
        ibanText: iban
    });
};

AKDProdukt.prototype.getBLZSuggestionsFor = function(blz) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBLZSuggestionsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BLZ",
        kategorie: null,
        blzText: blz
    });
};

AKDProdukt.prototype.getIbanSuggestionsFor = function(iban) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getIbanSuggestionsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "IBAN",
        kategorie: null,
        ibanText: iban
    });
};

AKDProdukt.prototype.getBetreuerlisteFor = function(plz) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBetreuerlisteFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BETREUERLISTE",
        kategorie: null,
        betreuerlistePlz: plz
    });
};

AKDProdukt.prototype.checkBetreuergebiet = function(plz) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBetreuerlisteFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "GEBIET",
        kategorie: null,
        gebietPlz: plz
    });
};

AKDProdukt.prototype.getBetreuerdetailsFor = function(betreuer) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBetreuerdetailsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BETREUERDETAILS",
        kategorie: null,
        betreuerdetails: betreuer/*{
            agenturname: null,
            agenturemail: null,
            vermittlernummer: null,
            adeId: null,
            type: null
        }*/
    });
};

AKDProdukt.prototype.getDruckstueckTariferklaerungBOandUrl = function(oBO) {
    var versicherungsbeginn = oBO.versicherungsbeginn;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "TARIF",
            druckstueckTarif: {
                druckSelbst: true,
                tkz: Config.tkz,
                versicherungsbeginn: versicherungsbeginn
            }
        },
        serviceUrl: ProduktTr.getDruckstueckTariferklaerungUrl()
    };
};

AKDProdukt.prototype.getDruckstueckVorschlagBOandUrl = function(oBO) {
    var versicherungsbeginn = oBO.versicherungsbeginn;
    var gkv = null;
    var geburtsdatum = null;
    var taetigkeitsstatus = null;
    var staatsangehoerigkeit = null;

    var vpVornamen = ['Anton', 'Bernd', 'Carl', 'Dieter', 'Emil'];

    var refVP = {
        anrede: null,
        name: null,
        vorname: null,
        geburtsdatum: null,
        id: null,
        vn: false,
        versicherungsbeginn: versicherungsbeginn,
        beruf: null,
        taetigkeitsstatus: null,
        versorgerBeruf: null,
        versorgerTaetigkeitsstatus: null,
        versicherungsstatus: null,
        gkv: null,
        versicherungsnummer: null,
        staatsangehoerigkeit: null
    };
    var vps = [];

    var fnBuildAddVP = function(bUnter20, bBis64) {
        return function(vp, index) {
            var newVP = Util.copyOf(refVP);
            newVP.id = String(vps.length);
            newVP.vorname = vpVornamen[index];
            if (bUnter20) {
                newVP.vorname += "chenchen";
            }
            else if (bBis64) {
                newVP.vorname += "chen";
            }
            newVP.name = 'Mueller';
            if (bUnter20)
                newVP.geburtsdatum = Util.buildGeburtsdatumAsString(13+index);
            else if (bBis64)
                newVP.geburtsdatum = Util.buildGeburtsdatumAsString(50+index);
            else
                newVP.geburtsdatum = Util.buildGeburtsdatumAsString(66+index);

            vps.push(newVP);
        };
    }

    var tarife = [];
    var tarif;

    if (oBO.vpsUnter20) {
    	oBO.vpsUnter20.forEach(fnBuildAddVP(true, false));
    	if (oBO.vpsUnter20.length > 0) {
	        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifUnter20);
	        tarif.ausgewaehlt = true;
	        oBO.vpsUnter20.forEach(function() {
	            tarife.push([tarif]);
	        });
	    }
    }

    oBO.vpsBis64.forEach(fnBuildAddVP(false, true));
    if (oBO.vpsBis64.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifUnter65);
        tarif.ausgewaehlt = true;
        oBO.vpsBis64.forEach(function() {
            tarife.push([tarif]);
        });
    }

    oBO.vpsAb65.forEach(fnBuildAddVP(false, false));
    if (oBO.vpsAb65.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifAb65);
        tarif.ausgewaehlt = true;
        oBO.vpsAb65.forEach(function() {
            tarife.push([tarif]);
        });

    }

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    var oBO = {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "VORSCHLAG",
            druckstueckTarif: null,
            druckstueckBeratung: null,
            druckstueckDatenschutz: null,
            druckstueckAnzeigepflicht: null,
            druckstueckSchweigepflicht: null,
            druckstueckVertragsinformation: null,
            druckstueckVorschlag: {
                vps: vps,
                tarife: tarife,
                fragen: null,
                antragsfragen: null,
            },
            druckstueckSEPA: null
        },
        serviceUrl: ProduktTr.getDruckstueckVorschlagUrl()
    };

    return oBO;
};

function buildFinalBO(bAbschluss, oBO) {
    var vn = {
        "anrede": oBO.vn.anrede,
        "name": oBO.vn.name,
        "vorname": oBO.vn.vorname,
        "geburtsdatum": oBO.vn.geburtsdatum,
        "titel": oBO.vn.titel,
        "strasse": oBO.vn.strasse,
        "hausNr": oBO.vn.hausnr,
        "plz": oBO.vn.plz,
        "ort": oBO.vn.ort,
        "telefon": oBO.vn.telefon,
        "email": oBO.vn.mail,
        "sepamandat": oBO.vn.zahlungsdaten.ksmSelected,
        "natioalitaet": null,
        "beruf": null,
        "taetigkeitsstatus": null,
        "bankdaten": {
            "kontotyp": oBO.vn.zahlungsdaten.iban.selected ? "IBAN" : "KTO",
            "vorname": oBO.vn.vorname,
            "name": oBO.vn.name,
            "kontoNr": oBO.vn.zahlungsdaten.kto.selected ? oBO.vn.zahlungsdaten.kto.no : null,
            "blz": oBO.vn.zahlungsdaten.kto.selected ? oBO.vn.zahlungsdaten.kto.blz : null,
            "bankname": oBO.vn.zahlungsdaten.bank,
            "iban": oBO.vn.zahlungsdaten.iban.selected ? oBO.vn.zahlungsdaten.iban.no : null,
            "bic": oBO.vn.zahlungsdaten.iban.selected ? oBO.vn.zahlungsdaten.iban.bic : null,
            "zahlweise": oBO.vn.zahlungsdaten.zahlungsweise,
            "kenntnisSM": oBO.vn.zahlungsdaten.ksmSelected
        }
    };
    var vps = [];
    oBO.vpsUnter20.forEach(function(vp) {
        vp = Util.copyOf(vp);
        vp.versicherungsbeginn = oBO.versicherungsbeginn;
        vps.push(vp);
    });
    oBO.vpsBis64.forEach(function(vp) {
        vp = Util.copyOf(vp);
        vp.versicherungsbeginn = oBO.versicherungsbeginn;
        vps.push(vp);
    });
    oBO.vpsAb65.forEach(function(vp) {
        vp = Util.copyOf(vp);
        vp.versicherungsbeginn = oBO.versicherungsbeginn;
        vps.push(vp);
    });
    var tarife = [];
    var tarif;
    if (oBO.vpsUnter20.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifUnter20);
        tarif.ausgewaehlt = true;
        oBO.vpsUnter20.forEach(function() {
            tarife.push([tarif]);
        });
    }
    if (oBO.vpsBis64.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifUnter65);
        tarif.ausgewaehlt = true;
        oBO.vpsBis64.forEach(function() {
            tarife.push([tarif]);
        });
    }
    if (oBO.vpsAb65.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifAb65);
        tarif.ausgewaehlt = true;
        oBO.vpsAb65.forEach(function() {
            tarife.push([tarif]);
        });
    }

    var betreuer = oBO.betreuer;
    if (betreuer===null)
        betreuer = this.schritt3BO.einstellung.betreuer;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    var req = {
            "mandant": Config.mandant,
            "aid": Config.aid,
            "context": context,
            "abschlussart": bAbschluss ? "VOLLZUG" : "VORBEREITUNG",
            "abschlussdaten": {
                "telefonBenachrichtigung": true,
                "telefonPrivat": oBO.vn.telefon,
                "telefonMobil": null,
                "mailBenachrichtigung": false,
                "mail": oBO.vn.mail,
                "einwilligungserklaerung": bAbschluss ? oBO.vvg.accepted : true,
                "vvg": true,
                "datenschutzerklaerung": bAbschluss ? oBO.datenschutzerklaerung.accepted : false,
                "beratungsverzicht": oBO.noBeratung.accepted,
                "papierverzicht": oBO.noPapierunterlagen.accepted,
                "betreuer": betreuer,
                "iddData": oBO.iddDetails.data,
                "vn": vn,
                "vps": vps,
                "tarife": tarife,
                "tffragen": null,
                "antragsfragen": null,
            },
            "vollzug": null
    };

    if (bAbschluss) {
        req.vollzug = {
            bildcode: oBO.capt.bildCode,
            token: oBO.capt.token
        }
    }

    return req;
}

AKDProdukt.prototype.getCaptcha = function(oBO) {
    return ProduktTr.getCaptcha(buildFinalBO.call(this, false, oBO));
};

AKDProdukt.prototype.abschlussFinish = function(oBO, oResult) {
    if (this.status === ProduktStatus.SCHRITT4) {
        this.status = ProduktStatus.SCHRITT5;
        this.renderer = ProduktRendererFactory.getSchritt5RendererByStyle(this.style, this);

        this.schritt5BO = {
            bo: oBO,
            result: oResult
        }
        this.renderer.setBO(this.schritt5BO);
        this.renderer.render(oResult);

        // cleanup data
        this.schritt1BO = null;
        this.schritt2BO = null;
        this.schritt3BO = null;
        this.schritt4BO = null;
        this.data = null;
    }
};

AKDProdukt.prototype.abschluss = function(oBO) {
    return ProduktTr.abschluss(buildFinalBO.call(this, true, oBO));
};

AKDProdukt.prototype.getDruckstueckVertragsinformationBOandUrl = function(oBO) {
    var vps = [];
    oBO.vpsUnter20.forEach(function(vp) {
        vp = Util.copyOf(vp);
        vp.id = String(vps.length);
        vp.versicherungsbeginn = oBO.versicherungsbeginn;
        vps.push(vp);
    });
    oBO.vpsBis64.forEach(function(vp) {
        vp = Util.copyOf(vp);
        vp.id = String(vps.length);
        vp.versicherungsbeginn = oBO.versicherungsbeginn;
        vps.push(vp);
    });
    oBO.vpsAb65.forEach(function(vp) {
        vp = Util.copyOf(vp);
        vp.id = String(vps.length);
        vp.versicherungsbeginn = oBO.versicherungsbeginn;
        vps.push(vp);
    });

    var tarife = [];
    var tarif;
    if (oBO.vpsUnter20.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifUnter20);
        tarif.ausgewaehlt = true;
        oBO.vpsUnter20.forEach(function() {
            tarife.push([tarif]);
        });
    }
    if (oBO.vpsBis64.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifUnter65);
        tarif.ausgewaehlt = true;
        oBO.vpsBis64.forEach(function() {
            tarife.push([tarif]);
        });
    }
    if (oBO.vpsAb65.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifAb65);
        tarif.ausgewaehlt = true;
        oBO.vpsAb65.forEach(function() {
            tarife.push([tarif]);
        });

    }

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "VERTRAGSINFORMATIONEN",
            druckstueckVertragsinformation: {
                vn: {
                    anrede: oBO.vn.anrede,
                    name: oBO.vn.name,
                    vorname: oBO.vn.vorname,
                    geburtsdatum: oBO.vn.geburtsdatum,
                    titel: oBO.vn.titel,
                    strasse: oBO.vn.strasse,
                    hausNr: oBO.vn.hausnr,
                    plz: oBO.vn.plz,
                    ort: oBO.vn.ort,
                    telefon: oBO.vn.telefon,
                    email: oBO.vn.mail,
                    sepamandat: oBO.vn.zahlungsdaten.ksmSelected,
                    natioalitaet: null,
                    beruf: null,
                    taetigkeitsstatus: null,
                    bankdaten: {
                        kontotyp: null,
                        vorname: null,
                        name: null,
                        kontoNr: null,
                        blz: null,
                        bankname: null,
                        iban: null,
                        bic: null,
                        zahlweise: null,
                        kenntnisSM: false
                    }
                },
                vps: vps,
                tarife: tarife,
                fragen: null,
                antragsfragen: null,
                iddData: oBO.iddDetails.data,
                visitenkartenURL: oBO.iddDetails.visitenkartenURL
            }
        },
        serviceUrl: ProduktTr.getDruckstueckVertragsinformationUrl()
    };
};

AKDProdukt.prototype.getDruckstueckDatenschutzBOandUrl = function(oBO) {
    var tarife = [];
    var tarif;
    if (oBO.vpsUnter20.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifUnter20);
        tarif.ausgewaehlt = true;
        oBO.vpsUnter20.forEach(function() {
            tarife.push(tarif);
        });
    }
    if (oBO.vpsBis64.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifUnter65);
        tarif.ausgewaehlt = true;
        oBO.vpsBis64.forEach(function() {
            tarife.push(tarif);
        });
    }
    if (oBO.vpsAb65.length > 0) {
        tarif = Util.copyOf(oBO.tarifErgebnisse.tarifAb65);
        tarif.ausgewaehlt = true;
        oBO.vpsAb65.forEach(function() {
            tarife.push(tarif);
        });
    }

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "DATENSCHUTZ",
            druckstueckTarif: null,
            druckstueckBeratung: null,
            druckstueckDatenschutz: {
                vpGKV: null,
                vpTarife: tarife,
                binary: true
            },
            druckstueckAnzeigepflicht: null,
            druckstueckSchweigepflicht: null
        },
        serviceUrl: ProduktTr.getDruckstueckDatenschutzUrl()
    };
};


module.exports = AKDProdukt;


/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = {
    SCHRITT1: "SCHRITT1",
    SCHRITT2: "SCHRITT2",
    SCHRITT3: "SCHRITT3",
    SCHRITT4: "SCHRITT4",
    SCHRITT5: "SCHRITT5"
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var Schritt1Renderer = __webpack_require__(24);
var Schritt1RendererIF6 = __webpack_require__(26);
var Schritt2Renderer = __webpack_require__(28);
var Schritt2RendererIF6 = __webpack_require__(30);
var Schritt3Renderer = __webpack_require__(32);
var Schritt3RendererIF6 = __webpack_require__(34);
var Schritt4Renderer = __webpack_require__(36);
var Schritt4RendererIF6 = __webpack_require__(38);
var Schritt5Renderer = __webpack_require__(40);
var Schritt5RendererIF6 = __webpack_require__(42);

module.exports = {

    getSchritt1RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt1Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt1RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt2RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt2Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt2RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },
    
    getSchritt3RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt3Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt3RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt4RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt4Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt4RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },
    
    getSchritt5RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt5Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt5RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    }
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Util = __webpack_require__(2);

var Schritt1Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt1Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt1Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(25);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt1Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;
    this.fnPruefen = [];
    var contentCreated;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        var fnTemplate = _.template(schrittTemplate.mainTemplate);
        var content = $(fnTemplate({produkt : "Auslandsreise-Krankenversicherung (AKD)", produktDesc : "", hotline: "(0681) 8 44-69 00", oeffnungszeit: "Montag - Freitag 9:00 - 19:00 Uhr"}));

        var versicherungsbeginnRow;
        var personenUnter20Row;
        var personenBis64Row;
        var personenAb65Row;
        var einElternteilRow;

        this.bEinElternteil = this.bEinElternteil || false;

        if (!SchrittRendererHelper.itemWithPseudoIdExists("kvo_content", rootElement)) {
            content.appendTo(rootElement);
            contentCreated = true;

            // versicherungsbeginn
            versicherungsbeginnRow = SchrittRendererHelper.getItemByPseudoId("versicherungsbeginnRow", rootElement);
            var versicherungsbeginnInput = versicherungsbeginnRow.find("input");
            var inputHandler;

            versicherungsbeginnInput.val(this.getBO().versicherungsbeginn || "");
            //versicherungsbeginnInput.inputmask("99.99.9999", {alias: "date"});
            versicherungsbeginnInput.inputmask({alias: "datum"});
            inputHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().versicherungsbeginn = res;
                } else {
                    that.getBO().versicherungsbeginn = unmaskedValue;
                }
            };
            $(versicherungsbeginnInput).keyup(inputHandler);
            $(versicherungsbeginnInput).blur(inputHandler);

            // select input
            var fnSelectInput = function() {
                var input = $(this)[0];
                input.select();
            };

            // personen bis 64
            personenBis64Row = SchrittRendererHelper.getItemByPseudoId("personenBis64Row", rootElement);
            var personenBis64Input = personenBis64Row.find("input");
            personenBis64Input.val(this.getBO().personenBis64);
            /*personenBis64Input.keydown(function () {
                $(this).data("old", $(this).val());
            });*/
            var fnValueChange = function() {
                /*var val = parseInt($(this).val(), 10);
                if (val !== NaN && val >= 0 && val <= 5) {
                    that.getBO().personenBis64 = val;
                } else {
                    var old = $(this).data("old");
                    $(this).val(old);
                    that.getBO().personenBis64 = old;
                }*/
                var val = $.trim($(this).val());
            	if (val=='0' || val=='1' || val=='2' || val=='3' || val=='4' || val=='5')
            		that.getBO().personenBis64 =  parseInt(val, 10);
            	else
            		that.getBO().personenBis64 = null;

                fnSelectInput.call(this);
            };
            //personenBis64Input.keyup(fnValueChange);
            personenBis64Input.change(fnValueChange);
            personenBis64Input.click(fnSelectInput);

            // personen unter 20
            personenUnter20Row = $();

            // personen ab 65
            personenAb65Row = SchrittRendererHelper.getItemByPseudoId("personenAb65Row", rootElement);
            var personenAb65Input = personenAb65Row.find("input");
            personenAb65Input.val(this.getBO().personenAb65);
            /*personenAb65Input.keydown(function () {
                $(this).data("old", $(this).val());
            });*/
            fnValueChange = function() {
                /*var val = parseInt($(this).val(), 10);
                if (val !== NaN && val >= 0 && val <= 5) {
                    that.getBO().personenAb65 = val;
                } else {
                    var old = $(this).data("old");
                    $(this).val(old);
                    that.getBO().personenAb65 = old;
                }*/
                var val = $.trim($(this).val());
            	if (val=='0' || val=='1' || val=='2' || val=='3' || val=='4' || val=='5')
            		that.getBO().personenAb65 = parseInt(val, 10);
            	else
            		that.getBO().personenAb65 = null;

                fnSelectInput.call(this);
            };
            //personenAb65Input.keyup(fnValueChange);
            personenAb65Input.change(fnValueChange);
            personenAb65Input.click(fnSelectInput);

            einElternteilRow = $();

            if (!that.getBO().berechnenMoeglich) {
                SchrittRendererHelper.getItemByPseudoId("berechnenRow", rootElement).hide();
            } else {
                SchrittRendererHelper.getItemByPseudoId("berechnenRow", rootElement).find("a").eq(0).click(function() {
                    $(".priceAndNextRow").remove();
                    $(".beforeAccordion").remove();
                    $(".accordion").remove();
                    $(".tarifbeitragContent").remove();

                    that._berechnen(true);
                });
            }

        } else {
            content = SchrittRendererHelper.getItemByPseudoId("kvo_content", rootElement);

            versicherungsbeginnRow = SchrittRendererHelper.getItemByPseudoId("versicherungsbeginnRow", rootElement);
            versicherungsbeginnRow.find("input").val(this.getBO().versicherungsbeginn || "");

            personenBis64Row = SchrittRendererHelper.getItemByPseudoId("personenBis64Row", rootElement);
            personenBis64Row.find("input").val(this.getBO().personenBis64);

            if (that.getBO().famAKD==='v1' || that.getBO().famAKD==='v2') {
               personenUnter20Row = SchrittRendererHelper.getItemByPseudoId("personenUnter20Row", rootElement);
            }
            // personen unter 19 bzw. 20
            if ((that.getBO().famAKD==='v1' || that.getBO().famAKD==='v2') && personenUnter20Row.length === 0) {
                var fnPersonenUnter20RowTemplate = _.template(that.getBO().famAKD==='v1' ? schrittTemplate.personenUnter20Row : schrittTemplate.personenUnter19Row);
                personenUnter20Row = $(fnPersonenUnter20RowTemplate());
                personenUnter20Row.insertBefore(personenBis64Row);

                var personenUnter20Input = personenUnter20Row.find("input");
                personenUnter20Input.val(this.getBO().personenUnter20);
                /*personenUnter20Input.keydown(function () {
                    $(this).data("old", $(this).val());
                });*/
                fnSelectInput = function() {
                    var input = $(this)[0];
                    input.select();
                };
                fnValueChange = function() {
                    /*var val = parseInt($(this).val(), 10);
                    if (val !== NaN && val >= 0 && val <= 5) {
                        that.getBO().personenUnter20 = val;
                    } else {
                        var old = $(this).data("old");
                        $(this).val(old);
                        that.getBO().personenUnter20 = old;
                    }*/
                    var val = $.trim($(this).val());
            	if (val=='0' || val=='1' || val=='2' || val=='3' || val=='4' || val=='5')
            		that.getBO().personenUnter20 = parseInt(val, 10);
            	else
            		that.getBO().personenUnter20 = null;

                    fnSelectInput.call(this);
                };
                personenUnter20Input.keyup(fnValueChange);
                personenUnter20Input.change(fnValueChange);
                personenUnter20Input.click(fnSelectInput);
            } else {
                personenUnter20Row = $();
            }
            personenUnter20Row.find("input").val(this.getBO().personenUnter20);

            personenAb65Row = SchrittRendererHelper.getItemByPseudoId("personenAb65Row", rootElement);
            personenAb65Row.find("input").val(this.getBO().personenAb65);


            einElternteilRow = SchrittRendererHelper.getItemByPseudoId("einElternteilRow", rootElement);

            if (einElternteilRow.length === 0 && (that.getBO().famAKD==='v1' || that.getBO().famAKD==='v2')) {
                var fnEinElternteilRowTemplate = _.template(schrittTemplate.einElternteilRow);
                einElternteilRow = $(fnEinElternteilRowTemplate());
                einElternteilRow.insertAfter(personenAb65Row);

                einElternteilRow.find("input").change(function() {
                    that.bEinElternteil = $(this).prop("checked");
                });
            } else {
                that.bEinElternteil = einElternteilRow.find("input").prop("checked");
            }
        }
        if (!this.getBO().berechnenMoeglich) {
            versicherungsbeginnRow.find("input").prop("readonly", true);
            personenBis64Row.find("input").prop("readonly", true);
            personenAb65Row.find("input").prop("readonly", true);
            personenUnter20Row.find("input").prop("readonly", true);
        }

        // validation handler
        // validation versicherungsbeginn
        var fnAddVersicherungsbeginnError = function(errorText) {
            var versicherungsbeginnLabel = versicherungsbeginnRow.find("label").first();
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorVersicherungsbeginn = $(fnErrorText({error: errorText}));

            errorVersicherungsbeginn.insertAfter(versicherungsbeginnLabel);
        };
        versicherungsbeginnRow.find(".error").remove();
        var validationErrorForVersicherungsbeginn = SchrittRendererHelper.getError(this.validationResult, "versicherungsbeginn");
        if (validationErrorForVersicherungsbeginn) {
            fnAddVersicherungsbeginnError(validationErrorForVersicherungsbeginn);
        }
        var validationVersicherungsbeginnObject = {
            fnErrorRemoval: function() {
                versicherungsbeginnRow.find(".error").remove();
            },
            aFnValidationAndAddError: [{
                fnValidation: function() {
                    var check;
                    if (that.getBO().versicherungsbeginn && Util.parseAsDateObject(that.getBO().versicherungsbeginn)) {
                        check = true;
                    } else {
                        check = false;
                    }
                    return check;
                },
                fnAddError: function() {
                    fnAddVersicherungsbeginnError("Die Angabe im Feld Versicherungsbeginn ist ungültig.");
                }
            }, {
                fnValidation: function() {
                    var check;
                    var date = Util.parseAsDateObject(that.getBO().versicherungsbeginn);
                    if (date && !Util.isInPast(date)) {
                        check = true;
                    } else {
                        check = false
                    }
                    return check;
                },
                fnAddError: function() {
                    fnAddVersicherungsbeginnError("Die Angabe im Feld Versicherungsbeginn liegt in der Vergangenheit.");
                }
            }, {
                fnValidation: function() {
                    var check;
                    var date = Util.parseAsDateObject(that.getBO().versicherungsbeginn);
                    if (date && !Util.isToday(date)) {
                        check = true;
                    } else {
                        check = false
                    }
                    return check;
                },
                fnAddError: function() {
                    fnAddVersicherungsbeginnError("Die nächstmögliche Versicherungsbeginn ist der nächste Tag.");
                }
            }, {
                fnValidation: function() {
                    var check;
                    var date = Util.parseAsDateObject(that.getBO().versicherungsbeginn);
                    if (date && Util.isInFuture(date)) {
                        check = true;
                    } else {
                        check = false
                    }
                    return check;
                },
                fnAddError: function() {
                    fnAddVersicherungsbeginnError("Die Angabe im Feld Versicherungsbeginn liegt in der Vergangenheit.");
                }
            }, {
                fnValidation: function() {
                    var check;
                    var date = Util.parseAsDateObject(that.getBO().versicherungsbeginn);
                    if (date && Util.diffInMonths(date) <= 6) {
                        check = true;
                    } else {
                        check = false
                    }
                    return check;
                },
                fnAddError: function() {
                    fnAddVersicherungsbeginnError("Der Versicherungsbeginn kann maximal 6 Monate vordatiert werden!");
                }
            }]
        };
        this.fnPruefen.push(validationVersicherungsbeginnObject);

        // validation personen unter 20
        var fnAddPersonenUnter20Error = function(errorText) {
            var personenUnter20Label = personenUnter20Row.find("label").first();
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorPersonenUnter20 = $(fnErrorText({error: errorText}));

            errorPersonenUnter20.insertAfter(personenUnter20Label);
        };
        personenUnter20Row.find(".error").remove();
        var validationErrorForPersonenUnter20 = SchrittRendererHelper.getError(this.validationResult, "vp.anzahlUnter20");
        if (validationErrorForPersonenUnter20) {
            fnAddPersonenUnter20Error(validationErrorForPersonenUnter20);
        }
        var fnPersonenUnter20Validation = function() {
            var check;
            if (that.getBO().famAKD==='v1' || that.getBO().famAKD==='v2') {
                if (that.getBO().personenUnter20 !== undefined && that.getBO().personenUnter20 !== null) {
                    if (that.getBO().personenUnter20 >= 0 && that.getBO().personenUnter20 <= 5) {
                        check = true;
                    } else {
                        check = false;
                    }
                } else {
                    check = false;
                }
            } else {
                check = true;
            }
            return check;
        };
        var validationPersonenUnter20Object = {
            fnErrorRemoval: function() {
                personenUnter20Row.find(".error").remove();
            },
            aFnValidationAndAddError: [{
                fnValidation: fnPersonenUnter20Validation,
                fnAddError: function() {
                    fnAddPersonenUnter20Error("Die Angabe im Feld ist ungültig.");
                }
            }]
        };
        this.fnPruefen.push(validationPersonenUnter20Object);

        // validation personen bis 64
        var fnAddPersonenBis64Error = function(errorText) {
            var personenBis64Label = personenBis64Row.find("label").first();
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorPersonenBis64 = $(fnErrorText({error: errorText}));

            errorPersonenBis64.insertAfter(personenBis64Label);
        };
        personenBis64Row.find(".error").remove();
        var validationErrorForPersonenBis64 = SchrittRendererHelper.getError(this.validationResult, "vp.anzahlUnter65");
        if (validationErrorForPersonenBis64) {
            fnAddPersonenBis64Error(validationErrorForPersonenBis64);
        }
        var fnPersonenBis64Validation = function() {
            var check;
            if (that.getBO().personenBis64 !== undefined && that.getBO().personenBis64 !== null) {
                if (that.getBO().personenBis64 >= 0 && that.getBO().personenBis64 <= 5) {
                    check = true;
                } else {
                    check = false;
                }
            } else {
                check = false;
            }
            return check;
        };
        var validationPersonenBis64Object = {
            fnErrorRemoval: function() {
                personenBis64Row.find(".error").remove();
            },
            aFnValidationAndAddError: [{
                fnValidation: fnPersonenBis64Validation,
                fnAddError: function() {
                    fnAddPersonenBis64Error("Die Angabe im Feld ist ungültig.");
                }
            }]
        };
        this.fnPruefen.push(validationPersonenBis64Object);

        // validation personen ab 65
        var fnAddPersonenAb65Error = function(errorText) {
            var personenAb65Label = personenAb65Row.find("label").first();
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorPersonenAb65 = $(fnErrorText({error: errorText}));

            errorPersonenAb65.insertAfter(personenAb65Label);
        };
        personenAb65Row.find(".error").remove();
        var validationErrorForPersonenAb65 = SchrittRendererHelper.getError(this.validationResult, "vp.anzahlAb65");
        if (validationErrorForPersonenAb65) {
            fnAddPersonenAb65Error(validationErrorForPersonenAb65);
        }
        var fnPersonenAb65Validation = function() {
            var check;
            if (that.getBO().personenAb65 !== undefined && that.getBO().personenAb65 !== null) {
                if (that.getBO().personenAb65 >= 0 && that.getBO().personenAb65 <= 5) {
                    check = true;
                } else {
                    check = false;
                }
            } else {
                check = false;
            }
            return check;
        };
        var validationPersonenAb65Object = {
            fnErrorRemoval: function() {
                personenAb65Row.find(".error").remove();
            },
            aFnValidationAndAddError: [{
                fnValidation: fnPersonenAb65Validation,
                fnAddError: function() {
                    fnAddPersonenAb65Error("Die Angabe im Feld ist ungültig.");
                }
            }]
        };
        this.fnPruefen.push(validationPersonenAb65Object);

        // validation summe personen
        var fnAddSummePersonenError = function(errorText) {
            var infoBox = content.find(".infobox").first();

            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var error = $(fnErrorText({error: errorText}));

            var fnLabeledContentWithBigAntwortRowTemlate = _.template(schrittTemplate.labeledContentWithBigAntwortRowTemlate);

            var errorRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Es liegen folgende Fehler vor:", content: error.prop("outerHTML")}));
            errorRow.addClass("commonError");
            errorRow.prependTo(infoBox);
        };

        var fnSummePersonenValidation = function() {
            var check;

            var bo = that.getBO();
            if (bo.famAKD==='v1' || bo.famAKD==='v2') {
                if (bo.personenUnter20 !== undefined && bo.personenUnter20 !== null && bo.personenBis64 !== undefined && bo.personenBis64 !== null && bo.personenAb65 !== undefined && bo.personenAb65 !== null) {
                    if (bo.personenUnter20 >= 1 && bo.personenUnter20 <= 5 && (bo.personenBis64 >= 1 || bo.personenAb65 >= 1) && bo.personenBis64 <= 5 && bo.personenAb65 <= 5 &&
                        bo.personenUnter20+bo.personenBis64+bo.personenAb65 >= 2 && bo.personenUnter20+bo.personenBis64+bo.personenAb65 <= 5) {
                        check = true;
                    } else {
                        check = false;
                    }
                } else {
                    check = false;
                }
            } else {
                if (bo.personenBis64 !== undefined && bo.personenBis64 !== null && bo.personenAb65 !== undefined && bo.personenAb65 !== null) {
                    if (bo.personenBis64 >= 0 && bo.personenBis64 <= 5 && bo.personenAb65 >= 0 && bo.personenAb65 <= 5 &&
                        bo.personenBis64+bo.personenAb65 >= 1 && bo.personenBis64+bo.personenAb65 <= 5) {
                        check = true;
                    } else {
                        check = false;
                    }
                } else {
                    check = false;
                }
            }
            return check;
        };
        var validationSummePersonen = {
            fnErrorRemoval: function() {
                $(".commonError").remove();
            },
            aFnValidationAndAddError: [{
                fnValidation: fnSummePersonenValidation,
                fnAddError: function() {
                    if (that.getBO().famAKD==='v1') {
                        fnAddSummePersonenError("Die Anzahl zu versichernder Personen unter 20 sowie darüber muss mindestens 1 betragen und darf maximal 5 betragen.");
                    } else if (that.getBO().famAKD==='v2') {
                        fnAddSummePersonenError("Die Anzahl zu versichernder Personen unter 19 sowie darüber muss mindestens 1 betragen und darf maximal 5 betragen.");
                    } else {
                        fnAddSummePersonenError("Die Anzahl zu versichernder Personen muss mindestens 1 und darf maximal 5 betragen.");
                    }
                }
            }]
        };
        this.fnPruefen.push(validationSummePersonen);

        var validationEinElternteil = {
            fnErrorRemoval: function() {
                einElternteilRow.find(".error").remove();
            },
            aFnValidationAndAddError: [{
                fnValidation: function() {
                    var bo = that.getBO();
                    if (bo.famAKD==='v1' || bo.famAKD==='v2' ) {
                        return that.bEinElternteil;
                    } else {
                        return true;
                    }
                },
                fnAddError: function() {
                    if (that.getBO().famAKD==='v1' || that.getBO().famAKD==='v2') {
                        var einElternteilRowLabel = einElternteilRow.find("label").first();
                        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                        var errorEinElternteil = $(fnErrorText({error: "Der Tarif Familien-Auslandsreisekrankenversicherung kann nur abgeschlossen werden, wenn ein Elternteil der angegebenen Kinder/Jugendlichen mitversichert ist. Falls dies nicht zutrifft verwenden Sie bitte den Tarif Auslandsreisekrankenversicherung."}));

                        errorEinElternteil.insertAfter(einElternteilRowLabel);
                    }
                }
            }]
        };
        this.fnPruefen.push(validationEinElternteil);

        // validation result
        $(".commonError").remove();
        if (validationResult) {
            $(".priceAndNextRow").remove();
            $(".beforeAccordion").remove();
            $(".accordion").remove();
            $(".tarifbeitragContent").remove();

            var modul = Util.getProp(this.getBO(), ["einstellung", "modul"]);
            var absicherungContent = SchrittRendererHelper.getItemByPseudoId("absicherungContent");
            absicherungContent.find("h1").html(modul.tariftyp);

            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            trennerLeistungen.nextAll().remove();

            var leistungen = Util.getProp(this.getBO(), ["einstellung", "modul", "leistungen"]);
            leistungen.forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });

            if (validationResult.state === "NOK" || validationResult.state === "EXCEPTION") {
                var validationErrors = [];
                if (validationResult.state === "EXCEPTION") {
                    if (validationResult.exeption && validationResult.exeption.message) {
                        validationErrors.push({fieldName: "vp.tarif", message: validationResult.exeption.message});
                    }
                } else if (validationResult.state === "NOK") {
                    validationErrors = validationResult.validationErrors;
                }

                var commonErrors = validationErrors.filter(function(validationError) {
                    return validationError.fieldName.indexOf("vp.tarif") === 0;
                });

                infoBox = content.find(".infobox").first();

                _.chain(commonErrors).reverse().forEach(function(commonError) {
                    fnAddSummePersonenError(commonError.message);
                });
            } else if (validationResult.state === "OK") {
                var fnPriceAndNextRows = _.template(schrittTemplate.priceAndNextButtonRows);

                var anzahlVPs = this.getBO().personenUnter20 + this.getBO().personenAb65 + this.getBO().personenBis64;
                var beitragText = "Jährlicher Gesamtbeitrag für " + anzahlVPs + " Person" + (anzahlVPs === 1 ? "" : "en") + " <b>" + validationResult.gesamtbeitrag + " &euro;</b>";

                var priceAndNextRows = fnPriceAndNextRows({beitragText: beitragText});
                $(priceAndNextRows).insertAfter(content);

                $(".priceAndNextRow").find("a").eq(0).click(function() {
                    that.setBusy(true);
                    that._berechnenUndWeiter().always(function() {
                        that.setBusy(false);
                    });
                });

                // beitraege mehrwertbox
                var nextPositionToPut = trennerLeistungen.nextAll().last();
                var accordionBeforeTemplate = _.template(schrittTemplate.mehrwertBoxTarifBeforeAccordionTemplate);
                var accordionBefore = $(accordionBeforeTemplate({beitrag: validationResult.gesamtbeitrag}));
                accordionBefore.insertAfter(nextPositionToPut);
                nextPositionToPut = accordionBefore;

                var mehrwertBoxTarifAccordionStartTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionStartTemplate);
                var mehrwertBoxTarifAccordionStart = $(mehrwertBoxTarifAccordionStartTemplate());
                mehrwertBoxTarifAccordionStart.insertAfter(nextPositionToPut);
                nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("accordion-anchor", mehrwertBoxTarifAccordionStart);

                if (that.getBO().famAKD==='v2') {
                	mehrwertBoxTarifAccordionStart.hide();
                } else {
	                mehrwertBoxTarifAccordionStart.find("a").click(function(){
	                    mehrwertBoxTarifAccordionStart.find("a").toggleClass("active");
	                    mehrwertBoxTarifAccordionStart.find("div.content").toggleClass("active");
	                });
                }

                var itemCount = 0;
                var aPersonAndValue = [];
                var i;
                for(i=0; i<this.getBO().personenUnter20; i++) {
                    aPersonAndValue.push({
                        name: "Person " + (aPersonAndValue.length+1) + ": unter 20 Jahre",
                        tarif: validationResult.tarifUnter20.beschreibung,
                        value: validationResult.tarifUnter20.beitrag
                    });
                }
                var fnPrintPersonAndValue = function(oPersonAndValue) {
                    var mehrwertBoxTarifAccordionItemTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionItemTemplate);
                    var mehrwertBoxTarifAccordionItem = $(mehrwertBoxTarifAccordionItemTemplate({text: oPersonAndValue.name}));
                    if (itemCount === 0)
                        mehrwertBoxTarifAccordionItem.appendTo(nextPositionToPut);
                    else
                        mehrwertBoxTarifAccordionItem.insertAfter(nextPositionToPut);
                    nextPositionToPut = mehrwertBoxTarifAccordionItem;

                    var tarifWertContentTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionTarifWertTemplate);
                    var tarifWertContent = $(tarifWertContentTemplate({tarif: oPersonAndValue.tarif, wert: oPersonAndValue.value}));
                    tarifWertContent.insertAfter(nextPositionToPut);

                    nextPositionToPut = tarifWertContent[tarifWertContent.length-1];

                    itemCount++;
                };
                aPersonAndValue.forEach(fnPrintPersonAndValue);

                aPersonAndValue = [];
                for(i=0; i<this.getBO().personenBis64; i++) {
                    aPersonAndValue.push({
                        name: "Person " + (this.getBO().personenUnter20+aPersonAndValue.length+1) + ": bis 64 Jahre",
                        tarif: validationResult.tarifUnter65.beschreibung,
                        value: validationResult.tarifUnter65.beitrag
                    });
                }
                aPersonAndValue.forEach(fnPrintPersonAndValue);

                aPersonAndValue = [];
                for(i=0; i<this.getBO().personenAb65; i++) {
                    aPersonAndValue.push({
                        name: "Person " + (this.getBO().personenUnter20+this.getBO().personenBis64+aPersonAndValue.length+1) + ": ab 65 Jahre",
                        tarif: validationResult.tarifAb65.beschreibung,
                        value: validationResult.tarifAb65.beitrag
                    });
                }
                aPersonAndValue.forEach(fnPrintPersonAndValue);

                var mehrwertBoxTarifbeitragTemplate = _.template(schrittTemplate.mehrwertBoxTarifbeitragTemplate);
                var tarifbeitragContent = $(mehrwertBoxTarifbeitragTemplate({beitrag: validationResult.gesamtbeitrag}));

                tarifbeitragContent.appendTo(SchrittRendererHelper.getItemByPseudoId("accordion-anchor", mehrwertBoxTarifAccordionStart));
                tarifbeitragContent.addClass("tarifbeitragContent");
            }
        }

       	window.jQuery(document).foundation();

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt1Renderer.prototype._berechnen = function(bRender) {
    var deferred = $.Deferred();

    var promises = [];

    this.fnPruefen.forEach(function(oFnWithDeferred) {
        oFnWithDeferred.fnErrorRemoval();

        var deferred = $.Deferred();
        promises.push(deferred.promise());

        var subDeferreds = [];

        var aFnValidationAndAddError = oFnWithDeferred.aFnValidationAndAddError;
        aFnValidationAndAddError.every(function(oFnValidationAndAddError) {
            var subDeferred = $.Deferred();
            var proceed = true;

            var ok = oFnValidationAndAddError.fnValidation();
            if (ok) {
                subDeferred.resolve(true);
                proceed = true;
            } else {
                oFnValidationAndAddError.fnAddError();
                subDeferred.resolve(false);
                proceed = false;
            }
            subDeferreds.push(subDeferred);

            return proceed;
        });

        $.when.apply($, subDeferreds).then(function() {
            if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        });
    });

    $.when.apply($, promises).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
            var bo = this.getBO();
            var versicherungsbeginn = bo.versicherungsbeginn;
            var personenUnter20 = bo.personenUnter20;
            var personenBis64 = bo.personenBis64;
            var personenAb65 = bo.personenAb65;

            this.setBusy(true);
            this.oProdukt.berechnen(!bRender, versicherungsbeginn, personenUnter20, personenBis64, personenAb65).then(function(oResult) {
                deferred.resolve(oResult);
            }).fail(function() {
                deferred.reject();
            }).always(function() {
                this.setBusy(false);
            }.bind(this));
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
            deferred.reject();
        }
    }.bind(this));

    return deferred.promise();
};

Schritt1Renderer.prototype._berechnenUndWeiter = function() {
    var deferred = $.Deferred();
    var oBO = this.getBO();

    this._berechnen(false).then(function(oResult) {
        deferred.resolve();

        this.oProdukt.weiter(oBO, oResult);
    }.bind(this)).fail(function() {
        deferred.reject();
    });

    return deferred.promise();
};

module.exports = Schritt1Renderer;


/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = {
    mainTemplate : ' \
                    <a style="color: white" id="top_anchor" href="#"></a> \
                    <div class="off-canvas-wrap"> \
                        <div class="inner-wrap"> \
                            <header> \
                                <div class="sticky-wrapper" style=""> \
                                    <div class="contain-to-grid sticky"> \
                                        <section class="navigation"> \
                                            <nav> \
                                                <div class="clearfix row"> \
                                                    <div class="large-12 columns hide-general"> \
                                                        <ul class="left"> \
                                                            <li> \
                                                                <h4>Tarifrechner <%= produkt %></h4> \
                                                            </li> \
                                                        </ul> \
                                                    </div> \
                                                </div> \
                                            </nav> \
                                        </section> \
                                    </div> \
                                </div> \
                            </header> \
                            <main> \
                                <div class="row"> \
                                    <div class="large-12 small-12 columns content-container"> \
                                        <div class="row"> \
                                            <div class="large-12 columns"> \
                                                <div class="rowX"> \
                                                    <ol class="progress-indicator"> \
                                                        <li class="is-current" data-step="1"> \
                                                            <span>Angaben zur Absicherung</span> \
                                                        </li> \
                                                        <li class="" data-step="2"> \
                                                            <span></span> \
                                                        </li> \
                                                        <li class="" data-step="3"> \
                                                            <span></span> \
                                                        </li> \
                                                        <li class="is-last" data-step="4"> \
                                                            <span>Online beantragen</span> \
                                                        </li> \
                                                    </ol> \
                                                </div> \
                                            </div> \
                                            <!-- Content --> \
                                            <!-- linker Contentbereich --> \
                                            <div class="large-8 medium-7 columns kvo-content" kv_ref="kvo-content"> \
                                                <!-- Pflichtfelder, SSL --> \
                                                <div class="kvo-content-1" kv_ref="kvo-content-1"> \
                                                    <div class="kvo-title"> \
                    	                                <h1>Antrag auf Auslandsreise-Krankenversicherung-Dauerpolice nach Tarif AKD</h1> \
                                                        <div class="row"> \
                                                            <div class="large-12 medium-12 columns"> \
                                                                <span>Ich beantrage bei der Union Krankenversicherung AG den Abschluss der zuvor ausgewählten Krankenversicherung(en), gegebenenfalls als Vertragsänderung.</span> \
                                                                <p>&nbsp;</p> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                    <hr /> \
                                                    <div class="kvo-content" kv_ref="kvo_content"> \
                                                        <div class="row"> \
                                                            <div class="medium-12 columns infobox"> \
                                                                <div class="row" kv_ref="versicherungsbeginnRow"> \
                                                                    <div class="medium-6 columns" data-abide> \
                                                                        <label kv_ref="versicherungsbeginnLabel">Versicherungsbeginn</label> \
                                                                        <div class="row"> \
                                                                            <div class="large-12 medium-12 small-12 columns"> \
                                                                                <input placeholder="TT.MM.JJJJ" class="intType autoTab" value="" maxlength="10" name="p_vers_beginn" type="text" style=""> \
                                                                            </div> \
                                                                        </div> \
                                                                    </div> \
                                                                </div> \
                                                                <div class="row"> \
                                                                    <div class="medium-12 columns"> \
                                                                        <div class="row"> \
                                                                            <div class="small-12 columns" data-abide> \
                                                                                <label><strong><span style="font-size: 1.2em">Wie viele Personen sollen versichert werden?</span>(Maximal 5 Personen pro Vertrag)</strong></label> \
                                                                            </div> \
                                                                        </div> \
                                                                        <div class="row"> \
                                                                            <div class="medium-6 columns"> \
                                                                                <div style="margin-bottom: 5px" /> \
                                                                            </div> \
                                                                        </div> \
                                                                    </div> \
                                                                </div> \
                                                                <div class="row" kv_ref="personenBis64Row"> \
                                                                    <div class="medium-6 columns" data-abide> \
                                                                        <div class="row"> \
                                                                            <div class="small-12 columns" data-abide> \
                                                                                <label>Anzahl der Personen bis 64 Jahre<span data-tooltip="" class="has-tip" title="Bitte geben Sie die Anzahl der zu versichernden Personen von 0-64 Jahren ein.">&nbsp;<a class="info">i</a></span></label> \
                                                                            </div> \
                                                                        </div> \
                                                                        <div class="row"> \
                                                                            <div class="large-12 medium-12 small-12 columns"> \
                                                                                <input type="number" min="0" max="5"> \
                                                                            </div> \
                                                                        </div> \
                                                                    </div> \
                                                                </div> \
                                                                <div class="row" kv_ref="personenAb65Row"> \
                                                                    <div class="medium-6 columns" data-abide> \
                                                                        <div class="row"> \
                                                                            <div class="small-12 columns" data-abide> \
                                                                                <label>Anzahl der Personen ab 65 Jahre<span data-tooltip="" class="has-tip" title="Bitte geben Sie die Anzahl der zu versichernden Personen ab Alter 65 ein.">&nbsp;<a class="info">i</a></span></label> \
                                                                            </div> \
                                                                        </div> \
                                                                        <div class="row"> \
                                                                            <div class="large-12 medium-12 small-12 columns"> \
                                                                                <input type="number" min="0" max="5"> \
                                                                            </div> \
                                                                        </div> \
                                                                    </div> \
                                                                </div> \
                                                                <div class="row" kv_ref="berechnenRow"> \
                                                                    <div class="medium-5 large-4 columns right"> \
                                                                        <a class="call-to-action button expand" href="javascript:void(0);">Beitrag berechnen</a> \
                                                                    </div> \
                                                                </div> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <!-- rechte Mehrwertbox --> \
                                            <div class="large-4 medium-5 columns"> \
                                                <div class="row "> \
                                                    <!-- Ausgabe eingegebener Daten --> \
                                                    <div class="medium-11 small-12 summarybox right"> \
                                                        <div class="row" kv_ref="absicherungContent"> \
                                                            <div class="medium-12 columns"> \
                                                                <h2>Ihre gewünschte Absicherung</h2> \
                                                                <h1><%= produkt %></h1> \
                                                                <p><%= produktDesc %></p> \
                                                                <br kv_ref="trenner_leistungen" /> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row ssl"> \
                                            <div class="columns medium-12 "> \
                                                <p>&nbsp;</p> \
                                                <span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
                            </main> \
                        </div> \
                    </div>',

    einElternteilRow:  '<div class="row" kv_ref="einElternteilRow"> \
                            <div class="medium-6 columns" data-abide> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="large-12 medium-12 small-12 columns"> \
                                        <input type="checkbox" id="p_ein_elternteil"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_ein_elternteil"> Ich bestätige, dass eine der versicherten Personen ein Elternteil der angegebenen Kinder/Jugendlichen ist.</label> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    personenUnter20Row: '<div class="row" kv_ref="personenUnter20Row"> \
                            <div class="medium-6 columns" data-abide> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label>Anzahl der Personen unter 20 Jahre<span data-tooltip="" class="has-tip" title="Bitte geben Sie die Anzahl der zu versichernden Personen von 0-19 Jahren ein.">&nbsp;<a class="info">i</a></span></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="large-12 medium-12 small-12 columns"> \
                                        <input type="number" min="0" max="5"> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

   personenUnter19Row: '<div class="row" kv_ref="personenUnter20Row"> \
                        <div class="medium-6 columns" data-abide> \
                            <div class="row"> \
                                <div class="small-12 columns" data-abide> \
                                    <label>Anzahl der Personen unter 19 Jahre<span data-tooltip="" class="has-tip" title="Bitte geben Sie die Anzahl der zu versichernden Personen von 0-18 Jahren ein.">&nbsp;<a class="info">i</a></span></label> \
                                </div> \
                            </div> \
                            <div class="row"> \
                                <div class="large-12 medium-12 small-12 columns"> \
                                    <input type="number" min="0" max="5"> \
                                </div> \
                            </div> \
                        </div> \
                    </div>',

    priceAndNextButtonRows: ' \
                            <div class="row priceAndNextRow"> \
                                <div class="medium-5 large-4 columns right"> \
                                    <div style="margin-bottom: 10px" /> \
                                </div> \
                            </div> \
                            <div class="row priceAndNextRow" kv_ref="beitragRow"> \
                                <div class="medium-12 columns"> \
                                    <div class="row"> \
                                        <div class="large-12 columns" data-abide> \
                                            <label class="infobox" kv_ref="beitragLabel"><%= beitragText %></label> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                            <hr class="priceAndNextRow" /> \
                            <div class="row priceAndNextRow"> \
                                <div class="medium-5 large-4 columns right text-right"> \
                                    <p>&nbsp;</p> \
                                    <a class="call-to-action button expand check">weiter zu Schritt 2</a> \
                                    <p class="small-text button-subline">Personen- und Zahlungsdaten</p> \
                                </div> \
                            </div> \
                            ',

    labeledContentWithBigAntwortRowTemlate: ' \
                            <div class="row"> \
                                <div class="medium-9 columns"> \
                                    <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label><%= label %></label> \
                                    </div> \
                                    </div> \
                                    <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <%= content %>  \
                                    </div> \
                                    </div> \
                                </div> \
                            </div> \
                            ',

    errorLabelTemplate: '<small style="display: block" class="error"><%- error %></small>',

    mehrwertBoxTarifBeforeAccordionTemplate:
                        ' \
                        <div class="row display-sum" style="margin-top: 30px"> \
                            <div class="medium-7 small-8 columns"> \
                                <label><h3>Jährlicher Gesamtbeitrag</h3></label> \
                            </div> \
                            <div class="medium-5 small-4 columns"> \
                                <input readonly="" type="text" value="<%= beitrag %> \u20AC"> \
                            </div> \
                        </div> \
                        ',

    mehrwertBoxTarifbeitragTemplate: ' \
                        <hr /> \
                        <div class="row display-sum"> \
                            <div class="medium-7 small-8 columns mb05"> \
                                <label class="summary"><strong>Jährlicher Gesamtbeitrag</strong></label> \
                            </div> \
                            <div class="medium-5 small-4 columns"> \
                                <input readonly="" type="text" value="<%= beitrag %> \u20AC"> \
                            </div> \
                        </div> \
                            ',

    mehrwertBoxTarifAccordionStartTemplate:
                        ' \
                        <dl class="accordion" data-accordion=""> \
                            <dd class="accordion-navigation active"> \
                                <a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
                                <div id="panel1a" class="content active" kv_ref="accordion-anchor"> \
                                </div> \
                            </dd> \
                        </dl> \
                        ',

    mehrwertBoxTarifAccordionItemTemplate:
                        ' \
                        <div class="row" kv_ref="accordion"> \
                            <div class="medium-7 small-8 columns mb05"> \
                                <label class="summary"><%= text %></label> \
                            </div> \
                        </div> \
                        ',


    mehrwertBoxTarifAccordionTarifWertTemplate:
                        ' \
                        <div class="row"> \
                            <div class="medium-7 small-8 columns mb05"> \
                                <label><%= tarif %></label> \
                            </div> \
                            <div class="medium-5 small-4 columns"> \
                                <input readonly="" type="text" value="<%= wert %> \u20AC"> \
                            </div> \
                        </div> \
                        ',

};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

var Schritt1RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt1RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt1RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(27);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

Schritt1RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;
    this.fnPruefen = [];
    var contentCreated;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        var fnTemplate = _.template(schrittTemplate.mainTemplate);
        var content = $(fnTemplate({produkt : "Auslandsreise-Krankenversicherung (AKD)", produktDesc : "", hotline: "(0681) 8 44-69 00", oeffnungszeit: "Montag - Freitag 9:00 - 19:00 Uhr"}));

        var versicherungsbeginnRow;
        var personenUnter20Row;
        var personenBis64Row;
        var personenAb65Row;

        if (!SchrittRendererHelper.itemWithPseudoIdExists("kvo_content", rootElement)) {
            content.appendTo(rootElement);
            contentCreated = true;

            // versicherungsbeginn
            versicherungsbeginnRow = SchrittRendererHelper.getItemByPseudoId("versicherungsbeginnRow", rootElement);
            var versicherungsbeginnInput = versicherungsbeginnRow.find("input");
            versicherungsbeginnInput.val(this.getBO().versicherungsbeginn || "");
            //versicherungsbeginnInput.inputmask("99.99.9999", {alias: "date"});
            versicherungsbeginnInput.inputmask({alias: "datum"});
            inputHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().versicherungsbeginn = res;
                } else {
                    that.getBO().versicherungsbeginn = unmaskedValue;
                }
            };
            $(versicherungsbeginnInput).keyup(inputHandler);
            $(versicherungsbeginnInput).blur(inputHandler);

            // select input
            var fnSelectInput = function() {
                var input = $(this)[0];
                input.select();
            };

            // personen bis 64
            personenBis64Row = SchrittRendererHelper.getItemByPseudoId("personenBis64Row", rootElement);
            var personenBis64Input = personenBis64Row.find("input");
            personenBis64Input.val(this.getBO().personenBis64);
            /*personenBis64Input.keydown(function () {
                $(this).data("old", $(this).val());
            });*/
            var fnValueChange = function() {
                /*var val = parseInt($(this).val(), 10);
                if (val !== NaN && val >= 0 && val <= 5) {
                    that.getBO().personenBis64 = val;
                } else {
                    var old = $(this).data("old");
                    $(this).val(old);
                    that.getBO().personenBis64 = old;
                }*/
                var val = $.trim($(this).val());
            	if (val=='0' || val=='1' || val=='2' || val=='3' || val=='4' || val=='5')
            		that.getBO().personenBis64 = parseInt(val, 10);
            	else
            		that.getBO().personenBis64 = null;

                fnSelectInput.call(this);
            };
            //personenBis64Input.keyup(fnValueChange);
            personenBis64Input.change(fnValueChange);
            personenBis64Input.click(fnSelectInput);

            // personen unter 20
            personenUnter20Row = $();

            // personen ab 65
            personenAb65Row = SchrittRendererHelper.getItemByPseudoId("personenAb65Row", rootElement);
            var personenAb65Input = personenAb65Row.find("input");
            personenAb65Input.val(this.getBO().personenAb65);
            /*personenAb65Input.keydown(function () {
                $(this).data("old", $(this).val());
            });*/
            fnValueChange = function() {
                /*var val = parseInt($(this).val(), 10);
                if (val !== NaN && val >= 0 && val <= 5) {
                    that.getBO().personenAb65 = val;
                } else {
                    var old = $(this).data("old");
                    $(this).val(old);
                    that.getBO().personenAb65 = old;
                }*/
                var val = $.trim($(this).val());
            	if (val=='0' || val=='1' || val=='2' || val=='3' || val=='4' || val=='5')
            		that.getBO().personenAb65 = parseInt(val, 10);
            	else
            		that.getBO().personenAb65 = null;

                fnSelectInput.call(this);
            };
            //personenAb65Input.keyup(fnValueChange);
            personenAb65Input.change(fnValueChange);
            personenAb65Input.click(fnSelectInput);

            if (!that.getBO().berechnenMoeglich) {
                SchrittRendererHelper.getItemByPseudoId("berechnenRow", rootElement).hide();
            } else {
                SchrittRendererHelper.getItemByPseudoId("berechnenRow", rootElement).find("input").eq(0).click(function(e) {
                    e.preventDefault();

                    SchrittRendererHelper.getItemByPseudoId("priceAndNextRow").remove();
                    SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow").remove();

                    that._berechnen(true);
                });
            }

        } else {
            content = SchrittRendererHelper.getItemByPseudoId("kvo_content", rootElement);

            versicherungsbeginnRow = SchrittRendererHelper.getItemByPseudoId("versicherungsbeginnRow", rootElement);
            versicherungsbeginnRow.find("input").val(this.getBO().versicherungsbeginn || "");

            personenBis64Row = SchrittRendererHelper.getItemByPseudoId("personenBis64Row", rootElement);
            personenBis64Row.find("input").val(this.getBO().personenBis64);
            if (that.getBO().famAKD==='v1') {
                personenBis64Row.find(".helptxt").attr("title", personenBis64Row.find(".helptxt").attr("title").replace("0-64", "20-64"));
            }

            personenUnter20Row = SchrittRendererHelper.getItemByPseudoId("personenUnter20Row", rootElement);
            // personen unter 20
            if (personenUnter20Row.length === 0 && that.getBO().famAKD==='v1') {
                var fnPersonenUnter20RowTemplate = _.template(schrittTemplate.personenUnter20Row);
                personenUnter20Row = $(fnPersonenUnter20RowTemplate());
                personenUnter20Row.insertBefore(personenBis64Row);

                var personenUnter20Input = personenUnter20Row.find("input");
                personenUnter20Input.val(this.getBO().personenUnter20);
                personenUnter20Input.keydown(function () {
                    $(this).data("old", $(this).val());
                });
                fnSelectInput = function() {
                    var input = $(this)[0];
                    input.select();
                };
                fnValueChange = function() {
                    var val = parseInt($(this).val(), 10);
                    if (val !== NaN && val >= 0 && val <= 5) {
                        that.getBO().personenUnter20 = val;
                    } else {
                        var old = $(this).data("old");
                        $(this).val(old);
                        that.getBO().personenUnter20 = old;
                    }
                    fnSelectInput.call(this);
                };
                personenUnter20Input.keyup(fnValueChange);
                personenUnter20Input.change(fnValueChange);
                personenUnter20Input.click(fnSelectInput);
            } else {
                personenUnter20Row = $();
            }
            personenUnter20Row.find("input").val(this.getBO().personenUnter20);

            personenAb65Row = SchrittRendererHelper.getItemByPseudoId("personenAb65Row", rootElement);
            personenAb65Row.find("input").val(this.getBO().personenAb65);
        }
        if (!this.getBO().berechnenMoeglich) {
            versicherungsbeginnRow.find("input").prop("readonly", true);
            personenBis64Row.find("input").prop("readonly", true);
            personenAb65Row.find("input").prop("readonly", true);
        }

        // validation handler
        // validation versicherungsbeginn
        var fnAddVersicherungsbeginnError = function(errorText) {
            var versicherungsbeginnLabel = versicherungsbeginnRow.find("label").first();
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorVersicherungsbeginn = $(fnErrorText({error: errorText}));

            errorVersicherungsbeginn.insertBefore(versicherungsbeginnLabel);
        };
        versicherungsbeginnRow.find(".error").remove();
        var validationErrorForVersicherungsbeginn = SchrittRendererHelper.getError(this.validationResult, "versicherungsbeginn");
        if (validationErrorForVersicherungsbeginn) {
            fnAddVersicherungsbeginnError(validationErrorForVersicherungsbeginn);
        }
        var validationVersicherungsbeginnObject = {
            fnErrorRemoval: function() {
                versicherungsbeginnRow.find(".error").remove();
            },
            aFnValidationAndAddError: [{
                fnValidation: function() {
                    var check;
                    if (that.getBO().versicherungsbeginn && Util.parseAsDateObject(that.getBO().versicherungsbeginn)) {
                        check = true;
                    } else {
                        check = false;
                    }
                    return check;
                },
                fnAddError: function() {
                    fnAddVersicherungsbeginnError("Die Angabe im Feld Versicherungsbeginn ist ungültig.");
                }
            }, {
                fnValidation: function() {
                    var check;
                    var date = Util.parseAsDateObject(that.getBO().versicherungsbeginn);
                    if (date && !Util.isInPast(date)) {
                        check = true;
                    } else {
                        check = false
                    }
                    return check;
                },
                fnAddError: function() {
                    fnAddVersicherungsbeginnError("Die Angabe im Feld Versicherungsbeginn liegt in der Vergangenheit.");
                }
            }, {
                fnValidation: function() {
                    var check;
                    var date = Util.parseAsDateObject(that.getBO().versicherungsbeginn);
                    if (date && !Util.isToday(date)) {
                        check = true;
                    } else {
                        check = false
                    }
                    return check;
                },
                fnAddError: function() {
                    fnAddVersicherungsbeginnError("Die nächstmögliche Versicherungsbeginn ist der nächste Tag.");
                }
            }, {
                fnValidation: function() {
                    var check;
                    var date = Util.parseAsDateObject(that.getBO().versicherungsbeginn);
                    if (date && Util.isInFuture(date)) {
                        check = true;
                    } else {
                        check = false
                    }
                    return check;
                },
                fnAddError: function() {
                    fnAddVersicherungsbeginnError("Die Angabe im Feld Versicherungsbeginn liegt in der Vergangenheit.");
                }
            }, {
                fnValidation: function() {
                    var check;
                    var date = Util.parseAsDateObject(that.getBO().versicherungsbeginn);
                    if (date && Util.diffInMonths(date) <= 6) {
                        check = true;
                    } else {
                        check = false
                    }
                    return check;
                },
                fnAddError: function() {
                    fnAddVersicherungsbeginnError("Der Versicherungsbeginn kann maximal 6 Monate vordatiert werden!");
                }
            }]
        };
        this.fnPruefen.push(validationVersicherungsbeginnObject);

        // validation personen unter 20
        var fnAddPersonenUnter20Error = function(errorText) {
            var personenUnter20Label = personenUnter20Row.find("label").first();
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorPersonenUnter20 = $(fnErrorText({error: errorText}));

            errorPersonenUnter20.insertAfter(personenUnter20Label);
        };
        personenUnter20Row.find(".error").remove();
        var validationErrorForPersonenUnter20 = SchrittRendererHelper.getError(this.validationResult, "vp.anzahlUnter20");
        if (validationErrorForPersonenUnter20) {
            fnAddPersonenUnter20Error(validationErrorForPersonenUnter20);
        }
        var fnPersonenUnter20Validation = function() {
            var check;
            if (that.getBO().famAKD==='v1') {
                if (that.getBO().personenUnter20 !== undefined && that.getBO().personenUnter20 !== null) {
                    if (that.getBO().personenUnter20 >= 0 && that.getBO().personenUnter20 <= 5) {
                        check = true;
                    } else {
                        check = false;
                    }
                } else {
                    check = false;
                }
            } else {
                check = true;
            }
            return check;
        };
        var validationPersonenUnter20Object = {
            fnErrorRemoval: function() {
                personenUnter20Row.find(".error").remove();
            },
            aFnValidationAndAddError: [{
                fnValidation: fnPersonenUnter20Validation,
                fnAddError: function() {
                    fnAddPersonenUnter20Error("Die Angabe im Feld ist ungültig.");
                }
            }]
        };
        this.fnPruefen.push(validationPersonenUnter20Object);

        // validation personen bis 64
        var fnAddPersonenBis64Error = function(errorText) {
            var personenBis64Label = personenBis64Row.find("label").first();
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorPersonenBis64 = $(fnErrorText({error: errorText}));

            errorPersonenBis64.insertBefore(personenBis64Label);
        };
        personenBis64Row.find(".error").remove();
        var validationErrorForPersonenBis64 = SchrittRendererHelper.getError(this.validationResult, "vp.anzahlUnter65");
        if (validationErrorForPersonenBis64) {
            fnAddPersonenBis64Error(validationErrorForPersonenBis64);
        }
        var fnPersonenBis64Validation = function() {
            var check;
            if (that.getBO().personenBis64 !== undefined && that.getBO().personenBis64 !== null) {
                if (that.getBO().personenBis64 >= 0 && that.getBO().personenBis64 <= 5) {
                    check = true;
                } else {
                    check = false;
                }
            } else {
                check = false;
            }
            return check;
        };
        var validationPersonenBis64Object = {
            fnErrorRemoval: function() {
                personenBis64Row.find(".error").remove();
            },
            aFnValidationAndAddError: [{
                fnValidation: fnPersonenBis64Validation,
                fnAddError: function() {
                    fnAddPersonenBis64Error("Die Angabe im Feld ist ungültig.");
                }
            }]
        };
        this.fnPruefen.push(validationPersonenBis64Object);

        // validation personen ab 65
        var fnAddPersonenAb65Error = function(errorText) {
            var personenAb65Label = personenAb65Row.find("label").first();
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorPersonenAb65 = $(fnErrorText({error: errorText}));

            errorPersonenAb65.insertBefore(personenAb65Label);
        };
        personenAb65Row.find(".error").remove();
        var validationErrorForPersonenAb65 = SchrittRendererHelper.getError(this.validationResult, "vp.anzahlAb65");
        if (validationErrorForPersonenAb65) {
            fnAddPersonenAb65Error(validationErrorForPersonenAb65);
        }
        var fnPersonenAb65Validation = function() {
            var check;
            if (that.getBO().personenAb65 !== undefined && that.getBO().personenAb65 !== null) {
                if (that.getBO().personenAb65 >= 0 && that.getBO().personenAb65 <= 5) {
                    check = true;
                } else {
                    check = false;
                }
            } else {
                check = false;
            }
            return check;
        };
        var validationPersonenAb65Object = {
            fnErrorRemoval: function() {
                personenAb65Row.find(".error").remove();
            },
            aFnValidationAndAddError: [{
                fnValidation: fnPersonenAb65Validation,
                fnAddError: function() {
                    fnAddPersonenAb65Error("Die Angabe im Feld ist ungültig.");
                }
            }]
        };
        this.fnPruefen.push(validationPersonenAb65Object);

        // validation summe personen
        var fnAddSummePersonenError = function(errorText) {
            var infoBox = SchrittRendererHelper.getItemByPseudoId("infobox");

            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var error = $(fnErrorText({error: errorText}));

            error.appendTo(infoBox);
            error.addClass("commonError");

            infoBox.show();
        };

        var fnSummePersonenValidation = function() {
            var check;

            var bo = that.getBO();
            if (bo.famAKD==='v1') {
                if (bo.personenUnter20 !== undefined && bo.personenUnter20 !== null && bo.personenBis64 !== undefined && bo.personenBis64 !== null && bo.personenAb65 !== undefined && bo.personenAb65 !== null) {
                    if (bo.personenUnter20 >= 1 && bo.personenUnter20 <= 5 && (bo.personenBis64 >= 1 || bo.personenAb65 >= 1) && bo.personenBis64 <= 5 && bo.personenAb65 <= 5 &&
                        bo.personenUnter20+bo.personenBis64+bo.personenAb65 >= 2 && bo.personenUnter20+bo.personenBis64+bo.personenAb65 <= 5) {
                        check = true;
                    } else {
                        check = false;
                    }
                } else {
                    check = false;
                }
            } else {
                if (bo.personenBis64 !== undefined && bo.personenBis64 !== null && bo.personenAb65 !== undefined && bo.personenAb65 !== null) {
                    if (bo.personenBis64 >= 0 && bo.personenBis64 <= 5 && bo.personenAb65 >= 0 && bo.personenAb65 <= 5 &&
                        bo.personenBis64+bo.personenAb65 >= 1 && bo.personenBis64+bo.personenAb65 <= 5) {
                        check = true;
                    } else {
                        check = false;
                    }
                } else {
                    check = false;
                }
            }
            return check;
        };
        var validationSummePersonen = {
            fnErrorRemoval: function() {
                $(".commonError").remove();
                SchrittRendererHelper.getItemByPseudoId("infobox").hide();
            },
            aFnValidationAndAddError: [{
                fnValidation: fnSummePersonenValidation,
                fnAddError: function() {
                    if (that.getBO().famAKD==='v1') {
                        fnAddSummePersonenError("Die Anzahl zu versichernder Personen unter 20 sowie darüber muss mindestens 1 betragen und darf maximal 5 betragen.");
                    } else {
                        fnAddSummePersonenError("Die Anzahl zu versichernder Personen muss mindestens 1 und darf maximal 5 betragen.");
                    }
                }
            }]
        };
        this.fnPruefen.push(validationSummePersonen);

        // validation result
        $(".commonError").remove();
        if (validationResult) {
        	SchrittRendererHelper.getItemByPseudoId("priceAndNextRow").remove();
            SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow").remove();

            if (validationResult.state === "NOK" || validationResult.state === "EXCEPTION") {
                var validationErrors = [];
                if (validationResult.state === "EXCEPTION") {
                    if (validationResult.exeption && validationResult.exeption.message) {
                        validationErrors.push({fieldName: "vp.tarif", message: validationResult.exeption.message});
                    }
                } else if (validationResult.state === "NOK") {
                    validationErrors = validationResult.validationErrors;
                }

                var commonErrors = validationErrors.filter(function(validationError) {
                    return validationError.fieldName.indexOf("vp.tarif") === 0;
                });

                var infoBox = SchrittRendererHelper.getItemByPseudoId("infobox");

                _.chain(commonErrors).reverse().forEach(function(commonError) {
                    fnAddSummePersonenError(commonError.message);
                });
            } else if (validationResult.state === "OK") {
                var fnPriceAndNextRows = _.template(schrittTemplate.priceAndNextRows);
                var tarif = 'AKD';
                if (this.getBO().personenUnter20>0)
                	tarif = validationResult.tarifUnter20.beschreibung;
                else if (this.getBO().personenBis64>0)
                	tarif = validationResult.tarifUnter65.beschreibung;
                else if (this.getBO().personenAb65>0)
                	tarif = validationResult.tarifAb65.beschreibung;
                var priceAndNextRows = $(fnPriceAndNextRows({gesamtbeitrag: validationResult.gesamtbeitrag, tarif: tarif}));
                priceAndNextRows.appendTo(content);

                var itemCount = 0;
                var aPersonAndValue = [];
                var i;
                for(i=0; i<this.getBO().personenUnter20; i++) {
                    aPersonAndValue.push({
                        text: "Person " + (aPersonAndValue.length+1) + ": unter 20 Jahre",
                        value: validationResult.tarifUnter20.beitrag
                    });
                }
                var nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("tarifname", priceAndNextRows);
                var fnPrintPersonAndValue = function(oPersonAndValue) {
                    var fnVpDetailTemplateRow = _.template(schrittTemplate.vpDetailTemplateRow);
                    var vpDetailTemplateRow = $(fnVpDetailTemplateRow({text: oPersonAndValue.text, value: oPersonAndValue.value}));

                    vpDetailTemplateRow.insertAfter(nextPositionToPut);
                    nextPositionToPut = vpDetailTemplateRow;

                    itemCount++;
                };
                aPersonAndValue.forEach(fnPrintPersonAndValue);

                aPersonAndValue = [];
                for(i=0; i<this.getBO().personenBis64; i++) {
                    aPersonAndValue.push({
                        text: "Person " + (this.getBO().personenUnter20+aPersonAndValue.length+1) + ": bis 64 Jahre",
                        value: validationResult.tarifUnter65.beitrag
                    });
                }
                aPersonAndValue.forEach(fnPrintPersonAndValue);

                aPersonAndValue = [];
                for(i=0; i<this.getBO().personenAb65; i++) {
                    aPersonAndValue.push({
                        text: "Person " + (this.getBO().personenUnter20+this.getBO().personenBis64+aPersonAndValue.length+1) + ": ab 65 Jahre",
                        value: validationResult.tarifAb65.beitrag
                    });
                }
                aPersonAndValue.forEach(fnPrintPersonAndValue);

                var weiterfuehrendeInformationenRow = $(_.template(schrittTemplate.weiterfuehrendeInformationenRow)());
                weiterfuehrendeInformationenRow.appendTo(content);

                var link = SchrittRendererHelper.getItemByPseudoId("tariferklaerung");
                link.click(function(e) {
                    e.preventDefault();

                    var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                    getAndOpenDocument(druckstueckBOandUrl);
                });
                // Vorschlag
                link = SchrittRendererHelper.getItemByPseudoId("angebot");
                link.click(function(e) {
                    e.preventDefault();

                    that._getDruckstueckVorschlagBOandUrl().then(function(druckstueckBOandUrl) {
                        getAndOpenDocument(druckstueckBOandUrl);
                    });
                });
                link = SchrittRendererHelper.getItemByPseudoId("aussergerichtliche_streitbeilegung");
                link.prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

                priceAndNextRows.find("input").eq(0).click(function(e) {
                    e.preventDefault();

                    that.setBusy(true);
                    that._berechnenUndWeiter().always(function() {
                        that.setBusy(false);
                    });
                });
            }
        }

        window.jQuery(document).trigger('if6_page_ready');

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt1RendererIF6.prototype._berechnen = function(bRender) {
    var deferred = $.Deferred();

    var promises = [];

    this.fnPruefen.forEach(function(oFnWithDeferred) {
        oFnWithDeferred.fnErrorRemoval();

        var deferred = $.Deferred();
        promises.push(deferred.promise());

        var subDeferreds = [];

        var aFnValidationAndAddError = oFnWithDeferred.aFnValidationAndAddError;
        aFnValidationAndAddError.every(function(oFnValidationAndAddError) {
            var subDeferred = $.Deferred();
            var proceed = true;

            var ok = oFnValidationAndAddError.fnValidation();
            if (ok) {
                subDeferred.resolve(true);
                proceed = true;
            } else {
                oFnValidationAndAddError.fnAddError();
                subDeferred.resolve(false);
                proceed = false;
            }
            subDeferreds.push(subDeferred);

            return proceed;
        });

        $.when.apply($, subDeferreds).then(function() {
            if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        });
    });

    $.when.apply($, promises).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
            var bo = this.getBO();
            var versicherungsbeginn = bo.versicherungsbeginn;
            var personenUnter20 = bo.personenUnter20;
            var personenBis64 = bo.personenBis64;
            var personenAb65 = bo.personenAb65;

            this.setBusy(true);
            this.oProdukt.berechnen(!bRender, versicherungsbeginn, personenUnter20, personenBis64, personenAb65).then(function(oResult) {
                deferred.resolve(oResult);
            }).fail(function() {
                deferred.reject();
            }).always(function() {
                this.setBusy(false);
            }.bind(this));
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
            deferred.reject();
        }
    }.bind(this));

    return deferred.promise();
};

Schritt1RendererIF6.prototype._berechnenUndWeiter = function() {
    var deferred = $.Deferred();
    var oBO = this.getBO();

    this._berechnen(false).then(function(oResult) {
        deferred.resolve();

        this.oProdukt.weiter(oBO, oResult);
    }.bind(this)).fail(function() {
        deferred.reject();
    });

    return deferred.promise();
};

Schritt1RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt1RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    var deferred = $.Deferred();

    this._berechnen(false).then(function(oResult) {
        var oBO = {
            versicherungsbeginn: this.getBO().versicherungsbeginn,
            vpsBis64: [],
            vpsAb65: [],
            tarifErgebnisse: oResult
        };
        var i;
        for(i=0; i<this.getBO().personenBis64; i++) {
            oBO.vpsBis64.push({});
        }
        for(i=0; i<this.getBO().personenAb65; i++) {
            oBO.vpsAb65.push({});
        }

        deferred.resolve(this.oProdukt.getDruckstueckVorschlagBOandUrl(oBO));
    }.bind(this)).fail(function() {
        deferred.reject();
    });

    return deferred.promise();
};

module.exports = Schritt1RendererIF6;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate : ' \
                <div kv_ref="kvo_content"> \
                    <!-- Progress / Header --> \
                    <div class="block"> \
                        <ul class="progress"> \
                            <li class="active">1</li> \
                            <li class="">2</li> \
                            <li class="">3</li> \
                            <li class="">4</li> \
                        </ul> \
                        <h2>Antrag auf Auslandsreise-Krankenversicherung-Dauerpolice nach Tarif AKD</h2> \
                    </div> \
                    <!-- Contentbereich --> \
                    <div class="block"> \
                        <p><strong>Ich beantrage bei der Union Krankenversicherung AG den Abschluss der nachfolgend näher bezeichneten Krankenversicherung(en), gegebenenfalls als Vertragsänderung.</strong></p> \
                    </div> \
                    <!-- Dateneingabeblock --> \
                    <div class="block"> \
                        <h3>Ihre Daten</h3> \
                        <div class="bline infobox" kv_ref="infobox" style="display: none"> \
                        </div> \
                        <!-- Versicherungsbeginn --> \
                        <div class="bline" kv_ref="versicherungsbeginnRow"> \
                            <label for="versicherungsbeginn">Versicherungsbeginn<em></em>:</label> \
                            <input type="text" name="Versicherungsbeginn" id="datePicker" value="" class="il" maxlength="10" lang="de" min="" placeholder="TT.MM.JJJJ"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Personenanzahl --> \
                        <div class="bline no-label btext-only"> \
                            <div class="ixxxl"> \
                                <h4>Wie viele Personen sollen versichert werden? <small><br/>(Maximal 5 Personen pro Vertrag)</small></h4> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Anzahl bis 64 --> \
                        <div class="bline" kv_ref="personenBis64Row"> \
                            <label for="p_anzahl_u64">Anzahl der Personen bis 64 Jahre<em></em>:</label> \
                            <input type="number" min="0" max="5" name="p_anzahl_u64" id="p_anzahl_u64" class="il" maxlength="1" placeholder=""> \
                            <div class="helptxt" title="Bitte geben Sie die Anzahl der zu versichernden Personen von 0-64 Jahren ein.">?</div> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Anzahl ab 65 --> \
                        <div class="bline" kv_ref="personenAb65Row"> \
                            <label for="p_anzahl_a65">Anzahl der Personen ab 65 Jahre<em></em>:</label> \
                            <input type="number" min="0" max="5" name="p_anzahl_a65" id="p_anzahl_a65" value="1" class="il" maxlength="1" placeholder=""> \
                            <div class="helptxt" title="Bitte geben Sie die Anzahl der zu versichernden Personen ab Alter 65 ein.">?</div> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                    </div> \
                    <!-- Button --> \
                    <div class="buttonline"> \
                        <div class="bgroup1" kv_ref="berechnenRow"> \
                            <div> \
                                <input type="submit" name="berechnen" id="defaultAction" value="Beitrag berechnen" onclick="return;" class="" title="Beitrag berechnen"> \
                            </div> \
                        </div> \
                    </div> \
			        <!--div class="block" style="height: auto;" kv_ref="hinweisRow"> \
			         <strong>Hinweis:</strong> Alle  außer die mit (<i>optional</i>) gekennzeichneten Felder benötigen wir für die Bearbeitung Ihres Antrags.\
			      </div--> \
                </div>',

    personenUnter20Row: ' <!-- Anzahl unter 20 --> \
                        <div class="bline" kv_ref="personenUnter20Row"> \
                            <label for="p_anzahl_u20">Anzahl der Personen unter 20 Jahre<em></em>:</label> \
                            <input type="number" min="0" max="5" name="p_anzahl_u20" id="p_anzahl_u20" class="il" maxlength="1" placeholder=""> \
                            <div class="helptxt" title="Bitte geben Sie die Anzahl der zu versichernden Personen von 0-19 Jahren ein.">?</div> \
                            <br class="bterm" /> \
                        </div>',

    priceAndNextRows: ' \
                <div class="block " style="height: auto;" kv_ref="priceAndNextRow""> \
                   <h1>Ihre Produktauswahl</h1> \
                   <div class="table"> \
                      <table> \
                         <tbody> \
                            <tr kv_ref="tarifname"> \
                               <th class="left header">Tarifname</th> \
                               <th class="header"><%= tarif %></th> \
                            </tr> \
                            <tr> \
                               <th class="left header">Jährlicher Gesamtbeitrag</th> \
                               <td class="header" data-header="AKD"><%= gesamtbeitrag %> EUR</td> \
                            </tr> \
                         </tbody> \
                      </table> \
                   </div> \
			        <div class="buttonline"> \
			        <div class="bgroup1"> \
			           <div> \
			              <input type="submit" name="weiter" id="defaultAction" value="Weiter" onclick="return;" class="" title="Weiter"> \
			           </div> \
			        </div> \
			        </div> \
                </div> \
                ',

    vpDetailTemplateRow: '\
                 <tr> \
                    <th class="left"><%= text %></th> \
                    <td data-header="AKD"><%= value %> EUR</td> \
                 </tr>',

    weiterfuehrendeInformationenRow: '\
                <div class="block" style="height: auto;" kv_ref="weiterfuehrendeInformationenRow"> \
                    <div class="service_center_box_title">Weiterführende Informationen</div> \
                    <div class="service_center_box_parsys parsys"> \
                        <div class="parbase service_center_thema section"> \
                            <a class="service_center_thema_link" href="javascript:void(0);" kv_ref="tariferklaerung"> \
                                <span class="service_center_thema_link_text">Tariferklärung</span> \
                            </a> \
                        </div> \
                        <div class="parbase service_center_thema section"> \
                            <a class="service_center_thema_link" href="javascript:void(0);" kv_ref="angebot"> \
                                <span class="service_center_thema_link_text">Angebot drucken</span> \
                            </a> \
                        </div> \
                        <div class="parbase service_center_thema section"> \
                            <a class="service_center_thema_link" target="_blank" href="javascript:void(0);" kv_ref="aussergerichtliche_streitbeilegung"> \
                                <span class="service_center_thema_link_text">Außergerichtliche Streitbeilegung</span> \
                            </a> \
                        </div> \
                    </div> \
                </div>',

    errorLabelTemplate: ' \
        <div class="blineover error"> \
            <div class="msgerror"> \
                <ul> \
                    <li><%- error %></li> \
                </ul> \
            </div> \
        </div>'
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

function buildKontoinhaber() {
    var kontoinhaber = "";
    if (this.getBO().vn.vorname) {
        kontoinhaber = this.getBO().vn.vorname;
    }
    if (this.getBO().vn.name) {
        if (kontoinhaber.length > 0)
            kontoinhaber += " ";
        kontoinhaber += this.getBO().vn.name;
    }

    return kontoinhaber;
}

function buildPropExtractorFn(obj, prop) {
    return function() {
        return Util.getProp(obj, [prop]) || "";
    };
}

function buildDefaultValidatorFn() {
    return function(propVal) {
        if (propVal === null || propVal.trim().length === 0) {
            return false;
        }

        return true;
    };
}

function buildErrorCheckFn(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, fieldName) {
    var validationAndErrorText = {
        fnValidation : buildDefaultValidatorFn(),

        errorText : "Die Angabe im Feld " + (fieldName ? fieldName + " " : "")  + "ist erforderlich."
    }

    return buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, [validationAndErrorText]);
}

function buildErrorCheckFnWithErrorHandling(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText) {
    var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");

    return function() {
        var deferred = $.Deferred();

        var subDeferreds = [];

        aFnValidationAndErrorText.every(function(validationAndErrorText) {
            var fnValidation = validationAndErrorText.fnValidation;
            var ok = fnValidation(fnPropExtractor());

            label.parent().find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
            var addError = function() {
                var error = $(fnErrorLabelTemplate({error: validationAndErrorText.errorText}));
                error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                error.insertAfter(label);
            }

            var subDeferred = $.Deferred();
            var proceed;

            if (Util.isPromise(ok)) {
                proceed = true;
                ok.then(function() {
                    subDeferred.resolve(true);
                }).fail(function() {
                    addError();
                    subDeferred.resolve(false);
                });
            } else if (ok) {
                subDeferred.resolve(true);
                proceed = true;
            } else {
                addError();
                subDeferred.resolve(false);
                proceed = false;
            }

            subDeferreds.push(subDeferred.promise());

            return proceed;
        });

        $.when.apply($, subDeferreds).then(function() {
            if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        });

        return deferred.promise();
    };
}

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

function buildVpParamName(name, type, index) {
    return name + "_" + type + "_" + index;
};

var Schritt2Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt2Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt2Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(29);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt2Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;
    this.bEinElternteil = this.bEinElternteil || false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate({
                produkt: "Auslandsreise-Krankenversicherung (AKD)",
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: this.getBO().einstellung.modul.tariftyp,
                lastschriftText: Util.getTextFromEncodedObject(this.getBO().texte.lastschrift)
            }));
            content.appendTo(rootElement);

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                that._pruefe();
            });

            var links = SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement).find("a");
            links.eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            links.eq(2).prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

            var fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);
            var errorTextInputIsRequired = "Die Angabe im Feld ist erforderlich.";

            // Ein Elternteil
            if (that.getBO().famAKD==='v1') {
                var fnEinElternteilRowTemplate = _.template(schrittTemplate.einElternteilRow);
                var einElternteilRow = $(fnEinElternteilRowTemplate());
                einElternteilRow.insertAfter(SchrittRendererHelper.getItemByPseudoId("nationalitaetRow", rootElement));

                einElternteilRow.find("input").change(function() {
                    that.bEinElternteil = $(this).prop("checked");
                });
                that.bEinElternteil = einElternteilRow.find("input").prop("checked");
            }

            // VN
            function isVpVn() {
                var vnAvailable = that.getBO().vpsUnter20.some(function(vp) {
                    return vp.isVn;
                });
                if (!vnAvailable) {
                    vnAvailable = that.getBO().vpsBis64.some(function(vp) {
                        return vp.isVn;
                    });
                }
                if (!vnAvailable) {
                    vnAvailable = that.getBO().vpsAb65.some(function(vp) {
                        return vp.isVn;
                    });
                }
                return vnAvailable;
            }

            function getVpInputs() {
                var vpIndex;
                var sType;
                var foundVp;

                var vnAvailable = that.getBO().vpsUnter20.some(function(vp, index) {
                    var bIsVn = vp.isVn;

                    if (bIsVn) {
                        sType = "vpsUnter20";
                        vpIndex = index;
                        foundVp = vp;
                    }
                    return bIsVn;
                });

                if (!vnAvailable) {
                    vnAvailable = that.getBO().vpsBis64.some(function(vp, index) {
                        var bIsVn = vp.isVn;

                        if (bIsVn) {
                            sType = "vpsBis64";
                            vpIndex = index;
                            foundVp = vp;
                        }
                        return bIsVn;
                    });
                }
                if (!vnAvailable) {
                    vnAvailable = that.getBO().vpsAb65.some(function(vp, index) {
                        var bIsVn = vp.isVn;

                        if (bIsVn) {
                            sType = "vpsAb65";
                            vpIndex = index;
                            foundVp = vp;
                        }
                        return bIsVn;
                    });
                }

                if (vnAvailable) {
                    var anredeSelect = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_anrede", sType, vpIndex), rootElement, "select");
                    var vpVornameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_vorname", sType, vpIndex), rootElement, "input");
                    var vpNameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_name", sType, vpIndex), rootElement, "input");
                    var vpGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_geburtsdatum", sType, vpIndex), rootElement, "input");

                    return {
                        anredeSelect: anredeSelect,
                        vpVornameInput: vpVornameInput,
                        vpNameInput: vpNameInput,
                        vpGeburtsdatumInput: vpGeburtsdatumInput,
                        vp: foundVp
                    };
                }
            }

            var vnAnredeInput = SchrittRendererHelper.getItemByPseudoId("vn_anrede", rootElement, "select");
            if (this.getBO().vn.anrede) {
                vnAnredeInput.val(this.getBO().vn.anrede);
            }
            vnAnredeInput.change(function() {
                that.getBO().vn.anrede = $(this).val();

                if (isVpVn()) {
                    var vpInputs = getVpInputs();

                    vpInputs.anredeSelect.val(that.getBO().vn.anrede),
                    vpInputs.vp.anrede = that.getBO().vn.anrede;
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "anrede"), "vn_anrede", "Anrede"));

            var vnTitelInput = SchrittRendererHelper.getItemByPseudoId("vn_titel", rootElement, "input");
            vnTitelInput.val(this.getBO().vn.titel || "");
            vnTitelInput.change(function() {
                that.getBO().vn.titel = $(this).val();
            });

            var vnVornameInput = SchrittRendererHelper.getItemByPseudoId("vn_vorname", rootElement, "input");
            vnVornameInput.val(this.getBO().vn.vorname || "");
            vnVornameInput.change(function() {
                that.getBO().vn.vorname = $(this).val();

                if (isVpVn()) {
                    var vpInputs = getVpInputs();

                    vpInputs.vpVornameInput.val(that.getBO().vn.vorname);
                    vpInputs.vp.vorname = that.getBO().vn.vorname;
                }

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "vorname"), "vn_vorname", "Vorname"));

            var vnNameInput = SchrittRendererHelper.getItemByPseudoId("vn_name", rootElement, "input");
            vnNameInput.val(this.getBO().vn.name || "");
            vnNameInput.change(function() {
                that.getBO().vn.name = $(this).val();

                if (isVpVn()) {
                    var vpInputs = getVpInputs();

                    vpInputs.vpNameInput.val(that.getBO().vn.name)
                    vpInputs.vp.name = that.getBO().vn.name;
                }

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "name"), "vn_name", "Nachname"));

            var vnGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId("vn_geburtsdatum", rootElement, "input");
            vnGeburtsdatumInput.val(this.getBO().vn.geburtsdatum || "");
            //vnGeburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
            vnGeburtsdatumInput.inputmask({alias: "datum"});
            var geburtsdatumHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().vn.geburtsdatum = res;
                } else {
                    that.getBO().vn.geburtsdatum = unmaskedValue;
                }

                if (isVpVn()) {
                    var vpInputs = getVpInputs();

                    if (res) {
                        vpInputs.vpGeburtsdatumInput.val(res);
                        vpInputs.vp.geburtsdatum = res;
                    } else {
                        vpInputs.vpGeburtsdatumInput.val(unmaskedValue);
                        vpInputs.vp.geburtsdatum = unmaskedValue;
                    }
                }

            };
            vnGeburtsdatumInput.keyup(geburtsdatumHandler);
            vnGeburtsdatumInput.blur(geburtsdatumHandler);
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "geburtsdatum"), "vn_geburtsdatum", [{
                fnValidation: function(propVal) {
                    return !!Util.parseAsDateAndFormatAsString(propVal);
                },

                errorText: "Die Angabe im Feld ist kein gültiges Datum."
            }, {
                fnValidation: function(propVal) {
                    var res = Util.parseAsDateObject(propVal);

                    if (res) {
                        return Util.calculateAlter(res) >= 18;
                    }
                },
                errorText: "Der/Die Versicherungsnehmer/in muss mindestens 18 Jahre alt sein."
            }]));

            var vnPlzInput = SchrittRendererHelper.getItemByPseudoId("vn_plz", rootElement, "input");
            vnPlzInput.val(this.getBO().vn.plz || "");
            vnPlzInput.change(function() {
                that.getBO().vn.plz = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "plz"), "vn_plz", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\d{5}$/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige Postleitzahl."
            }, {
                fnValidation: function(propVal) {
                    //if (!that.getBO().einstellung.betreuer && (that.getBO().einstellung.betreuerwahl && that.getBO().betreuer.manuelleAuswahl === false || !that.getBO().einstellung.betreuerwahl))  {
                        return that.oProdukt.checkBetreuergebiet(propVal);
                    /*} else {
                        return true;
                    }*/
                },

                errorText: "Die Postleitzahl befindet sich nicht in einem von uns betreuten Gebiet."
            }]));

            var vnOrtInput = SchrittRendererHelper.getItemByPseudoId("vn_ort", rootElement, "input");
            vnOrtInput.val(this.getBO().vn.ort || "");
            vnOrtInput.change(function() {
                that.getBO().vn.ort = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "ort"), "vn_ort", "Ort"));

            var vnStrasseInput = SchrittRendererHelper.getItemByPseudoId("vn_strasse", rootElement, "input");
            vnStrasseInput.val(this.getBO().vn.strasse || "");
            vnStrasseInput.change(function() {
                that.getBO().vn.strasse = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "strasse"), "vn_strasse", "Strasse"));

            var vnHausnrInput = SchrittRendererHelper.getItemByPseudoId("vn_hausnr", rootElement, "input");
            vnHausnrInput.val(this.getBO().vn.hausnr || "");
            vnHausnrInput.change(function() {
                that.getBO().vn.hausnr = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "hausnr"), "vn_hausnr", "Hausnr."));

            var vnTelefonInput = SchrittRendererHelper.getItemByPseudoId("vn_telefon", rootElement, "input");
            vnTelefonInput.val(this.getBO().vn.telefon || "");
            vnTelefonInput.change(function() {
                that.getBO().vn.telefon = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "telefon"), "vn_telefon", [{
                fnValidation: function(propVal) {
                    if (propVal === undefined || propVal === null || propVal === "")
                        return true;
                    return propVal.match(/^(?:\+\d+)?\s*(?:\(\d+\)\s*(?:[\/–-]\s*)?)?\d+(?:\s*(?:[\s\/–-]\s*)?\d+)*$/);
                },

                errorText: "Die Angabe im Feld ist keine gültige Telefonnummer."
            }]));

            var vnMailInput = SchrittRendererHelper.getItemByPseudoId("vn_mail", rootElement, "input");
            vnMailInput.val(this.getBO().vn.mail || "");
            vnMailInput.change(function() {
                that.getBO().vn.mail = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "mail"), "vn_mail", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige E-Mail Adresse."
            }]));

            var staatsangehoerigkeitSelect = SchrittRendererHelper.getItemByPseudoId("vn_nationalitaet", rootElement, "select");
            staatsangehoerigkeitSelect.empty();
            if (this.getBO().svLand) {
                this.getBO().svLand.forEach(function(currLand) {
                    var optionLand = $("<option value='" + currLand  +"'>" + currLand + "</option>");

                    if (this.getBO().vn.staatsangehoerigkeit) {
                        if (currLand === this.getBO().vn.staatsangehoerigkeit) {
                            optionLand.attr("selected", "selected");
                        }
                    } else if (currLand === "Deutschland") {
                        this.getBO().vn.staatsangehoerigkeit = "Deutschland";
                        optionLand.attr("selected", "selected");
                    }
                    staatsangehoerigkeitSelect.append(optionLand);
                }, this);
            }
            staatsangehoerigkeitSelect.change(function() {
                that.getBO().vn.staatsangehoerigkeit = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "staatsangehoerigkeit"), "vn_nationalitaet", [{
                fnValidation: function(propVal) {
                    return !!propVal;
                },

                errorText: "Die Angabe im Feld Nationalität ist ungültig."
            }]));

            if (that.getBO().famAKD==='v1') {
                this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, "ein_elternteil", [{
                    fnValidation: function(propVal) {
                        return (that.bEinElternteil);
                    },

                    errorText: "Der Tarif Familien- Auslandsreisekrankenversicherung kann nur abgeschlossen werden, wenn ein Elternteil der angegebenen Kinder/Jugendlichen mitversichert ist. Falls dies nicht zutrifft verwenden Sie bitte den Tarif Auslandsreisekrankenversicherung."
                }]));
            }

            SchrittRendererHelper.getItemByPseudoId("vn_zahlungsart", rootElement, "input").val(this.getBO().vn.zahlungsdaten.zahlungsart || "");

            var zahlungsweiseInput = SchrittRendererHelper.getItemByPseudoId("vn_zahlungsweise", rootElement, "select");
            zahlungsweiseInput.val(this.getBO().vn.zahlungsdaten.zahlungsweise);

            var kontoinhaber = buildKontoinhaber.call(this);
            SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);

            var ibanCheck = $("#p_kontotyp_iban");
            var ktoCheck = $("#p_kontotyp_kto");

            var ibanBlock = SchrittRendererHelper.getItemByPseudoId("block_iban", rootElement);
            var ktoBlock = SchrittRendererHelper.getItemByPseudoId("block_kto", rootElement);
            var bankBlock = SchrittRendererHelper.getItemByPseudoId("block_bank", rootElement);

            var ibanInput = SchrittRendererHelper.getItemByPseudoId("vn_iban", rootElement, "input");
            var bicInput = SchrittRendererHelper.getItemByPseudoId("vn_bic", rootElement, "input");
            var blzInput = SchrittRendererHelper.getItemByPseudoId("vn_blz", rootElement, "input");
            var ktoInput = SchrittRendererHelper.getItemByPseudoId("vn_kto", rootElement, "input");
            var bankInput = SchrittRendererHelper.getItemByPseudoId("vn_bank", rootElement, "input");

            if (this.getBO().vn.zahlungsdaten.iban.selected) {
                ibanCheck.prop("checked", true);
                ktoCheck.prop("checked", false);

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            } else if (this.getBO().vn.zahlungsdaten.kto.selected) {
                ibanCheck.prop("checked", false);
                ktoCheck.prop("checked", true);

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            }
            ibanInput.val(this.getBO().vn.zahlungsdaten.iban.no || "");
            bicInput.val(this.getBO().vn.zahlungsdaten.iban.bic || "");
            blzInput.val(this.getBO().vn.zahlungsdaten.kto.blz || "");
            ktoInput.val(this.getBO().vn.zahlungsdaten.kto.no || "");
            bankInput.val(this.getBO().vn.zahlungsdaten.bank || "");

            ibanCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = true;
                that.getBO().vn.zahlungsdaten.kto.selected = false;

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            });
            ktoCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = false;
                that.getBO().vn.zahlungsdaten.kto.selected = true;

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, "vn_kontotyp", [{
                fnValidation: function() {
                    return that.getBO().vn.zahlungsdaten.kto.selected === true || that.getBO().vn.zahlungsdaten.iban.selected === true ? true : false;
                },

                errorText: "Die Auswahl im Feld Kontotyp ist erforderlich."
            }]));

            bankInput.change(function() {
                that.getBO().vn.zahlungsdaten.bank = $(this).val();
            });

            $(ibanInput).change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.iban.no = val;
            });

            $(bicInput).change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });

            $(ibanInput).av_suggest_iban({
                bancfield: bankInput,
                bicfield: bicInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("ibanerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "no"), "vn_iban", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.no === null || that.getBO().vn.zahlungsdaten.iban.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d(?: \d{4} \d{4} \d{4} \d{4}) \d\d$/);
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    var deferred = $.Deferred();
                    that._checkIBAN(that.getBO().vn.zahlungsdaten.iban.no).then(function(oResult) {
                        if (oResult.state === "OK" && oResult.ergebnisIban === 0) {
                            var res = that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d (\d{4} \d{4}) \d{4} \d{4} \d\d$/);
                            if (res) {
                                that._getBLZSuggestionsFor(res[1].split(' ').join('')).then(function(oResult) {
                                    if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                        var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#(.*)/);
                                        if (bank) {
                                            that.getBO().vn.zahlungsdaten.bank = bank[1];
                                            bankInput.val(bank[1]);
                                            that.getBO().vn.zahlungsdaten.iban.bic = bank[2];
                                            bicInput.val(bank[2]);
                                            deferred.resolve(true);
                                        } else {
                                            deferred.reject(false);
                                        }
                                    } else {
                                        deferred.reject(false);
                                    }
                                }).fail(function() {
                                    deferred.reject(false);
                                });
                            } else {
                                deferred.reject(false);
                            }
                        } else {
                            deferred.reject(false);
                        }
                    }).fail(function() {
                        deferred.reject(false);
                    });

                    return deferred.promise();
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }]));

            bicInput.change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "bic"), "vn_bic", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.bic === null || that.getBO().vn.zahlungsdaten.iban.bic === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.bic.length === 0) {
                        return false;
                    }
                    return true;
                },

                errorText: "Die Angabe im Feld BIC ist ungültig."
            }]));

            ktoInput.change(function() {
                that.getBO().vn.zahlungsdaten.kto.no = $(this).val();
            });

            blzInput.change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.kto.blz = val;
            });
            blzInput.av_suggest_banc({
                bancfield: bankInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("blzerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "no"), "vn_kto", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no === null || that.getBO().vn.zahlungsdaten.kto.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.kto.no.match(/^\d{5,10}$/);
                },

                errorText: "Die Angabe im Feld Kontonummer ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no != null && that.getBO().vn.zahlungsdaten.kto.no.length > 0 &&
                        that.getBO().vn.zahlungsdaten.kto.blz != null && that.getBO().vn.zahlungsdaten.kto.blz.length > 0) {
                        var deferred = $.Deferred();
                        that._checkKonto(that.getBO().vn.zahlungsdaten.kto.blz, that.getBO().vn.zahlungsdaten.kto.no).then(function(oResult) {
                            if (oResult.state === "OK" && oResult.ergebnisKonto === 0) {
                                deferred.resolve(true);
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    }

                    return true;
                },

                errorText: "Die angegebene Bankverbindung ist ungültig."
            }]));
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_blz", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.blz === null || that.getBO().vn.zahlungsdaten.kto.blz === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.blz.length === 0) {
                        return false;
                    }
                    if (that.getBO().vn.zahlungsdaten.kto.blz.match(/^\d{5,10}$/)) {
                        var deferred = $.Deferred();

                        that._getBLZSuggestionsFor(that.getBO().vn.zahlungsdaten.kto.blz).then(function(oResult) {
                            if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#.*/);
                                if (bank) {
                                    that.getBO().vn.zahlungsdaten.bank = bank[1];
                                    bankInput.val(bank[1]);
                                    deferred.resolve(true);
                                } else {
                                    deferred.reject(false);
                                }
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    } else {
                        return false;
                    }
                },

                errorText: "Die Angabe im Feld Bankleitzahl ist ungültig."
            }]));

            //
            var ksmCheck = SchrittRendererHelper.getItemByPseudoId("vn_ksm", rootElement, "input");
            if (this.getBO().vn.zahlungsdaten.ksmSelected) {
                ksmCheck.prop("checked", true);
            }
            ksmCheck.change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vn.zahlungsdaten.ksmSelected = true;
                } else {
                    that.getBO().vn.zahlungsdaten.ksmSelected = false;
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_ksm", [{
                fnValidation: function(propVal) {
                    return (that.getBO().vn.zahlungsdaten.ksmSelected);
                },

                errorText: "Ihre Zustimmung ist erforderlich."
            }]));

            //
            if (!that.getBO().einstellung.betreuerFestDefiniert && (that.getBO().einstellung.betreuerwahl === true || that.getBO().einstellung.betreuer)) {
                var ksmBlockRow = SchrittRendererHelper.getItemByPseudoId("ksm_block", rootElement);

                var fnBetreuerSeparator = _.template(schrittTemplate.betreuerSeparator);
                var betreuerSeparator = $(fnBetreuerSeparator());
                betreuerSeparator.insertAfter(ksmBlockRow);

                var fnBetreuerauswahlRow = _.template(schrittTemplate.betreuerauswahlRow);
                var betreuerauswahlRow = $(fnBetreuerauswahlRow({beraterauswahl: that.getBO().einstellung.betreuerwahl ? "Beraterauswahl" : "Ihr Berater"}));
                betreuerauswahlRow.insertAfter(betreuerSeparator);

                var nextPositionToInsert = betreuerauswahlRow;

                if (that.getBO().einstellung.betreuer) {
                    var fnBetreuerRow =_.template(schrittTemplate.betreuerRowTemplate);
                    var betreuerLabel = that.getBO().einstellung.betreuer.beschreibungen.join("<br />");
                    var betreuerRow = $(fnBetreuerRow({betreuerLabel : betreuerLabel}));
                    betreuerRow.insertAfter(nextPositionToInsert);
                    nextPositionToInsert = betreuerRow.last();
                }
                if (that.getBO().einstellung.betreuerwahl) {
                    var fnBetreuerSelectionRow = _.template(schrittTemplate.betreuerauswahlEntscheidungRow);
                    var betreuerSelectionRow = $(fnBetreuerSelectionRow());
                    betreuerSelectionRow.insertAfter(nextPositionToInsert);

                    var fnAddBetreuerItems;

                    //

                    var fnBetreuerWaehlenRow = _.template(schrittTemplate.betreuerWaehlenRow);
                    var betreuerWaehlenRow = $(fnBetreuerWaehlenRow());

                    if (!that.getBO().betreuer.manuelleAuswahl) {
                        betreuerWaehlenRow.hide();
                    }
                    betreuerWaehlenRow.insertAfter(betreuerSelectionRow);

                    betreuerWaehlenRow.find("a").click(function() {
                        var kv_ref_name = that.getBO().einstellung.betreuerzwang ? "betreuer_waehlen_label" : "betreuer_auswahl";
                        var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                        label.parent().find(".error").remove();
                        if (!that.getBO().vn.plz || !that.getBO().vn.plz.match(/^\d{5}$/)) {
                            var error = $(fnErrorLabelTemplate({error: "Geben Sie eine PLZ an."}));
                            error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                            error.insertAfter(label);
                        } else {
                            that.setBusy(true);
                            $(".betreuerInput").remove();
                            SchrittRendererHelper.getItemByPseudoId("betreuerInDerNaehe", rootElement).hide();
                            that._getBetreuerliste().then(function(betreuerliste) {
                                that.getBO().betreuer.auswahlListe = betreuerliste;
                                if (betreuerliste) {
                                    SchrittRendererHelper.getItemByPseudoId("betreuerInDerNaehe", rootElement).show();
                                    that.getBO().betreuer.auswahlListe.forEach(fnAddBetreuerItems);
                                }
                            }).fail(function(errorText) {
                                if (!errorText) {
                                    errorText = "Die Beratersuche ist fehlgeschlagen."
                                }
                                var error = $(fnErrorLabelTemplate({error: errorText}));
                                error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                                error.insertAfter(label);
                            }).always(function() {
                                that.setBusy(false);
                            });;
                        }
                    });

                    //

                    var fnBetreuerInDerNaeheRow = _.template(schrittTemplate.betreuerInDerNaeheRow);
                    var betreuerInDerNaeheRow = $(fnBetreuerInDerNaeheRow());

                    if (!that.getBO().betreuer.manuelleAuswahl) {
                        betreuerInDerNaeheRow.hide();
                    }
                    betreuerInDerNaeheRow.insertAfter(betreuerWaehlenRow);

                    //

                    var fnBetreuerInputRowTemplate = _.template(schrittTemplate.betreuerInputRowTemplate);
                    var lastPositionToAdd = betreuerInDerNaeheRow;
                    fnAddBetreuerItems = function(betreuer, index) {
                        if (index === 0) {
                            lastPositionToAdd = betreuerInDerNaeheRow;
                        }
                        var betreuerInputRow = $(fnBetreuerInputRowTemplate({betreuerVal: index, betreuerLabel: betreuer.beschreibungen.join(", ")}));
                        if (!that.getBO().betreuer.manuelleAuswahl) {
                            betreuerInputRow.hide();
                        }
                        betreuerInputRow.insertAfter(lastPositionToAdd);
                        betreuerInputRow.find("input").click(function() {
                            var selection = $(this).val();
                            if (selection !== null && selection !== undefined) {
                                selection = parseInt(selection);
                            }
                            that.getBO().betreuer.auswahlListe.forEach(function(betreuer, index) {
                                if (index === selection)
                                    betreuer.selected = true;
                                else
                                    betreuer.selected = false;
                            });
                        });

                        lastPositionToAdd = betreuerInputRow;
                    };

                    if (that.getBO().betreuer.auswahlListe) {
                        that.getBO().betreuer.auswahlListe.forEach(fnAddBetreuerItems);

                        $(".betreuerInput :input").prop("checked", false);
                        that.getBO().betreuer.auswahlListe.some(function(betreuer, index) {
                            if (betreuer.selected) {
                                $(".betreuerInput :input").eq(index).prop("checked", true);
                                return true;
                            }
                            return  false;
                        });
                    }

                    //

                    betreuerSelectionRow.find("input").eq(0).click(function() {
                        that.getBO().betreuer.manuelleAuswahl = true;

                        SchrittRendererHelper.getItemByPseudoId("betreuer_waehlen", rootElement).show();

                    });
                    betreuerSelectionRow.find("input").eq(1).click(function() {
                        that.getBO().betreuer.manuelleAuswahl = false;

                        SchrittRendererHelper.getItemByPseudoId("betreuer_waehlen", rootElement).hide();
                        SchrittRendererHelper.getItemByPseudoId("betreuerInDerNaehe", rootElement).hide();
                        $(".betreuerInput").remove();
                        that.getBO().betreuer.auswahlListe = null;
                    });
                    if (that.getBO().betreuer.manuelleAuswahl) {
                        betreuerSelectionRow.find("input").eq(0).prop("checked", true);
                    } else if (that.getBO().betreuer.manuelleAuswahl === false) {
                        betreuerSelectionRow.find("input").eq(1).prop("checked", true);
                    }
                    if (this.getBO().einstellung.betreuerzwang) {
                        betreuerSelectionRow.hide();

                        this.getBO().betreuer.manuelleAuswahl = true;
                        SchrittRendererHelper.getItemByPseudoId("betreuer_waehlen", rootElement).show();
                    }

                    this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, that.getBO().einstellung.betreuerzwang ? "betreuer_waehlen_label" : "betreuer_auswahl", [{
                        fnValidation: function(propVal) {
                            if (that.getBO().betreuer.manuelleAuswahl === null) {
                                return false;
                            } else if (that.getBO().betreuer.manuelleAuswahl) {
                                if (!that.getBO().betreuer.auswahlListe)
                                    return false;
                                else if (!that.getBO().betreuer.auswahlListe.some(function(betreuer) {
                                    return betreuer.selected;
                                })) {
                                    return false;
                                }
                            }
                            return true;
                        },

                        errorText: "Geben Sie eine Beraterauswahl an und wählen nach Klick auf 'Berater wählen' Ihren Berater aus."
                    }]));


                    this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, this.getBO().einstellung.betreuerzwang ? "betreuer_waehlen_label" : "betreuer_auswahl", [{
                        fnValidation: function(propVal) {
                        	if (!that.getBO().einstellung.betreuer && that.getBO().einstellung.betreuerwahl && that.getBO().betreuer.manuelleAuswahl === true) {
                        		var betreuer = null;
                        		that.getBO().betreuer.auswahlListe.some(function(currentBetreuer) {
                                    if (currentBetreuer.selected) {
                                    	betreuer = currentBetreuer;
                                    	return true;
                                    }
                                    return false;
                        		});
                        		if (betreuer && betreuer.detailFetchRequired===true) {
                        			var deferred = $.Deferred();
                        	    	that.oProdukt.getBetreuerdetailsFor(betreuer).then(function(betreuer2){
                        	    		Util.merge(betreuer2, betreuer);
                        	    		deferred.resolve(true);
                        	    	}).fail(function(){
                        	    		deferred.reject(false);
                        	    	});
                        	    	return deferred.promise();
                        		}
                        	}
                        	return true;
                        },

                        errorText: "Die Beraterdaten konnten nicht ermittelt werden. Bitte versuchen es erneut."
                    }]));
                }
            }

            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "anrede"), "vn_anrede", [{
                fnValidation: function(propVal) {
                	var vpIsVn = false;

                    that.getBO().vpsUnter20.forEach(function(vp) {
                        if (vp.isVn) {
                        	vpIsVn = true;
                        }
                    });
                    that.getBO().vpsBis64.forEach(function(vp) {
                        if (vp.isVn) {
                        	vpIsVn = true;
                        }
                    });
                    that.getBO().vpsAb65.forEach(function(vp) {
                        if (vp.isVn) {
                        	vpIsVn = true;
                        }
                    });

                    return vpIsVn;
                },

                errorText: "Der Versicherungnehmer muss eine versicherte Person sein!"
            }]));

            var modul = Util.getProp(this.getBO(), ["einstellung", "modul"]);
            var absicherungContent = SchrittRendererHelper.getItemByPseudoId("absicherungContent");
            absicherungContent.find("h1").html(modul.tariftyp);

            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            this.getBO().einstellung.modul.leistungen.forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });

            // beitraege mehrwertbox
            var nextPositionToPut = trennerLeistungen.nextAll().last();
            var accordionBeforeTemplate = _.template(schrittTemplate.mehrwertBoxTarifBeforeAccordionTemplate);
            var accordionBefore = $(accordionBeforeTemplate({beitrag: this.getBO().tarifErgebnisse.gesamtbeitrag}));
            accordionBefore.insertAfter(nextPositionToPut);
            nextPositionToPut = accordionBefore;

            var mehrwertBoxTarifAccordionStartTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionStartTemplate);
            var mehrwertBoxTarifAccordionStart = $(mehrwertBoxTarifAccordionStartTemplate());
            mehrwertBoxTarifAccordionStart.insertAfter(nextPositionToPut);
            nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("accordion-anchor", mehrwertBoxTarifAccordionStart);

            if (this.getBO().famAKD==='v2') {
            	mehrwertBoxTarifAccordionStart.hide();
            } else {
	            mehrwertBoxTarifAccordionStart.find("a").click(function(){
	                mehrwertBoxTarifAccordionStart.find("a").toggleClass("active");
	                mehrwertBoxTarifAccordionStart.find("div.content").toggleClass("active");
	            });
            }

            var itemCount = 0;
            var aPersonAndValue = [];
            var i;
            for(i=0; i<this.getBO().vpsUnter20.length; i++) {
                aPersonAndValue.push({
                    name: "Person " + (aPersonAndValue.length+1) + (this.getBO().famAKD==='v2' ? ": unter 19 Jahre" : ": unter 20 Jahre"),
                    tarif: this.getBO().tarifErgebnisse.tarifUnter20.beschreibung,
                    value: this.getBO().tarifErgebnisse.tarifUnter20.beitrag
                });
            }
            var fnPrintPersonAndValue = function(oPersonAndValue) {
                var mehrwertBoxTarifAccordionItemTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionItemTemplate);
                var mehrwertBoxTarifAccordionItem = $(mehrwertBoxTarifAccordionItemTemplate({text: oPersonAndValue.name}));
                if (itemCount === 0)
                    mehrwertBoxTarifAccordionItem.appendTo(nextPositionToPut);
                else
                    mehrwertBoxTarifAccordionItem.insertAfter(nextPositionToPut);
                nextPositionToPut = mehrwertBoxTarifAccordionItem;

                var tarifWertContentTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionTarifWertTemplate);
                var tarifWertContent = $(tarifWertContentTemplate({tarif: oPersonAndValue.tarif, wert: oPersonAndValue.value}));
                tarifWertContent.insertAfter(nextPositionToPut);

                nextPositionToPut = tarifWertContent[tarifWertContent.length-1];

                itemCount++;
            };
            aPersonAndValue.forEach(fnPrintPersonAndValue);

            aPersonAndValue = [];
            for(i=0; i<this.getBO().vpsBis64.length; i++) {
                aPersonAndValue.push({
                    name: "Person " + (this.getBO().vpsUnter20.length+aPersonAndValue.length+1) + ": bis 65 Jahre",
                    tarif: this.getBO().tarifErgebnisse.tarifUnter65.beschreibung,
                    value: this.getBO().tarifErgebnisse.tarifUnter65.beitrag
                });
            }
            aPersonAndValue.forEach(fnPrintPersonAndValue);

            aPersonAndValue = [];
            for(i=0; i<this.getBO().vpsAb65.length; i++) {
                aPersonAndValue.push({
                    name: "Person " + (this.getBO().vpsUnter20.length+this.getBO().vpsBis64.length+aPersonAndValue.length+1) + ": ab 65 Jahre",
                    tarif: this.getBO().tarifErgebnisse.tarifAb65.beschreibung,
                    value: this.getBO().tarifErgebnisse.tarifAb65.beitrag
                });
            }
            aPersonAndValue.forEach(fnPrintPersonAndValue);

            var mehrwertBoxTarifbeitragTemplate = _.template(schrittTemplate.mehrwertBoxTarifbeitragTemplate);
            var tarifbeitragContent = $(mehrwertBoxTarifbeitragTemplate({beitrag: this.getBO().tarifErgebnisse.gesamtbeitrag}));

            tarifbeitragContent.appendTo(SchrittRendererHelper.getItemByPseudoId("accordion-anchor", mehrwertBoxTarifAccordionStart));
            tarifbeitragContent.addClass("tarifbeitragContent");
    }
        // VPs
        $(".vpRow").remove();

        var nextPositionToAppendVpRows = SchrittRendererHelper.getItemByPseudoId("vp_rows_anchor");

        var fnBuildVpAddFunction = function(type, base) {
            return function(vp, index) {
                var personType;
                if (type === "vpsUnter20") {
                    personType = that.oBO.famAKD==='v2' ? "unter 19 Jahre" : "unter 20 Jahre";
                } else if (type === "vpsBis64") {
                    personType = "bis 64 Jahre";
                } else if (type === "vpsAb65") {
                    personType = "ab 65 Jahre";
                }
                var personNumber = (base+index+1);

                var fnVpRowsTemplate = _.template(schrittTemplate.vpRowsTemplate);
                var vpRows = $(fnVpRowsTemplate({personNumber: personNumber, personType: personType, type: type, number: index}));
                vpRows.insertAfter(nextPositionToAppendVpRows);
                nextPositionToAppendVpRows = vpRows.last();

                var anredeSelect = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_anrede", type, index), vpRows, "select");
                var vpVornameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_vorname", type, index), rootElement, "input");
                var vpNameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_name", type, index), rootElement, "input");
                var vpGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_geburtsdatum", type, index), rootElement, "input");

                function disableVpInputs(bDisabled, vpNameInput, vpVornameInput, anredeSelect, vpGeburtsdatumInput) {
                    vpNameInput.prop("disabled", bDisabled);
                    vpVornameInput.prop("disabled", bDisabled);
                    anredeSelect.prop("disabled", bDisabled);
                    vpGeburtsdatumInput.prop("disabled", bDisabled);
                }

                function setVpInputs(vp, anredeSelect, vpVornameInput, vpNameInput, vpGeburtsdatumInput) {
                    vpNameInput.val(vp.name || "");
                    vpVornameInput.val(vp.vorname || "");
                    vpGeburtsdatumInput.val(vp.geburtsdatum || "");
                    anredeSelect.val(vp.anrede || "");
                }

                function resetVp(vp) {
                    vp.name = "";
                    vp.vorname = "";
                    vp.anrede = "";
                    vp.geburtsdatum = "";
                }

                if (vp.isVn) {
                    disableVpInputs(true, vpNameInput, vpVornameInput, anredeSelect, vpGeburtsdatumInput);
                } else {
                    disableVpInputs(false, vpNameInput, vpVornameInput, anredeSelect, vpGeburtsdatumInput);
                }

                anredeSelect.val(vp.anrede || "");
                anredeSelect.change(function() {
                    var val = anredeSelect.val();
                    if (val === "HERR" || val === "FRAU") {
                        vp.anrede = val;
                    } else {
                        vp.anrede = "";
                    }
                });
                this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(vp, "anrede"), buildVpParamName("vp_anrede", type, index), "Anrede"));

                var vpIsVnInput = vpRows.find("input[name='p_vp_isvn']");
                if (index > 0) {
                    vpIsVnInput.closest("div.row").eq(0).hide();
                }
                vpIsVnInput.prop("checked", vp.isVn);
                vpIsVnInput.change(function() {
                    var oldVn;
                    that.getBO().vpsUnter20.forEach(function(vp) {
                        if (vp.isVn) {
                            oldVn = vp;
                        }
                        vp.isVn = false;
                    });
                    that.getBO().vpsBis64.forEach(function(vp) {
                        if (vp.isVn) {
                            oldVn = vp;
                        }
                        vp.isVn = false;
                    });
                    that.getBO().vpsAb65.forEach(function(vp) {
                        if (vp.isVn) {
                            oldVn = vp;
                        }
                        vp.isVn = false;
                    });
                    if($(this).is(":checked")) {
                        vp.isVn = true;

                        rootElement.find("input[name='p_vp_isvn']").each(function(i) {
                            if (!$(this).is(vpIsVnInput)) {
                                $(this).prop("checked", false);
                            }
                        });
                        var fnEnableOtherVpInputs = function(type) {
                            return function(vp, index) {
                                if (!vp.isVn) {
                                    var anredeSelect = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_anrede", type, index), rootElement, "select");
                                    var vpVornameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_vorname", type, index), rootElement, "input");
                                    var vpNameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_name", type, index), rootElement, "input");
                                    var vpGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_geburtsdatum", type, index), rootElement, "input");

                                    if (vp === oldVn) {
                                        resetVp(vp);
                                        setVpInputs(vp, anredeSelect, vpVornameInput, vpNameInput, vpGeburtsdatumInput);
                                    }
                                    disableVpInputs(false, vpNameInput, vpVornameInput, anredeSelect, vpGeburtsdatumInput);
                                }
                            };
                        };
                        that.getBO().vpsUnter20.forEach(fnEnableOtherVpInputs("vpsUnter20"));
                        that.getBO().vpsBis64.forEach(fnEnableOtherVpInputs("vpsBis64"));
                        that.getBO().vpsAb65.forEach(fnEnableOtherVpInputs("vpsAb65"));

                        vp.name = that.getBO().vn.name;
                        vp.vorname = that.getBO().vn.vorname;
                        vp.anrede = that.getBO().vn.anrede;
                        vp.geburtsdatum = that.getBO().vn.geburtsdatum;

                        disableVpInputs(true, vpNameInput, vpVornameInput, anredeSelect, vpGeburtsdatumInput);
                    } else {
                        vp.isVn = false;

                        resetVp(vp);
                        disableVpInputs(false, vpNameInput, vpVornameInput, anredeSelect, vpGeburtsdatumInput);
                    }

                    setVpInputs(vp, anredeSelect, vpVornameInput, vpNameInput, vpGeburtsdatumInput);
                });

                vpVornameInput.val(vp.vorname || "");
                vpVornameInput.change(function() {
                    vp.vorname = $(this).val();
                });
                this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(vp, "vorname"), buildVpParamName("vp_vorname", type, index), "Vorname"));

                vpNameInput.val(vp.name || "");
                vpNameInput.change(function() {
                    vp.name = $(this).val();
                });
                this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(vp, "name"), buildVpParamName("vp_name", type, index), "Nachname"));

                vpGeburtsdatumInput.val(vp.geburtsdatum || "");
                //vpGeburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
                vpGeburtsdatumInput.inputmask({alias: "datum"});
                var geburtsdatumHandler = function(event) {
                    var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                    var res = Util.parseAsDateAndFormatAsString($(this).val());

                    if (res) {
                        vp.geburtsdatum = res;
                    } else {
                        vp.geburtsdatum = unmaskedValue;
                    }
                };
                vpGeburtsdatumInput.keyup(geburtsdatumHandler);
                vpGeburtsdatumInput.blur(geburtsdatumHandler);
                var aGeburtsdatumValidations = [{
                    fnValidation: function(propVal) {
                        return !!Util.parseAsDateAndFormatAsString(propVal);
                    },

                    errorText: "Die Angabe im Feld ist kein gültiges Datum."
                }, {
                    fnValidation: function(propVal) {
                        var res = Util.parseAsDateObject(propVal);

                        if (res) {
                            return Util.isToday(res) || Util.isInPast(res);
                        }
                    },
                    errorText: "Das Geburtsdatum darf nicht in der Zukunft liegen."
                }];
                if (type === "vpsUnter20") {
                    aGeburtsdatumValidations.push({
                        fnValidation: function(propVal) {
                            var res = Util.parseAsDateObject(propVal);

                            if (res) {
                            	if (that.oBO.famAKD==='v2')
                            		return Util.calculateAlter(res) < 19;
                                return Util.calculateAlter(res) < 20;
                            }
                        },
                        errorText: (that.oBO.famAKD==='v2' ? "Die versicherte Person darf maximal 18 Jahre alt sein." : "Die versicherte Person darf maximal 19 Jahre alt sein.")
                    });
                } else if (type === "vpsBis64") {
                    aGeburtsdatumValidations.push({
                        fnValidation: function(propVal) {
                            var res = Util.parseAsDateObject(propVal);

                            if (res) {
                                if (that.getBO().famAKD==='v1') {
                                    return Util.calculateAlter(res) > 19 && Util.calculateAlter(res) < 65;
                                } else if (that.getBO().famAKD==='v2') {
                                    return Util.calculateAlter(res) > 18 && Util.calculateAlter(res) < 65;
                                } else {
                                    return Util.calculateAlter(res) < 65;
                                }
                            }
                        },
                        errorText: (that.getBO().famAKD==='v1' ? "Die versicherte Person muss mindestens 20 und darf maximal 64 Jahre alt sein."
                        		                               : (that.getBO().famAKD==='v2' ? "Die versicherte Person muss mindestens 19 und darf maximal 64 Jahre alt sein."
                        		                            		                         : "Die versicherte Person darf maximal 64 Jahre alt sein."))
                    });
                } else {
                    aGeburtsdatumValidations.push({
                        fnValidation: function(propVal) {
                            var res = Util.parseAsDateObject(propVal);

                            if (res) {
                                return Util.calculateAlter(res) >= 65;
                            }
                        },
                        errorText: "Die versicherte Person muss mindestens 65 Jahre alt sein."
                    });
                }
                this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(vp, "geburtsdatum"), buildVpParamName("vp_geburtsdatum", type, index), aGeburtsdatumValidations));

                SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_geburtsdatum", type, index), rootElement, "input").val(vp.geburtsdatum);
            };
        };

        this.getBO().vpsUnter20.forEach(fnBuildVpAddFunction("vpsUnter20", 0), this);
        this.getBO().vpsBis64.forEach(fnBuildVpAddFunction("vpsBis64", this.getBO().vpsUnter20.length), this);
        this.getBO().vpsAb65.forEach(fnBuildVpAddFunction("vpsAb65", this.getBO().vpsUnter20.length+this.getBO().vpsBis64.length), this);


        // mehrwert container

        var nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("absicherungContent", rootElement);

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

       	window.jQuery(document).foundation();

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt2Renderer.prototype._getBetreuerliste = function() {
    return this.oProdukt.getBetreuerlisteFor(this.getBO().vn.plz);
};

Schritt2Renderer.prototype._checkKonto = function(blz, no) {
    return this.oProdukt.checkKonto(blz, no);
};

Schritt2Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt2Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt2Renderer.prototype._checkIBAN = function(iban) {
    return this.oProdukt.checkIBAN(iban);
};

Schritt2Renderer.prototype._getBLZSuggestionsFor = function(blz) {
    return this.oProdukt.getBLZSuggestionsFor(blz);
};

Schritt2Renderer.prototype._getIbanSuggestionsFor = function(iban) {
    return this.oProdukt.getIbanSuggestionsFor(iban);
};

Schritt2Renderer.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt2Renderer.prototype._pruefe = function() {
    var that = this;
    var deferreds = [];

    this.fnErrorChecks.forEach(function(fnErrorCheck) {
        deferreds.push(fnErrorCheck());
    });

    that.setBusy(true);
    $.when.apply($, deferreds).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
            return val === true;
        })) {
            that.oProdukt.pruefe(that.getBO()).then(function() {
                that.oProdukt.weiter();
            }).fail(function() {
                console.log("TODO!!!");
            });
        } else {
            SchrittRendererHelper.scrollToFirstError(that.rootElement);
        }
    }).always(function() {
        that.setBusy(false);
        SchrittRendererHelper.scrollToFirstError(that.rootElement);
    });
};

module.exports = Schritt2Renderer;


/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = {
    mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%= produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
                                <div class="rowX"> \
                                            <ol class="progress-indicator"> \
                                                    <li class="" data-step="1"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-current" data-step="2"> \
                                                        <span>Personen- und Zahlungsdaten</span> \
                                                    </li> \
                                                    <li class="" data-step="3"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-last" data-step="4"> \
                                                        <span>Online beantragen</span> \
                                                    </li> \
                                            </ol> \
                                        </div> \
                                \
                                </div> \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
                                    <!-- Pflichtfelder, SSL --> \
                                    <div class="kvo-content-2"> \
                                    <div class="kvo-title"> \
                                        <h1>Personen- und Zahlungsdaten</h1> \
                                        <div class="row"> \
                                            <div class="large-12 medium-12 columns"> \
                                                <span>Danke für Ihre Mühe bei den Angaben zur Absicherung. Zur Ausstellung Ihres Versicherungsscheins benötigen wir noch einige persönliche Angaben und eine Bankverbindung.</span> \
                                                <p>&nbsp;</p> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    <div class="row"> \
                                        <div class="medium-12 contentbox"> \
                                        <hr> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2><i class="fa fa-user-circle fa-2x"></i> Versicherungsnehmer (mindestens 18 Jahre)</h2> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_anrede"></label><label kv_ref="vn_titel"></label>  \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Anrede</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <select kv_ref="vn_anrede"> \
                                                        <option value="">Bitte auswählen</option> \
                                                        <option value="HERR"> Herr</option> \
                                                        <option value="FRAU"> Frau</option> \
                                                    </select> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Titel (optional)</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Titel" maxlength="35" type="text" value="" kv_ref="vn_titel"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_vorname"></label><label kv_ref="vn_name"></label>  \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Vorname</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Vorname" maxlength="35" type="text" value="" kv_ref="vn_vorname"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Nachname</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Nachname" type="text" value="" maxlength="35" kv_ref="vn_name"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_geburtsdatum">Geburtsdatum</label> \
                                                <div class="row"> \
                                                    <div class="large-12 medium-12 small-12 columns"> \
                                                    <input class="intType autoTab" placeholder="TT.MM.JJJJ" value="" maxlength="10" kv_ref="vn_geburtsdatum" type="text"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_plz"></label> <label kv_ref="vn_ort"></label>\
                                            </div> \
                                            <div class="large-6 medium-12 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="medium-4 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label>PLZ</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="PLZ" type="text" value="" maxlength="5" kv_ref="vn_plz"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                    <div class="medium-8 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label>Ort</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="Hauptwohnsitz muss in D sein" type="text" value="" maxlength="35" kv_ref="vn_ort"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_strasse"></label> <label kv_ref="vn_hausnr"></label> \
                                            </div> \
                                            <div class="large-6 medium-12 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="medium-8 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label>Strasse</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="Strasse" type="text" value="" maxlength="35" kv_ref="vn_strasse"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                    <div class="medium-4 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label kv_ref="vn_hausnr">Hausnr.</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="Nr." type="text" value="" maxlength="5" kv_ref="vn_hausnr"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_telefon">Telefon (optional)</label> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Telefon" type="text" value="" maxlength="24" kv_ref="vn_telefon"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_mail">E-Mail</label> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="E-Mail" type="text" value="" maxlength="50" kv_ref="vn_mail"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row" kv_ref="nationalitaetRow"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_nationalitaet">Nationalität</label> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <select value="" kv_ref="vn_nationalitaet"> \
                                                    </select> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
\
                                        <div class="row" kv_ref="vp_rows_anchor"> \
                                        <div class="medium-12 columns"> \
                                            <h2><i class="fa fa-user-plus fa-2x"></i> Zu versichernde Person(en)</h2> \
                                        </div> \
                                        </div> \
    \
                                        <hr> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-eur fa-stack-1x fa-inverse"></i></span> Zahlungsdaten</h2> \
                                                <p class="sumContent"><strong>SEPA-Lastschriftmandat für wiederkehrende SEPA-Basislastschriften</strong></p> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_zahlungsart"></label> \<label kv_ref="vn_zahlungsweise"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                    <div class="small-12 columns" data-abide> \
                                                    <label>Zahlungsart<span data-tooltip="" class="has-tip" title="Die Versicherung kann nur mit Auswahl Bankeinzug per Lastschrift abgeschlossen werden. Der Beitrag für die Versicherung wird jährlich vom angegebenen Konto abgebucht. Ein Online-Abschluss mit einem ausländischen SEPA-Konto ist leider nicht möglich. Um die Versicherung abschließen zu können, wenden Sie sich bitte an Ihren Berater.">&nbsp;<a class="info">i</a></span></label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input type="text" readonly="readonly" value="" kv_ref="vn_zahlungsart"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                    <div class="small-12 columns" data-abide> \
                                                    <label>Gewünschte Zahlungsweise</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <select kv_ref="vn_zahlungsweise" disabled="disabled"> \
                                                        <option value="jährlich">jährlich</option> \
                                                    </select> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <div class="row"> \
                                                    <div class="small-12 columns" data-abide> \
                                                    <label kv_ref="vn_bank_inhaber">Kontoinhaber (Versicherungsnehmer)</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input type="text" readonly="readonly" value="" kv_ref="vn_bank_inhaber"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-12 columns" data-abide> \
                                                <label kv_ref="vn_kontotyp">Angabe der Bankverbindung</label> \
                                                <div class="row"> \
                                                    <div class="medium-6 columns"> \
                                                        <input value="ja" type="radio" id="p_kontotyp_iban" style="border: 0px; width: 20px" name="p_kontotyp"><label for="p_kontotyp_iban" class="">IBAN (22 stellig)</label> \
                                                    </div> \
                                                    <div class="medium-6 columns"> \
                                                    <input value="nein" type="radio" id="p_kontotyp_kto" style="border: 0px; width: 20px" name="p_kontotyp"><label for="p_kontotyp_kto" class="">Kontonr. und Bankleitzahl</label> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div style="display: none;" kv_ref="block_iban" class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_iban"></label> \<label kv_ref="vn_bic"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>IBAN</label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <span role="status" aria-live="polite" class="ui-helper-hidden-accessible"></span><input maxlength="34" type="text" value="" placeholder="DE12 3456 7890 1234 5678 90" kv_ref="vn_iban"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>BIC</label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <input placeholder="BIC" maxlength="11" type="text" value="" kv_ref="vn_bic"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div  style="display: none;" kv_ref="block_kto"class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_blz"></label> \<label kv_ref="vn_kto"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>Bankleitzahl</label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <span role="status" aria-live="polite" class="ui-helper-hidden-accessible"></span><input placeholder="Bankleitzahl" maxlength="8" type="text" value="" kv_ref="vn_blz"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>Kontonummer</label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <input placeholder="Kontonummer" maxlength="15" type="text" value="" kv_ref="vn_kto"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div style="display: none;" class="row" kv_ref="block_bank"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_bank">Name der Bank (wird automatisch ausgefüllt)</label> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Name der Bank" maxlength="100" type="text" value="" kv_ref="vn_bank"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-12 columns" data-abide> \
                                                <label kv_ref="vn_ksm">&nbsp;</label> \
                                            </div> \
                                        </div> \
                                        <div class="row dataSummary" kv_ref="ksm_block"> \
                                            <div class="small-1 columns"> \
                                                <input value="true" type="checkbox" kv_ref="vn_ksm" id="p_ksm"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_ksm"></label> \
                                            </div> \
                                            <div class="small-11 columns"> \
                                                <%= lastschriftText %><span data-tooltip="" class="has-tip" title="Indem Sie das Häkchen setzen, geben Sie uns Ihre Einwilligung, den Versicherungsbeitrag per SEPA-Lastschrift von Ihrem Konto einziehen zu dürfen. Auch die Versicherungsleistungen überweisen wir mit dieser Einwilligung auf Ihr genanntes Konto.">&nbsp;<a class="info">i</a></span>\
                                            </div> \
                                        </div> \
                                        </div> \
                                        <!-- Buttons --> \
                                        <div class="row"> \
                                        <div class="medium-5 large-4 columns left"> \
                                            <p>&nbsp;</p> \
                                            <a class="button action-back expand back">zurück</a> \
                                            <p class="small-text button-subline">zu Schritt 1 Angaben zur Absicherung</p> \
                                        </div> \
                                        <div class="medium-5 large-4 columns right text-right"> \
                                            <p>&nbsp;</p> \
                                            <a class="call-to-action button expand check">weiter zu Schritt 3</a> \
                                            <p class="small-text button-subline">Angaben überprüfen</p> \
                                        </div> \
                                        </div> \
    \
                                </div></div><div class="row ssl"> \
                                        <div class="columns medium-12 "> \
                                        <p>&nbsp;</p> \
                                        <span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                        </div> \
                                    </div> \
                                </div> \
    \
    \
                                <div class="large-4 medium-5 columns"> \
                                 	<div class="row "> \
                                        <!-- Ausgabe eingegebener Daten --> \
                                     	<div class="medium-11 small-12 summarybox right"> \
                                          	<div class="row" kv_ref="absicherungContent"> \
                                               	<div class="medium-12 columns"> \
                                                    <h2>Ihre gewünschte Absicherung</h2> \
                                                    <h1><%= produkt %></h1> \
                                                    <p><%= produktDesc %></p> \
                                                    <br kv_ref="trenner_leistungen" /> \
                                                </div> \
                                            </div> \
                                            <div class="medium-11 small-12 summarybox left"> \
                                                <div class="row" kv_ref="weiterfuehrendeInformationenRow"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Weiterführende Informationen</h2> \
                                                        <ul> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
                                                            <li><a target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                                        </ul> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                     </div> \
                                  </div> \
                              </div> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>',

    einElternteilRow:  '<div class="row" kv_ref="einElternteilRow"> \
                            <div class="medium-6 columns" data-abide> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label kv_ref="ein_elternteil"></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="large-12 medium-12 small-12 columns"> \
                                        <input type="checkbox" checked="checked" id="p_ein_elternteil"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_ein_elternteil"> Ich bestätige, dass eine der versicherten Personen ein Elternteil der angegebenen Kinder/Jugendlichen ist.</label> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    vpRowsTemplate: ' \
                    <div class="row vpRow"> \
                        <div class="small-12 columns" data-abide> \
                            <p class="intro">Person <%= personNumber %>: <%= personType %></p> \
                        </div> \
                        <div class="row"> \
                            <div class="medium-12 columns"> \
                            <input value="true" type="checkbox" name="p_vp_isvn" id="p_vp_isvn_<%= type %>_<%= number %>"><label style="left: 10px;" for="p_vp_isvn_<%= type %>_<%= number %>">  Person ist der Versicherungsnehmer<span data-tooltip="" class="has-tip" title="Aktivieren Sie die Checkbox um die Daten des Versicherungsnehmers auf die versicherte Person zu übertragen.">&nbsp;<a class="info">i</a></span></label> \
                            </div> \
                        </div> \
                        <div class="medium-6 columns"> \
                            <div class="row" data-abide> \
                                <div class="small-12 columns"> \
                                <label kv_ref="vp_anrede_<%= type %>_<%= number %>">Anrede</label> \
                                </div> \
                            </div> \
                            <div class="row"> \
                                <div class="small-12 columns"> \
                                <select kv_ref="vp_anrede_<%= type %>_<%= number %>"> \
                                    <option value="">Bitte auswählen</option> \
                                    <option value="HERR"> Herr</option> \
                                    <option value="FRAU"> Frau</option> \
                                </select> \
                                </div> \
                            </div> \
                        </div> \
                    </div> \
                    <div class="row vpRow"> \
                        <div class="small-12 columns" data-abide> \
                            <label kv_ref="vp_vorname_<%= type %>_<%= number %>"></label> <label kv_ref="vp_name_<%= type %>_<%= number %>"></label> \
                        </div> \
                        <div class="medium-6 columns"> \
                            <div class="row" data-abide> \
                                <div class="small-12 columns"> \
                                <label>Vorname</label> \
                                </div> \
                            </div> \
                            <div class="row"> \
                                <div class="small-12 columns"> \
                                <input placeholder="Vorname" type="text" value="" maxlength="35" kv_ref="vp_vorname_<%= type %>_<%= number %>"> \
                                </div> \
                            </div> \
                        </div> \
                        <div class="medium-6 columns"> \
                            <div class="row" data-abide> \
                                <div class="small-12 columns"> \
                                <label>Nachname</label> \
                                </div> \
                            </div> \
                            <div class="row"> \
                                <div class="small-12 columns"> \
                                <input placeholder="Nachname" type="text" value="" maxlength="35" kv_ref="vp_name_<%= type %>_<%= number %>"> \
                                </div> \
                            </div> \
                        </div> \
                    </div> \
                    <div class="row"> \
                        <div class="medium-6 columns" data-abide> \
                            <label kv_ref="vp_geburtsdatum_<%= type %>_<%= number %>">Geburtsdatum</label> \
                            <div class="row"> \
                                <div class="large-12 medium-12 small-12 columns"> \
                                <input class="intType autoTab" placeholder="TT.MM.JJJJ" value="" maxlength="10" kv_ref="vp_geburtsdatum_<%= type %>_<%= number %>" type="text"> \
                                </div> \
                            </div> \
                        </div> \
                    </div> \
                    ',

    mehrwertBoxTarifAccordionTarifWertTemplate:
                                        ' \
                                        <div class="row" kv_ref="detail_beitrag_row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label><%= tarif %></label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= wert %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        <hr> \
                                        ',

    mehrwertBoxTarifAccordionEndTemplate:
                                        ' \
                                        <div class="row" kv_ref="detail_beitrag_gesamt_row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        ',

    betreuerauswahlRow: ' \
                        <div class="row"> \
                            <div class="medium-12 columns"> \
                                <h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-map-marker fa-stack-1x fa-inverse"></i></span> <%= beraterauswahl %></h2> \
                                <p class="sumContent"></p> \
                            </div> \
                        </div> \
                        ',

    betreuerSeparator: '<hr>',

    betreuerauswahlEntscheidungRow: ' \
                                    <div class="row"> \
                                        <div class="medium-12 columns"> \
                                            <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="betreuer_auswahl">Möchten Sie einen Berater in Ihrer Nähe auswählen?</label> \
                                            </div> \
                                            </div> \
                                            <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <input type="radio" value="ja" id="p_betreuerauswahl_ja" name="p_betreuerauswahl"><label for="p_betreuerauswahl_ja" class="">ja</label> \
                                                &nbsp;&nbsp; \
                                                <input type="radio" value="nein" id="p_betreuerauswahl_nein" name="p_betreuerauswahl"><label for="p_betreuerauswahl_nein" class="">nein</label> \
                                            </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    ',

    betreuerInDerNaeheRow: ' \
                        <div class="row betreuerAuswahl" kv_ref="betreuerInDerNaehe"> \
                            <div class="medium-12 columns"> \
                                <p><br>Berater in Ihrer Nähe:</p> \
                            </div> \
                        </div> \
                        ',

    betreuerInputRowTemplate: ' \
                            <div class="row betreuerAuswahl betreuerInput"> \
                            <div class="medium-12 columns"> \
                                <input type="radio" value="<%= betreuerVal %>" id="p_betreuer_<%= betreuerVal %>" name="p_betreuer"><label for="p_betreuer_<%= betreuerVal %>" class=""><%= betreuerLabel %></label> \
                            </div> \
                            </div> \
                            ',

    betreuerRowTemplate: ' \
                            <div class="row"> \
                            <div class="medium-12 columns"> \
                                <%= betreuerLabel %> \
                            </div> \
                            </div> \
                            <br /> \
                            ',

    betreuerWaehlenRow: ' \
                                <div class="row" kv_ref="betreuer_waehlen"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label kv_ref="betreuer_waehlen_label"></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-5 large-4 columns left text-right"> \
                                        <p>&nbsp;</p> \
                                        <a href="javascript:void(0);" class="button expand">Berater wählen</a> \
                                    </div> \
                                </div> \
                                </div> \
                                ',

    mehrwertBoxTarifBeforeAccordionTemplate:
                                ' \
                                <div class="row display-sum" style="margin-top: 30px"> \
                                    <div class="medium-7 small-8 columns"> \
                                        <label><h3>Jährlicher Gesamtbeitrag</h3></label> \
                                    </div> \
                                    <div class="medium-5 small-4 columns"> \
                                        <input readonly="" type="text" value="<%= beitrag %> \u20AC"> \
                                    </div> \
                                </div> \
                                ',

    mehrwertBoxTarifbeitragTemplate: ' \
                                <hr /> \
                                <div class="row display-sum"> \
                                    <div class="medium-7 small-8 columns mb05"> \
                                        <label class="summary"><strong>Jährlicher Gesamtbeitrag</strong></label> \
                                    </div> \
                                    <div class="medium-5 small-4 columns"> \
                                        <input readonly="" type="text" value="<%= beitrag %> \u20AC"> \
                                    </div> \
                                </div> \
                                    ',

    mehrwertBoxTarifAccordionStartTemplate:
                        ' \
                        <dl class="accordion" data-accordion=""> \
                            <dd class="accordion-navigation active"> \
                                <a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
                                <div id="panel1a" class="content active" kv_ref="accordion-anchor"> \
                                </div> \
                            </dd> \
                        </dl> \
                        ',

    mehrwertBoxTarifAccordionItemTemplate:
                        ' \
                        <div class="row" kv_ref="accordion"> \
                            <div class="medium-7 small-8 columns mb05"> \
                                <label class="summary"><%= text %></label> \
                            </div> \
                        </div> \
                        ',


    mehrwertBoxTarifAccordionTarifWertTemplate:
                        ' \
                        <div class="row"> \
                            <div class="medium-7 small-8 columns mb05"> \
                                <label><%= tarif %></label> \
                            </div> \
                            <div class="medium-5 small-4 columns"> \
                                <input readonly="" type="text" value="<%= wert %> \u20AC"> \
                            </div> \
                        </div> \
                        ',

    errorLabelTemplate: '<small style="display: block" class="error"><%- error %></small>'

};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

function buildKontoinhaber() {
    var kontoinhaber = "";
    if (this.getBO().vn.vorname) {
        kontoinhaber = this.getBO().vn.vorname;
    }
    if (this.getBO().vn.name) {
        if (kontoinhaber.length > 0)
            kontoinhaber += " ";
        kontoinhaber += this.getBO().vn.name;
    }

    return kontoinhaber;
}

function buildPropExtractorFn(obj, prop) {
    return function() {
        return Util.getProp(obj, [prop]) || "";
    };
}

function buildDefaultValidatorFn() {
    return function(propVal) {
        if (propVal === null || propVal.trim().length === 0) {
            return false;
        }

        return true;
    };
}

function buildErrorCheckFn(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, fieldName, followingFnValidationAndErrorText) {
    var validationAndErrorText = {
        fnValidation : buildDefaultValidatorFn(),

        errorText : "Die Angabe im Feld " + (fieldName ? fieldName + " " : "")  + "ist erforderlich."
    };

    var aFnValidationAndErrorText = !followingFnValidationAndErrorText ? [validationAndErrorText] : [validationAndErrorText, followingFnValidationAndErrorText];
    return buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText);
}

function buildErrorXSSValidatorObj() {
    var validationAndErrorText = {
            fnValidation : function(propVal) {
            	if (propVal) {
            		var c;
        	    	for (var i=0; i<propVal.length; i++) {
        	    		c = propVal.charAt(i);
            	    	if (c=='['  || c==';' || c=='(' || c==')'
        	        		|| c=='"'  || c=='´' || c=='`' || c==','
        	        		|| c=='<'  || c=='>' || c=='/' || c=='\\'
        	        		/*|| c=='\''*/  || c=='=' || c=='#' || c==']')
        	    		   return false;
        	    	}
        	    	return true;
        	    }
    	    	return true;
            },

            //errorText: "Die Sonderzeichen [;()\"´`,<>/\\'=#] sind nicht erlaubt."
            errorText: "Die Sonderzeichen [;()\"´`,<>/\\=#] sind nicht erlaubt."
        };

    return validationAndErrorText;
}

function buildErrorXSSValidatorFn(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, followingFnValidationAndErrorText) {
	var validationAndErrorText = buildErrorXSSValidatorObj.call(this);

    var aFnValidationAndErrorText = !followingFnValidationAndErrorText ? [validationAndErrorText] : [validationAndErrorText, followingFnValidationAndErrorText];
    return buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText);
}


function buildErrorCheckFnWithErrorHandling(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText) {
    var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement);

    return function() {
        var deferred = $.Deferred();

        var subDeferreds = [];

        aFnValidationAndErrorText.every(function(validationAndErrorText) {
            var fnValidation = validationAndErrorText.fnValidation;
            var ok = fnValidation(fnPropExtractor());

            var parent = input.parents('[class="bline"]').eq(0);
            parent.find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
            var addError = function() {
                var error = $(fnErrorLabelTemplate({error: validationAndErrorText.errorText}));
                error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                error.prependTo(parent);
            }

            var subDeferred = $.Deferred();
            var proceed;

            if (Util.isPromise(ok)) {
                proceed = true;
                ok.then(function() {
                    subDeferred.resolve(true);
                }).fail(function() {
                    addError();
                    subDeferred.resolve(false);
                });
            } else if (ok) {
                subDeferred.resolve(true);
                proceed = true;
            } else {
                addError();
                subDeferred.resolve(false);
                proceed = false;
            }

            subDeferreds.push(subDeferred.promise());

            return proceed;
        });

        $.when.apply($, subDeferreds).then(function() {
            if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        });

        return deferred.promise();
    };
}

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

function buildVpParamName(name, type, index) {
    return name + "_" + type + "_" + index;
};

var Schritt2RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt2RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt2RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(31);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt2RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate({
                produkt: "Auslandsreise-Krankenversicherung (AKD)",
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: this.getBO().einstellung.modul.tariftyp,
                lastschriftText: Util.getTextFromEncodedObject(this.getBO().texte.lastschrift)
            }));
            content.appendTo(rootElement);

            content.find("input.back").click(function() {
                that._zurueck();
            });
            content.find("input.check").click(function() {
                that._pruefe();
            });

            var fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);
            var errorTextInputIsRequired = "Die Angabe im Feld ist erforderlich.";

            // VN
            function isVpVn() {
                var vnAvailable = that.getBO().vpsUnter20.some(function(vp) {
                    return vp.isVn;
                });
                if (!vnAvailable) {
                    vnAvailable = that.getBO().vpsBis64.some(function(vp) {
                        return vp.isVn;
                    });
                }
                if (!vnAvailable) {
                    vnAvailable = that.getBO().vpsAb65.some(function(vp) {
                        return vp.isVn;
                    });
                }
                return vnAvailable;
            }

            function getVpInputs() {
                var vpIndex;
                var sType;
                var foundVp;

                var vnAvailable = that.getBO().vpsBis64.some(function(vp, index) {
                    var bIsVn = vp.isVn;

                    if (bIsVn) {
                        sType = "vpsBis64";
                        vpIndex = index;
                        foundVp = vp;
                    }
                    return bIsVn;
                });

                if (!vnAvailable) {
                    vnAvailable = that.getBO().vpsAb65.some(function(vp, index) {
                        var bIsVn = vp.isVn;

                        if (bIsVn) {
                            sType = "vpsAb65";
                            vpIndex = index;
                            foundVp = vp;
                        }
                        return bIsVn;
                    });
                }

                if (vnAvailable) {
                    var anredeHerrInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_anrede", sType, vpIndex) + "_herr", rootElement, "input");
                    var anredeFrauInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_anrede", sType, vpIndex) + "_frau", rootElement, "input");
                    var vpVornameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_vorname", sType, vpIndex), rootElement, "input");
                    var vpNameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_name", sType, vpIndex), rootElement, "input");
                    var vpGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_geburtsdatum", sType, vpIndex), rootElement, "input");

                    return {
                        anredeHerrInput: anredeHerrInput,
                        anredeFrauInput: anredeFrauInput,
                        vpVornameInput: vpVornameInput,
                        vpNameInput: vpNameInput,
                        vpGeburtsdatumInput: vpGeburtsdatumInput,
                        vp: foundVp
                    };
                }
            }

            var vnAnredeHerrInput = SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input");
            var vnAnredeFrauInput = SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input");
            if (this.getBO().vn.anrede === "HERR") {
                vnAnredeHerrInput.prop("checked", true);
                vnAnredeFrauInput.prop("checked", false);
            } else if (this.getBO().vn.anrede === "FRAU") {
                vnAnredeHerrInput.prop("checked", false);
                vnAnredeFrauInput.prop("checked", true);
            }
            vnAnredeHerrInput.click(function() {
                that.getBO().vn.anrede = "HERR";

                if (isVpVn()) {
                    var vpInputs = getVpInputs();

                    vpInputs.anredeHerrInput.prop("checked", true);
                    vpInputs.anredeHerrInput.next("span").addClass("checked");
                    vpInputs.anredeFrauInput.prop("checked", false);
                    vpInputs.anredeFrauInput.next("span").removeClass("checked");
                    vpInputs.vp.anrede = that.getBO().vn.anrede;
                }
            });
            vnAnredeFrauInput.click(function() {
                that.getBO().vn.anrede = "FRAU";

                if (isVpVn()) {
                    var vpInputs = getVpInputs();

                    vpInputs.anredeHerrInput.prop("checked", false);
                    vpInputs.anredeHerrInput.next("span").removeClass("checked");
                    vpInputs.anredeFrauInput.prop("checked", true);
                    vpInputs.anredeFrauInput.next("span").addClass("checked");
                    vpInputs.vp.anrede = that.getBO().vn.anrede;
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "anrede"), "vn_anrede_herr", "Anrede"));

            var vnTitelInput = SchrittRendererHelper.getItemByPseudoId("vn_titel", rootElement, "input");
            vnTitelInput.val(this.getBO().vn.titel || "");
            vnTitelInput.change(function() {
                that.getBO().vn.titel = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorXSSValidatorFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "titel"), "vn_titel"));

            var vnVornameInput = SchrittRendererHelper.getItemByPseudoId("vn_vorname", rootElement, "input");
            vnVornameInput.val(this.getBO().vn.vorname || "");
            vnVornameInput.change(function() {
                that.getBO().vn.vorname = $(this).val();

                if (isVpVn()) {
                    var vpInputs = getVpInputs();

                    vpInputs.vpVornameInput.val(that.getBO().vn.vorname);
                    vpInputs.vp.vorname = that.getBO().vn.vorname;
                }

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "vorname"), "vn_vorname", "Vorname", buildErrorXSSValidatorObj.call(this)));

            var vnNameInput = SchrittRendererHelper.getItemByPseudoId("vn_name", rootElement, "input");
            vnNameInput.val(this.getBO().vn.name || "");
            vnNameInput.change(function() {
                that.getBO().vn.name = $(this).val();

                if (isVpVn()) {
                    var vpInputs = getVpInputs();

                    vpInputs.vpNameInput.val(that.getBO().vn.name)
                    vpInputs.vp.name = that.getBO().vn.name;
                }

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "name"), "vn_name", "Nachname", buildErrorXSSValidatorObj.call(this)));

            var vnGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId("vn_geburtsdatum", rootElement, "input");
            //vnGeburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
            vnGeburtsdatumInput.inputmask({alias: "datum"});
            vnGeburtsdatumInput.val(this.getBO().vn.geburtsdatum || "");
            var geburtsdatumHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().vn.geburtsdatum = res;
                } else {
                    that.getBO().vn.geburtsdatum = unmaskedValue;
                }

                if (isVpVn()) {
                    var vpInputs = getVpInputs();

                    if (res) {
                        vpInputs.vpGeburtsdatumInput.val(res);
                        vpInputs.vp.geburtsdatum = res;
                    } else {
                        vpInputs.vpGeburtsdatumInput.val(unmaskedValue);
                        vpInputs.vp.geburtsdatum = unmaskedValue;
                    }
                }

            };
            vnGeburtsdatumInput.keyup(geburtsdatumHandler);
            vnGeburtsdatumInput.blur(geburtsdatumHandler);

            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "geburtsdatum"), "vn_geburtsdatum", [{
                fnValidation: function(propVal) {
                    return !!Util.parseAsDateAndFormatAsString(propVal);
                },

                errorText: "Die Angabe im Feld ist kein gültiges Datum."
            }, {
                fnValidation: function(propVal) {
                    var res = Util.parseAsDateObject(propVal);

                    if (res) {
                        return Util.calculateAlter(res) >= 18;
                    }
                },
                errorText: "Der/Die Versicherungsnehmer/in muss mindestens 18 Jahre alt sein."
            }]));

            var vnPlzInput = SchrittRendererHelper.getItemByPseudoId("vn_plz", rootElement, "input");
            vnPlzInput.val(this.getBO().vn.plz || "");
            vnPlzInput.change(function() {
                that.getBO().vn.plz = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "plz"), "vn_plz", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\d{5}$/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige Postleitzahl."
            }, {
                fnValidation: function(propVal) {
                    //if (!that.getBO().einstellung.betreuer && (that.getBO().einstellung.betreuerwahl && that.getBO().betreuer.manuelleAuswahl === false || !that.getBO().einstellung.betreuerwahl))  {
                        return that.oProdukt.checkBetreuergebiet(propVal);
                    /*} else {
                        return true;
                    }*/
                },

                errorText: "Die Postleitzahl befindet sich nicht in einem von uns betreuten Gebiet."
            }]));

            var vnOrtInput = SchrittRendererHelper.getItemByPseudoId("vn_ort", rootElement, "input");
            vnOrtInput.val(this.getBO().vn.ort || "");
            vnOrtInput.change(function() {
                that.getBO().vn.ort = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "ort"), "vn_ort", "Ort", buildErrorXSSValidatorObj.call(this)));

            var vnStrasseInput = SchrittRendererHelper.getItemByPseudoId("vn_strasse", rootElement, "input");
            vnStrasseInput.val(this.getBO().vn.strasse || "");
            vnStrasseInput.change(function() {
                that.getBO().vn.strasse = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "strasse"), "vn_strasse", "Strasse", buildErrorXSSValidatorObj.call(this)));

            var vnHausnrInput = SchrittRendererHelper.getItemByPseudoId("vn_hausnr", rootElement, "input");
            vnHausnrInput.val(this.getBO().vn.hausnr || "");
            vnHausnrInput.change(function() {
                that.getBO().vn.hausnr = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "hausnr"), "vn_hausnr", "Hausnr.", buildErrorXSSValidatorObj.call(this)));

            var vnTelefonInput = SchrittRendererHelper.getItemByPseudoId("vn_telefon", rootElement, "input");
            vnTelefonInput.val(this.getBO().vn.telefon || "");
            vnTelefonInput.change(function() {
                that.getBO().vn.telefon = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "telefon"), "vn_telefon", [{
                fnValidation: function(propVal) {
                    if (propVal === undefined || propVal === null || propVal === "")
                        return true;
                    return propVal.match(/^(?:\+\d+)?\s*(?:\(\d+\)\s*(?:[\/–-]\s*)?)?\d+(?:\s*(?:[\s\/–-]\s*)?\d+)*$/);
                },

                errorText: "Die Angabe im Feld ist keine gültige Telefonnummer."
            }]));

            var vnMailInput = SchrittRendererHelper.getItemByPseudoId("vn_mail", rootElement, "input");
            vnMailInput.val(this.getBO().vn.mail || "");
            vnMailInput.change(function() {
                that.getBO().vn.mail = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "mail"), "vn_mail", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige E-Mail Adresse."
            }]));

            var staatsangehoerigkeitSelect = SchrittRendererHelper.getItemByPseudoId("vn_nationalitaet", rootElement, "select");
            staatsangehoerigkeitSelect.empty();
            if (this.getBO().svLand) {
                this.getBO().svLand.forEach(function(currLand) {
                    var optionLand = $("<option value='" + currLand  +"'>" + currLand + "</option>");

                    if (this.getBO().vn.staatsangehoerigkeit) {
                        if (currLand === this.getBO().vn.staatsangehoerigkeit) {
                            optionLand.attr("selected", "selected");
                        }
                    } else if (currLand === "Deutschland") {
                        this.getBO().vn.staatsangehoerigkeit = "Deutschland";
                        optionLand.attr("selected", "selected");
                    }
                    staatsangehoerigkeitSelect.append(optionLand);
                }, this);
            }
            staatsangehoerigkeitSelect.change(function() {
                that.getBO().vn.staatsangehoerigkeit = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "staatsangehoerigkeit"), "vn_nationalitaet", [{
                fnValidation: function(propVal) {
                    return !!propVal;
                },

                errorText: "Die Angabe im Feld Nationalität ist ungültig."
            }]));

            SchrittRendererHelper.getItemByPseudoId("vn_zahlungsart", rootElement, "input").val(this.getBO().vn.zahlungsdaten.zahlungsart || "");

            var zahlungsweiseInput = SchrittRendererHelper.getItemByPseudoId("vn_zahlungsweise", rootElement, "input");
            zahlungsweiseInput.val(this.getBO().vn.zahlungsdaten.zahlungsweise);

            var kontoinhaber = buildKontoinhaber.call(this);
            SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);

            var ibanCheck = $("#p_kontotyp_iban");
            var ktoCheck = $("#p_kontotyp_kto");

            var ibanBlock = SchrittRendererHelper.getItemByPseudoId("block_iban", rootElement);
            var ktoBlock = SchrittRendererHelper.getItemByPseudoId("block_kto", rootElement);
            var bankBlock = SchrittRendererHelper.getItemByPseudoId("block_bank", rootElement);

            var ibanInput = SchrittRendererHelper.getItemByPseudoId("vn_iban", rootElement, "input");
            var bicInput = SchrittRendererHelper.getItemByPseudoId("vn_bic", rootElement, "input");
            var blzInput = SchrittRendererHelper.getItemByPseudoId("vn_blz", rootElement, "input");
            var ktoInput = SchrittRendererHelper.getItemByPseudoId("vn_kto", rootElement, "input");
            var bankInput = SchrittRendererHelper.getItemByPseudoId("vn_bank", rootElement, "input");

            if (this.getBO().vn.zahlungsdaten.iban.selected) {
                ibanCheck.prop("checked", true);
                ktoCheck.prop("checked", false);

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            } else if (this.getBO().vn.zahlungsdaten.kto.selected) {
                ibanCheck.prop("checked", false);
                ktoCheck.prop("checked", true);

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            }
            ibanInput.val(this.getBO().vn.zahlungsdaten.iban.no || "");
            bicInput.val(this.getBO().vn.zahlungsdaten.iban.bic || "");
            blzInput.val(this.getBO().vn.zahlungsdaten.kto.blz || "");
            ktoInput.val(this.getBO().vn.zahlungsdaten.kto.no || "");
            bankInput.val(this.getBO().vn.zahlungsdaten.bank || "");

            ibanCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = true;
                that.getBO().vn.zahlungsdaten.kto.selected = false;

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            });
            ktoCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = false;
                that.getBO().vn.zahlungsdaten.kto.selected = true;

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, "vn_zahlungsart", [{
                fnValidation: function() {
                    return that.getBO().vn.zahlungsdaten.kto.selected === true || that.getBO().vn.zahlungsdaten.iban.selected === true ? true : false;
                },

                errorText: "Die Auswahl im Feld 'Angabe der Bankverbindung' ist erforderlich."
            }]));

            bankInput.change(function() {
                that.getBO().vn.zahlungsdaten.bank = $(this).val();
            });

            $(ibanInput).change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.iban.no = val;
            });

            $(bicInput).change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });

            $(ibanInput).av_suggest_iban({
                bancfield: bankInput,
                bicfield: bicInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("ibanerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "no"), "vn_iban", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.no === null || that.getBO().vn.zahlungsdaten.iban.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d(?: \d{4} \d{4} \d{4} \d{4}) \d\d$/);
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    var deferred = $.Deferred();
                    that._checkIBAN(that.getBO().vn.zahlungsdaten.iban.no).then(function(oResult) {
                        if (oResult.state === "OK" && oResult.ergebnisIban === 0) {
                            var res = that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d (\d{4} \d{4}) \d{4} \d{4} \d\d$/);
                            if (res) {
                                that._getBLZSuggestionsFor(res[1].split(' ').join('')).then(function(oResult) {
                                    if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                        var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#(.*)/);
                                        if (bank) {
                                            that.getBO().vn.zahlungsdaten.bank = bank[1];
                                            bankInput.val(bank[1]);
                                            that.getBO().vn.zahlungsdaten.iban.bic = bank[2];
                                            bicInput.val(bank[2]);
                                            deferred.resolve(true);
                                        } else {
                                            deferred.reject(false);
                                        }
                                    } else {
                                        deferred.reject(false);
                                    }
                                }).fail(function() {
                                    deferred.reject(false);
                                });
                            } else {
                                deferred.reject(false);
                            }
                        } else {
                            deferred.reject(false);
                        }
                    }).fail(function() {
                        deferred.reject(false);
                    });

                    return deferred.promise();
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }]));

            bicInput.change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "bic"), "vn_bic", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.bic === null || that.getBO().vn.zahlungsdaten.iban.bic === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.bic.length === 0) {
                        return false;
                    }
                    return true;
                },

                errorText: "Die Angabe im Feld BIC ist ungültig."
            }]));

            ktoInput.change(function() {
                that.getBO().vn.zahlungsdaten.kto.no = $(this).val();
            });

            blzInput.change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.kto.blz = val;
            });
            blzInput.av_suggest_banc({
                bancfield: bankInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("blzerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "no"), "vn_kto", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no === null || that.getBO().vn.zahlungsdaten.kto.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.kto.no.match(/^\d{5,10}$/);
                },

                errorText: "Die Angabe im Feld Kontonummer ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no != null && that.getBO().vn.zahlungsdaten.kto.no.length > 0 &&
                        that.getBO().vn.zahlungsdaten.kto.blz != null && that.getBO().vn.zahlungsdaten.kto.blz.length > 0) {
                        var deferred = $.Deferred();
                        that._checkKonto(that.getBO().vn.zahlungsdaten.kto.blz, that.getBO().vn.zahlungsdaten.kto.no).then(function(oResult) {
                            if (oResult.state === "OK" && oResult.ergebnisKonto === 0) {
                                deferred.resolve(true);
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    }

                    return true;
                },

                errorText: "Die angegebene Bankverbindung ist ungültig."
            }]));
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_blz", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.blz === null || that.getBO().vn.zahlungsdaten.kto.blz === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.blz.length === 0) {
                        return false;
                    }
                    if (that.getBO().vn.zahlungsdaten.kto.blz.match(/^\d{5,10}$/)) {
                        var deferred = $.Deferred();

                        that._getBLZSuggestionsFor(that.getBO().vn.zahlungsdaten.kto.blz).then(function(oResult) {
                            if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#.*/);
                                if (bank) {
                                    that.getBO().vn.zahlungsdaten.bank = bank[1];
                                    bankInput.val(bank[1]);
                                    deferred.resolve(true);
                                } else {
                                    deferred.reject(false);
                                }
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    } else {
                        return false;
                    }
                },

                errorText: "Die Angabe im Feld Bankleitzahl ist ungültig."
            }]));

            //
            var ksmCheck = SchrittRendererHelper.getItemByPseudoId("vn_ksm", rootElement, "input");
            if (this.getBO().vn.zahlungsdaten.ksmSelected) {
                ksmCheck.prop("checked", true);
            }
            ksmCheck.change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vn.zahlungsdaten.ksmSelected = true;
                } else {
                    that.getBO().vn.zahlungsdaten.ksmSelected = false;
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_ksm", [{
                fnValidation: function(propVal) {
                    return (that.getBO().vn.zahlungsdaten.ksmSelected);
                },

                errorText: "Ihre Zustimmung ist erforderlich."
            }]));
        }
        // VPs
        $(".vpRow").remove();

        var nextPositionToAppendVpRows = SchrittRendererHelper.getItemByPseudoId("vp_rows_anchor");

        var fnBuildVpAddFunction = function(type, base) {
            return function(vp, index) {
                var personType;
                if (type === "vpsUnter20") {
                    personType = "unter 20 Jahre";
                } else if (type === "vpsBis64") {
                    personType = "bis 64 Jahre";
                } else if (type === "vpsAb65") {
                    personType = "ab 65 Jahre";
                }
                var personNumber = (base+index+1);

                var fnVpRowsTemplate = _.template(schrittTemplate.vpRowsTemplate);
                var vpRows = $(fnVpRowsTemplate({personNumber: personNumber, personType: personType, type: type, number: index}));
                vpRows.insertAfter(nextPositionToAppendVpRows);
                nextPositionToAppendVpRows = vpRows.last();

                var vpAnredeHerrInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_anrede", type, index)+ "_herr", vpRows, "input");
                var vpAnredeFrauInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_anrede", type, index)+ "_frau", vpRows, "input");
                var vpVornameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_vorname", type, index), rootElement, "input");
                var vpNameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_name", type, index), rootElement, "input");
                var vpGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_geburtsdatum", type, index), rootElement, "input");

                function disableVpInputs(bDisabled, vpNameInput, vpVornameInput, vpAnredeHerrInput, vpAnredeFrauInput, vpGeburtsdatumInput) {
                    vpNameInput.prop("disabled", bDisabled);
                    vpVornameInput.prop("disabled", bDisabled);
                    vpAnredeHerrInput.prop("disabled", bDisabled);
                    vpAnredeFrauInput.prop("disabled", bDisabled);
                    vpGeburtsdatumInput.prop("disabled", bDisabled);
                }

                function setVpInputs(vp, vpAnredeHerrInput, vpAnredeFrauInput, vpVornameInput, vpNameInput, vpGeburtsdatumInput) {
                    vpNameInput.val(vp.name || "");
                    vpVornameInput.val(vp.vorname || "");
                    vpGeburtsdatumInput.val(vp.geburtsdatum || "");

                    if (vp.anrede === "HERR") {
                        vpAnredeHerrInput.prop("checked", true);
                        vpAnredeHerrInput.next("span").addClass("checked");
                        vpAnredeFrauInput.prop("checked", false);
                        vpAnredeFrauInput.next("span").removeClass("checked");
                    } else if (vp.anrede === "FRAU") {
                        vpAnredeHerrInput.prop("checked", false);
                        vpAnredeHerrInput.next("span").removeClass("checked");
                        vpAnredeFrauInput.prop("checked", true);
                        vpAnredeFrauInput.next("span").addClass("checked");
                    } else {
                        vpAnredeHerrInput.prop("checked", false);
                        vpAnredeHerrInput.next("span").removeClass("checked");
                        vpAnredeFrauInput.prop("checked", false);
                        vpAnredeFrauInput.next("span").removeClass("checked");
                    }
                }

                function resetVp(vp) {
                    vp.name = "";
                    vp.vorname = "";
                    vp.anrede = "";
                    vp.geburtsdatum = "";
                }

                if (vp.isVn) {
                    disableVpInputs(true, vpNameInput, vpVornameInput, vpAnredeHerrInput, vpAnredeFrauInput, vpGeburtsdatumInput);
                } else {
                    disableVpInputs(false, vpNameInput, vpVornameInput, vpAnredeHerrInput, vpAnredeFrauInput, vpGeburtsdatumInput);
                }

                if (vp.anrede === "HERR") {
                    vpAnredeHerrInput.prop("checked", true);
                    vpAnredeHerrInput.next("span").addClass("checked");
                    vpAnredeFrauInput.prop("checked", false);
                    vpAnredeFrauInput.next("span").removeClass("checked");
                } else if (vp.anrede === "FRAU") {
                    vpAnredeHerrInput.prop("checked", false);
                    vpAnredeHerrInput.next("span").removeClass("checked");
                    vpAnredeFrauInput.prop("checked", true);
                    vpAnredeFrauInput.next("span").addClass("checked");
                }
                vpAnredeHerrInput.click(function() {
                    vp.anrede = "HERR";
                });
                vpAnredeFrauInput.click(function() {
                    vp.anrede = "FRAU";
                });
                this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(vp, "anrede"), buildVpParamName("vp_anrede", type, index) + "_herr", "Anrede"));

                var vpIsVnInput = vpRows.find("input[name='p_vp_isvn']");
                if (index > 0) {
                    vpIsVnInput.closest("div.bline").eq(0).hide();
                }
                vpIsVnInput.prop("checked", vp.isVn);
                vpIsVnInput.change(function() {
                    var oldVn;
                    that.getBO().vpsUnter20.forEach(function(vp) {
                        if (vp.isVn) {
                            oldVn = vp;
                        }
                        vp.isVn = false;
                    });
                    that.getBO().vpsBis64.forEach(function(vp) {
                        if (vp.isVn) {
                            oldVn = vp;
                        }
                        vp.isVn = false;
                    });
                    that.getBO().vpsAb65.forEach(function(vp) {
                        if (vp.isVn) {
                            oldVn = vp;
                        }
                        vp.isVn = false;
                    });
                    if($(this).is(":checked")) {
                        vp.isVn = true;

                        rootElement.find("input[name='p_vp_isvn']").each(function(i) {
                            if (!$(this).is(vpIsVnInput)) {
                                $(this).prop("checked", false);
                                $(this).next("span").removeClass("checked");
                            }
                        });
                        var fnEnableOtherVpInputs = function(type) {
                            return function(vp, index) {
                                if (!vp.isVn) {
                                    var vpAnredeHerrInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_anrede", type, index) + "_herr", rootElement, "input");
                                    var vpAnredeFrauInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_anrede", type, index) + "_frau", rootElement, "input");
                                    var vpVornameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_vorname", type, index), rootElement, "input");
                                    var vpNameInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_name", type, index), rootElement, "input");
                                    var vpGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_geburtsdatum", type, index), rootElement, "input");

                                    if (vp === oldVn) {
                                        resetVp(vp);
                                        setVpInputs(vp, vpAnredeHerrInput, vpAnredeFrauInput, vpVornameInput, vpNameInput, vpGeburtsdatumInput);
                                    }

                                    disableVpInputs(false, vpNameInput, vpVornameInput, vpAnredeHerrInput, vpAnredeFrauInput, vpGeburtsdatumInput);
                                }
                            };
                        }
                        that.getBO().vpsUnter20.forEach(fnEnableOtherVpInputs("vpsUnter20"));
                        that.getBO().vpsBis64.forEach(fnEnableOtherVpInputs("vpsBis64"));
                        that.getBO().vpsAb65.forEach(fnEnableOtherVpInputs("vpsAb65"));

                        vp.name = that.getBO().vn.name;
                        vp.vorname = that.getBO().vn.vorname;
                        vp.anrede = that.getBO().vn.anrede;
                        vp.geburtsdatum = that.getBO().vn.geburtsdatum;

                        disableVpInputs(true, vpNameInput, vpVornameInput, vpAnredeHerrInput, vpAnredeFrauInput, vpGeburtsdatumInput);
                    } else {
                        vp.isVn = false;

                        resetVp(vp);
                        disableVpInputs(false, vpNameInput, vpVornameInput, vpAnredeHerrInput, vpAnredeFrauInput, vpGeburtsdatumInput);
                    }
                    setVpInputs(vp, vpAnredeHerrInput, vpAnredeFrauInput, vpVornameInput, vpNameInput, vpGeburtsdatumInput);
                });

                vpVornameInput.val(vp.vorname || "");
                vpVornameInput.change(function() {
                    vp.vorname = $(this).val();
                });
                this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(vp, "vorname"), buildVpParamName("vp_vorname", type, index), "Vorname", buildErrorXSSValidatorObj.call(this)));

                vpNameInput.val(vp.name || "");
                vpNameInput.change(function() {
                    vp.name = $(this).val();
                });
                this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(vp, "name"), buildVpParamName("vp_name", type, index), "Nachname", buildErrorXSSValidatorObj.call(this)));

                var geburtsdatumHandler = function(event) {
                    var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                    var res = Util.parseAsDateAndFormatAsString($(this).val());

                    if (res) {
                        vp.geburtsdatum = res;
                    } else {
                        vp.geburtsdatum = unmaskedValue;
                    }
                };
                //vpGeburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
                vpGeburtsdatumInput.inputmask({alias: "datum"});
                vpGeburtsdatumInput.keyup(geburtsdatumHandler);
                vpGeburtsdatumInput.blur(geburtsdatumHandler);
                var aGeburtsdatumValidations = [{
                    fnValidation: function(propVal) {
                        return !!Util.parseAsDateAndFormatAsString(propVal);
                    },

                    errorText: "Die Angabe im Feld ist kein gültiges Datum."
                }, {
                    fnValidation: function(propVal) {
                        var res = Util.parseAsDateObject(propVal);

                        if (res) {
                            return Util.isToday(res) || Util.isInPast(res);
                        }
                    },
                    errorText: "Das Geburtsdatum darf nicht in der Zukunft liegen."
                }];
                if (type === "vpsUnter20") {
                    aGeburtsdatumValidations.push({
                        fnValidation: function(propVal) {
                            var res = Util.parseAsDateObject(propVal);

                            if (res) {
                                return Util.calculateAlter(res) < 20;
                            }
                        },
                        errorText: "Die versicherte Person darf maximal 19 Jahre alt sein."
                    });
                } else if (type === "vpsBis64") {
                    aGeburtsdatumValidations.push({
                        fnValidation: function(propVal) {
                            var res = Util.parseAsDateObject(propVal);

                            if (res) {
                                if (that.getBO().famAKD==='v1') {
                                    return Util.calculateAlter(res) > 19 && Util.calculateAlter(res) < 65;
                                } else {
                                    return Util.calculateAlter(res) < 65;
                                }
                            }
                        },
                        errorText: (that.getBO().famAKD==='v1' ? "Die versicherte Person muss mindestens 20 und darf maximal 64 Jahre alt sein." : "Die versicherte Person darf maximal 64 Jahre alt sein.")
                    });
                } else {
                    aGeburtsdatumValidations.push({
                        fnValidation: function(propVal) {
                            var res = Util.parseAsDateObject(propVal);

                            if (res) {
                                return Util.calculateAlter(res) >= 65;
                            }
                        },
                        errorText: "Die versicherte Person muss mindestens 65 Jahre alt sein."
                    });
                }
                this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(vp, "geburtsdatum"), buildVpParamName("vp_geburtsdatum", type, index), aGeburtsdatumValidations));

                SchrittRendererHelper.getItemByPseudoId(buildVpParamName("vp_geburtsdatum", type, index), rootElement, "input").val(vp.geburtsdatum);
            };
        };

        this.getBO().vpsUnter20.forEach(fnBuildVpAddFunction("vpsUnter20", 0), this);
        this.getBO().vpsBis64.forEach(fnBuildVpAddFunction("vpsBis64", this.getBO().vpsUnter20.length), this);
        this.getBO().vpsAb65.forEach(fnBuildVpAddFunction("vpsAb65", this.getBO().vpsUnter20.length+this.getBO().vpsBis64.length), this);


        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt2RendererIF6.prototype._getBetreuerliste = function() {
    return this.oProdukt.getBetreuerlisteFor(this.getBO().vn.plz);
};

Schritt2RendererIF6.prototype._checkKonto = function(blz, no) {
    return this.oProdukt.checkKonto(blz, no);
};

Schritt2RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt2RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt2RendererIF6.prototype._checkIBAN = function(iban) {
    return this.oProdukt.checkIBAN(iban);
};

Schritt2RendererIF6.prototype._getBLZSuggestionsFor = function(blz) {
    return this.oProdukt.getBLZSuggestionsFor(blz);
};

Schritt2RendererIF6.prototype._getIbanSuggestionsFor = function(iban) {
    return this.oProdukt.getIbanSuggestionsFor(iban);
};

Schritt2RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt2RendererIF6.prototype._pruefe = function() {
    var that = this;
    var deferreds = [];

    this.fnErrorChecks.forEach(function(fnErrorCheck) {
        deferreds.push(fnErrorCheck());
    });

    that.setBusy(true);
    $.when.apply($, deferreds).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
            return val === true;
        })) {
            that.oProdukt.pruefe(that.getBO()).then(function() {
         		that.oProdukt.weiter();
            }).fail(function() {
                console.log("TODO!!!");
            });
        } else {
            SchrittRendererHelper.scrollToFirstError(that.rootElement);
        }
    }).always(function() {
        that.setBusy(false);
        SchrittRendererHelper.scrollToFirstError(that.rootElement);
    });
};

module.exports = Schritt2RendererIF6;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate : ' \
                <div kv_ref="kvo_content"> \
                    <!-- Progress / Header --> \
                    <div class="block"> \
                        <ul class="progress"> \
                            <li class="">1</li> \
                            <li class="active">2</li> \
                            <li class="">3</li> \
                            <li class="">4</li> \
                        </ul> \
                        <h2>Personen- und Zahlungsdaten</h2> \
                    </div> \
                    <!-- Contentbereich --> \
                    <!-- Beantragungshinweisblock --> \
                    <div class="block"> \
                        <p><strong>Danke für Ihre Angaben zur Absicherung. Zur Ausstellung Ihres Versicherungsscheins benötigen wir noch einige persönliche Angaben und eine Bankverbindung.</strong></p> \
                    </div> \
                    <!-- Dateneingabeblock --> \
                    <!-- VNDaten --> \
                    <div class="block"> \
                        <h3>Versicherungsnehmer (mindestens 18 Jahre)</h3> \
                        <!-- Anrede Radiobuttons --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_anrede">Anrede<em></em>:</label> \
                            <input id="vn_anrede_herr" name="vn_anrede" kv_ref="vn_anrede_herr" type="radio" class=""> \
                            <label for="vn_anrede_herr">Herr</label> \
                            <br class="bterm" /> \
                        </div> \
                        <div class="bline bcontinue"> \
                            <input id="vn_anrede_frau" name="vn_anrede" kv_ref="vn_anrede_frau" type="radio" class=""> \
                            <label for="vn_anrede_frau">Frau</label> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Titel --> \
                        <div class="bline"> \
                            <label class="longlabel" for="Titel1" kv_ref="vn_titel">Titel <em>(optional)</em>:</label> \
                            <input type="text" name="Titel" id="Titel1" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_titel"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Vorname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_vorname">Vorname<em></em>:</label> \
                            <input type="text" name="Vorname" id="vn_vorname" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_vorname"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Nachname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_name">Nachname<em></em>:</label> \
                            <input type="text" name="Nachname" id="vn_name" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_name"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Geburtsdatum --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_geburtsdatum">Geburtsdatum<em></em>:</label> \
                            <input type="text" name="Geburtsdatum" id="vn_geburtsdatum" value="" class="il" maxlength="10" placeholder="tt.mm.jjjj" kv_ref="vn_geburtsdatum"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- PLZ --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_plz">Postleitzahl<em></em>:</label> \
                            <input type="text" name="PLZ" id="vn_plz" value="" class="im" maxlength="5" placeholder="" kv_ref="vn_plz"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Ort --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_ort">Ort<em></em>:</label> \
                            <input type="text" name="Ort" id="vn_ort" value="" class="ixl" maxlength="20" placeholder="Hauptwohnsitz muss in D sein" kv_ref="vn_ort"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Strasse --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_strasse">Strasse<em></em>:</label> \
                            <input type="text" name="Strasse" id="vn_strasse" value="" class="ixl" maxlength="30" placeholder="" kv_ref="vn_strasse"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Hausnummer --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_hausnr">Hausnummer<em></em>:</label> \
                            <input type="text" name="Hausnummer" id="vn_hausnr" value="" class="im" maxlength="10" placeholder="" kv_ref="vn_hausnr"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Telefon --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_telefon">Telefon <em>(optional)</em>:</label> \
                            <input type="text" name="Telefon" id="vn_telefon" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_telefon"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- E-Mail --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_mail">E-Mail<em></em>:</label> \
                            <input type="text" name="E-Mail" id="vn_mail" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_mail"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Nationalitaet --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_nationalitaet">Nationalität<em></em>:</label> \
                            <select name="Nationalitaet" id="vn_nationalitaet" class="ixl" kv_ref="vn_nationalitaet"> \
                            </select> \
                            <br class="bterm" /> \
                        </div> \
                    </div> \
                    <!-- Dateneingabeblock --> \
                    <!-- VPDaten --> \
                    <div class="block" kv_ref="vp_rows_anchor"> \
                        <h3>Zu versichernde Person(en)</h3> \
                    </div> \
                    <!-- Dateneingabeblock --> \
                    <!-- Zahlungsdaten --> \
                    <div class="block"> \
                        <h3>Zahlungsdaten</h3> \
                        <div class="bline btext-only"> \
                            <div><strong>SEPA-Lastschriftmandat für wiederkehrende SEPA-Basislastschriften</strong><br> \
                            </div> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Zahlungsart --> \
                        <div class="bline"> \
                            <label class="longlabel" for="zart" kv_ref="vn_kontotyp">Zahlungsart<em></em>:</label> \
                            <input type="text" name="zart" id="zart" kv_ref="vn_zahlungsart" value="Bankeinzug per Lastschrift" class="ixl" maxlength="" placeholder="" disabled> \
                            <div class="helptxt" title="Die Versicherung kann nur mit Auswahl Bankeinzug per Lastschrift abgeschlossen werden. Der Beitrag für die Versicherung wird jährlich vom angegebenen Konto abgebucht. Ein Online-Abschluss mit einem ausländischen SEPA-Konto ist leider nicht möglich. Um die Versicherung abschließen zu können, wenden Sie sich bitte an Ihren Berater.">?</div> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Zahlungweise --> \
                        <div class="bline"> \
                            <label class="longlabel" for="zarw">Zahlungsweise<em></em>:</label> \
                            <input type="text" kv_ref="vn_zahlungsweise" name="zarw" id="zarw" value="jährlich" class="ixl" maxlength="" placeholder="" disabled> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Kontoinhaber --> \
                        <div class="bline"> \
                            <label class="longlabel" for="Kontoinhaber">Kontoinhaber (Versicherungsnehmer):</label> \
                            <input type="text" kv_ref="vn_bank_inhaber" id="Kontoinhaber" value="" class="ixl" maxlength="" placeholder="" disabled> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Bankverbindung Radiobuttons --> \
                        <div class="bline"> \
                            <label class="longlabel" for="Bankverbindung">Angabe der Bankverbindung<em></em>:</label> \
                            <input id="p_kontotyp_iban" name="Bankverbindung" type="radio" class=""> \
                            <label for="p_kontotyp_iban">IBAN (22-stellig)</label> \
                            <br class="bterm" /> \
                        </div> \
                        <div class="bline bcontinue"> \
                            <input id="p_kontotyp_kto" name="Bankverbindung" type="radio" class=""> \
                            <label for="p_kontotyp_kto">Kontonummer und Bankleitzahl</label> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- IBAN --> \
                        <div style="display: none;" kv_ref="block_iban"> \
                            <div class="bline"> \
                                <label class="longlabel" for="IBAN">IBAN (22-stellig)<em></em>:</label> \
                                <input type="text" name="IBAN" id="IBAN" value="" class="ixl" maxlength="" placeholder="DE12 3456 7890 1234 5678 90"  kv_ref="vn_iban"> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- BIC --> \
                            <div class="bline"> \
                                <label class="longlabel" for="BIC">BIC<em></em>:</label> \
                                <input type="text" name="BIC" id="BIC" value="" class="ixl" maxlength="10" placeholder="" disabled="disabled" kv_ref="vn_bic"> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- BLZ --> \
                        <div  style="display: none;" kv_ref="block_kto"class="bline"> \
                            <div class="bline"> \
                                <label class="longlabel" for="Bankleitzahl">Bankleitzahl<em></em>:</label> \
                                <input type="text" name="Bankleitzahl" id="Bankleitzahl" value="" class="ixl" maxlength="8" placeholder=""  kv_ref="vn_blz"> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- BIC --> \
                            <div class="bline"> \
                                <label class="longlabel" for="Kontonummer">Kontonummer<em></em>:</label> \
                                <input type="text" name="Kontonummer" id="Kontonummer" value="" class="ixl" maxlength="15" placeholder="" kv_ref="vn_kto"> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- Bank --> \
                        <div class="bline" style="display: none;" kv_ref="block_bank"> \
                            <label class="longlabel" for="Bank">Name der Bank (wird automatisch ausgefüllt)<em></em>:</label> \
                            <input type="text" name="Bank" id="Bank" value="" class="ixl" maxlength="" placeholder="" disabled="disabled" kv_ref="vn_bank"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- SEPA-Mandat --> \
                        <div class="bline"> \
                            <label class="longlabel">SEPA-Lastschriftmandat<em></em>:</label> \
                            <input id="vn_ksm" kv_ref="vn_ksm" name="checkbox" type="checkbox"> \
                            <div class="helptxt" title="Indem Sie das Häkchen setzen, geben Sie uns Ihre Einwilligung, den Versicherungsbeitrag per SEPA-Lastschrift von Ihrem Konto einziehen zu dürfen. Auch die Versicherungsleistungen überweisen wir mit dieser Einwilligung auf Ihr genanntes Konto.">?</div> \
                            <label class="longtext" style="padding-left: 240px; text-align: left;" for="vn_ksm"><%= lastschriftText %></label> \
                            <br class="bterm"> \
                            <br class="bterm"> \
                        </div> \
                    </div> \
                    <!-- Button-Actionblock --> \
                    <!-- Button --> \
                    <div class="buttonline"> \
                        <div class="bgroup2"> \
                            <div> \
                                <input type="submit" name="zurück" value="zurück" onclick="return false;" class="back" title="zurück"> \
                            </div> \
                        </div> \
                        <div class="bgroup1"> \
                            <div> \
                                <input type="submit" name="Weiter" id="defaultAction" value="Weiter" onclick="return false;" class="check" title="Weiter"> \
                            </div> \
                        </div> \
                    </div> \
                    <div class="block" style="height: auto;" kv_ref="hinweisRow"> \
 	                   <strong>Hinweis:</strong> Alle außer die mit (<i>optional</i>) gekennzeichneten Felder benötigen wir für die Bearbeitung Ihres Antrags.\
                    </div>\
                </div> \
                    ',

    vpRowsTemplate: '\
                      <!-- VP --> \
    	              <div class="block" style="border-top: 0px"> \
                        <div class="bline btext-only"> \
                            <div><strong>Person <%= personNumber %>: <%= personType %></strong><br> \
                            </div> \
                        </div> \
                        <!-- Person ist VN --> \
                        <div class="bline"> \
                            <label class="longlabel" for="checkbox<%= personNumber %>">Person ist der Versicherungsnehmer<em></em>:</label> \
                            <input id="checkbox<%= personNumber %>" name="p_vp_isvn" type="checkbox"> \
                            <div class="helptxt" title="Aktivieren Sie die Checkbox um die Daten des Versicherungsnehmers auf die versicherte Person zu übertragen.">?</div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Anrede Radiobuttons --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_anrede_<%= type %>_<%= number %>_herr" kv_ref="vp_anrede_<%= type %>_<%= number %>">Anrede<em></em>:</label> \
                            <input id="vp_anrede_<%= type %>_<%= number %>_herr" kv_ref="vp_anrede_<%= type %>_<%= number %>_herr" name="vp_anrede_<%= type %>_<%= number %>" type="radio" class=""> \
                            <label for="vp_anrede_<%= type %>_<%= number %>_herr">Herr</label> \
                            <br class="bterm" /> \
                        </div> \
                        <div class="bline bcontinue"> \
                            <input id="vp_anrede_<%= type %>_<%= number %>_frau" kv_ref="vp_anrede_<%= type %>_<%= number %>_frau" name="vp_anrede_<%= type %>_<%= number %>" type="radio" class=""> \
                            <label for="vp_anrede_<%= type %>_<%= number %>_frau">Frau</label> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Vorname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_vorname_<%= type %>_<%= number %>">Vorname<em></em>:</label> \
                            <input type="text" name="vp_vorname_<%= type %>_<%= number %>" id="vp_vorname_<%= type %>_<%= number %>" kv_ref="vp_vorname_<%= type %>_<%= number %>" value="" class="ixl" maxlength="" placeholder=""> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Nachname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_name_<%= type %>_<%= number %>">Nachname<em></em>:</label> \
                            <input type="text" name="vp_name_<%= type %>_<%= number %>" id="vp_name_<%= type %>_<%= number %>" kv_ref="vp_name_<%= type %>_<%= number %>" value="" class="ixl" maxlength="" placeholder=""> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Geburtsdatum --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_geburtsdatum_<%= type %>_<%= number %>">Geburtsdatum<em></em>:</label> \
                            <input type="text" name="vp_geburtsdatum_<%= type %>_<%= number %>" id="vp_geburtsdatum_<%= type %>_<%= number %>" kv_ref="vp_geburtsdatum_<%= type %>_<%= number %>" value="" class="il" maxlength="10" placeholder="tt.mm.jjjj"> \
                            <br class="bterm" /> \
                        </div> \
                      </div> \
                    ',

    errorLabelTemplate: ' \
        <div class="blineover error"> \
            <div class="msgerror"> \
                <ul> \
                    <li><%- error %></li> \
                </ul> \
            </div> \
        </div>'
};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

var Schritt3Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt3Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt3Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(33);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

Schritt3Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var laufzeit = "";
            var kuendigungsfrist = "3 Monate zum Ende eines Kalenderjahres";
            var betreuer = "";
            var hasBetreuer = false;
            var kontoArt = this.getBO().vn.zahlungsdaten.iban.selected ? "IBAN/BIC" : "Konto/BLZ";
            var konto = this.getBO().vn.zahlungsdaten.iban.selected ? this.getBO().vn.zahlungsdaten.iban.no + "/" + this.getBO().vn.zahlungsdaten.iban.bic :
                            this.getBO().vn.zahlungsdaten.kto.no + "/" + this.getBO().vn.zahlungsdaten.kto.blz;

            if (this.getBO().einstellung.betreuerFestDefiniert) {
                hasBetreuer = false;
            } else if (this.getBO().einstellung.betreuerwahl) {
                if (this.getBO().betreuer.auswahlListe && this.getBO().betreuer.manuelleAuswahl) {
                    this.getBO().betreuer.auswahlListe.some(function(currentBetreuer) {
                        if (currentBetreuer.selected) {
                            betreuer = currentBetreuer.beschreibungen.join("<br />");
                            hasBetreuer = true;
                            return true;
                        }
                        return;
                    });
                }
            } else if (this.getBO().einstellung.betreuer) {
                betreuer = this.getBO().einstellung.betreuer.beschreibungen.join("<br />");
                hasBetreuer = true;
            }

            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(this.getBO().tarifErgebnisse.gesamtbeitrag, this.getBO().vn.zahlungsdaten.zahlungsweise);

            var renderBO = {
                produkt: "Auslandsreise-Krankenversicherung (AKD)",
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: this.getBO().einstellung.modul.tariftyp,

                zahlungsweiseGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.text,
                beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value,

                beitrag: zahlungsweiseUndGesamtbeitrag.value,

                versicherungsbeginn: this.getBO().versicherungsbeginn,
                laufzeit: laufzeit,
                kuendigungsfrist: kuendigungsfrist,

                vnAnredeName: (this.getBO().vn.anrede === "HERR" ? "Herr" : "Frau") + " " + (this.getBO().vn.titel ? this.getBO().vn.titel + " " : "") + this.getBO().vn.vorname + " " + this.getBO().vn.name,
                vnGeburtsdatum: this.getBO().vn.geburtsdatum,
                vnStrasseHausnr: this.getBO().vn.strasse + " " + this.getBO().vn.hausnr,
                vnPlzOrt: this.getBO().vn.plz + " " + this.getBO().vn.ort,
                vnTelefon: this.getBO().vn.telefon,
                vnMail: this.getBO().vn.mail,
                vnBetreuer: betreuer,

                zahlungsart: this.getBO().vn.zahlungsdaten.zahlungsart,
                zahlungsweise: this.getBO().vn.zahlungsdaten.zahlungsweise,
                kontoArt: kontoArt,
                konto: konto,
                kontoinhaber: this.getBO().vn.vorname + " " + this.getBO().vn.name,
                bankName: this.getBO().vn.zahlungsdaten.bank
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.find(".vpRow").remove();
            var nextPositionToAdd = SchrittRendererHelper.getItemByPseudoId("vp_row_anchor", content).eq(0);
            if (this.getBO().famAKD==='v2') {
            	content.find(".productName").html(this.getBO().einstellung.modul.tariftyp);
            };


            function fnAddVP(vp) {
                var fnVpRowTemplate = _.template(schrittTemplate.vpRowTemplate);
                var vpRow = $(fnVpRowTemplate({
                    vpAnredeName: (vp.anrede === "HERR" ? "Herr" : "Frau") + " " + vp.vorname + " " + vp.name,
                    vpGeburtsdatum: vp.geburtsdatum
                }));
                $(vpRow).insertAfter(nextPositionToAdd);

                nextPositionToAdd = vpRow;
            }
            this.getBO().vpsUnter20.forEach(fnAddVP);
            this.getBO().vpsBis64.forEach(fnAddVP);
            this.getBO().vpsAb65.forEach(fnAddVP);

            var vp_gesamt_beitrag = SchrittRendererHelper.getItemByPseudoId("vp_gesamt_beitrag", content);
            nextPositionToAdd = vp_gesamt_beitrag.eq(0);
            function fnBuildAddBeitragVp(beitrag, tarif) {
                return function(vp) {
                    var fnVpRowTemplate = _.template(schrittTemplate.vpGesamtbeitragRowTemplate);
                    var vpRow = $(fnVpRowTemplate({
                        vp: (vp.anrede === "HERR" ? "Herr" : "Frau") + " " + vp.vorname + " " + vp.name,
                        produkt: tarif,
                        beitragGesamtbeitrag: (that.getBO().famAKD==='v2' && beitrag==='0,01' ? "0,00" : beitrag)
                    }));
                    vpRow.appendTo(nextPositionToAdd);

                	if (that.getBO().famAKD==='v2') {
                		vpRow.find(".productName").html(that.getBO().einstellung.modul.tariftyp);
                	}
                }
            }
            this.getBO().vpsUnter20.forEach(fnBuildAddBeitragVp(Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifUnter20", "beitrag"]), Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifUnter20", "beschreibung"])));
            this.getBO().vpsBis64.forEach(fnBuildAddBeitragVp(Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifUnter65", "beitrag"]), Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifUnter65", "beschreibung"])));
            this.getBO().vpsAb65.forEach(fnBuildAddBeitragVp(Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifAb65", "beitrag"]), Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifAb65", "beschreibung"])));


            var fnGesamtbeitragFinalRowTemplate = _.template(schrittTemplate.vpGesamtbeitragFinalRowTemplate);
            var vpGesamtbeitragFinalRow = $(fnGesamtbeitragFinalRowTemplate({
                beitragGesamtbeitrag: this.getBO().tarifErgebnisse.gesamtbeitrag
            }));
            vpGesamtbeitragFinalRow.appendTo(nextPositionToAdd);

            if (that.getBO().famAKD!=='v2') {
            	vp_gesamt_beitrag.find('hr').remove();
            }


            if (!hasBetreuer) {
                content.find("[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='betreuer_separator']").hide();
                content.find("[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='betreuer_header']").hide();
                content.find("[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='betreuer_value']").hide();
            }

            content.appendTo(rootElement);

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                that._pruefe();
            });

            var links = SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement).find("a");
            links.eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            links.eq(2).prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

            var modul = Util.getProp(this.getBO(), ["einstellung", "modul"]);
            var absicherungContent = SchrittRendererHelper.getItemByPseudoId("absicherungContent");
            absicherungContent.find("h1").html(modul.tariftyp);

            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            this.getBO().einstellung.modul.leistungen.forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });
            // beitraege mehrwertbox
            var nextPositionToPut = trennerLeistungen.nextAll().last();
            var accordionBeforeTemplate = _.template(schrittTemplate.mehrwertBoxTarifBeforeAccordionTemplate);
            var accordionBefore = $(accordionBeforeTemplate({beitrag: this.getBO().tarifErgebnisse.gesamtbeitrag}));
            accordionBefore.insertAfter(nextPositionToPut);
            nextPositionToPut = accordionBefore;

            var mehrwertBoxTarifAccordionStartTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionStartTemplate);
            var mehrwertBoxTarifAccordionStart = $(mehrwertBoxTarifAccordionStartTemplate());
            mehrwertBoxTarifAccordionStart.insertAfter(nextPositionToPut);
            nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("accordion-anchor", mehrwertBoxTarifAccordionStart);

            if (this.getBO().famAKD==='v2') {
            	mehrwertBoxTarifAccordionStart.hide();
            } else {
	            mehrwertBoxTarifAccordionStart.find("a").click(function(){
	                mehrwertBoxTarifAccordionStart.find("a").toggleClass("active");
	                mehrwertBoxTarifAccordionStart.find("div.content").toggleClass("active");
	            });
            }

            var itemCount = 0;
            var aPersonAndValue = [];
            var i;
            this.getBO().vpsUnter20.forEach(function(vp) {
                aPersonAndValue.push({
                    name: vp.vorname + " " + vp.name + ", " + vp.geburtsdatum,
                    tarif: this.getBO().tarifErgebnisse.tarifUnter20.beschreibung,
                    value: this.getBO().tarifErgebnisse.tarifUnter20.beitrag
                });
            }, this);
            var fnPrintPersonAndValue = function(oPersonAndValue) {
                var mehrwertBoxTarifAccordionItemTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionItemTemplate);
                var mehrwertBoxTarifAccordionItem = $(mehrwertBoxTarifAccordionItemTemplate({text: oPersonAndValue.name}));
                if (itemCount === 0)
                    mehrwertBoxTarifAccordionItem.appendTo(nextPositionToPut);
                else
                    mehrwertBoxTarifAccordionItem.insertAfter(nextPositionToPut);
                nextPositionToPut = mehrwertBoxTarifAccordionItem;

                var tarifWertContentTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionTarifWertTemplate);
                var tarifWertContent = $(tarifWertContentTemplate({tarif: oPersonAndValue.tarif, wert: oPersonAndValue.value}));
                tarifWertContent.insertAfter(nextPositionToPut);

                nextPositionToPut = tarifWertContent[tarifWertContent.length-1];

                itemCount++;
            };
            aPersonAndValue.forEach(fnPrintPersonAndValue);

            aPersonAndValue = [];
            this.getBO().vpsBis64.forEach(function(vp) {
                aPersonAndValue.push({
                    name: vp.vorname + " " + vp.name + ", " + vp.geburtsdatum,
                    tarif: this.getBO().tarifErgebnisse.tarifUnter65.beschreibung,
                    value: this.getBO().tarifErgebnisse.tarifUnter65.beitrag
                });
            }, this);
            aPersonAndValue.forEach(fnPrintPersonAndValue);

            aPersonAndValue = [];
            this.getBO().vpsAb65.forEach(function(vp) {
                aPersonAndValue.push({
                    name: vp.vorname + " " + vp.name + ", " + vp.geburtsdatum,
                    tarif: this.getBO().tarifErgebnisse.tarifAb65.beschreibung,
                    value: this.getBO().tarifErgebnisse.tarifAb65.beitrag
                });
            }, this);
            aPersonAndValue.forEach(fnPrintPersonAndValue);

            var mehrwertBoxTarifbeitragTemplate = _.template(schrittTemplate.mehrwertBoxTarifbeitragTemplate);
            var tarifbeitragContent = $(mehrwertBoxTarifbeitragTemplate({beitrag: this.getBO().tarifErgebnisse.gesamtbeitrag}));

            tarifbeitragContent.appendTo(SchrittRendererHelper.getItemByPseudoId("accordion-anchor", mehrwertBoxTarifAccordionStart));
            tarifbeitragContent.addClass("tarifbeitragContent");
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt3Renderer.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt3Renderer.prototype._pruefe = function() {
    this.oProdukt.weiter();
};

Schritt3Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt3Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

module.exports = Schritt3Renderer;


/***/ }),
/* 33 */
/***/ (function(module, exports) {

module.exports = {
	mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%- produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
                                <div class="rowX"> \
                                            <ol class="progress-indicator"> \
                                                    <li class="" data-step="1"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="2"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-current" data-step="3"> \
                                                        <span>Angaben überprüfen</span> \
                                                    </li> \
                                                    <li class="is-last" data-step="4"> \
                                                        <span>Online beantragen</span> \
                                                    </li> \
                                            </ol> \
                                        </div> \
                                \
                                </div> \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <!-- Pflichtfelder, SSL --> \
                                    <div class="kvo-content-2"> \
    \
										<div class="kvo-title"> \
											<h1>Angaben überprüfen</h1> \
											<div class="row"> \
												<div class="medium-12 columns"> \
													<span>Auf dieser Seite sehen Sie Ihre bisherigen Angaben im Überblick. Bitte überprüfen Sie Ihre eingegebenen Daten sorgfältig und beachten Sie den Beginn Ihrer gewünschten Absicherung.</span> \
													<p>&nbsp;</p> \
												</div> \
											</div> \
        	                                <hr/> \
											<div class="kvo-content"> \
												<div class="row"> \
													<div class="medium-12 contentbox"> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-shield fa-stack-1x fa-inverse"></i></span> Gewünschte Absicherung</h2> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<div class="contentbox"> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Tarif:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent productName"><%- produkt %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Versicherungsbeginn:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- versicherungsbeginn %></p> \
																	</div> \
																</div> \
															</div> \
															</div> \
														</div> \
														\
														<hr/> \
														<div class="row"> \
															<div class="medium-9 small-9 columns"> \
																<h2><i class="fa fa-user-circle-o fa-2x"></i> Versicherungsnehmer</h2> \
															</div> \
															<div class="medium-3 small-3 columns dataEdit text-center"> \
																<a class="back" href="javascript:void(0);">Ändern <i class="fa fa-pencil"></i></a> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
																<div class="contentbox"> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Anrede, Name:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- vnAnredeName %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Geburtsdatum:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- vnGeburtsdatum %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Straße:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- vnStrasseHausnr %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">PLZ, Ort:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- vnPlzOrt %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Telefon:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- vnTelefon %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">E-Mail:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- vnMail %></p> \
																	</div> \
																	</div> \
																</div> \
															</div> \
														</div> \
					\
														<hr/> \
														<div class="row" kv_ref="vp_row_anchor"> \
															<div class="medium-9 small-9 columns"> \
															<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-user-plus fa-stack-1x fa-inverse"></i></span> Zu versichernde Person(en)</h2> \
															</div> \
															<div class="medium-3 small-3 columns dataEdit text-center"> \
																<a class="back" href="javascript:void(0);">Ändern <i class="fa fa-pencil"></i></a> \
															</div> \
														</div> \
														<hr kv_ref="betreuer_separator" /> \
														<div class="row" kv_ref="betreuer_header"> \
															<div class="medium-9 small-9 columns"> \
																<h2><span class="fa-stack fa-lg"><i class="fa fa-map-marker fa-stack-2x"></i></span> Ihr Berater</h2> \
															</div> \
														</div> \
														<div class="row" kv_ref="betreuer_value"> \
															<div class="medium-12 columns"> \
																<div class="contentbox"> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class=""><b><%= vnBetreuer %></b></p> \
																	</div> \
																	</div> \
																</div> \
															</div> \
														</div> \
					\
														<hr /> \
														<div class="row"> \
															<div class="medium-9 small-9 columns"> \
																<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-eur fa-stack-1x fa-inverse"></i></span> Zahlungsdaten</h2> \
															</div> \
															<div class="medium-3 small-3 columns dataEdit text-center"> \
																<a class="back" href="javascript:void(0);">Ändern <i class="fa fa-pencil"></i></a> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
																<div class="contentbox"> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Zahlungsart:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- zahlungsart %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Gewünschte Zahlungsweise:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- zahlungsweise %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline"><%- kontoArt %>:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- konto %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Kontoinhaber:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- kontoinhaber %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Name der Bank:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%- bankName %></p> \
																	</div> \
																	</div> \
																</div> \
															</div> \
														</div> \
														\
														<hr/> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-user-plus fa-stack-1x fa-inverse"></i></span> Ihr Gesamtbeitrag</h2> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<div class="contentbox" kv_ref="vp_gesamt_beitrag"> \
															</div> \
															</div> \
														</div> \
														\
													<!-- Buttons --> \
														<div class="row"> \
														<div class="medium-5 large-4 columns left"> \
															<p>&nbsp;</p> \
															<a class="button action-back expand back">zurück</a> \
															<p class="small-text button-subline">zu Schritt 2 Personen- und Zahlungsdaten</p> \
														</div> \
														<div class="medium-5 large-4 columns right text-right"> \
															<p>&nbsp;</p> \
															<a class="call-to-action button expand check">weiter</a> \
															<p class="small-text button-subline">zu Schritt 4: Online beantragen</p> \
														</div> \
													</div> \
													<div class="row ssl"> \
				                                        <div class="columns medium-12 "> \
                				                    	    <p>&nbsp;</p> \
                                        					<span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                        				</div> \
                                    				</div> \
												</div> \
											</div> \
										</div> \
									</div> \
								</div> \
								</div> \
    \
    \
                                <!-- rechte Mehrwertbox --> \
                                <div class="large-4 medium-5 columns"> \
                                 	<div class="row "> \
                                        <!-- Ausgabe eingegebener Daten --> \
                                     	<div class="medium-11 small-12 summarybox right"> \
                                          	<div class="row" kv_ref="absicherungContent"> \
                                               	<div class="medium-12 columns"> \
                                                    <h2>Ihre gewünschte Absicherung</h2> \
                                                    <h1><%- produkt %></h1> \
                                                    <p><%- produktDesc %></p> \
													<br kv_ref="trenner_leistungen" /> \
                                                </div> \
                                            </div> \
                                            <div class="medium-11 small-12 summarybox left"> \
                                                <div class="row" kv_ref="weiterfuehrendeInformationenRow"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Weiterführende Informationen</h2> \
                                                        <ul> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
		                                                    <li><a target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                                        </ul> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                     </div> \
                                  </div> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
		</div>',

	vpRowTemplate : ' \
				<div class="row vpRow"> \
					<div class="medium-12 columns"> \
						<div class="contentbox"> \
							<div class="row"> \
								<div class="small-6 columns"> \
									<p class="small-text button-subline">Anrede, Name:</p> \
								</div> \
								<div class="small-6 columns"> \
									<p class="sumContent"><%- vpAnredeName %></p> \
								</div> \
							</div> \
							<div class="row"> \
								<div class="small-6 columns"> \
									<p class="small-text button-subline">Geburtsdatum:</p> \
								</div> \
								<div class="small-6 columns"> \
									<p class="sumContent"><%- vpGeburtsdatum %></p> \
								</div> \
							</div> \
						</div> \
					</div> \
				</div>',

	vpGesamtbeitragRowTemplate: ' \
				<div class="row"> \
					<div class="small-6 columns"> \
						<p class="small-text button-subline sumContent"><b><%- vp %></b></p> \
					</div> \
					<div class="small-6 columns"> \
						<p class="sumContent"></p> \
					</div> \
				</div> \
				<div class="row"> \
					<div class="small-6 columns"> \
						<p class="small-text button-subline productName"><%- produkt %></p> \
					</div> \
					<div class="small-6 columns"> \
						<p class="sumContent"><%- beitragGesamtbeitrag %> \u20AC</p> \
					</div> \
				</div>',

	vpGesamtbeitragFinalRowTemplate: ' \
				<hr /> \
				<div class="row"> \
					<div class="small-6 columns"> \
						<p class="medium-text button-subline"><b>Jährlicher Gesamtbeitrag</b></p> \
					</div> \
					<div class="small-6 columns"> \
						<p class="sumContent"><b><%- beitragGesamtbeitrag %> \u20AC</b></p> \
					</div> \
				</div>',

	mehrwertBoxTarifBeforeAccordionTemplate:
				' \
				<div class="row display-sum" style="margin-top: 30px"> \
					<div class="medium-7 small-8 columns"> \
						<label><h3>Jährlicher Gesamtbeitrag</h3></label> \
					</div> \
					<div class="medium-5 small-4 columns"> \
						<input readonly="" type="text" value="<%- beitrag %> \u20AC"> \
					</div> \
				</div> \
				',

	mehrwertBoxTarifbeitragTemplate: ' \
				<hr /> \
				<div class="row display-sum"> \
					<div class="medium-7 small-8 columns mb05"> \
						<label class="summary"><strong>Jährlicher Gesamtbeitrag</strong></label> \
					</div> \
					<div class="medium-5 small-4 columns"> \
						<input readonly="" type="text" value="<%- beitrag %> \u20AC"> \
					</div> \
				</div> \
					',

	mehrwertBoxTarifAccordionStartTemplate:
				' \
				<dl class="accordion" data-accordion=""> \
					<dd class="accordion-navigation active"> \
						<a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
						<div id="panel1a" class="content active" kv_ref="accordion-anchor"> \
						</div> \
					</dd> \
				</dl> \
				',

	mehrwertBoxTarifAccordionItemTemplate:
				' \
				<div class="row" kv_ref="accordion"> \
					<div class="medium-7 small-8 columns mb05"> \
						<label class="summary"><%- text %></label> \
					</div> \
				</div> \
				',


	mehrwertBoxTarifAccordionTarifWertTemplate:
				' \
				<div class="row"> \
					<div class="medium-7 small-8 columns mb05"> \
						<label><%- tarif %></label> \
					</div> \
					<div class="medium-5 small-4 columns"> \
						<input readonly="" type="text" value="<%- wert %> \u20AC"> \
					</div> \
				</div> \
				',

};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

var Schritt3RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt3RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt3RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(35);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt3RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var laufzeit = "";
            var kuendigungsfrist = "3 Monate zum Ende eines Kalenderjahres";
            var kontoArt = this.getBO().vn.zahlungsdaten.iban.selected ? "IBAN/BIC" : "Konto/BLZ";
            var konto = this.getBO().vn.zahlungsdaten.iban.selected ? this.getBO().vn.zahlungsdaten.iban.no + "/" + this.getBO().vn.zahlungsdaten.iban.bic :
                            this.getBO().vn.zahlungsdaten.kto.no + "/" + this.getBO().vn.zahlungsdaten.kto.blz;

            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(this.getBO().tarifErgebnisse.gesamtbeitrag, this.getBO().vn.zahlungsdaten.zahlungsweise);

            var renderBO = {
                produkt: "Auslandsreise-Krankenversicherung (AKD)",
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: this.getBO().einstellung.modul.tariftyp,

                zahlungsweiseGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.text,
                beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value,

                beitrag: zahlungsweiseUndGesamtbeitrag.value,

                versicherungsbeginn: this.getBO().versicherungsbeginn,
                laufzeit: laufzeit,
                kuendigungsfrist: kuendigungsfrist,

                vnAnredeName: (this.getBO().vn.anrede === "HERR" ? "Herr" : "Frau") + " " + (this.getBO().vn.titel ? this.getBO().vn.titel + " " : "") + this.getBO().vn.vorname + " " + this.getBO().vn.name,
                vnGeburtsdatum: this.getBO().vn.geburtsdatum,
                vnStrasseHausnr: this.getBO().vn.strasse + " " + this.getBO().vn.hausnr,
                vnPlzOrt: this.getBO().vn.plz + " " + this.getBO().vn.ort,
                vnTelefon: this.getBO().vn.telefon,
                vnMail: this.getBO().vn.mail,

                zahlungsart: this.getBO().vn.zahlungsdaten.zahlungsart,
                zahlungsweise: this.getBO().vn.zahlungsdaten.zahlungsweise,
                kontoArt: kontoArt,
                konto: konto,
                kontoinhaber: this.getBO().vn.vorname + " " + this.getBO().vn.name,
                bankName: this.getBO().vn.zahlungsdaten.bank
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.find(".vpRow").remove();
            var nextPositionToAdd = SchrittRendererHelper.getItemByPseudoId("vp_row_anchor", content).eq(0);
            var bFirst = true;

            function fnAddVP(vp) {
                var fnVpRowTemplate = _.template(schrittTemplate.vpRowTemplate);
                var vpRow = $(fnVpRowTemplate({
                    vpAnredeName: (vp.anrede === "HERR" ? "Herr" : "Frau") + " " + vp.vorname + " " + vp.name,
                    vpGeburtsdatum: vp.geburtsdatum
                }));
                if (bFirst) {
                    $(vpRow).appendTo(nextPositionToAdd);
                    bFirst = false;
                } else {
                    $(vpRow).insertAfter(nextPositionToAdd);
                }

                nextPositionToAdd = vpRow.last();
            }
            this.getBO().vpsUnter20.forEach(fnAddVP);
            this.getBO().vpsBis64.forEach(fnAddVP);
            this.getBO().vpsAb65.forEach(fnAddVP);

            var tarif = Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifUnter20", "beschreibung"]);
            if (!tarif) {
                tarif = Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifUnter65", "beschreibung"]);
                if (!tarif) {
                    tarif = Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifAb65", "beschreibung"]);
                    if (!tarif)
                        tarif = 'AKD';
                }
            }

            var fnGesamtbeitragTemplate = _.template(schrittTemplate.vpGesamtbeitragTemplate);
            var gesamtbeitragRows = $(fnGesamtbeitragTemplate({produkt: tarif, beitragGesamtbeitrag: this.getBO().tarifErgebnisse.gesamtbeitrag}));

            function fnBuildAddBeitragVp(beitrag, bBis64, base) {
                return function(vp, index) {
                    var fnVpRowTemplate = _.template(schrittTemplate.vpGesamtbeitragRowTemplate);
                    var vpRow = $(fnVpRowTemplate({
                        vp: (vp.anrede === "HERR" ? "Herr" : "Frau") + " " + vp.vorname + " " + vp.name,
                        beitrag: beitrag
                    }));
                    vpRow.appendTo(gesamtbeitragRows.find("tbody"));
                }
            }
            this.getBO().vpsUnter20.forEach(fnBuildAddBeitragVp(Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifUnter20", "beitrag"]), true, 0));
            this.getBO().vpsBis64.forEach(fnBuildAddBeitragVp(Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifUnter65", "beitrag"]), true, this.getBO().vpsUnter20.length));
            this.getBO().vpsAb65.forEach(fnBuildAddBeitragVp(Util.getProp(this.getBO(), ["tarifErgebnisse", "tarifAb65", "beitrag"]), false, this.getBO().vpsUnter20.length+this.getBO().vpsBis64.length));

            gesamtbeitragRows.appendTo(content);

            content.appendTo(rootElement);

            var fnActionRow = _.template(schrittTemplate.actionRowTemplate);
            var actionRow = $(fnActionRow());
            actionRow.insertAfter(gesamtbeitragRows);

            actionRow.find("input.back").click(function() {
                that._zurueck();
            });
            content.find("a.back").click(function() {
                that._zurueck();
            });
            actionRow.find("input.check").click(function() {
                that._pruefe();
            });
        }

        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt3RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt3RendererIF6.prototype._pruefe = function() {
    this.oProdukt.weiter();
};

module.exports = Schritt3RendererIF6;


/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = {
	mainTemplate: ' \
                    <div kv_ref="kvo_content"> \
                        <!-- Progress / Header --> \
                        <div class="block"> \
                            <ul class="progress"> \
                                <li class="">1</li> \
                                <li class="">2</li> \
                                <li class="active">3</li> \
                                <li class="">4</li> \
                            </ul> \
                            <h2>Angaben überprüfen</h2> \
                        </div> \
                        <!-- Contentbereich --> \
                        <div class="block"> \
                            <p><strong>Auf dieser Seite sehen Sie Ihre bisherigen Angaben im Überblick. Bitte überprüfen Sie Ihre eingegebenen Daten sorgfältig und beachten Sie den Beginn Ihrer gewünschten Absicherung.</strong></p> \
                        </div> \
                        <!-- Datenausgabeblock --> \
                        <!-- Produkt --> \
                        <div class="block"> \
                            <h3>Gewünschte Absicherung</h3> \
                            <!-- Tarif --> \
                            <div class="bline"> \
                                <label for="">Tarif:</label> \
                                <span><%- produkt %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Versicherungsbeginn --> \
                            <div class="bline"> \
                                <label for="">Versicherungsbeginn:</label> \
                                <span><%- versicherungsbeginn %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- VN --> \
                        <div class="block"> \
                            <!-- VN Ueberschrift --> \
                            <div class="bline"> \
                                <div class=""> \
                                    <h3>Versicherungsnehmer</h3> \
                                </div> \
                                <div class="editbutton"> \
                                    <a class="back" href="javascript:void(0);">Ändern</a> \
                                </div> \
                                <br class="bterm" /> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Anrede --> \
                            <div class="bline"> \
                                <label for="">Anrede, Name:</label> \
                                <span><%- vnAnredeName %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Geburtsdatum --> \
                            <div class="bline"> \
                                <label for="">Geburtsdatum:</label> \
                                <span><%- vnGeburtsdatum %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Strasse --> \
                            <div class="bline"> \
                                <label for="">Straße:</label> \
                                <span><%- vnStrasseHausnr %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Plz --> \
                            <div class="bline"> \
                                <label for="">PLZ, Ort:</label> \
                                <span><%- vnPlzOrt %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Telefon --> \
                            <div class="bline"> \
                                <label for="">Telefon:</label> \
                                <span><%- vnTelefon %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- E-Mail --> \
                            <div class="bline"> \
                                <label for="">E-Mail:</label> \
                                <span><%- vnMail %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- VP --> \
                        <div class="block" kv_ref="vp_row_anchor"> \
                            <!-- VP Ueberschrift --> \
                            <div class="bline"> \
                                <div class=""> \
                                    <h3>Zu versichernde Person(en)</h3> \
                                </div> \
                                <div class="editbutton"> \
                                    <a class="back" href="javascript:void(0);">Ändern</a> \
                                </div> \
                                <br class="bterm" /> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- Zahlungsdaten --> \
                        <div class="block"> \
                            <!-- Zahlungsdaten --> \
                            <div class="bline"> \
                                <div class=""> \
                                    <h3>Zahlungsdaten</h3> \
                                </div> \
                                <div class="editbutton"> \
                                    <a class="back" href="javascript:void(0);">Ändern</a> \
                                </div> \
                                <br class="bterm" /> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Zahlungsart --> \
                            <div class="bline"> \
                                <label for="">Zahlungsart:</label> \
                                <span><%- zahlungsart %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Zahlungsweise --> \
                            <div class="bline"> \
                                <label for="">Zahlungsweise:</label> \
                                <span><%- zahlungsweise %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Kontoart --> \
                            <div class="bline"> \
                                <label for=""><%- kontoArt %>:</label> \
                                <span><%- konto %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Kontoinhaber --> \
                            <div class="bline"> \
                                <label for="">Kontoinhaber:</label> \
                                <span><%- kontoinhaber %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Name der Bank --> \
                            <div class="bline"> \
                                <label for="">Name der Bank:</label> \
                                <span><%- bankName %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                    </div>',
    vpRowTemplate: '\
                    <!-- VP-Name --> \
                    <div class="bline"> \
                        <label for="">Anrede, Name:</label> \
                        <span><b><%- vpAnredeName %></b></span> \
                        <br class="bterm" /> \
                    </div> \
                    <!-- VP-Geburtsdatum --> \
                    <div class="bline"> \
                        <label for="">Geburtsdatum:</label> \
                        <span><%- vpGeburtsdatum %></span> \
                        <br class="bterm" /> \
                        <br class="bterm" /> \
                    </div>',

    vpGesamtbeitragTemplate: ' \
                    <div class="block"> \
                        <h1>Ihr Gesamtbeitrag</h1> \
                        <div class="table"> \
                            <table> \
                                <tbody> \
                                    <tr> \
                                        <th class="left header">Tarifname</th> \
                                        <th class="header"><%- produkt %></th> \
                                    </tr> \
                                </tbody> \
                                <tfoot> \
                                    <tr> \
                                        <th class="left header"><b>Jährlicher Gesamtbeitrag</b></th> \
                                        <td class="header"><b><%- beitragGesamtbeitrag %> EUR</b></td> \
                                    </tr> \
                                </tfoot> \
                            </table> \
                            <br class="bterm" /> \
                        </div> \
                    </div>',

    vpGesamtbeitragRowTemplate: ' \
                    <tr> \
                        <th class="left"><b><%- vp %></b></th> \
                        <td><b><%- beitrag %> EUR</b></td> \
                    </tr>',

    actionRowTemplate: '\
                        <div class="block" style="height: auto;"> \
                        <!-- Button --> \
                            <div class="buttonline"> \
                                <div class="bgroup2"> \
                                    <div> \
                                        <input type="submit" name="zurück" value="zurück" class="back" onclick="return false;" class="" title="zurück"> \
                                    </div> \
                                </div> \
                                <div class="bgroup1"> \
                                    <div> \
                                        <input type="submit" name="Weiter" id="defaultAction" class="check" value="Weiter" onclick="return false;" class="" title="Weiter"> \
                                    </div> \
                                </div> \
                            </div> \
                        </div'

};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);
var ProduktTrHelper = __webpack_require__(6);

var fnErrorLabelTemplate;

function getAndOpenDocument(druckstueckBOandUrl) {
    var deferred = $.Deferred();

    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    ProduktTrHelper.callAsync(druckstueckBOandUrl.bo, druckstueckBOandUrl.serviceUrl).then(function(data) {
        deferred.resolve();
        win.location.href = Config.resourceUrl + "?token=" + data.contentData;
    }).fail(function() {
        deferred.reject();
        win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
    });

    return deferred.promise();
}

function clearErrors(kv_ref_name, label) {
    label.parent().find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
}

function addError(kv_ref_name, label, errorText) {
    var error = $(fnErrorLabelTemplate({error: errorText}));
    error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
    error.insertAfter(label);
}

var Schritt4Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt4Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt4Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(37);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt4Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var textPapierverzicht = Util.getTextFromEncodedObject(this.getBO().texte.papierverzicht);
            var textAbschlusserklaerung = Util.getTextFromEncodedObject(this.getBO().texte.abschlusserklaerung);
            var textBeratungsverzicht = Util.getTextFromEncodedObject(this.getBO().texte.beratungsverzicht);
            var textVertragsinformation = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformation);

            var textDatenschutzTitle = Util.getTextFromEncodedObject(this.getBO().texte.datenschutzTitle);
            var textVertragsgrundlagen = Util.getTextFromEncodedObject(this.getBO().texte.vertragsgrundlagen);
            var textVertragsinformationTitle = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformationTitle);
            var textDatenschutz = Util.getTextFromEncodedObject(this.getBO().texte.datenschutz);

            var renderBO = {
                produkt: "Auslandsreise-Krankenversicherung (AKD)",
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: Util.getProp(this.getBO().einstellung, ["modul", "tariftyp"]) || "Auslandreise-Krankenversicherung",
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                zahlungsweiseGesamtbeitrag: "Jährlicher Gesamtbeitrag",
                beitragGesamtbeitrag: this.getBO().tarifErgebnisse.gesamtbeitrag,
                textPapierverzicht: textPapierverzicht,
                textAbschlusserklaerung: textAbschlusserklaerung,
                textBeratungsverzicht: textBeratungsverzicht,
                textVertragsinformation: textVertragsinformation,
                textDatenschutzTitle: textDatenschutzTitle,
                textVertragsgrundlagen: textVertragsgrundlagen,
                textVertragsinformationTitle: textVertragsinformationTitle,
                textDatenschutz: textDatenschutz
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);

            SchrittRendererHelper.getItemByPseudoId("capt", rootElement, "input").change(function() {
                that.getBO().capt.bildCode = $(this).val();
            });
            SchrittRendererHelper.getItemByPseudoId("beratung", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noBeratung.accepted = true;
                } else {
                    that.getBO().noBeratung.accepted = false;
                }
            });
            var checkBeratung = function() {
                var kv_ref_name = "beratung";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().noBeratung.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            SchrittRendererHelper.getItemByPseudoId("papierunterlagen", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noPapierunterlagen.accepted = true;
                } else {
                    that.getBO().noPapierunterlagen.accepted = false;
                }
            });
            var checkPapierunterlagen = function() {
                var kv_ref_name = "papierunterlagen";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().noPapierunterlagen.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };

            SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vvg.accepted = true;
                } else {
                    that.getBO().vvg.accepted = false;
                }
            });
            if (!this.getBO().vvg.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", true);
            }
            SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().datenschutzerklaerung.accepted = true;
                } else {
                    that.getBO().datenschutzerklaerung.accepted = false;
                }
            });
            content.find("a.vvg").click(function() {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckVertragsinformationBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().vvg.downloaded = true;
                });
            });
            var checkVVG = function() {
                var kv_ref_name = "vvg";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().vvg.downloaded) {
                    addError(kv_ref_name, label, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().vvg.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            content.find("a.datenschutz").click(function() {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckDatenschutzBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().datenschutzerklaerung.downloaded = true;
                });
            });
            if (!this.getBO().datenschutzerklaerung.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", true);
            }
            var checkDS = function() {
                var kv_ref_name = "ds";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().datenschutzerklaerung.downloaded) {
                    addError(kv_ref_name, label, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().datenschutzerklaerung.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            var checkCaptcha = function() {
                var kv_ref_name = "capt";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (that.getBO().capt.bildCode === null || that.getBO().capt.bildCode.length === 0 || that.getBO().capt.bildCode.length > 20) {
                    addError(kv_ref_name, label, "Sie müssen den im Bild angezeigten Sicherheitscode eingeben.");
                    return false;
                }

                return true;
            }

            this._updateCaptcha();

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                var okBeratung = checkBeratung();
                var okPapierunterlagen = checkPapierunterlagen();
                var okVVG = checkVVG();
                var okDS = checkDS();
                var okCaptcha = checkCaptcha();

                if (okBeratung && okPapierunterlagen && okVVG && okDS && okCaptcha) {
                    that._abschluss();
                } else {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                }
            });

            var links = SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement).find("a");
            links.eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            links.eq(2).prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

            var modul = Util.getProp(this.getBO(), ["einstellung", "modul"]);
            var absicherungContent = SchrittRendererHelper.getItemByPseudoId("absicherungContent");
            absicherungContent.find("h1").html(modul.tariftyp);

            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            this.getBO().einstellung.modul.leistungen.forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });

            // beitraege mehrwertbox
            var nextPositionToPut = trennerLeistungen.nextAll().last();
            var accordionBeforeTemplate = _.template(schrittTemplate.mehrwertBoxTarifBeforeAccordionTemplate);
            var accordionBefore = $(accordionBeforeTemplate({beitrag: this.getBO().tarifErgebnisse.gesamtbeitrag}));
            accordionBefore.insertAfter(nextPositionToPut);
            nextPositionToPut = accordionBefore;

            var mehrwertBoxTarifAccordionStartTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionStartTemplate);
            var mehrwertBoxTarifAccordionStart = $(mehrwertBoxTarifAccordionStartTemplate());
            mehrwertBoxTarifAccordionStart.insertAfter(nextPositionToPut);
            nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("accordion-anchor", mehrwertBoxTarifAccordionStart);

            if (this.getBO().famAKD==='v2') {
            	mehrwertBoxTarifAccordionStart.hide();
            } else {
	            mehrwertBoxTarifAccordionStart.find("a").click(function(){
	                mehrwertBoxTarifAccordionStart.find("a").toggleClass("active");
	                mehrwertBoxTarifAccordionStart.find("div.content").toggleClass("active");
	            });
            }

            var itemCount = 0;
            var aPersonAndValue = [];
            this.getBO().vpsUnter20.forEach(function(vp) {
                aPersonAndValue.push({
                    name: vp.vorname + " " + vp.name + ", " + vp.geburtsdatum,
                    tarif: this.getBO().tarifErgebnisse.tarifUnter20.beschreibung,
                    value: this.getBO().tarifErgebnisse.tarifUnter20.beitrag
                });
            }, this);
            var fnPrintPersonAndValue = function(oPersonAndValue) {
                var mehrwertBoxTarifAccordionItemTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionItemTemplate);
                var mehrwertBoxTarifAccordionItem = $(mehrwertBoxTarifAccordionItemTemplate({text: oPersonAndValue.name}));
                if (itemCount === 0)
                    mehrwertBoxTarifAccordionItem.appendTo(nextPositionToPut);
                else
                    mehrwertBoxTarifAccordionItem.insertAfter(nextPositionToPut);
                nextPositionToPut = mehrwertBoxTarifAccordionItem;

                var tarifWertContentTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionTarifWertTemplate);
                var tarifWertContent = $(tarifWertContentTemplate({tarif: oPersonAndValue.tarif, wert: oPersonAndValue.value}));
                tarifWertContent.insertAfter(nextPositionToPut);

                nextPositionToPut = tarifWertContent[tarifWertContent.length-1];

                itemCount++;
            };
            aPersonAndValue.forEach(fnPrintPersonAndValue);

            aPersonAndValue = [];
            this.getBO().vpsBis64.forEach(function(vp) {
                aPersonAndValue.push({
                    name: vp.vorname + " " + vp.name + ", " + vp.geburtsdatum,
                    tarif: this.getBO().tarifErgebnisse.tarifUnter65.beschreibung,
                    value: this.getBO().tarifErgebnisse.tarifUnter65.beitrag
                });
            }, this);
            aPersonAndValue.forEach(fnPrintPersonAndValue);

            aPersonAndValue = [];
            this.getBO().vpsAb65.forEach(function(vp) {
                aPersonAndValue.push({
                    name: vp.vorname + " " + vp.name + ", " + vp.geburtsdatum,
                    tarif: this.getBO().tarifErgebnisse.tarifAb65.beschreibung,
                    value: this.getBO().tarifErgebnisse.tarifAb65.beitrag
                });
            }, this);
            aPersonAndValue.forEach(fnPrintPersonAndValue);

            var mehrwertBoxTarifbeitragTemplate = _.template(schrittTemplate.mehrwertBoxTarifbeitragTemplate);
            var tarifbeitragContent = $(mehrwertBoxTarifbeitragTemplate({beitrag: this.getBO().tarifErgebnisse.gesamtbeitrag}));

            tarifbeitragContent.appendTo(SchrittRendererHelper.getItemByPseudoId("accordion-anchor", mehrwertBoxTarifAccordionStart));
            tarifbeitragContent.addClass("tarifbeitragContent");
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt4Renderer.prototype._getDruckstueckDatenschutzBOandUrl = function() {
    return this.oProdukt.getDruckstueckDatenschutzBOandUrl(this.getBO());
};

Schritt4Renderer.prototype._getDruckstueckVertragsinformationBOandUrl = function() {
    return this.oProdukt.getDruckstueckVertragsinformationBOandUrl(this.getBO());
};

Schritt4Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt4Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt4Renderer.prototype._updateCaptcha = function() {
    this._getCaptcha().then(function(oResult) {
        //SchrittRendererHelper.getItemByPseudoId("capt_im", rootElement).attr("src", Config.resourceUrl + "?token=" + oResult);
        this.getBO().capt.token = oResult.token;
        SchrittRendererHelper.getItemByPseudoId("capt_im", this.rootElement).attr("src", Config.resourceUrl + "?token=" + oResult.captcha.bytes);
    }.bind(this)).fail(function(e) {
        var kv_ref_name = "commonErrors";

        var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
        clearErrors(kv_ref_name, label);

        if (e.validationErrors) {
            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });

            // wg. insertAfter am Ende
            addError(kv_ref_name, label, "Es liegen folgende Fehler vor:");

            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
    }.bind(this));
};

Schritt4Renderer.prototype._getCaptcha = function() {
    return this.oProdukt.getCaptcha(this.getBO());
};

Schritt4Renderer.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt4Renderer.prototype._abschluss = function() {
    var that = this;

    this.setBusy(true);
    this.oProdukt.abschluss(this.getBO()).then(function(oResult) {
        that.oProdukt.abschlussFinish(that.getBO(), oResult);
    }).fail(function(e) {
        if (e === "token") {
            var kv_ref_name = "capt";
            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);
            addError(kv_ref_name, label, "Der angegebene Bildcode muss mit dem angezeigten übereinstimmen.");
        } else if (e !== null && e !== undefined && typeof e === "object" && e.validationErrors) {
            var kv_ref_name = "commonErrors";

            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);

            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });
        }
        that.getBO().capt.bildCode = "";
        SchrittRendererHelper.getItemByPseudoId("capt", that.rootElement, "input").val("");

        SchrittRendererHelper.scrollToFirstError(that.rootElement);
        that._updateCaptcha();
    }).always(function() {
        that.setBusy(false);
    });
};

module.exports = Schritt4Renderer;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%= produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
                                <div class="rowX"> \
                                            <ol class="progress-indicator"> \
                                                    <li class="" data-step="1"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="2"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="3"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-current" data-step="4"> \
                                                        <span>Online beantragen</span> \
                                                    </li> \
                                            </ol> \
                                        </div> \
                                \
                                </div> \
    \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <!-- Pflichtfelder, SSL --> \
                                    <div class="kvo-content-2"> \
    \
                                        <div class="kvo-title"> \
                                           <h1>Vertragsgrundlagen und Erklärungen des Antragstellers und der zu versichernden Personen</h1> \
								            <div class="row"> \
									            <div class="large-12 medium-12 columns"> \
									                <span>In diesem Schritt finden Sie alle rechtlich notwendigen Dokumente rund um Ihre gewünschte Absicherung, bevor Sie am Ende der Seite Ihren Online-Antrag an uns absenden können.</span> \
									                <p>&nbsp;</p> \
									            </div> \
									        </div> \
                                        </div> \
        	                            <hr/> \
                                        <div class="kvo-content"> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <%= textVertragsgrundlagen %> <a target="_blank" href="https://get.adobe.com/de/reader/"><img border="0" src="' + Config.mediaUrl + 'form/fod_style/base/resources/img/get_reader.png" type="image" name="imageField"></a>\
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns" data-abide> \
                                                    <label kv_ref="commonErrors"></label> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="beratung"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-1" type="radio" class="digit-1" id="image-radio-1"><label style="left: 5px;" for="image-radio-1"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <b>Verzicht auf Beratung</b> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_beratung" id="p_beratung" kv_ref="beratung"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_beratung"></label> \
                                                        </div> \
                                                        <%= textBeratungsverzicht %> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="vvg"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-2" type="radio" class="digit-2" id="image-radio-2"><label style="left: 5px;" for="image-radio-2"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                        <strong>Herunterladen wichtiger Vertragsinformationen</strong><br/><%= textVertragsinformationTitle %><br> \
                                                            <p>&nbsp;</p> \
                                                            <a class="button erklaerung vvg">Herunterladen</a> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_vvg" id="p_vvg" kv_ref="vvg"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_vvg"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"><%= textVertragsinformation %></div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="papierunterlagen"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-3" type="radio" class="digit-3" id="image-radio-3"><label style="left: 5px;" for="image-radio-3"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <b>Verzicht auf Papierunterlagen</b> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_papierunterlagen" id="p_papierunterlagen" kv_ref="papierunterlagen"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_papierunterlagen"></label> \
                                                        </div> \
                                                        <%= textPapierverzicht %> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="ds"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-4" type="radio" class="digit-4" id="image-radio-4"><label style="left: 5px;" for="image-radio-4"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <strong>Herunterladen wichtiger Datenschutzinformationen</strong><br><%= textDatenschutzTitle %> \
                                                            <p>&nbsp;</p> \
                                                            <a class="button datenschutz">Herunterladen</a> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_ds" id="p_ds" kv_ref="ds"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_ds"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <%= textDatenschutz %> \
                                                        </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-5" type="radio" class="digit-5" id="image-radio-5"><label style="left: 5px;" for="image-radio-5"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <div class="row"> \
                                                                <div class="small-12 columns"> \
                                                                    <b>Abschließende Erklärung</b> \
                                                                    <%= textAbschlusserklaerung %> \
                                                                    <p>&nbsp;</p> \
                                                                </div> \
                                                            </div> \
                                                            <div class="row"> \
                                                                <div class="small-12 columns"> \
                                                                    <img kv_ref="capt_im" type="image" border="0"> \
                                                                    <p>&nbsp;</p> \
                                                                </div> \
                                                            </div> \
                                                            <div class="row"> \
                                                                <div class="small-12 columns" data-abide> \
                                                                    <label>Geben Sie hier den im oberen Bild angezeigten Sicherheitscode ein:</label> \
                                                                    <label kv_ref="capt"></label> \
                                                                </div> \
                                                            </div> \
                                                            <div class="row"> \
                                                                <div class="small-4 columns"> \
                                                                    <input maxlength="15" type="text" class="antwort" style="text-transform: uppercase;" kv_ref="capt"> \
                                                                </div> \
                                                            </div> \
                                                        </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                                \
                                            <!-- Buttons --> \
                                            <div class="row"> \
                                                <div class="medium-5 large-4 columns left"> \
                                                    <p>&nbsp;</p> \
                                                    <a class="button expand action-back back">zurück</a> \
                                                    <p class="small-text button-subline">zu Schritt 3: "Angaben Überprüfen"</p> \
                                                </div> \
                                                <div class="medium-5 large-4 columns right text-right"> \
                                                    <p>&nbsp;</p> \
                                                    <a class="call-to-action button expand check">Jetzt zahlungspflichtig online beantragen</a> \
                                                </div> \
                                            </div> \
                                            <div class="row ssl"> \
                                                <div class="columns medium-12 "> \
                                                    <p>&nbsp;</p> \
                                                    <span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                                </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
 \
                                <!-- rechte Mehrwertbox --> \
                                <div class="large-4 medium-5 columns"> \
                                 	<div class="row "> \
                                        <!-- Ausgabe eingegebener Daten --> \
                                     	<div class="medium-11 small-12 summarybox right"> \
                                          	<div class="row" kv_ref="absicherungContent"> \
                                               	<div class="medium-12 columns"> \
                                                    <h2>Ihre gewünschte Absicherung</h2> \
                                                    <h1><%= produkt %></h1> \
                                                    <p><%= produktDesc %></p> \
                                                    <br kv_ref="trenner_leistungen" /> \
                                                </div> \
                                            </div> \
                                            <div class="medium-11 small-12 summarybox left"> \
                                                <div class="row" kv_ref="weiterfuehrendeInformationenRow"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Weiterführende Informationen</h2> \
                                                        <ul> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
                                                            <li><a target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                                        </ul> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                     </div> \
                                  </div> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>',

    mehrwertBoxTarifBeforeAccordionTemplate:
        ' \
        <div class="row display-sum" style="margin-top: 30px"> \
            <div class="medium-7 small-8 columns"> \
                <label><h3>Jährlicher Gesamtbeitrag</h3></label> \
            </div> \
            <div class="medium-5 small-4 columns"> \
                <input readonly="" type="text" value="<%= beitrag %> \u20AC"> \
            </div> \
        </div> \
        ',

    mehrwertBoxTarifbeitragTemplate: ' \
        <hr /> \
        <div class="row display-sum"> \
            <div class="medium-7 small-8 columns mb05"> \
                <label class="summary"><strong>Jährlicher Gesamtbeitrag</strong></label> \
            </div> \
            <div class="medium-5 small-4 columns"> \
                <input readonly="" type="text" value="<%= beitrag %> \u20AC"> \
            </div> \
        </div> \
            ',

	mehrwertBoxTarifAccordionStartTemplate:
		' \
		<dl class="accordion" data-accordion=""> \
			<dd class="accordion-navigation active"> \
				<a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
				<div id="panel1a" class="content active" kv_ref="accordion-anchor"> \
				</div> \
			</dd> \
		</dl> \
		',

	mehrwertBoxTarifAccordionItemTemplate:
		' \
		<div class="row" kv_ref="accordion"> \
			<div class="medium-7 small-8 columns mb05"> \
				<label class="summary"><%= text %></label> \
			</div> \
		</div> \
		',


	mehrwertBoxTarifAccordionTarifWertTemplate:
		' \
		<div class="row"> \
			<div class="medium-7 small-8 columns mb05"> \
				<label><%= tarif %></label> \
			</div> \
			<div class="medium-5 small-4 columns"> \
				<input readonly="" type="text" value="<%= wert %> \u20AC"> \
			</div> \
		</div> \
		',

    errorLabelTemplate: '<small style="display: block" class="error"><%- error %></small>'
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);
var ProduktTrHelper = __webpack_require__(6);


var fnErrorLabelTemplate;

function getAndOpenDocument(druckstueckBOandUrl) {
    var deferred = $.Deferred();

    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    ProduktTrHelper.callAsync(druckstueckBOandUrl.bo, druckstueckBOandUrl.serviceUrl).then(function(data) {
        deferred.resolve();
        win.location.href = Config.resourceUrl + "?token=" + data.contentData;
    }).fail(function() {
        deferred.reject();
        win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
    });

    return deferred.promise();
}

function clearErrors(kv_ref_name, input) {
    input.parents('[class="bline"]').eq(0).find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
}

function addError(kv_ref_name, input, errorText, bCaptcha) {
    var parent = input.parents('[class="bline"]').eq(0);

    var error = $(fnErrorLabelTemplate({error: errorText}));
    error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
    error.prependTo(parent);
}

var Schritt4RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt4RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt4RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(39);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt4RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var textPapierverzicht = Util.getTextFromEncodedObject(this.getBO().texte.papierverzicht);
            var textAbschlusserklaerung = Util.getTextFromEncodedObject(this.getBO().texte.abschlusserklaerung);
            var textBeratungsverzicht = Util.getTextFromEncodedObject(this.getBO().texte.beratungsverzicht);
            var textVertragsinformation = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformation);

            var textDatenschutzTitle = Util.getTextFromEncodedObject(this.getBO().texte.datenschutzTitle);
            var textVertragsgrundlagen = Util.getTextFromEncodedObject(this.getBO().texte.vertragsgrundlagen);
            var textVertragsinformationTitle = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformationTitle);
            var textDatenschutz = Util.getTextFromEncodedObject(this.getBO().texte.datenschutz);

            var renderBO = {
                produkt: "Auslandsreise-Krankenversicherung (AKD)",
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: Util.getProp(this.getBO().einstellung, ["modul", "tariftyp"]) || "Auslandreise-Krankenversicherung",
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                zahlungsweiseGesamtbeitrag: "Jährlicher Gesamtbeitrag",
                beitragGesamtbeitrag: this.getBO().tarifErgebnisse.gesamtbeitrag,
                textPapierverzicht: textPapierverzicht,
                textAbschlusserklaerung: textAbschlusserklaerung,
                textBeratungsverzicht: textBeratungsverzicht,
                textVertragsinformation: textVertragsinformation,
                textDatenschutzTitle: textDatenschutzTitle,
                textVertragsgrundlagen: textVertragsgrundlagen,
                textVertragsinformationTitle: textVertragsinformationTitle,
                textDatenschutz: textDatenschutz,
                textVisitenkarteTitle: 'Gerne möchten wir Sie darüber informieren, mit wem Sie es zu tun haben. Laden Sie dazu bitte die Vermittlerinformationen (PDF) herunter.',
                textVisitenkarte: 'Hiermit bestätige ich die Vermittlerinformationen heruntergeladen und gelesen zu haben.',
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);

            if (this.getBO().iddDetails.visitenkartenURL && this.getBO().iddDetails.visitenkartenURL.length>0) {
            	SchrittRendererHelper.getItemByPseudoId("vkCont", rootElement).show();

            	SchrittRendererHelper.getItemByPseudoId("kvo_content", rootElement).find("div.consal_block_nummer").each(function(idx){
            		$(this).html('' + (idx+1));
            	});

                SchrittRendererHelper.getItemByPseudoId("vk", rootElement, "input").change(function() {
                    if($(this).is(":checked")) {
                        that.getBO().vk.accepted = true;
                    } else {
                        that.getBO().vk.accepted = false;
                    }
                });

                SchrittRendererHelper.getItemByPseudoId("vk", rootElement, "input").prop("disabled", true);
                that.getBO().vk.downloaded = false;

                content.find("input.visitenkarte").click(function() {
                    SchrittRendererHelper.getItemByPseudoId("vk", rootElement, "input").prop("disabled", false);

                    that.getBO().vk.downloaded = true;
                    var druckstueckBOandUrl = that.getBO().iddDetails.visitenkartenURL;
                    var win = window.open("", "_blank");
                    win.location.href = druckstueckBOandUrl;
                });

                SchrittRendererHelper.getItemByPseudoId("vermverinfo1", rootElement).hide();
                SchrittRendererHelper.getItemByPseudoId("vermverinfo2", rootElement).hide();
            }
            var checkVk = function() {
            	if (that.getBO().iddDetails.visitenkartenURL && that.getBO().iddDetails.visitenkartenURL.length>0) {
	                var kv_ref_name = "vk_hidden";

	                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
	                clearErrors(kv_ref_name, input);

	                if (!that.getBO().vk.accepted) {
	                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
	                    return false;
	                }
                }
                return true;
            };

            SchrittRendererHelper.getItemByPseudoId("capt", rootElement, "input").change(function() {
                that.getBO().capt.bildCode = $(this).val();
            });
            SchrittRendererHelper.getItemByPseudoId("beratung", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noBeratung.accepted = true;
                } else {
                    that.getBO().noBeratung.accepted = false;
                }
            });
            var checkBeratung = function() {
                var kv_ref_name = "beratung_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().noBeratung.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            SchrittRendererHelper.getItemByPseudoId("papierunterlagen", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noPapierunterlagen.accepted = true;
                } else {
                    that.getBO().noPapierunterlagen.accepted = false;
                }
            });
            var checkPapierunterlagen = function() {
                var kv_ref_name = "papierunterlagen_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().noPapierunterlagen.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };

            SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vvg.accepted = true;
                } else {
                    that.getBO().vvg.accepted = false;
                }
            });
            if (!this.getBO().vvg.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", true);
            }
            SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().datenschutzerklaerung.accepted = true;
                } else {
                    that.getBO().datenschutzerklaerung.accepted = false;
                }
            });
            content.find("input.vvg").click(function() {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckVertragsinformationBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().vvg.downloaded = true;
                });
            });
            var checkVVG = function() {
                var kv_ref_name = "vvg_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().vvg.downloaded) {
                    addError(kv_ref_name, input, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().vvg.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            content.find("input.datenschutz").click(function() {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckDatenschutzBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().datenschutzerklaerung.downloaded = true;
                });
            });
            if (!this.getBO().datenschutzerklaerung.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", true);
            }
            var checkDS = function() {
                var kv_ref_name = "ds_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().datenschutzerklaerung.downloaded) {
                    addError(kv_ref_name, input, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().datenschutzerklaerung.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            var checkCaptcha = function() {
                var kv_ref_name = "capt";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (that.getBO().capt.bildCode === null || that.getBO().capt.bildCode.length === 0 || that.getBO().capt.bildCode.length > 20) {
                    addError(kv_ref_name, input, "Sie müssen den im Bild angezeigten Sicherheitscode eingeben.", true);
                    return false;
                }

                return true;
            };

            this._updateCaptcha();

            content.find("input.back").click(function() {
                that._zurueck();
            });
            content.find("input.check").click(function() {
                var okBeratung = checkBeratung();
                var okPapierunterlagen = checkPapierunterlagen();
                var okVVG = checkVVG();
                var okDS = checkDS();
                var okCaptcha = checkCaptcha();
                var okVk = checkVk();

                if (okBeratung && okPapierunterlagen && okVVG && okDS && okCaptcha && okVk) {
                    that._abschluss();
                } else {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                }
            });
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt4RendererIF6.prototype._getDruckstueckDatenschutzBOandUrl = function() {
    return this.oProdukt.getDruckstueckDatenschutzBOandUrl(this.getBO());
};

Schritt4RendererIF6.prototype._getDruckstueckVertragsinformationBOandUrl = function() {
    return this.oProdukt.getDruckstueckVertragsinformationBOandUrl(this.getBO());
};

Schritt4RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt4RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt4RendererIF6.prototype._updateCaptcha = function() {
    this._getCaptcha().then(function(oResult) {
        //SchrittRendererHelper.getItemByPseudoId("capt_im", rootElement).attr("src", Config.resourceUrl + "?token=" + oResult);
        this.getBO().capt.token = oResult.token;
        SchrittRendererHelper.getItemByPseudoId("capt_im", this.rootElement).attr("src", Config.resourceUrl + "?token=" + oResult.captcha.bytes);
    }.bind(this)).fail(function(e) {
        var kv_ref_name = "commonErrors";

        var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
        clearErrors(kv_ref_name, label);

        if (e.validationErrors) {
            addError(kv_ref_name, label, "Es liegen folgende Fehler vor:");

            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });

            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
    }.bind(this));
};

Schritt4RendererIF6.prototype._getCaptcha = function() {
    return this.oProdukt.getCaptcha(this.getBO());
};

Schritt4RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt4RendererIF6.prototype._abschluss = function() {
    var that = this;

    this.setBusy(true);
    this.oProdukt.abschluss(this.getBO()).then(function(oResult) {
        that.oProdukt.abschlussFinish(that.getBO(), oResult);
    }).fail(function(e) {
        if (e === "token") {
            var kv_ref_name = "capt";
            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);
            addError(kv_ref_name, label, "Der angegebene Bildcode muss mit dem angezeigten übereinstimmen.");
        } else if (e !== null && e !== undefined && typeof e === "object" && e.validationErrors) {
            var kv_ref_name = "commonErrors";

            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);

            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });
        }
        that.getBO().capt.bildCode = "";
        SchrittRendererHelper.getItemByPseudoId("capt", that.rootElement, "input").val("");

        SchrittRendererHelper.scrollToFirstError(that.rootElement);
        that._updateCaptcha();
    }).always(function() {
        that.setBusy(false);
    });
};

module.exports = Schritt4RendererIF6;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
                    <div kv_ref="kvo_content"> \
                        <!-- Progress / Header --> \
                        <div class="block"> \
                        <ul class="progress"> \
                            <li class="">1</li> \
                            <li class="">2</li> \
                            <li class="">3</li> \
                            <li class="active">4</li> \
                        </ul> \
                        <h2>Vertragsgrundlagen und Erklärungen des Antragstellers und der zu versichernden Person(en)</h2> \
                        </div> \
                        <!-- Contentbereich --> \
                        <!-- Hinweisblock --> \
                        <div class="block"> \
                        <p><strong>In diesem Schritt finden Sie alle rechtlich notwendigen Dokumente rund um Ihre gewünschte Absicherung, bevor Sie am Ende der Seite Ihren Online-Auftrag an uns absenden können.</strong></p> \
                        </div> \
                        <!-- Vertragsrundlagen --> \
                        <div class="block"> \
                        <%= textVertragsgrundlagen %> <a target="_blank" href="https://get.adobe.com/de/reader/"><img border="0" src="' + Config.mediaUrl + 'images/get_reader.png" type="image" name="imageField"></a>\
                        </div> \
                        <!-- Visitenkarte --> \
                        <div class="block" style="display:none" kv_ref="vkCont"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">1</div> \
                                <div class="centered_in_left_of_two_columns distanced_in_left_of_two_columns"><input id="p_ds" name="checkbox" type="checkbox" kv_ref="vk"></div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <label for="p_vk"> \
                                    <p> \
                                    <strong>Herunterladen Vermittlerinformation, §15 VersVemV, §60 VVG </strong><br><%= textVisitenkarteTitle %> \
                                    <div class="buttonline textleft"> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <input type="submit" class="visitenkarte" id="p_vk" name="Herunterladen" value="Herunterladen" onclick="return false;" title="Herunterladen"> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="vk_hidden"> \
                                    </div> \
                                    <p><br/><%= textVisitenkarte %></p> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Beratung --> \
                        <div class="block"> \
                            <div class="left_of_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">1</div> \
                                <div class="centered_in_left_of_two_columns"><input id="p_beratung" name="checkbox" type="checkbox" kv_ref="beratung"></div> \
                            </div> \
                            <div class="right_of_two_columns"> \
                                <label for="p_beratung"> \
                                    <p> \
                                    <strong>Verzicht auf Beratung</strong><br/><%= textBeratungsverzicht %> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="beratung_hidden"> \
                                    </div> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Vertragsinfos --> \
                        <div class="block"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">2</div> \
                                <div class="centered_in_left_of_two_columns distanced_in_left_of_two_columns"><input id="p_vvg" name="checkbox" type="checkbox" kv_ref="vvg"></div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <label for="p_vvg"> \
                                    <p> \
                                    <strong>Herunterladen wichtiger Vertragsinformationen</strong><br/><%= textVertragsinformationTitle %> \
                                    <div class="buttonline textleft"> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <input type="submit" class="vvg" name="Herunterladen" value="Herunterladen" onclick="return false;" class="" title="Herunterladen"> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="vvg_hidden"> \
                                    </div> \
                                    <p><%= textVertragsinformation %></p> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Papierunterlagen --> \
                        <div class="block"> \
                            <div class="left_of_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">3</div> \
                                <div class="centered_in_left_of_two_columns"><input id="p_papierunterlagen" name="checkbox" type="checkbox" kv_ref="papierunterlagen"></div> \
                            </div> \
                            <div class="right_of_two_columns"> \
                                <label for="p_papierunterlagen"> \
                                    <p> \
                                    <strong>Verzicht auf Papierunterlagen</strong><br/><%= textPapierverzicht %> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="papierunterlagen_hidden"> \
                                    </div> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Einwilligungsklauseln --> \
                        <div class="block"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">4</div> \
                                <div class="centered_in_left_of_two_columns distanced_in_left_of_two_columns"><input id="p_ds" name="checkbox" type="checkbox" kv_ref="ds"></div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <label for="p_ds"> \
                                    <p> \
                                    <strong>Herunterladen wichtiger Datenschutzinformationen</strong><br><%= textDatenschutzTitle %> \
                                    <div class="buttonline textleft"> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <input type="submit" class="datenschutz" name="Herunterladen" value="Herunterladen" onclick="return false;" class="" title="Herunterladen"> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="ds_hidden"> \
                                    </div> \
                                    <%= textDatenschutz %> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Erklärung --> \
                        <div class="block"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">5</div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <p> \
                                    <%= textAbschlusserklaerung %> \
                                    <div class="image block-center"> \
                                        <img kv_ref="capt_im" type="image" border="0"> \
                                    </div> \
                                </p> \
                                <p>Geben Sie hier den im oberen Bild angezeigten Sicherheitscode ein:</p> \
                                <div class="bline"> \
                                    <label for="captcha" kv_ref="capt">Sicherheitscode:</label> \
                                    <input type="text" name="captcha" id="captcha" value="" class="il" maxlength="10" placeholder="" style="text-transform: uppercase;" kv_ref="capt"> \
                                    <br class="bterm" /> \
                                </div> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Button-Actionblock --> \
                        <!-- Hinweisblock --> \
                        <!--div class="block"> \
                            <strong>Hinweis:</strong> Alle  außer die mit (<i>optional</i>) gekennzeichneten Felder benötigen wir für die Bearbeitung Ihres Antrags.\
                        </div--> \
                        <!-- Button --> \
                        <div class="block"> \
                          <div class="buttonline"> \
                          <div class="bgroup2"> \
                            <div> \
                                <input type="submit" class="back" name="zurück" value="zurück" onclick="return false;" class="" title="zurück"> \
                            </div> \
                          </div> \
                          <div class="bgroup1"> \
                            <div> \
                                <input type="submit" class="check" name="Jetzt zahlungspflichtig online beantragen" id="defaultAction" value="Jetzt zahlungspflichtig online beantragen" onclick="return false;" class="" title="Jetzt zahlungspflichtig online beantragen"> \
                            </div> \
                          </div> \
                        </div> \
                        </div> \
                    </div>',

    errorLabelTemplate: ' \
                    <div class="blineover error"> \
                        <div class="msgerror"> \
                            <ul> \
                                <li><%- error %></li> \
                            </ul> \
                        </div> \
                    </div>'

};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);


var fnErrorLabelTemplate;

function getUrlFor(content) {
    return Config.resourceUrl + "?token=" + content;
}

var Schritt5Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt5Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt5Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(41);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt5Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var bo = this.getBO().bo;
            var anrede = (bo.vn.anrede === "HERR" ? "geehrter Herr" : "geehrte Frau") + " " + (bo.vn.titel ? bo.vn.titel + " " : "") + bo.vn.vorname + " " + bo.vn.name;
            var renderBO = {
                anrede: anrede,
                produkt: bo.produkt,
                antragsNr: validationResult.antragsnr,
                produktDesc: "",
                hotline: bo.einstellung.versicherer.hotline,
                oeffnungszeit: bo.einstellung.versicherer.oeffnungszeit,
                versichererName: bo.einstellung.versicherer.name,
                versichererAddr1: bo.einstellung.versicherer.adr1,
                versichererAddr2: bo.einstellung.versicherer.adr2,
                versichererTelefon: bo.einstellung.versicherer.telefon,
                versichererFax: bo.einstellung.versicherer.fax
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            var urlForContent = getUrlFor(that.getBO().result.antragstream.bytes);
            content.find("a.print").attr("href", urlForContent);
            content.find("a.save").attr("href", urlForContent);
            content.find("a.save").attr("download", "Antrag-" + validationResult.antragsnr + ".pdf");
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }
        
        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt5Renderer.prototype._print = function() {
};

Schritt5Renderer.prototype._save = function() {
};

module.exports = Schritt5Renderer;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%- produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <div class="kvo-title"> \
                                        <h1>Sehr <%- anrede %>,</h1> \
                                        <div class="row"> \
                                            <div class="large-12 columns"> \
                                                <span>vielen Dank, dass Sie sich für die Union Krankenversicherung AG als Ihren Partner rund um Ihre Gesundheit entschieden haben.</span> \
                                                <p>&nbsp;</p> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    <div class="kvo-content"> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-file-text-o fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Ihr Antrag mit der Antragsnummer <b><%- antragsNr %></b> ist bei uns eingegangen. Sie können ihn anzeigen oder speichern.</span> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                            <div class="medium-12 columns"> \
                                            <div class="row"> \
                                                    <div class="medium-4 columns"> \
                                                        <p>&nbsp;</p> \
                                                    </div> \
                                                    <div class="medium-4 columns left text-right"> \
                                                        <p>&nbsp;</p> \
                                                        <a href="javascript:void(0);" class="button expand print" target="_blank">Antrag anzeigen</a> \
                                                    </div> \
                                                    <div class="medium-4 columns right text-right"> \
                                                        <p>&nbsp;</p> \
                                                        <a href="javascript:void(0);" class="call-to-action button expand save" download>Antrag speichern</a> \
                                                    </div> \
                                            </div> \
                                            </div> \
                                        \
                                        <div class="row"> \
                                            <div class="medium-2 columns"> \
                                            &nbsp; \
                                            </div> \
                                            </div> \
                                        \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <p>Um die Dateien zu öffnen, benötigen Sie den kostenlosen Adobe Reader. Falls Sie ihn auf Ihrem Rechner noch nicht installiert haben sollten, können Sie hier den <a  target="_blank" href="https://get.adobe.com/de/reader/"><img border="0" src="' + Config.mediaUrl + 'form/fod_style/base/resources/img/get_reader.png" type="image" name="imageField"></a> herunterladen.</p> \
                                            </div> \
                                        </div> \
        \
                                        <div class="row"> \
                                            <div class="medium-2 columns"> \
                                            &nbsp; \
                                            </div> \
                                            </div> \
                                        <div class="row"> \
                                            <div class="medium-2 columns"> \
                                            &nbsp; \
                                            </div> \
                                            </div> \
                                        \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                    <div class="row"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Wie geht es jetzt weiter?</h2> \
                                                    </div> \
                                                    </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-shield  fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Um Ihre persönlichen Daten zu schützen, versenden wir keine E-Mail mit dem Antrags-PDF im Anhang. Eine Kopie des bei uns gespeicherten Antrags kann von Ihnen jederzeit angefordert werden.</span> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-envelope-open-o  fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Bei Fragen zu Ihrem Antrag setzen wir uns zeitnah mit Ihnen in Verbindung. Bei der Annahme Ihres Antrages senden wir Ihnen einen Versicherungsschein mit Ihrer persönlichen Versicherungsnummer per Post zu.</span> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-envelope-o  fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Wenn Sie später Leistungen einreichen wollen, können Sie dies per App oder Post erledigen.</span> \
                                                        <p><a href="https://www.ukv.de/content/service/leistungsantrag/" target="_blank"><i class="fa fa-caret-right"></i> Mehr erfahren</a> \
                                                    </p></div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
        \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2>Vielen Dank für Ihr Vertrauen</h2> \
        \
                                                <p> \
                                                <%- versichererName %><br> \
                                                <%- versichererAddr1 %><br>  \
                                                <%- versichererAddr2 %><br>  \
                                                Telefon: <%- versichererTelefon %><br>  \
                                                Fax: <%- versichererFax %> \
                                                </p> \
                                            </div> \
                                        </div> \
                                        <div class="row kvo-ssl"> \
                                            <div class="columns medium-12 "> \
                                                <p>&nbsp;</p> \
                                                <span class="secure"> Die Übertragung Ihrer Daten erfolgt verschlüsselt über einen sicheren Server.</span> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
 \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>'
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);


var fnErrorLabelTemplate;

function getUrlFor(content) {
    return Config.resourceUrl + "?token=" + content;
}

var Schritt5RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt5RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt5RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(43);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt5RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var bo = this.getBO().bo;
            var anrede = (bo.vn.anrede === "HERR" ? "geehrter Herr" : "geehrte Frau") + " " + (bo.vn.titel ? bo.vn.titel + " " : "") + bo.vn.vorname + " " + bo.vn.name;
            var renderBO = {
                anrede: anrede,
                produkt: bo.produkt,
                antragsNr: validationResult.antragsnr,
                produktDesc: "",
                hotline: bo.einstellung.versicherer.hotline,
                oeffnungszeit: bo.einstellung.versicherer.oeffnungszeit,
                versichererName: bo.einstellung.versicherer.name,
                versichererAddr1: bo.einstellung.versicherer.adr1,
                versichererAddr2: bo.einstellung.versicherer.adr2,
                versichererTelefon: bo.einstellung.versicherer.telefon,
                versichererFax: bo.einstellung.versicherer.fax
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            var urlForContent = getUrlFor(that.getBO().result.antragstream.bytes);
            content.find("a.print").attr("href", urlForContent);
            content.find("a.save").attr("href", urlForContent);
            content.find("a.save").attr("download", "Antrag-" + validationResult.antragsnr + ".pdf");

            /*fnTemplate = _.template(schrittTemplate.nextPartTemplate);
            var contentNext = $(fnTemplate(renderBO));
            contentNext.appendTo(content);*/
        }

        defer.resolve();
    }.bind(this));

    // page ready
    window.jQuery(document).trigger('if6_page_ready');

    if (bFirstRendering) {
        SchrittRendererHelper.scrollTo(this.rootElement);
    }

    return defer.promise();
};

Schritt5RendererIF6.prototype._print = function() {
};

Schritt5RendererIF6.prototype._save = function() {
};

module.exports = Schritt5RendererIF6;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
                    <div kv_ref="kvo_content"> \
                        <!-- Contentbereich --> \
                        <!-- Ansprache --> \
                        <div class="block"> \
                            <h3>Sehr <%- anrede %>,</h3> \
                            <p>vielen Dank, dass Sie sich für die Union Krankenversicherung AG als Ihren Partner rund um Ihre Gesundheit entschieden haben. \
                            </p> \
                            <p>Ihr Antrag mit der Antragsnummer <strong><%- antragsNr %></strong> ist bei uns eingegangen. Sie können ihn jetzt anzeigen oder speichern. \
                            </p> \
                            <br class="bterm"> \
                            <!-- Buttons --> \
                            <div class="if6_buttonline section"> \
                                <span></span> \
                                <div class="buttonline_inner parsys"> \
                                <div class="secondary section"><span></span> \
                                    <a href="javascript:void(0);" class="print" target="_blank">Antrag anzeigen</a> \
                                </div> \
                                <div class="primary section"><span></span> \
                                    <a href="javascript:void(0);" class="save" download>Antrag speichern</a> \
                                </div> \
                                </div> \
                            </div> \
                        </div> \
                        <div class="block"> \
                        <!-- Adobe Reader --> \
                            <div class="if6_adobe section"> \
                                <a href="javascript:void(0);"> \
                                <div class="image"> \
                                    <a href="https://get.adobe.com/de/reader/"><img src="' + Config.mediaUrl + 'images/get_reader.png" alt=""></a> \
                                </div> \
                                <div> \
                                    <p>Der Antrag wird als PDF-Dokument generiert. Falls Sie ihn auf Ihrem Rechner noch nicht installiert haben sollten, können Sie hier den Acrobat Reader herunterladen.</p> \
                                </div> \
                                </a> \
                            </div> \
                        </div> \
                        <!-- Weiter --> \
                        <div class="block-inner block"> \
                            <h3>Wie geht es jetzt weiter?</h3> \
                        </div> \
                        <div class="block-inner"> \
	                        <!-- Iconbox Datenschutz --> \
	                        <div class="cbox-small cbox cbox-icon section"> \
	                            <span class="icon icon-emblem"></span> \
	                            <h2>Datenschutz</h2> \
	                            <p>Um Ihre persönlichen Daten zu schützen, versenden wir keine E-Mail mit dem Antrags-PDF im Anhang. Eine Kopie des bei uns gespeicherten Antrags kann von Ihnen jederzeit angefordert werden.<br></p> \
	                        </div> \
	                        <!-- Iconbox Fragen zum Antrag --> \
	                        <div class="cbox-small cbox cbox-icon section"> \
	                            <span class="icon icon-letter-in-envelope"></span> \
	                            <h2>Fragen zum Antrag</h2> \
	                            <p>Bei Fragen zu Ihrem Antrag setzen wir uns zeitnah mit Ihnen in Verbindung. Bei Annahme Ihres Antrages senden wir Ihnen einen Versicherungsschein mit Ihrer persönlichen Versicherungsnummer per Post zu.<br></p> \
	                        </div> \
	                        <!-- Iconbox Leistungen einreichen --> \
	                        <div class="cbox-small cbox cbox-icon section"> \
	                            <span class="icon icon-app"></span> \
	                            <h2>Leistungen einreichen</h2> \
	                            <p>Wenn Sie später Leistungen einreichen wollen, können Sie dies per App oder Post machen.<br></p> \
	                            <div class="textbutton"><a title="Mehr erfahren" href="https://www.ukv.de/content/service/leistungsantrag/" target="_blank">Mehr erfahren</a></div> \
	                        </div> \
                        </div> \
                        <!-- Danke --> \
                        <div class="block-inner"> \
	                        <div class="cbox cbox-large cbox-banking section"> \
	                            <div class="block"> \
	                                <h3>Vielen Dank für Ihr Vertrauen!</h3> \
	                                <p><%- versichererName %><br> \
	                                    <%- versichererAddr1 %><br> \
	                                    <%- versichererAddr2 %><br> \
	                                    Telefon: <%- versichererTelefon %><br> \
	                                    Telefax: <%- versichererFax %><br> \
	                                </p> \
	                            </div> \
	                        </div> \
                        </div> \
                    </div> \
                 ',

    nextPartTemplate: ' \
                <!-- Weiter --> \
                <div class="cbox cbox-large cbox-banking section"> \
                    <div class="block"> \
                        <h3>Wie geht es jetzt weiter?</h3> \
                    </div> \
                </div> \
                <!-- Iconbox Datenschutz --> \
                <div class="cbox-small cbox cbox-icon section"> \
                    <span class="icon icon-emblem"></span> \
                    <h2>Datenschutz</h2> \
                    <p>Um Ihre persönlichen Daten zu schützen, versenden wir keine E-Mail mit dem Antrags-PDF im Anhang. Eine Kopie des bei uns gespeicherten Antrags kann von Ihnen jederzeit angefordert werden.<br></p> \
                </div> \
                <!-- Iconbox Fragen zum Antrag --> \
                <div class="cbox-small cbox cbox-icon section"> \
                    <span class="icon icon-letter-in-envelope"></span> \
                    <h2>Fragen zum Antrag</h2> \
                    <p>Bei Fragen zu Ihrem Antrag setzen wir uns zeitnah mit Ihnen in Verbindung. Bei Annahme Ihres Antrages senden wir Ihnen einen Versicherungsschein mit Ihrer persönlichen Versicherungsnummer per Post zu.<br></p> \
                </div> \
                <!-- Iconbox Leistungen einreichen --> \
                <div class="cbox-small cbox cbox-icon section"> \
                    <span class="icon icon-app"></span> \
                    <h2>Leistungen einreichen</h2> \
                    <p>Wenn Sie später Leistungen einreichen wollen, können Sie dies per App oder Post machen.<br></p> \
                    <div class="textbutton"><a title="Mehr erfahren" href="https://www.ukv.de/content/service/leistungsantrag/" target="_blank">Mehr erfahren</a></div> \
                </div> \
                <!-- Danke --> \
                <div class="cbox cbox-large cbox-banking section"> \
                    <div class="block"> \
                        <h3>Vielen Dank für Ihr Vertrauen!</h3> \
                        <p><%- versichererName %><br> \
                            <%- versichererAddr1 %><br> \
                            <%- versichererAddr2 %><br> \
                            Telefon: <%- versichererTelefon %><br> \
                            Telefax: <%- versichererFax %><br> \
                        </p> \
                    </div> \
                </div> \
            '
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var Produkt = __webpack_require__(8);
var ProduktStatus = __webpack_require__(45);
var ProduktRendererFactory = __webpack_require__(46);
var ProduktTr = __webpack_require__(11);
var Util = __webpack_require__(2);
var Config = __webpack_require__(0);

var filterFrageIds = function(fragen, typ, result) {
    fragen.forEach(function(oFrage) {
        if (oFrage.fragetyp === typ) {
            result.push(oFrage.externalfrageId);
        }

        if (oFrage.fragen && oFrage.fragen.length > 0) {
            filterFrageIds(oFrage.fragen, typ, result);
        }
    })
}

function filterTarifierungsfragen(fragen) {
    var tarifierungsfrageIds = [];
    filterFrageIds(fragen, "TARIFIERUNGS_FRAGE", tarifierungsfrageIds);

    var filteredFrageIdToTarife = {};

    Object.keys(frageIdToTarife).forEach(function(frageId) {
        if (tarifierungsfrageIds.some(function(tarifierungsfrageId) {
            return tarifierungsfrageId === frageId;
        })) {
            filteredFrageIdToTarife[frageId] = frageIdToTarife[frageId];
        }
    });

    return filteredFrageIdToTarife;
}

function flatFragen(oFrage, aFlatFragen) {
    aFlatFragen.push(oFrage);

    if (oFrage.fragen && oFrage.fragen.length > 0) {
        oFrage.fragen.forEach(function(oSubfrage) {
            flatFragen(oSubfrage, aFlatFragen);
        })
    }
}

function mapFragen(srcFragen, trgFragen) {
    var srcFlatFragen = [];

    srcFragen.forEach(function(srcFrage) {
        flatFragen(srcFrage, srcFlatFragen);
    });

    var trgFlatFragen = [];

    trgFragen.forEach(function(trgFrage) {
        flatFragen(trgFrage, trgFlatFragen);
    });

    srcFlatFragen.forEach(function(srcFrage) {
        trgFlatFragen.some(function(trgFlatFrage) {
            var found = (trgFlatFrage.externalfrageId === srcFrage.externalfrageId);
            if (found) {
                trgFlatFrage.antworten = Util.copyOf(srcFrage.antworten);
            }
            return found;
        })
    });
}

var findFrageBy = function(aFragen, fnFragePredicate) {
    var foundFrage;
    aFragen.some(function(oFrage) {
        if (fnFragePredicate(oFrage)) {
            foundFrage = oFrage;
            return true;
        }
    })

    if (!foundFrage) {
        aFragen.forEach(function(oFrage) {
            if (oFrage.fragen && oFrage.fragen.length > 0) {
                var res = findFrageBy(oFrage.fragen, fnFragePredicate);

                if (res) {
                    foundFrage = res;
                    return true;
                }
            }
        });
    }

    if (foundFrage) {
        return foundFrage;
    }
};

var searchReisebeginn = function(aFragen) {
    var val;
    var externalfrageId;

    var oFrage = findFrageBy(aFragen, function(oFrage) {
        if (oFrage.angabeTyp === "REISEZEITRAUM" && oFrage.antworttyp === "DATE") {
            return true;
        }
        return false;
    });

    if (oFrage) {
        if (oFrage.antworten && oFrage.antworten.length === 1) {
            val = oFrage.antworten[0];
        }
        externalfrageId = oFrage.externalfrageId;
    }

    if (externalfrageId) {
        return {
            value : val,
            externalfrageId : externalfrageId
        };
    }
}

var GGProdukt = function(name, oBO, sStyle, mode) {
    Produkt.call(this, name);

    this.status = ProduktStatus.SCHRITT1;
    this.style = sStyle;
    this.mode = mode;

    this.renderer = ProduktRendererFactory.getSchritt1RendererByStyle(sStyle, this);
    this.updateBO(oBO);

    this.vorbelegung = {};
    if (window["kvo_betreuer"]) {
        this.vorbelegung.betreuer = Util.copyOf(window["kvo_betreuer"]);
    }
    if (window["kvo_daten"]) {
        this.vorbelegung.daten = Util.copyOf(window["kvo_daten"]);
    }
};

GGProdukt.prototype = Object.create(Produkt.prototype);
var _super_ = Produkt.prototype;

GGProdukt.prototype.setBusy = function(bBusy) {
    this.renderer.setBusy(bBusy);
};

GGProdukt.prototype.render = function(validationResult) {
    if (this.status === ProduktStatus.SCHRITT1 && this.schritt1UeberspringenMitTkz) {
        var tkz = this.schritt1UeberspringenMitTkz;
        delete this.schritt1UeberspringenMitTkz;
        this.weiterBedarf(this.schritt1BO, tkz);
    } else {
        return this.renderer.render(validationResult);
    }
};

GGProdukt.prototype.updateBO = function(oBO) {
    this.data = oBO;

    var schritt1BO = {
        vp: {
            geburtsdatum : null,
            fragen: oBO.ergebnisFragen
        }
    };
    if (oBO.ergebnisEinstieg) {
        schritt1BO.einstellung = oBO.ergebnisEinstieg;
    }

    var schritt1Ueberspringen = false;
    var tkz;
    if (this.vorbelegung) {
        if (this.vorbelegung.daten && this.vorbelegung.daten.vps && this.vorbelegung.daten.vps.length > 0) {
            schritt1BO.vp.geburtsdatum = this.vorbelegung.daten.vps[0].geburtsdatum;

            if (this.vorbelegung.daten.vps[0].tarifierungsfragen) {
                schritt1Ueberspringen = true;
                var reisegrundFrage = findFrageBy(schritt1BO.vp.fragen, function(oFrage) {
                    if (oFrage.angabeTyp === "REISEGRUND") {
                        return true;
                    }
                    return false;
                });
                if (reisegrundFrage) {
                    reisegrundFrage.antworten = [this.vorbelegung.daten.vps[0].tarifierungsfragen.reisegrund];
                } else {
                    schritt1Ueberspringen = false;
                }

                var einreisedatumFrage = findFrageBy(schritt1BO.vp.fragen, function(oFrage) {
                    if (oFrage.externalfrageId === "V00032") {
                        return true;
                    }
                    return false;
                });
                if (einreisedatumFrage) {
                    einreisedatumFrage.antworten = [this.vorbelegung.daten.vps[0].tarifierungsfragen.einreisedatum];
                } else {
                    schritt1Ueberspringen = false;
                }

                var ausreisedatumFrage = findFrageBy(schritt1BO.vp.fragen, function(oFrage) {
                    if (oFrage.externalfrageId === "V00031") {
                        return true;
                    }
                    return false;
                });
                if (ausreisedatumFrage) {
                    ausreisedatumFrage.antworten = [this.vorbelegung.daten.vps[0].tarifierungsfragen.ausreisedatum];
                } else {
                    schritt1Ueberspringen = false;
                }

                var reiselandFrage = findFrageBy(schritt1BO.vp.fragen, function(oFrage) {
                    if (oFrage.angabeTyp === "REISELAND") {
                        return true;
                    }
                    return false;
                });
                if (reiselandFrage) {
                    reiselandFrage.antworten = [this.vorbelegung.daten.vps[0].tarifierungsfragen.hochpreisland];
                } else {
                    schritt1Ueberspringen = false;
                }

                if (this.vorbelegung.daten.tarif && this.vorbelegung.daten.tarif.tkz) {
                    tkz = this.vorbelegung.daten.tarif.tkz;
                }
            }
        }
    }
    this.schritt1BO = schritt1BO;

    this.renderer.setBO(schritt1BO);

    if (schritt1Ueberspringen && tkz) {
        this.schritt1UeberspringenMitTkz = tkz;
    }
};

GGProdukt.prototype.weiterBedarf = function(bo, tkz) {
    if (!this.schritt2BO) {
        this.schritt2BO = {
            produkt : this.name,
            einstellung : null,
            svGKV : null,
            svKoopGKV : null,
            svLand : null,
            svTaetigkeitsstatus : null,
            svVersicherungsstatus : null,
            vp : {
                geburtsdatum : bo.vp.geburtsdatum,
                anrede : null,
                staatsangehoerigkeit : null,
                taetigkeitsstatus : null,
                beruf : null,
                versicherungsstatus : null,
                aktuellerVersicherungsschutz : null,
                fragen : [],
                antragsfragen : [],
                frageIdToTarife : null
            }
        };

        if (this.vorbelegung.daten && this.vorbelegung.daten.vps && this.vorbelegung.daten.vps.length > 0) {
            this.schritt2BO.vp.anrede = (this.vorbelegung.daten.vps[0].geschlecht === "weiblich" ? "FRAU" : "HERR");
            this.schritt2BO.vp.staatsangehoerigkeit = this.vorbelegung.daten.vps[0].staatsangehoerigkeit;
            this.schritt2BO.vp.taetigkeitsstatus = this.vorbelegung.daten.vps[0].taetigkeitsstatus;
            this.schritt2BO.vp.beruf = this.vorbelegung.daten.vps[0].beruf;
            this.schritt2BO.vp.versicherungsstatus = this.vorbelegung.daten.vps[0].versicherungsstatus;
            this.schritt2BO.vp.aktuellerVersicherungsschutz = this.vorbelegung.daten.vps[0].gkv;
            this.schritt2BO.vp.versicherungsnummer = this.vorbelegung.daten.vps[0].versicherungsnummer;
        }
    }

    this.status = ProduktStatus.SCHRITT2;
    this.renderer = ProduktRendererFactory.getSchritt2RendererByStyle(this.style, this);
    this.renderer.setBO(this.schritt2BO);

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    this.setBusy(true);
    ProduktTr.einstiegWeiter({
    	mandant: Config.mandant,
    	aid: Config.aid,
    	context: context,
    	tarif: (this.schritt1Result && this.schritt1Result.ergebnisTarife && this.schritt1Result.ergebnisTarife>0)
    			 	? this.schritt1Result.ergebnisTarife[0]
    				: {risikotraeger: 'UKV', tkz: tkz}, //bei Datenübergabe ist schritt1Result undefined!
    	tkz: tkz,
    	additions: null
    }).then(function(oBO) {
        Config.mandant = oBO.mandant || Config.mandant;
        Util.merge({
            einstellung : Util.copyOf(oBO.einstellung),
            svGKV : Util.copyOf(oBO.svGKV),
            svKoopGKV : Util.copyOf(oBO.svKoopGKV),
            svLand : Util.copyOf(oBO.svLand),
            svTaetigkeitsstatus : Util.copyOf(oBO.svTaetigkeitsstatus),
            svVersicherungsstatus : Util.copyOf(oBO.svVersicherungsstatus),
            vp : {
                geburtsdatum : bo.vp.geburtsdatum,
                gkvAuswahlMoeglich : true
            }
        }, this.schritt2BO);
        this.schritt2BO.anzeigepflicht = JSON.parse(oBO.texte.Anzeigepflicht)
        if (oBO.vpGKV !== null && oBO.vpGKV !== undefined) {
            this.schritt2BO.vp.gkvAuswahlMoeglich = false;
            this.schritt2BO.vp.aktuellerVersicherungsschutz = oBO.vpGKV;
        }

        var indexesToDelete = [];
        if (this.schritt2BO.vp.fragen) {
            this.schritt2BO.vp.fragen.forEach(function(oFrage, index) {
                if (!oBO.vpFragen.some(function(vpFrage) {
                    return oFrage.externalfrageId === vpFrage.externalfrageId;
                })) {
                    indexesToDelete.push(index);
                }
            });
        }
        _.chain(indexesToDelete).reverse().forEach(function(index) {
            this.schritt2BO.vp.fragen.splice(index, 1);
        }.bind(this));

        var fragenToAdd = [];
        oBO.vpFragen.forEach(function(vpFrage) {
            if (!this.schritt2BO.vp.fragen.some(function(oFrage) {
                return oFrage.externalfrageId === vpFrage.externalfrageId;
            })) {
                fragenToAdd.push(Util.copyOf(vpFrage));
            }
        }.bind(this));
        this.schritt2BO.vp.fragen = this.schritt2BO.vp.fragen.concat(fragenToAdd);


        indexesToDelete = [];
        if (this.schritt2BO.vp.antragsfragen) {
            this.schritt2BO.vp.antragsfragen.forEach(function(oFrage, index) {
                if (!oBO.vpAntragsfragen.some(function(vpFrage) {
                    return oFrage.externalfrageId === vpFrage.externalfrageId;
                })) {
                    indexesToDelete.push(index);
                }
            });
        }
        _.chain(indexesToDelete).reverse().forEach(function(index) {
            this.schritt2BO.vp.antragsfragen.splice(index, 1);
        }.bind(this));

        fragenToAdd = [];
        oBO.vpAntragsfragen.forEach(function(vpFrage) {
            if (!this.schritt2BO.vp.antragsfragen.some(function(oFrage) {
                return oFrage.externalfrageId === vpFrage.externalfrageId;
            })) {
                fragenToAdd.push(vpFrage);
            }
        }.bind(this));
        this.schritt2BO.vp.antragsfragen = this.schritt2BO.vp.antragsfragen.concat(fragenToAdd);


        mapFragen(this.schritt1BO.vp.fragen, this.schritt2BO.vp.fragen);
        this.data = oBO;
        this.data.context = context;

        this.berechne();
    }.bind(this)).always(function() {
        this.setBusy(false);
    }.bind(this));
};

GGProdukt.prototype.berechne = function(noRendering) {
    var defer = $.Deferred();

    var oBO = this.schritt2BO;

    var oTrBO = Util.copyOf(this.data);
    var oReisebeginn = searchReisebeginn(oBO.vp.fragen);

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    oTrBO.mandant = Config.mandant;
    oTrBO.aid = Config.aid;
    oTrBO.context = context;
    oTrBO.versicherungsbeginn = "";

    if (oReisebeginn && oReisebeginn.value)
        oTrBO.versicherungsbeginn = oReisebeginn.value;

    oTrBO.vpFragen = oBO.vp.fragen;
    oTrBO.vpAntragsfragen = oBO.vp.antragsfragen;
    oTrBO.vpGKV = oBO.vp.aktuellerVersicherungsschutz;
    oTrBO.berechneSelbst = true;
    oTrBO.berechneKind = false;
    oTrBO.vpGeburtsdatum = oBO.vp.geburtsdatum;
    oTrBO.vpGeschlecht = oBO.vp.anrede;

    ProduktTr.einstiegBerechnen(oTrBO).done(function(oResult) {
        if (oResult.state === "NOK") {
            oResult.validationErrors.forEach(function(oValidationError) {
                if (oValidationError.fieldName === "versicherungsbeginn" && oReisebeginn) {
                    oValidationError.fieldName = "vp.fragen" + oReisebeginn.externalfrageId;
                    oValidationError.message = oValidationError.message.replace("KV.versicherungsbeginn",
                        "KV.vp.fragen" + oReisebeginn.externalfrageId);
                    oValidationError.message = oValidationError.message.replace(/\s\s/, " ");
                    return true;
                }
            })
        } else if (oResult.state === "EXCEPTION") {
            if (oResult.exeption && oResult.exeption.errorCode === "wrongInputData") {
                if (oResult.exeption.message) {
                    if (oResult.exeption.message.indexOf("Versicherungsbegnn") > 0 || oResult.exeption.message.indexOf("Versicherungsbeginn") > 0) {
                        oResult = {
                            state: "NOK",
                            validationErrors: [{
                                fieldName: "vp.fragen" + oReisebeginn.externalfrageId,
                                message: "Der Versicherungsbeginn ist ungültig"

                            }]
                        }
                    } else {
                        oResult = {
                            state: "NOK",
                            validationErrors: [{
                                fieldName: "vp.tarif",
                                message: oResult.exeption.message

                            }]
                        }
                    }
                }
            }
        }

        if (!noRendering) {
            this.render(oResult);
        }
        defer.resolve(oResult);
        this.schritt2Result = oResult;
        this.data.vpTarife = oResult.vpTarife;
    }.bind(this));

    return defer.promise();
};

GGProdukt.prototype.berechneBedarf = function(oBO, bNoRendering) {
    var deferred = $.Deferred();

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    var reqBO = {
        "mandant": Config.mandant,
        "aid": Config.aid,
        "context": context,
        "bedarfsart": "TARIFE",
        "fragenBuendelname": null,
        "fragenVp": null,
        "tarifeBuendelname": null,
        "tarifeVp": {
            "anrede": null,
            "name": null,
            "vorname": null,
            "geburtsdatum": oBO.vp.geburtsdatum,
            "id": null,
            "vn": false,
            "versicherungsbeginn": null,
            "beruf": null,
            "taetigkeitsstatus": null,
            "versorgerBeruf": null,
            "versorgerTaetigkeitsstatus": null,
            "versicherungsstatus": null,
            "gkv": null,
            "versicherungsnummer": null,
            "staatsangehoerigkeit": null
        },
        "tarifeFragen": oBO.vp.fragen
    };

    this.setBusy(true);
    ProduktTr.einstiegTarife(reqBO).then(function(result) {
        this.schritt1Result = result;
        if (!bNoRendering) {
            this.render(result);
        }
        deferred.resolve();
    }.bind(this)).fail(function() {
        deferred.reject();
    }).always(function() {
        this.setBusy(false);
    }.bind(this));

    return deferred.promise();
};

GGProdukt.prototype.zurueck = function() {
    if (this.status === ProduktStatus.SCHRITT2) {
        this.status = ProduktStatus.SCHRITT1;

        this.renderer = ProduktRendererFactory.getSchritt1RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt1BO);
        this.renderer.render(this.schritt1Result);
    } else if (this.status === ProduktStatus.SCHRITT3) {
        this.status = ProduktStatus.SCHRITT2;

        this.renderer = ProduktRendererFactory.getSchritt2RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt2BO);
        this.renderer.render(this.schritt2Result);
    } else if (this.status === ProduktStatus.SCHRITT4) {
        this.status = ProduktStatus.SCHRITT3;

        this.renderer = ProduktRendererFactory.getSchritt3RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt3BO);
        this.renderer.render(this.schritt2Result);
    } else if (this.status === ProduktStatus.SCHRITT5) {
        this.status = ProduktStatus.SCHRITT4;

        this.renderer = ProduktRendererFactory.getSchritt4RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt4BO);
        this.renderer.render(this.schritt2Result);
    }

};

GGProdukt.prototype.weiter = function(oValidationResult) {
    if (this.status === ProduktStatus.SCHRITT2) {
        if (!this.schritt3BO) {
            this.schritt3BO = {
                produkt : this.name,
                einstellung : Util.copyOf(this.data.einstellung),
                betreuer: {
                    manuelleAuswahl: null,
                    auswahlListe : null
                },
                vp : {
                    geburtsdatum : null,
                    anrede : null,
                    vorname : null,
                    name : null,
                    isVn: false
                },
                vn : {
                    anrede : null,
                    titel : null,
                    vorname : null,
                    name : null,
                    geburtsdatum : null,
                    plz : null,
                    ort : null,
                    strasse : null,
                    hausnr : null,
                    telefon : null,
                    mail : null,
                    zahlungsdaten : {
                        zahlungsart : "Bankeinzug per Lastschrift",
                        zahlungsweise : null,
                        iban : {
                            selected : false,
                            no : null,
                            bic : false
                        },
                        kto : {
                            selected : false,
                            no : null,
                            blz : null
                        },
                        bank : null,
                        ksmSelected: false
                    }
                }
            }
        }

        //
        this.schritt3BO.produkt = oValidationResult.vpTarife[0].beschreibung;
        Util.merge({
            vp : {
                geburtsdatum : this.schritt2BO.vp.geburtsdatum,
                anrede : this.schritt2BO.vp.anrede,
                taetigkeitsstatus: this.schritt2BO.vp.taetigkeitsstatus,
                beruf: this.schritt2BO.vp.beruf,
                versicherungsstatus: this.schritt2BO.vp.versicherungsstatus,
                aktuellerVersicherungsschutz: this.schritt2BO.vp.aktuellerVersicherungsschutz,
                versicherungsnummer: this.schritt2BO.vp.versicherungsnummer,
            }
        }, this.schritt3BO);

        if (this.vorbelegung.betreuer) {
            this.schritt3BO.einstellung.betreuer = Util.copyOf(this.vorbelegung.betreuer);
            this.data.einstellung.betreuerFestDefiniert = true;
            this.schritt3BO.einstellung.betreuerFestDefiniert = this.data.einstellung.betreuerFestDefiniert;
            if (this.data.einstellung.betreuerFinal===true) {
            	delete this.vorbelegung["betreuer"];
            }
        }
        if (this.vorbelegung.daten) {
            var vnIsUsable = this.schritt2BO.vp.geburtsdatum === this.vorbelegung.daten.vn.geburtsdatum &&
                this.schritt2BO.vp.anrede === (this.vorbelegung.daten.vn.geschlecht === "weiblich" ?  "FRAU" : "HERR");

            if (this.vorbelegung.daten.vn) {
                if (vnIsUsable) {
                    this.schritt3BO.vn.vorname = this.vorbelegung.daten.vn.vorname;
                    this.schritt3BO.vn.name = this.vorbelegung.daten.vn.name;
                    this.schritt3BO.vn.plz = this.vorbelegung.daten.vn.plz;
                    this.schritt3BO.vn.ort = this.vorbelegung.daten.vn.ort;
                    this.schritt3BO.vn.strasse = this.vorbelegung.daten.vn.strasse;
                    this.schritt3BO.vn.hausnr = this.vorbelegung.daten.vn.hausNr;
                    this.schritt3BO.vn.telefon = this.vorbelegung.daten.vn.telefon;
                    this.schritt3BO.vn.mail = this.vorbelegung.daten.vn.email;
                    this.schritt3BO.vn.vorname = this.vorbelegung.daten.vn.vorname;
                }
            }
            if (this.vorbelegung.daten.vps && this.vorbelegung.daten.vps.length > 0) {
                this.schritt3BO.vp.name = this.vorbelegung.daten.vps[0].name;
                this.schritt3BO.vp.vorname = this.vorbelegung.daten.vps[0].vorname;
            }
            if (this.vorbelegung.daten.bankdaten) {
                if (this.vorbelegung.daten.bankdaten.kontoNr != null && this.vorbelegung.daten.bankdaten.kontoNr.length > 0) {
                    this.schritt3BO.zahlungsdaten.kto.selected = true;
                    this.schritt3BO.zahlungsdaten.kto.no = this.vorbelegung.daten.bankdaten.kontoNr;
                    this.schritt3BO.zahlungsdaten.kto.blz = this.vorbelegung.daten.bankdaten.blz;
                    this.schritt3BO.zahlungsdaten.bank = this.vorbelegung.daten.bankdaten.bankname;
                }
                else if (this.vorbelegung.daten.bankdaten.iban != null && this.vorbelegung.daten.bankdaten.iban.length > 0) {
                    this.schritt3BO.zahlungsdaten.iban.selected = true;
                    this.schritt3BO.zahlungsdaten.iban.no = this.vorbelegung.daten.bankdaten.iban;
                    this.schritt3BO.zahlungsdaten.kto.bic = this.vorbelegung.daten.bankdaten.blz;
                    this.schritt3BO.zahlungsdaten.bank = this.vorbelegung.daten.bankdaten.bankname;
                }
            }
            delete this.vorbelegung["daten"];
        }


        if (Util.isVolljaehrig(this.schritt2BO.vp.geburtsdatum)) {
            this.schritt3BO.vn.anrede = this.schritt2BO.vp.anrede;
            this.schritt3BO.vn.geburtsdatum = this.schritt2BO.vp.geburtsdatum;
            this.schritt3BO.vn.name = this.schritt3BO.vp.name;
            this.schritt3BO.vn.vorname = this.schritt3BO.vp.vorname;
            this.schritt3BO.vp.isVn = true;
        } else {
            this.schritt3BO.vp.isVn = false;
        }

        this.schritt3BO.vp.fragen = this.schritt2BO.vp.fragen;
        this.schritt3BO.vp.antragsfragen = this.schritt2BO.vp.antragsfragen;

        this.status = ProduktStatus.SCHRITT3;

        this.renderer = ProduktRendererFactory.getSchritt3RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt3BO);

        var context = this.data.context;
        if (!context)
        	context = {};
        context.mode = this.mode;

        var textePromise = ProduktTr.getTexte({
            "mandant": Config.mandant,
            "aid": Config.aid,
            "context": context/*{
                "id": null,
                "mode": "TEST"
            }*/,
            "typ": "TEXTE",
            "texteVP": {
                "anrede": this.schritt3BO.vp.anrede,
                "name": "TestVP",
                "vorname": "Peter",
                "geburtsdatum": this.schritt3BO.vp.geburtsdatum,
                "id": "1",
                "vn": false,
                "versicherungsbeginn": this.schritt3BO.versicherungsbeginn,
                "beruf": this.schritt3BO.vp.beruf,
                "taetigkeitsstatus": this.schritt3BO.vp.taetigkeitsstatus,
                "versorgerBeruf": null,
                "versorgerTaetigkeitsstatus": null,
                "versicherungsstatus": this.schritt3BO.vp.versicherungsstatus,
                "gkv": this.schritt3BO.vp.aktuellerVersicherungsschutz,
                "versicherungsnummer": this.schritt3BO.vp.versicherungsnummer,
                "staatsangehoerigkeit": this.schritt3BO.vp.staatsangehoerigkeit
            },
            "texteTarif": oValidationResult.vpTarife[0]
        }, "Lastschrift", "Papierverzicht", "Abschlusserklaerung", "Beratungsverzicht", "Vertragsinformation", "DatenschutzTitle", "Vertragsgrundlagen", "VertragsinformationTitle", "Datenschutz");


        var antragBO = Util.copyOf(this.data);
        antragBO.mandant = Config.mandant;
        antragBO.aid = Config.aid;
        antragBO.context = context;
        antragBO.versicherungsbeginn = this.schritt3BO.vp.versicherungsbeginn;
        antragBO.vpFragen = this.schritt3BO.vp.fragen;
        antragBO.vpAntragsfragen = this.schritt3BO.vp.antragsfragen;
        antragBO.vpGKV = this.schritt3BO.vp.aktuellerVersicherungsschutz;
        antragBO.berechneSelbst = true;
        antragBO.berechneKind = false;
        antragBO.vpGeburtsdatum = this.schritt3BO.vp.geburtsdatum;
        antragBO.vpGeschlecht = this.schritt3BO.vp.anrede;

        var antragPromise = ProduktTr.antrag(antragBO);

        $.when(textePromise, antragPromise).done(function(oTextResult, antragResult) {
        	oTextResult = oTextResult[0];
            this.schritt3BO.texte = {
                lastschrift : JSON.parse(oTextResult.ergebnisTexte.Lastschrift),
                papierverzicht : JSON.parse(oTextResult.ergebnisTexte.Papierverzicht),
                abschlusserklaerung : JSON.parse(oTextResult.ergebnisTexte.Abschlusserklaerung),
                beratungsverzicht : JSON.parse(oTextResult.ergebnisTexte.Beratungsverzicht),
                vertragsinformation: JSON.parse(oTextResult.ergebnisTexte.Vertragsinformation),

                datenschutzTitle : JSON.parse(oTextResult.ergebnisTexte.DatenschutzTitle),
                vertragsgrundlagen: JSON.parse(oTextResult.ergebnisTexte.Vertragsgrundlagen),
                vertragsinformationTitle : JSON.parse(oTextResult.ergebnisTexte.VertragsinformationTitle),
                datenschutz : JSON.parse(oTextResult.ergebnisTexte.Datenschutz),
            };

            this.schritt3BO.zahlungsweisen = antragResult.vpZahlungsweisen;

            this.renderer.render(oValidationResult);
        }.bind(this));
    } else if (this.status === ProduktStatus.SCHRITT3) {
        var oReisebeginn = searchReisebeginn(this.schritt2BO.vp.fragen);

        var versicherungsbeginn = oReisebeginn.value;

        if (!this.schritt4BO) {
            this.schritt4BO = Util.copyOf(this.schritt3BO);
        }
        this.schritt4BO.betreuer = Util.copyOf(this.schritt3BO.betreuer);
        this.schritt4BO.produkt = this.schritt3BO.produkt;
        this.schritt4BO.vp.staatsangehoerigkeit = this.schritt2BO.vp.staatsangehoerigkeit;
        this.schritt4BO.vp.taetigkeitsstatus = this.schritt2BO.vp.taetigkeitsstatus;
        this.schritt4BO.vp.beruf = this.schritt2BO.vp.beruf;
        this.schritt4BO.vp.versicherungsbeginn = versicherungsbeginn;
        this.schritt4BO.vp.versicherungsstatus = this.schritt2BO.vp.versicherungsstatus;
        this.schritt4BO.vp.aktuellerVersicherungsschutz = this.schritt2BO.vp.aktuellerVersicherungsschutz;
        this.schritt4BO.vp.versicherungsnummer = this.schritt2BO.vp.versicherungsnummer;
        Util.merge(this.schritt3BO.vp, this.schritt4BO.vp);
        Util.merge(this.schritt3BO.vn, this.schritt4BO.vn);
        this.status = ProduktStatus.SCHRITT4;
        this.schritt4BO.texte = Util.copyOf(this.schritt3BO.texte);

        this.renderer = ProduktRendererFactory.getSchritt4RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt4BO);
        this.renderer.render(this.schritt2Result);
    } else if (this.status === ProduktStatus.SCHRITT4) {
        if (!this.schritt5BO) {
            this.schritt5BO = {
                    produkt : this.name,
                    einstellung : Util.copyOf(this.data.einstellung),
                    vk : {
                        accepted: false,
                    },
                    vvg : {
                        accepted: false,
                        downloaded: false
                    },
                    datenschutzerklaerung : {
                        accepted: false,
                        downloaded: false
                    },
                    noBeratung : {
                        accepted: false,
                    },
                    noPapierunterlagen : {
                        accepted: false,
                    }
            };
        } else {
            this.schritt5BO.vvg.accepted = false;
            this.schritt5BO.datenschutzerklaerung.accepted = false;
        }
        this.schritt5BO.isKoopGKV = this.schritt2BO.svKoopGKV && this.schritt2BO.svKoopGKV.some(function(koop) { return koop === this.schritt2BO.vp.aktuellerVersicherungsschutz; }, this);
        this.schritt5BO.produkt = this.schritt3BO.produkt;
        this.schritt5BO.capt = {
            bildCode: null,
            token: null
        };
        this.schritt5BO.betreuer = null;

        if (this.data.einstellung.betreuerwahl) {
            if (this.schritt4BO.betreuer.auswahlListe && this.schritt4BO.betreuer.manuelleAuswahl) {
                this.schritt4BO.betreuer.auswahlListe.some(function(currentBetreuer) {
                    if (currentBetreuer.selected) {
                        this.schritt5BO.betreuer = Util.copyOf(currentBetreuer);
                        delete this.schritt5BO.betreuer["selected"];
                        return true;
                    }
                    return false;
                }, this);
            }
        } else if (this.data.einstellung.betreuer) {
            this.schritt5BO.betreuer = Util.copyOf(this.data.einstellung.betreuer);
            if (this.data.einstellung.betreuerFinal!=true && this.vorbelegung.betreuer) {
            	this.schritt5BO.betreuer = Util.copyOf(this.vorbelegung.betreuer);
            }
        }

        this.schritt5BO.vp = Util.copyOf(this.schritt4BO.vp);
        this.schritt5BO.vn = Util.copyOf(this.schritt4BO.vn);
        this.schritt5BO.vp.tfFragen = Util.copyOf(this.schritt2BO.vp.fragen);
        this.schritt5BO.vp.fragen = Util.copyOf(this.schritt2BO.vp.antragsfragen);
        this.schritt5BO.vpTarife = Util.copyOf(this.data.vpTarife);
        this.status = ProduktStatus.SCHRITT5;
        this.schritt5BO.texte = Util.copyOf(this.schritt4BO.texte);

        var context = this.data.context;
        if (!context)
        	context = {};
        context.mode = this.mode;

        var iddPromise = ProduktTr.getIddDetails({
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            typ: "IDDDETAILS",
            iddDetails: this.schritt5BO.betreuer ? this.schritt5BO.betreuer : this.schritt4BO.einstellung.betreuer
        });

        $.when(iddPromise).done(function(iddDetails) {
            this.schritt5BO.iddDetails = iddDetails;

            this.renderer = ProduktRendererFactory.getSchritt5RendererByStyle(this.style, this);
            this.renderer.setBO(this.schritt5BO);
            this.renderer.render(this.schritt2Result);
        }.bind(this));
    }
};

GGProdukt.prototype.abschlussFinish = function(oBO, oResult) {
    if (this.status === ProduktStatus.SCHRITT5) {
        this.status = ProduktStatus.SCHRITT6;
        this.renderer = ProduktRendererFactory.getSchritt6RendererByStyle(this.style, this);

        this.schritt6BO = {
            bo: oBO,
            result: oResult
        }
        this.renderer.setBO(this.schritt6BO);
        this.renderer.render(oResult);

        // TODO cleanup data
    }
};

GGProdukt.prototype.pruefe = function() {
    if (this.status == ProduktStatus.SCHRITT2) {
        return this._pruefeSchritt2();
    } else if (this.status == ProduktStatus.SCHRITT3) {
        return this._pruefeSchritt3();
    }
};

GGProdukt.prototype._pruefeSchritt2 = function() {
    var defer = $.Deferred();

    var oBO = this.schritt2BO;

    var oTrBO = Util.copyOf(this.data);
    var oReisebeginn = searchReisebeginn(oBO.vp.fragen);

    var versicherungsbeginn = oReisebeginn.value;
    var gkv = oBO.vp.aktuellerVersicherungsschutz || null;

    var geburtsdatum = oBO.vp.geburtsdatum;

    var taetigkeitsstatus = oBO.vp.taetigkeitsstatus || null;
    var staatsangehoerigkeit = oBO.vp.staatsangehoerigkeit || null;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    oTrBO.mandant = Config.mandant;
    oTrBO.aid = Config.aid;
    oTrBO.context = context;
    oTrBO.versicherungsbeginn = "";

    oTrBO.vpFragen = oBO.vp.fragen;
    oTrBO.vpAntragsfragen = oBO.vp.antragsfragen;
    oTrBO.berechneSelbst = true;
    oTrBO.berechneKind = false;
    oTrBO.vp = {
        anrede: oBO.vp.anrede,
        name: "TestVP",
        vorname: "Peter",
        geburtsdatum: geburtsdatum,
        id: "1",
        vn: false,
        versicherungsbeginn: versicherungsbeginn,
        beruf: oBO.vp.beruf,
        taetigkeitsstatus: taetigkeitsstatus,
        versorgerBeruf: null,
        versorgerTaetigkeitsstatus: null,
        versicherungsstatus: oBO.vp.versicherungsstatus,
        gkv: gkv,
        versicherungsnummer: oBO.vp.versicherungsnummer,
        staatsangehoerigkeit: staatsangehoerigkeit
    };
    oTrBO.vpTarife = this.data.vpTarife,
    oTrBO.vpTFFragen = oBO.vp.fragen,
    oTrBO.vpAntragsfragen = oBO.vp.antragsfragen,

    ProduktTr.einstiegPruefen(oTrBO).done(function(oResult) {
        if (oResult.state !== "OK") {
            if (oResult.validationErrors && oResult.validationErrors.length > 0) {
                oResult.validationErrors.forEach(function(oValidationError) {
                    if (oValidationError.fieldName === "versicherungsbeginn" && oReisebeginn) {
                        oValidationError.fieldName = "vp." + oReisebeginn.externalfrageId;
                        oValidationError.message = oValidationError.message.replace("KV.versicherungsbeginn",
                            "KV.vp.fragen" + oReisebeginn.externalfrageId);
                        oValidationError.message = oValidationError.message.replace(/\s\s/, " ");
                        return true;
                    }
                });
            } else if (oResult.state === "EXCEPTION") {
                if (oResult.exeption && oResult.exeption.errorCode === "wrongInputData") {
                    if (oResult.exeption.message) {
                        if (oResult.exeption.message.indexOf("Versicherungsbegnn") > 0 || oResult.exeption.message.indexOf("Versicherungsbeginn") > 0) {
                            oResult = {
                                state: "NOK",
                                validationErrors: [{
                                    fieldName: "vp.fragen" + oReisebeginn.externalfrageId,
                                    message: "Der Versicherungsbeginn ist ungültig"

                                }]
                            }
                        } else {
                            oResult = {
                                state: "NOK",
                                validationErrors: [{
                                    fieldName: "vp.tarif",
                                    message: oResult.exeption.message

                                }]
                            }
                        }
                    }
                }
            }
            this.render(oResult);
            defer.resolve(oResult);
        } else if (oResult.state === "OK") {
            this.berechne(true).then(function(oResult) {
                defer.resolve(oResult);
                this.schritt2Result = oResult;

                this.weiter(oResult);
            }.bind(this));
        }

    }.bind(this)).fail(function() {
        defer.reject();
    });

    return defer.promise();
};

GGProdukt.prototype._pruefeSchritt3 = function() {
    var defer = $.Deferred();

    var oBO = this.schritt3BO;
    defer.resolve();

    return defer.promise();
};


GGProdukt.prototype.getBerufSuggestionsFor = function(taetigkeitsstatus, beruf) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBerufSuggestionsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BERUF",
        kategorie: taetigkeitsstatus,
        berufText: beruf
    });
};

GGProdukt.prototype.checkKonto = function(blz, konto) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.checkKonto({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "KONTO",
        kategorie: null,
        kontoBlz: blz,
        kontoNummer: konto
    });
};

GGProdukt.prototype.checkIBAN = function(iban) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.checkKonto({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "IBAN",
        kategorie: null,
        ibanText: iban
    });
};

GGProdukt.prototype.getBLZSuggestionsFor = function(blz) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBLZSuggestionsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BLZ",
        kategorie: null,
        blzText: blz
    });
};

GGProdukt.prototype.getIbanSuggestionsFor = function(iban) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getIbanSuggestionsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "IBAN",
        kategorie: null,
        ibanText: iban
    });
};

GGProdukt.prototype.getBetreuerlisteFor = function(plz) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBetreuerlisteFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BETREUERLISTE",
        kategorie: null,
        betreuerlistePlz: plz
    });
};

GGProdukt.prototype.checkBetreuergebiet = function(plz) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBetreuerlisteFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "GEBIET",
        kategorie: null,
        gebietPlz: plz
    });
};

GGProdukt.prototype.getBetreuerdetailsFor = function(betreuer) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBetreuerdetailsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BETREUERDETAILS",
        kategorie: null,
        betreuerdetails: betreuer /*{
            agenturname: null,
            agenturemail: null,
            vermittlernummer: null,
            adeId: null,
            type: null
        }*/
    });
};

GGProdukt.prototype.getDruckstueckTariferklaerungBOandUrl = function(oBO) {
    var oReisebeginn = searchReisebeginn(oBO.vp.fragen);
    var versicherungsbeginn = (oReisebeginn && oReisebeginn.value ? oReisebeginn.value : Util.nextVersicherungsbeginn(true));
    var gkv = oBO.vp.aktuellerVersicherungsschutz || null;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "TARIF",
            druckstueckTarif: {
                druckSelbst: true,
                tkz: this.data.vpTarife[0].tkz,
                versicherungsbeginn: versicherungsbeginn,
                gkv: gkv
            }
        },
        serviceUrl: ProduktTr.getDruckstueckTariferklaerungUrl()
    };
};

GGProdukt.prototype.getDruckstueckVorschlagBOandUrl = function(oBO) {
    var oReisebeginn = searchReisebeginn(oBO.vp.fragen);
    var versicherungsbeginn = (oReisebeginn && oReisebeginn.value ? oReisebeginn.value : Util.nextVersicherungsbeginn(true));
    var gkv = oBO.vp.aktuellerVersicherungsschutz || null;
    var geburtsdatum = oBO.vp.geburtsdatum || null;
    var taetigkeitsstatus = oBO.vp.taetigkeitsstatus || null;
    var staatsangehoerigkeit = oBO.vp.staatsangehoerigkeit || null;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "VORSCHLAG",
            druckstueckTarif: null,
            druckstueckBeratung: null,
            druckstueckDatenschutz: null,
            druckstueckAnzeigepflicht: null,
            druckstueckSchweigepflicht: null,
            druckstueckVertragsinformation: null,
            druckstueckVorschlag: {
                vps: [{
                    anrede: oBO.vp.anrede,
                    name: "TestVP",
                    vorname: "Peter",
                    geburtsdatum: geburtsdatum,
                    id: "1",
                    vn: false,
                    versicherungsbeginn: versicherungsbeginn,
                    beruf: oBO.vp.beruf,
                    taetigkeitsstatus: taetigkeitsstatus,
                    versorgerBeruf: null,
                    versorgerTaetigkeitsstatus: null,
                    versicherungsstatus: "freiwillig gesetzlich versichert",
                    gkv: gkv,
                    versicherungsnummer: oBO.vp.versicherungsnummer,
                    staatsangehoerigkeit: staatsangehoerigkeit
                }],
                tarife: [this.data.vpTarife],
                fragen: [oBO.vp.fragen],
                antragsfragen: [oBO.vp.antragsfragen],
            }
        },
        serviceUrl: ProduktTr.getDruckstueckVorschlagUrl()
    };
};

GGProdukt.prototype.getDruckstueckBeiblattAnzeigepflichtBOandUrl = function(oBO) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "ANZEIGEPFLICHT_BEIBLATT",
            druckstueckTarif: null,
            druckstueckBeratung: null,
            druckstueckDatenschutz: null,
            druckstueckAnzeigepflicht: {
                risikotraeger: this.data.vpTarife[0].risikotraeger
            }
        },
        serviceUrl: ProduktTr.getDruckstueckBeiblattAnzeigepflichtUrl()
    };

};

GGProdukt.prototype.getDruckstueckVvgBOandUrl = function(oBO) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "VVG_SCHWEIGEPFLICHT",
            druckstueckTarif: null,
            druckstueckBeratung: null,
            druckstueckDatenschutz: null,
            druckstueckAnzeigepflicht: null,
            druckstueckSchweigepflicht: {
                risikotraeger: this.data.vpTarife[0].risikotraeger
            }
        },
        serviceUrl: ProduktTr.getDruckstueckVvgUrl()
    };
};

GGProdukt.prototype.getDruckstueckVertragsinformationBOandUrl = function(oBO) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "VERTRAGSINFORMATIONEN",
            druckstueckVertragsinformation: {
                vn: {
                    anrede: oBO.vn.anrede,
                    name: oBO.vn.name,
                    vorname: oBO.vn.vorname,
                    geburtsdatum: oBO.vn.geburtsdatum,
                    titel: oBO.vn.titel,
                    strasse: oBO.vn.strasse,
                    hausNr: oBO.vn.hausnr,
                    plz: oBO.vn.plz,
                    ort: oBO.vn.ort,
                    telefon: oBO.vn.telefon,
                    email: oBO.vn.mail,
                    sepamandat: oBO.vn.zahlungsdaten.ksmSelected,
                    natioalitaet: null,
                    beruf: null,
                    taetigkeitsstatus: null,
                    bankdaten: {
                        kontotyp: null,
                        vorname: null,
                        name: null,
                        kontoNr: null,
                        blz: null,
                        bankname: null,
                        iban: null,
                        bic: null,
                        zahlweise: null,
                        kenntnisSM: false
                    }
                },
                vps: [{
                    anrede: oBO.vp.anrede,
                    name: oBO.vp.name,
                    vorname: oBO.vp.vorname,
                    geburtsdatum: oBO.vp.geburtsdatum,
                    id: "1",
                    vn: oBO.vp.isVn,
                    versicherungsbeginn: oBO.vp.versicherungsbeginn,
                    beruf: oBO.vp.beruf,
                    taetigkeitsstatus: oBO.vp.taetigkeitsstatus,
                    versorgerBeruf: null,
                    versorgerTaetigkeitsstatus: null,
                    versicherungsstatus: oBO.vp.versicherungsstatus,
                    gkv: oBO.vp.aktuellerVersicherungsschutz,
                    versicherungsnummer: oBO.vp.versicherungsnummer,
                    staatsangehoerigkeit: oBO.vp.staatsangehoerigkeit
                }],
                tarife: [oBO.vpTarife],
                fragen: null,
                antragsfragen: null,
                iddData: oBO.iddDetails.data,
                visitenkartenURL: oBO.iddDetails.visitenkartenURL
            }
        },
        serviceUrl: ProduktTr.getDruckstueckVertragsinformationUrl()
    };
};

GGProdukt.prototype.getDruckstueckDatenschutzBOandUrl = function(oBO) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "DATENSCHUTZ",
            druckstueckTarif: null,
            druckstueckBeratung: null,
            druckstueckDatenschutz: {
                berechneSelbst: true,
                vpGKV: oBO.vp.aktuellerVersicherungsschutz,
                vpTarife: oBO.vpTarife,
                binary: true,
                berechneKind: false
            },
            druckstueckAnzeigepflicht: null,
            druckstueckSchweigepflicht: null
        },
        serviceUrl: ProduktTr.getDruckstueckDatenschutzUrl()
    };
};

function buildFinalBO(bAbschluss, oBO) {
    var vn = {
        "anrede": oBO.vn.anrede,
        "name": oBO.vn.name,
        "vorname": oBO.vn.vorname,
        "geburtsdatum": oBO.vn.geburtsdatum,
        "titel": oBO.vn.titel,
        "strasse": oBO.vn.strasse,
        "hausNr": oBO.vn.hausnr,
        "plz": oBO.vn.plz,
        "ort": oBO.vn.ort,
        "telefon": oBO.vn.telefon,
        "email": oBO.vn.mail,
        "sepamandat": oBO.vn.zahlungsdaten.ksmSelected,
        "natioalitaet": null,
        "beruf": null,
        "taetigkeitsstatus": null,
        "bankdaten": {
            "kontotyp": oBO.vn.zahlungsdaten.iban.selected ? "IBAN" : "KTO",
            "vorname": oBO.vn.vorname,
            "name": oBO.vn.name,
            "kontoNr": oBO.vn.zahlungsdaten.kto.selected ? oBO.vn.zahlungsdaten.kto.no : null,
            "blz": oBO.vn.zahlungsdaten.kto.selected ? oBO.vn.zahlungsdaten.kto.blz : null,
            "bankname": oBO.vn.zahlungsdaten.bank,
            "iban": oBO.vn.zahlungsdaten.iban.selected ? oBO.vn.zahlungsdaten.iban.no : null,
            "bic": oBO.vn.zahlungsdaten.iban.selected ? oBO.vn.zahlungsdaten.iban.bic : null,
            "zahlweise": oBO.vn.zahlungsdaten.zahlungsweise,
            "kenntnisSM": oBO.vn.zahlungsdaten.ksmSelected
        }
    };

    var betreuer = oBO.betreuer;
    if (betreuer===null)
        betreuer = this.schritt3BO.einstellung.betreuer;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    var req = {
            "mandant": Config.mandant,
            "aid": Config.aid,
            "context": context,
            "abschlussart": bAbschluss ? "VOLLZUG" : "VORBEREITUNG",
            "abschlussdaten": {
                "berechneSelbst": true,
                "berechneKind": false,
                "telefonBenachrichtigung": true,
                "telefonPrivat": oBO.vn.telefon,
                "telefonMobil": null,
                "mailBenachrichtigung": false,
                "mail": oBO.vn.mail,
                "einwilligungserklaerung": bAbschluss ? oBO.vvg.accepted : true,
                "vvg": true,
                "datenschutzerklaerung": bAbschluss ? oBO.datenschutzerklaerung.accepted : false,
                "beratungsverzicht": oBO.noBeratung.accepted,
                "papierverzicht": oBO.noPapierunterlagen.accepted,
                "betreuer": betreuer,
                "iddData": oBO.iddDetails.data,
                "vn": vn,
                "vps": [{
                    "anrede": oBO.vp.anrede,
                    "name": oBO.vp.name,
                    "vorname": oBO.vp.vorname,
                    "geburtsdatum": oBO.vp.geburtsdatum,
                    "id": "1",
                    "vn": oBO.vp.isVn,
                    "versicherungsbeginn": oBO.vp.versicherungsbeginn,
                    "beruf": oBO.vp.beruf,
                    "taetigkeitsstatus": oBO.vp.taetigkeitsstatus,
                    "versorgerBeruf": null,
                    "versorgerTaetigkeitsstatus": null,
                    "versicherungsstatus": oBO.vp.versicherungsstatus,
                    "gkv": oBO.vp.aktuellerVersicherungsschutz,
                    "versicherungsnummer": oBO.vp.versicherungsnummer,
                    "staatsangehoerigkeit": oBO.vp.staatsangehoerigkeit
                }],
                "tarife": [oBO.vpTarife],
                "tffragen": [oBO.vp.tfFragen],
                "antragsfragen": [oBO.vp.fragen],
            },
            "vollzug": null
    };

    if (bAbschluss) {
        req.vollzug = {
            bildcode: oBO.capt.bildCode,
            token: oBO.capt.token
        }
    }

    return req;
}

GGProdukt.prototype.getCaptcha = function(oBO) {
    return ProduktTr.getCaptcha(buildFinalBO.call(this, false, oBO));
};

GGProdukt.prototype.abschluss = function(oBO) {
    return ProduktTr.abschluss(buildFinalBO.call(this, true, oBO));
};

module.exports = GGProdukt;


/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = {
    SCHRITT1: "SCHRITT1",
    SCHRITT2: "SCHRITT2",
    SCHRITT3: "SCHRITT3",
    SCHRITT4: "SCHRITT4",
    SCHRITT5: "SCHRITT5",
    SCHRITT6: "SCHRITT6",
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var Schritt1Renderer = __webpack_require__(47);
var Schritt1RendererIF6 = __webpack_require__(49);
var Schritt2Renderer = __webpack_require__(51);
var Schritt2RendererIF6 = __webpack_require__(53);
var Schritt3Renderer = __webpack_require__(55);
var Schritt3RendererIF6 = __webpack_require__(57);
var Schritt4Renderer = __webpack_require__(59);
var Schritt4RendererIF6 = __webpack_require__(61);
var Schritt5Renderer = __webpack_require__(63);
var Schritt5RendererIF6 = __webpack_require__(65);
var Schritt6Renderer = __webpack_require__(67);
var Schritt6RendererIF6 = __webpack_require__(69);


module.exports = {

    getSchritt1RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt1Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt1RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt2RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt2Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt2RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt3RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt3Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt3RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt4RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt4Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt4RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt5RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt5Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt5RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt6RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt6Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt6RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    }
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Util = __webpack_require__(2);
var FrageHelper = __webpack_require__(7);

var Schritt1Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt1Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt1Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(48);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt1Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;
    this.fnPruefen = [];
    var contentCreated;
    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        var fnTemplate = _.template(schrittTemplate.mainTemplate);
        var content = $(fnTemplate({produkt : "GesundheitGLOBAL", produktDesc : "", hotline: "(0681) 8 44-69 00", oeffnungszeit: "Montag - Freitag 9:00 - 19:00 Uhr"}));

        var geburtsdatumRow;

        if (!SchrittRendererHelper.itemWithPseudoIdExists("kvo_content", rootElement)) {
            content.appendTo(rootElement);
            contentCreated = true;

            geburtsdatumRow = SchrittRendererHelper.getItemByPseudoId("geburtsdatumRow", rootElement);
            var geburtsdatumInput = geburtsdatumRow.find("input");
            geburtsdatumInput.val(this.getBO().vp.geburtsdatum || "");
            //geburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
            geburtsdatumInput.inputmask({alias: "datum"});
            var inputHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().vp.geburtsdatum = res;
                } else {
                    that.getBO().vp.geburtsdatum = unmaskedValue;
                }
            };
            $(geburtsdatumInput).keyup(inputHandler);
            $(geburtsdatumInput).blur(inputHandler);
        } else {
            content = SchrittRendererHelper.getItemByPseudoId("kvo_content", rootElement);
            geburtsdatumRow = SchrittRendererHelper.getItemByPseudoId("geburtsdatumRow", rootElement);
            geburtsdatumRow.find("input").val(this.getBO().vp.geburtsdatum || "");
        }

        if (validationResult && validationResult.state === "OK" && (!validationResult.ergebnisTarife || validationResult.ergebnisTarife.length === 0)) {
            validationResult.state = "NOK";

            validationResult.validationErrors = [{fieldName: "vp.tarif", message: "Zu den angemachten Angaben konnte keine Produktempfehlung ermittelt werden. Bitte überprüfen Sie Ihre Angaben."}];
        }

        $(".commonError").remove();
        if (validationResult && validationResult.state === "NOK") {
            var commonErrors = validationResult.validationErrors.filter(function(validationError) {
                return validationError.fieldName.indexOf("vp.tarif") === 0;
            });

            infoBox = content.find(".infobox").first();

            _.chain(commonErrors).reverse().forEach(function(commonError) {
                var fnLabeledContentWithBigAntwortRowTemlate = _.template(schrittTemplate.labeledContentWithBigAntwortRowTemlate);

                var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                var error = $(fnErrorText({error: commonError.message}));

                var errorRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Es liegen folgende Fehler vor:", content: error.prop("outerHTML")}));
                errorRow.addClass("commonError");
                errorRow.prependTo(infoBox);
            });
        }

        var validationErrorForGeburtsdatum = SchrittRendererHelper.getError(this.validationResult, "vp.geburtsdatum");
        geburtsdatumRow.find(".error").remove();
        var fnAddGeburtsdatumError = function(errorText) {
            var geburtstagLabel = SchrittRendererHelper.getItemByPseudoId("geburtstagLabel", geburtsdatumRow);
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorGeburtstag = $(fnErrorText({error: errorText}));

            errorGeburtstag.insertAfter(geburtstagLabel);
        }

        if (validationErrorForGeburtsdatum) {
            fnAddGeburtsdatumError(validationErrorForGeburtsdatum);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

        var validationGeburtsdatumObject = {
            fnErrorRemoval: function() {
                geburtsdatumRow.find(".error").remove();
            },
            fnValidation: function() {
                var deferred = $.Deferred();
                var promise = deferred.promise();

                var ok = false;
                if (that.getBO().vp.geburtsdatum) {
                    var date = Util.parseAsDateObject(that.getBO().vp.geburtsdatum);

                    if (date) {
                        if (Util.isInPast(date)) {
                            var alter = Util.calculateAlter(date);

                            if (alter < 120) {
                                ok = true;
                            }
                        }
                    }
                }
                deferred.resolve(ok);

                return promise;
            },
            fnAddError: function() {
                fnAddGeburtsdatumError("Die Angabe ist ungültig.");
            }
        };
        this.fnPruefen.push(validationGeburtsdatumObject);

        var lastRow = geburtsdatumRow;
        if (this.getBO().vp.fragen) {
            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            trennerLeistungen.nextAll().remove();
            var leistungen = Util.getProp(this.getBO(), ["einstellung", "modul", "leistungen"]);
            if (leistungen) {
                leistungen.forEach(function(leistung) {
                    $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
                });
            }

            function fnAddFrageValidator(oFrage, validator) {
                that.fnPruefen.push(validator);
            }

            lastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, true, fnAddFrageValidator, null, this.getBO().vp.fragen, false, false, lastRow);
        }

        if (contentCreated) {
            content.find("a.button").first().click(function(e) {
                that._berechnen();
            });
        }

        var produktTable = rootElement.find(".producttable");
        produktTable.remove();

        if (validationResult && validationResult.state === "OK" && validationResult.ergebnisTarife) {
            var uebersichtTemplate = _.template(schrittTemplate.uebersichtTemplate);
            var uebersicht = $(uebersichtTemplate());

            var ggKompaktTkz;
            var ggKompaktVisible = validationResult.ergebnisTarife.some(function(ergebnisTarif) {
                var visible = ergebnisTarif.beschreibung.indexOf("GesundheitGLOBAL Kompakt") >= 0;
                ggKompaktTkz = ergebnisTarif.tkz;

                if (visible) {
                    SchrittRendererHelper.getItemByPseudoId("name_kompakt", uebersicht).text(ergebnisTarif.beschreibung);
                    SchrittRendererHelper.getItemByPseudoId("beitrag_kompakt", uebersicht).text(ergebnisTarif.beitrag);
                }

                return visible;
            });
            var ggOptimalTkz;
            var ggOptimalVisible = validationResult.ergebnisTarife.some(function(ergebnisTarif) {
                var visible = ergebnisTarif.beschreibung.indexOf("GesundheitGLOBAL Optimal") >= 0;
                ggOptimalTkz = ergebnisTarif.tkz;

                if (visible) {
                    SchrittRendererHelper.getItemByPseudoId("name_optimal", uebersicht).text(ergebnisTarif.beschreibung);
                    SchrittRendererHelper.getItemByPseudoId("beitrag_optimal", uebersicht).text(ergebnisTarif.beitrag);
                }

                return visible;
            });
            var ggPremiumTkz;
            var ggPremiumVisible = validationResult.ergebnisTarife.some(function(ergebnisTarif) {
                var visible = ergebnisTarif.beschreibung.indexOf("GesundheitGLOBAL Premium") >= 0;
                ggPremiumTkz = ergebnisTarif.tkz;

                if (visible) {
                    SchrittRendererHelper.getItemByPseudoId("name_premium", uebersicht).text(ergebnisTarif.beschreibung);
                    SchrittRendererHelper.getItemByPseudoId("beitrag_premium", uebersicht).text(ergebnisTarif.beitrag);
                }

                return visible;
            });

            if (!ggPremiumVisible) {
                uebersicht.find('.producttable td:nth-child(4)').remove();
                uebersicht.find('.producttable ol.orbit-bullets li:nth-child(3)').remove();
            }
            if (!ggOptimalVisible) {
                uebersicht.find('.producttable td:nth-child(3)').remove();
                uebersicht.find('.producttable ol.orbit-bullets li:nth-child(2)').remove();
            }
            if (!ggKompaktVisible) {
                uebersicht.find('.producttable td:nth-child(2)').remove();
                uebersicht.find('.producttable ol.orbit-bullets li:nth-child(1)').remove();
            }
            var numColumnsVisible = 0;
            [ggPremiumVisible, ggOptimalVisible, ggKompaktVisible].forEach(function(visible) {
                if (visible) {
                    numColumnsVisible++;
                }
            });
            if (numColumnsVisible === 1) {
                uebersicht.find('.producttable ol.orbit-bullets').remove();
            }
            //uebersicht.appendTo(rootElement);
            //uebersicht.appendTo(rootElement.find(".content-container"));
            uebersicht.prependTo(rootElement.find("div.ssl"));


            var buildWeiterBedarfFunction = (function(tkz) {
                return function() {
                    that._berechnen(true).then(function() {
                        if (that.validationResult && that.validationResult.state === "OK" && that.validationResult.ergebnisTarife) {
                            if (that.validationResult.ergebnisTarife.some(function(ergebnisTarif) {
                                return ergebnisTarif.tkz === tkz;
                            })) {
                                that._weiterBedarf(that.getBO(), tkz);
                            }
                        }

                    });
                }
            });
            setTimeout(function() {
                var producttable = window.$('.producttable');
                if (producttable.length > 0) {
                    producttable.productTable({producttable_columns_visible: numColumnsVisible});
                }
            }, 200);


            uebersicht.find("a.GesundheitGLOBALKOMPAKT").click(buildWeiterBedarfFunction(ggKompaktTkz));
            uebersicht.find("a.GesundheitGLOBALOPTIMAL").click(buildWeiterBedarfFunction(ggOptimalTkz));
            uebersicht.find("a.GesundheitGLOBALPREMIUM").click(buildWeiterBedarfFunction(ggPremiumTkz));
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(rootElement);
        }

   		window.jQuery(document).foundation();

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt1Renderer.prototype._berechnen = function(bNoRendering) {
    var deferred = $.Deferred();

    var promises = [];

    this.fnPruefen.forEach(function(oFnWithDeferred) {
        oFnWithDeferred.fnErrorRemoval();

        var promise = oFnWithDeferred.fnValidation();
        promises.push(promise);

        $.when(promise).then(function(result) {
            if (!result) {
                oFnWithDeferred.fnAddError();
            }
        });
    });

    $.when.apply($, promises).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
            this.oProdukt.berechneBedarf(this.getBO(), bNoRendering).then(function() {
                deferred.resolve();
            }).fail(function() {
                deferred.reject();
            });
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
            deferred.reject();
        }
    }.bind(this));

    return deferred.promise();
};

Schritt1Renderer.prototype._weiterBedarf = function(bo, tkz) {
    this.oProdukt.weiterBedarf(bo, tkz);
};

module.exports = Schritt1Renderer;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate : ' \
                        <a style="color: white" id="top_anchor" href="#"></a> \
                        <div class="off-canvas-wrap"> \
                            <div class="inner-wrap"> \
                                <header> \
                                <div class="sticky-wrapper" style=""> \
                                    <div class="contain-to-grid sticky"> \
                                        <section class="navigation"> \
                                            <nav> \
                                            <div class="clearfix row"> \
                                                <div class="large-12 columns hide-general"> \
                                                    <ul class="left"> \
                                                        <li> \
                                                        <h4>Tarifrechner <%= produkt %></h4> \
                                                        </li> \
                                                    </ul> \
                                                </div> \
                                            </div> \
                                            </nav> \
                                        </section> \
                                    </div> \
                                </div> \
                                </header> \
                                <main> \
                                <div class="row"> \
                                    <div class="large-12 small-12 columns content-container"> \
                                        <div class="row"> \
                                            <div class="large-12 columns"> \
                                                <div class="rowX"> \
                                                            <ol class="progress-indicator"> \
                                                                  <li class="is-current" data-step="1"> \
                                                                        <span>Beitrag berechnen</span> \
                                                                  </li> \
                                                                  <li class="" data-step="2"> \
                                                                        <span></span> \
                                                                  </li> \
                                                                  <li class="" data-step="3"> \
                                                                        <span></span> \
                                                                  </li> \
                                                                  <li class="" data-step="4"> \
                                                                        <span></span> \
                                                                  </li> \
                                                                  <li class="is-last" data-step="5"> \
                                                                        <span>Online beantragen</span> \
                                                                  </li> \
                                                            </ol> \
                                                      </div> \
                                                \
                                                </div> \
                                                <!-- Content --> \
                                                <!-- linker Contentbereich --> \
                                               <div class="large-8 medium-7 columns kvo-content" kv_ref="kvo-content"> \
                                                 <!-- Pflichtfelder, SSL --> \
                                                 <div class="kvo-content-1" kv_ref="kvo-content-1"> \
                                                        <h1>Beitrag für Langzeit-Auslandskrankenversicherung berechnen</h1> \
                                                        <div class="kvo-content" kv_ref="kvo_content"> \
                                                        <div class="row"> \
                                                            <div class="medium-12 columns  infobox"> \
                                                            <div class="row" kv_ref="geburtsdatumRow"> \
                                                                <div class="medium-6 columns" data-abide> \
                                                                    <label kv_ref="geburtstagLabel">Geburtsdatum *<span data-tooltip="" class="has-tip" title="Ihr persönlicher Beitrag richtet sich neben dem Reiseland auch nach Ihrem Alter. Bitte geben Sie Ihr Geburtsdatum bzw. das Geburtsdatum der zu versichernden Person im Format tt.mm.jjjj ein.">&nbsp;<a class="info">i</a></span></label> \
                                                                    <div class="row"> \
                                                                        <div class="large-12 medium-12 small-12 columns"> \
                                                                        <input placeholder="TT.MM.JJJJ" class="intType autoTab" value="" maxlength="10" name="p_geb_datum" type="text" style=""> \
                                                                        </div> \
                                                                    </div> \
                                                                </div> \
                                                            </div> \
                                                            <div class="row"> \
                                                                <div class="medium-5 large-4 columns right"> \
                                                                <a class="call-to-action button expand" href="javascript:void(0);">Beitrag berechnen</a> \
                                                                </div> \
                                                            </div> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <!-- rechte Mehrwertbox --> \
                                            <div class="large-4 medium-5 columns"> \
                                                <div class="row "> \
                                                    <!-- Ausgabe eingegebener Daten --> \
                                                    <div class="medium-11 small-12 summarybox right"> \
                                                        <div class="row" kv_ref="absicherungContent"> \
                                                            <div class="medium-12 columns"> \
                                                                <h2>Ihre gewünschte Absicherung</h2> \
                                                                <h1><%= produkt %></h1> \
                                                                <p><%= produktDesc %></p> \
                                                                <br kv_ref="trenner_leistungen" /> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
    \
                                        <div class="row ssl"> \
                                            <div class="columns medium-12 "> \
                                                <p>&nbsp;</p> \
                                                <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                                <br> \
                                                <span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                            </div> \
                                        </div> \
                                        </div>\
                                    </div> \
                                </div> \
    \
                              </div> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>                                                ',

    labeledContentWithBigAntwortRowTemlate: ' \
                                    <div class="row"> \
                                        <div class="medium-9 columns"> \
                                            <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label><%= label %></label> \
                                            </div> \
                                            </div> \
                                            <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <%= content %>  \
                                            </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    ',

    labeledContentWithMediumColumnsRowTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label><%= label %><%= required %></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <%= content %> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    labeledContentNumberedWithMediumColumnsRowTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <%= content %> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    labeledContentNumberedAndIdWithMediumColumnsRowTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <small style="color: black">[<%= id %>]</small> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <%= content %> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    emptyContent: '<div style="margin-bottom: 5px">',

    dateInputTemplate : '<input placeholder="TT.MM.JJJJ" maxlength="10" type="text" style="">',

    radioInputWith2ItemsTemplate: '\
                        <div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label><%= label %><%= required %></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <div class="antwortGross frageAntwort" data-abide> \
                                            <input value="<%= valueOne %>" type="radio" id="<%= idOne %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idOne %>" class=""><%= valueOne %></label> \
                                            &nbsp;&nbsp; \
                                            <input value="<%= valueTwo %>" type="radio" id="<%= idTwo %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idTwo %>" class=""><%= valueTwo %></label> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    radioInputWith2ItemsNumberedTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <div class="antwortGross frageAntwort" data-abide> \
                                            <input value="<%= valueOne %>" type="radio" id="<%= idOne %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idOne %>" class=""><%= valueOne %></label> \
                                            &nbsp;&nbsp; \
                                            <input value="<%= valueTwo %>" type="radio" id="<%= idTwo %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idTwo %>" class=""><%= valueTwo %></label> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    radioInputWith2ItemsNumberedWithIdTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <small style="color: black">[<%= id %>]</small> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <div class="antwortGross frageAntwort" data-abide> \
                                            <input value="<%= valueOne %>" type="radio" id="<%= idOne %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idOne %>" class=""><%= valueOne %></label> \
                                            &nbsp;&nbsp; \
                                            <input value="<%= valueTwo %>" type="radio" id="<%= idTwo %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idTwo %>" class=""><%= valueTwo %></label> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    uebersichtTemplate: ' \
                                <div class="oevd-widget-producttable producttable"> \
                                <h1 class="text-grey">Ihre Produktempfehlung</h1> \
                                <div class="highlight producttable-swipe-note hide" style="display: none;"> \
                                    <div class="table-row hide-for-large-up"> \
                                        <div class="table-cell-fixed-width"><i class="fo fo-table-pagination"></i></div> \
                                        <div class="table-cell-max-width">Um durch die Tabelle zu blättern, streichen Sie mit dem Finger nach links.</div> \
                                    </div> \
                                </div> \
                                <table class="producttable" id="producttable4A89" style="display: table;"> \
                                    <thead> \
                                        <tr> \
                                            <td class="transparent"></td> \
                                            <td class="transparent" colspan="3"> \
                                            <div> \
                                                <div class="row hide-for-medium-up"> \
                                                    <div class="large-12 medium-12 small-12 columns text-center"> \
                                                        <ol class="orbit-bullets"> \
                                                        <li data-position="0" class="active" style="display: inline-block;"></li> \
                                                        <li data-position="1" class="" style="display: inline-block;"></li> \
                                                        <li data-position="2" class="" style="display: inline-block;"></li> \
                                                        </ol> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            </td> \
                                        </tr> \
                                        <tr class="hide"> \
                                            <td> \
                                            </td> \
                                            <td class="" style="display: table-cell;"> \
                                            <span data-service-parameter="berechnung.GesundheitGLOBALKOMPAKT.visible" class="">true</span> \
                                            </td> \
                                            <td class="" style="display: table-cell;"> \
                                            <span data-service-parameter="berechnung.GesundheitGLOBALOPTIMAL.visible" class="">true</span> \
                                            </td> \
                                            <td class="" style="display: table-cell;"> \
                                            <span data-service-parameter="berechnung.GesundheitGLOBALPREMIUM.visible" class="">true</span> \
                                            </td> \
                                        </tr> \
                                        <tr> \
                                            <td class="transparent"></td> \
                                            <td class="transparent" style="display: table-cell;"></td> \
                                            <td class="transparent" style="display: table-cell;"></td> \
                                            <td class="transparent" style="display: table-cell;"></td> \
                                        </tr> \
                                        <tr> \
                                            <td class="transparent" style="width: 159px;"> \
                                            <div> \
                                                <img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"> \
                                                <span>Ja</span> \
                                            </div> \
                                            <div> \
                                                <img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/no_small.png"> \
                                                <span>Nein</span> \
                                            </div> \
                                            </td> \
                                            <td class="" style="display: table-cell; width: 159px;" kv_ref="name_kompakt">GesundheitGLOBAL<br>Kompakt</td> \
                                            <td class="" style="display: table-cell; width: 159px;" kv_ref="name_optimal">GesundheitGLOBAL<br>Optimal</td> \
                                            <td class="" style="display: table-cell; width: 159px;" kv_ref="name_premium">GesundheitGLOBAL<br>Premium</td> \
                                        </tr> \
                                    </thead> \
                                    <tbody> \
                                        <tr class=""> \
                                            <td class="">Monat­licher Gesamt­beitrag</td> \
                                            <td class="" style="display: table-cell;"><span class="large-spinner" data-service-parameter="berechnung.GesundheitGLOBALKOMPAKT.preis!-,--" kv_ref="beitrag_kompakt"></span>\u20AC</td> \
                                            <td class="" style="display: table-cell;"><span class="large-spinner" data-service-parameter="berechnung.GesundheitGLOBALOPTIMAL.preis!-,--" kv_ref="beitrag_optimal"></span>\u20AC</td> \
                                            <td class="" style="display: table-cell;"><span class="large-spinner" data-service-parameter="berechnung.GesundheitGLOBALPREMIUM.preis!-,--" kv_ref="beitrag_premium"></span>\u20AC</td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="tip"> \
                                            <div class="left"> \
                                                <div>Versicherungsdauer</div> \
                                            </div> \
                                            <div class="right"> \
                                                <a title="Info" data-text="Die Reisezeit muss mindestens zwei Monate betragen." class="info">i</a> \
                                            </div> \
                                            </td> \
                                            <td class="" style="display: table-cell;">bis zu 2 Jahre</td> \
                                            <td class="" style="display: table-cell;">bis zu 5 Jahre</td> \
                                            <td class="" style="display: table-cell;">bis zu 5 Jahre</td> \
                                        </tr> \
\
                                        <tr class=""> \
                                            <td class=""><b>Ambulante Tarifleistungen</b></td> \
                                            <td class="" style="display: table-cell;"></td> \
                                            <td class="" style="display: table-cell;"></td> \
                                            <td class="" style="display: table-cell;"></td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="tip"> \
                                            <div class="left"> \
                                                <div>Beratung und Behandlung beim Arzt oder Facharzt</div> \
                                            </div> \
                                            </td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="tip"> \
                                            <div class="left"> \
                                                <div>Medikamente</div> \
                                            </div> \
                                            <div class="right"> \
                                                <a title="Info" data-text="Die Medikamente (inklusive Verbandmittel) muüssen ärztlich verordnet sein." class="info">i</a> \
                                            </div> \
                                        </td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="tip"> \
                                            <div class="left"> \
                                                <div>Heilmittel</div> \
                                            </div> \
                                            <div class="right"> \
                                                <a title="Info" data-text="Die Heilmittel müssen ärztlich verordnet sein. Der angegebene Betrag gilt pro Kalenderjahr." class="info">i</a> \
                                            </div> \
                                        </td> \
                                            <td class="" style="display: table-cell;">bis 250 \u20AC</td> \
                                            <td class="" style="display: table-cell;">bis 250 \u20AC</td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="tip"> \
                                            <div class="left"> \
                                                <div>Hilfsmittel</div> \
                                            </div> \
                                            <div class="right"> \
                                                <a title="Info" data-text="Sehhilfen wie Brillen oder Kontaktlinsen sind vom Versicherungsschutz ausgeschlossen. Der angegebene Betrag gilt pro Versicherungsfall." class="info">i</a> \
                                            </div> \
                                        </td> \
                                            <td class="" style="display: table-cell;">unfallbedingt bis 150 \u20AC</td> \
                                            <td class="" style="display: table-cell;">unfallbedingt bis 150 \u20AC</td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="tip"> \
                                            <div class="left"> \
                                                <div>Brillen und Kontaktlinsen</div> \
                                            </div> \
                                            <div class="right"> \
                                            </div> \
                                        </td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/no_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/no_small.png"></td> \
                                            <td class="" style="display: table-cell;">bis 150 &euro;</td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="tip"> \
                                                <div class="left"> \
                                                <div>Heilpraktiker, Osteopath, Chiropraktiker</div> \
                                                </div> \
                                                <div class="right"> \
                                                </div> \
                                            </td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/no_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/no_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                        </tr> \
\
                                        <tr class=""> \
                                            <td class=""><b>Stationäre Tarifleistungen</b></td> \
                                            <td class="" style="display: table-cell;"></td> \
                                            <td class="" style="display: table-cell;"></td> \
                                            <td class="" style="display: table-cell;"></td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="">Unterbringung, Verpflegung und Heilmittel</td> \
                                            <td class="" style="display: table-cell;">unaufschiebbare Operationen und Operationsnebenkosten</td> \
                                            <td class="" style="display: table-cell;">unaufschiebbare Operationen und Operationsnebenkosten</td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                        </tr> \
\
\
                                        <tr class=""> \
                                            <td class=""><b>Zahnärztliche Tarifleistungen</b></td> \
                                            <td class="" style="display: table-cell;"></td> \
                                            <td class="" style="display: table-cell;"></td> \
                                            <td class="" style="display: table-cell;"></td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="tip"> \
                                            <div class="left"> \
                                                <div>Schmerzstillende Zahnbehandlung</div> \
                                            </div> \
                                            <div class="right"> \
                                                <a title="Info" data-text="Der angegebene Betrag gilt pro Kalenderjahr." class="info">i</a> \
                                            </div> \
                                        </td> \
                                            <td class="" style="display: table-cell;">bis 300 \u20AC</td> \
                                            </td><td class="" style="display: table-cell;">bis 500 \u20AC</td> \
                                            </td><td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                        </tr> \
                                            <tr class=""> \
                                            <td class="">Zahnersatz</td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/no_small.png"></td> \
                                            <td class="" style="display: table-cell;">unfallbedingt 80% bis 2.000 \u20AC im Kalenderjahr</td> \
                                            <td class="" style="display: table-cell;">75% bis 3.000 \u20AC in den ersten drei Kalenderjahren, danach keine Begrenzung</td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="">Zahnbehandlung und Vorsorge</td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/no_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/no_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                        </tr> \
\
                                        <tr class=""> \
                                            <td class="tip"> \
                                            <div class="left"> \
                                                <div><b>Rücktransport nach Deutschland</b></div> \
                                            </div> \
                                            <div class="right"> \
                                                <a title="Info" data-text="Der Rücktransport muss medizinisch sinnvoll sein." class="info">i</a> \
                                            </div> \
                                        </td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                        </tr> \
\
                                        <tr class=""> \
                                            <td class="tip"> \
                                            <div class="left"> \
                                                <div><b>Tarifleistungen in Deutschland</b></div> \
                                            </div> \
                                            <div class="right"> \
                                                <a title="Info" data-text="Sollten Sie Ihre Reise abbrechen und früher als geplant zurückkehren, gilt Ihr Reiseschutz bis zu 6 Wochen pro Unterbrechung." class="info">i</a> \
                                            </div> \
                                        </td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/no_small.png"></td> \
                                            <td class="" style="display: table-cell;">6 Wochen im Kalenderjahr</td> \
                                            <td class="" style="display: table-cell;">6 Wochen pro Reiseunterbrechung</td> \
                                        </tr> \
                                        <tr class=""> \
                                            <td class="tip"> \
                                                <div class="left"> \
                                                <div><b>24-Stunden-Notfall-Service</b></div> \
                                                </div> \
                                                <div class="right"> \
                                                <a title="Info" data-text="Wir unterstützen Sie im Ausland, indem wir Ihnen beispielsweise Ärzte und Krankenhäuser vor Ort nennen oder Ihnen medizinische Auskünfte und Ratschläge geben." class="info">i</a> \
                                                </div> \
                                            </td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                            <td class="" style="display: table-cell;"><img src="' + Config.mediaUrl+ 'form/fod_style/' + Config.style + '/resources/img/icons/check_small.png"></td> \
                                        </tr> \
                                        <tr> \
                                            <td class="transparent"></td> \
                                            <td class="transparent" style="display: table-cell;"> \
                                            <p> \
                                                <a href="javascript:void(0);" class="button call-to-action GesundheitGLOBALKOMPAKT" target="_self" title="Jetzt online abschließen">Jetzt online abschließen</a> \
                                            </p> \
                                            </td> \
                                            <td class="transparent" style="display: table-cell;"> \
                                            <p> \
                                                <a href="javascript:void(0);" class="button call-to-action GesundheitGLOBALOPTIMAL" target="_self" title="Jetzt online abschließen">Jetzt online abschließen</a> \
                                            </p> \
                                            </td> \
                                            <td class="transparent" style="display: table-cell;"> \
                                            <p> \
                                                <a href="javascript:void(0);" class="button call-to-action GesundheitGLOBALPREMIUM" target="_self" title="Jetzt online abschließen">Jetzt online abschließen</a> \
                                            </p> \
                                            </td> \
                                        </tr> \
                                    </tbody> \
                                    <tfoot> \
                                        <tr class="hide-for-medium-up"> \
                                            <td></td> \
                                            <td colspan="3"> \
                                            <div> \
                                                <div class="row hide"> \
                                                </div> \
                                                <div class="row hide-for-medium-up"> \
                                                    <div class="large-12 medium-12 small-12 columns text-center"> \
                                                        <ol class="orbit-bullets"> \
                                                        <li data-position="0" class="active" style="display: inline-block;"></li> \
                                                        <li data-position="1" class="" style="display: inline-block;"></li> \
                                                        <li data-position="2" class="" style="display: inline-block;"></li> \
                                                        </ol> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            </td> \
                                        </tr> \
                                    </tfoot> \
                                </table> \
                                <div class="product-table-tooltip hide"> \
                                    <div> \
                                        <p>headline</p> \
                                        <a class="close fo fo-close"></a> \
                                    </div> \
                                    <p>dummy text</p> \
                                </div> \
                                ',

    helpText: '<span data-tooltip="" class="has-tip" title="<%= helptext %>">&nbsp;<a class="info">i</a></span>',

    errorLabelTemplate: '<small style="display: block" class="error"><%- error %></small>'

};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Util = __webpack_require__(2);
var FrageHelper = __webpack_require__(9);

var Schritt1RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt1RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt1RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(50);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt1RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;
    this.fnPruefen = [];
    var contentCreated;
    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        var fnTemplate = _.template(schrittTemplate.mainTemplate);
        var content = $(fnTemplate({produkt : "GesundheitGLOBAL", produktDesc : "", hotline: "(0681) 8 44-69 00", oeffnungszeit: "Montag - Freitag 9:00 - 19:00 Uhr"}));

        var geburtsdatumRow;

        if (!SchrittRendererHelper.itemWithPseudoIdExists("kvo_content", rootElement)) {
            content.appendTo(rootElement);
            contentCreated = true;

            geburtsdatumRow = SchrittRendererHelper.getItemByPseudoId("geburtsdatumRow", rootElement);
            var geburtsdatumInput = geburtsdatumRow.find("input");
            geburtsdatumInput.val(this.getBO().vp.geburtsdatum || "");
            //geburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
            geburtsdatumInput.inputmask({alias: "datum"});
            var inputHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().vp.geburtsdatum = res;
                } else {
                    that.getBO().vp.geburtsdatum = unmaskedValue;
                }
            };
            $(geburtsdatumInput).keyup(inputHandler);
            $(geburtsdatumInput).blur(inputHandler);
        } else {
            content = SchrittRendererHelper.getItemByPseudoId("kvo_content", rootElement);
            geburtsdatumRow = SchrittRendererHelper.getItemByPseudoId("geburtsdatumRow", rootElement);
            geburtsdatumRow.find("input").val(this.getBO().vp.geburtsdatum || "");
        }

        if (validationResult && validationResult.state === "OK" && (!validationResult.ergebnisTarife || validationResult.ergebnisTarife.length === 0)) {
            validationResult.state = "NOK";

            validationResult.validationErrors = [{fieldName: "vp.tarif", message: "Zu den angemachten Angaben konnte keine Produktempfehlung ermittelt werden. Bitte überprüfen Sie Ihre Angaben."}];
        }

        $(".commonError").remove();
        if (validationResult && validationResult.state === "NOK") {
            var commonErrors = validationResult.validationErrors.filter(function(validationError) {
                return validationError.fieldName.indexOf("vp.tarif") === 0;
            });

            var infoBox = SchrittRendererHelper.getItemByPseudoId("infobox");

            _.chain(commonErrors).reverse().forEach(function(commonError) {
                var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                var error = $(fnErrorText({error: commonError.message}));

                error.appendTo(infoBox);
                error.addClass("commonError");
            });
            infoBox.show();
        } else {
            var infoBox = SchrittRendererHelper.getItemByPseudoId("infobox");
            infoBox.hide();
        }

        var validationErrorForGeburtsdatum = SchrittRendererHelper.getError(this.validationResult, "vp.geburtsdatum");
        geburtsdatumRow.find(".error").remove();
        var fnAddGeburtsdatumError = function(errorText) {
            var geburtstagLabel = SchrittRendererHelper.getItemByPseudoId("geburtstagLabel", geburtsdatumRow);
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorGeburtstag = $(fnErrorText({error: errorText}));

            errorGeburtstag.insertBefore(geburtstagLabel);
        }

        if (validationErrorForGeburtsdatum) {
            fnAddGeburtsdatumError(validationErrorForGeburtsdatum);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

        var validationGeburtsdatumObject = {
            fnErrorRemoval: function() {
                geburtsdatumRow.find(".error").remove();
            },
            fnValidation: function() {
                var deferred = $.Deferred();
                var promise = deferred.promise();

                var ok = false;
                if (that.getBO().vp.geburtsdatum) {
                    var date = Util.parseAsDateObject(that.getBO().vp.geburtsdatum);

                    if (date) {
                        if (Util.isInPast(date)) {
                            var alter = Util.calculateAlter(date);

                            if (alter < 120) {
                                ok = true;
                            }
                        }
                    }
                }
                deferred.resolve(ok);

                return promise;
            },
            fnAddError: function() {
                fnAddGeburtsdatumError("Die Angabe ist ungültig.");
            }
        };
        this.fnPruefen.push(validationGeburtsdatumObject);

        var lastRow = geburtsdatumRow;
        if (this.getBO().vp.fragen) {
            function fnAddFrageValidator(oFrage, validator) {
                that.fnPruefen.push(validator);
            }

            lastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, true, fnAddFrageValidator, null, this.getBO().vp.fragen, false, false, lastRow);
        }

        if (contentCreated) {
            content.find("a").first().click(function(e) {
                that._berechnen();
            });
        }

        var produktTable = rootElement.find(".producttable");
        produktTable.remove();

        if (validationResult && validationResult.state === "OK" && validationResult.ergebnisTarife) {
            var uebersichtTemplate = _.template(schrittTemplate.uebersichtTemplate);
            var uebersicht = $(uebersichtTemplate());

            var ggKompaktTkz;
            var ggKompaktVisible = validationResult.ergebnisTarife.some(function(ergebnisTarif) {
                var visible = ergebnisTarif.beschreibung.indexOf("GesundheitGLOBAL Kompakt") >= 0;
                ggKompaktTkz = ergebnisTarif.tkz;

                if (visible) {
                    SchrittRendererHelper.getItemByPseudoId("name_kompakt", uebersicht).text(ergebnisTarif.beschreibung);
                    SchrittRendererHelper.getItemByPseudoId("beitrag_kompakt", uebersicht).text(ergebnisTarif.beitrag);
                }

                return visible;
            });
            var ggOptimalTkz;
            var ggOptimalVisible = validationResult.ergebnisTarife.some(function(ergebnisTarif) {
                var visible = ergebnisTarif.beschreibung.indexOf("GesundheitGLOBAL Optimal") >= 0;
                ggOptimalTkz = ergebnisTarif.tkz;

                if (visible) {
                    SchrittRendererHelper.getItemByPseudoId("name_optimal", uebersicht).text(ergebnisTarif.beschreibung);
                    SchrittRendererHelper.getItemByPseudoId("beitrag_optimal", uebersicht).text(ergebnisTarif.beitrag);
                }

                return visible;
            });
            var ggPremiumTkz;
            var ggPremiumVisible = validationResult.ergebnisTarife.some(function(ergebnisTarif) {
                var visible = ergebnisTarif.beschreibung.indexOf("GesundheitGLOBAL Premium") >= 0;
                ggPremiumTkz = ergebnisTarif.tkz;

                if (visible) {
                    SchrittRendererHelper.getItemByPseudoId("name_premium", uebersicht).text(ergebnisTarif.beschreibung);
                    SchrittRendererHelper.getItemByPseudoId("beitrag_premium", uebersicht).text(ergebnisTarif.beitrag);
                }

                return visible;
            });

            uebersicht.appendTo(this.rootElement);
            if (!ggPremiumVisible) {
                SchrittRendererHelper.getItemByPseudoId("premium_block").hide();
            }
            if (!ggOptimalVisible) {
                SchrittRendererHelper.getItemByPseudoId("optimal_block").hide();
            }
            if (!ggKompaktVisible) {
                SchrittRendererHelper.getItemByPseudoId("kompakt_block").hide();
            }

            var buildWeiterBedarfFunction = (function(tkz) {
                return function() {
                    that._berechnen(true).then(function() {
                        if (that.validationResult && that.validationResult.state === "OK" && that.validationResult.ergebnisTarife) {
                            if (that.validationResult.ergebnisTarife.some(function(ergebnisTarif) {
                                return ergebnisTarif.tkz === tkz;
                            })) {
                                that._weiterBedarf(that.getBO(), tkz);
                            }
                        }

                    });
                }
            });

            uebersicht.find("a.GesundheitGLOBALKOMPAKT").click(buildWeiterBedarfFunction(ggKompaktTkz));
            uebersicht.find("a.GesundheitGLOBALOPTIMAL").click(buildWeiterBedarfFunction(ggOptimalTkz));
            uebersicht.find("a.GesundheitGLOBALPREMIUM").click(buildWeiterBedarfFunction(ggPremiumTkz));
        }

        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt1RendererIF6.prototype._berechnen = function(bNoRendering) {
    var deferred = $.Deferred();

    var promises = [];

    this.fnPruefen.forEach(function(oFnWithDeferred) {
        oFnWithDeferred.fnErrorRemoval();

        var promise = oFnWithDeferred.fnValidation();
        promises.push(promise);

        $.when(promise).then(function(result) {
            if (!result) {
                oFnWithDeferred.fnAddError();
            }
        });
    });

    $.when.apply($, promises).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
            this.oProdukt.berechneBedarf(this.getBO(), bNoRendering).then(function() {
                deferred.resolve();
            }).fail(function() {
                deferred.reject();
            });
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
            deferred.reject();
        }
    }.bind(this));

    return deferred.promise();
};

Schritt1RendererIF6.prototype._weiterBedarf = function(bo, tkz) {
    this.oProdukt.weiterBedarf(bo, tkz);
};

module.exports = Schritt1RendererIF6;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate : ' \
                    <!-- Progress / Header --> \
                    <div class="block" kv_ref="kvo_content"> \
                    <ul class="progress"> \
                        <li class="active">1</li> \
                        <li class="">2</li> \
                        <li class="">3</li> \
                        <li class="">4</li> \
                        <li class="">5</li> \
                    </ul>\
                    <h2>Beitrag für Langzeit-Auslandskrankenversicherung berechnen</h2> \
                    </div> \
                    <!-- Contentbereich --> \
                    <!-- Dateneingabeblock --> \
                    <div class="block"> \
                        <h3>Ihre Daten</h3> \
                        <div class="bline infobox" kv_ref="infobox" style="display: none"> \
                        </div> \
                        <!-- Geburtsdatum --> \
                        <div class="bline" kv_ref="geburtsdatumRow"> \
                            <label class="longlabel" kv_ref="geburtstagLabel">Geburtsdatum der versicherten Person<em>*</em>:</label> \
                            <input type="text" name="p_geb_datum" class="il" maxlength="10" placeholder="TT.MM.JJJJ"> \
                            <div class="helptxt" title="Ihr persönlicher Beitrag richtet sich neben dem Reiseland auch nach Ihrem Alter. Bitte geben Sie Ihr Geburtsdatum bzw. das Geburtsdatum der zu versichernden Person im Format tt.mm.jjjj ein.">?</div> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                    </div> \
                    <!-- Hinweisblock --> \
                    <div class="block"> \
                        <div class="bline btext-only"> \
                            <div><strong>Hinweis:</strong> Die mit einem (*) gekennzeichneten Felder benötigen wir für die Bearbeitung Ihres Antrags.<br> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                    </div> \
                    <!-- Button-Actionblock --> \
                    <!-- Button --> \
                    <div class="buttonline"> \
                        <div class="bgroup1"> \
                            <div> \
                            <a href="javascript:void(0);"><input type="button" name="Berechnen" id="defaultAction" value="Berechnen" onclick="javascript:void(0);" class="" title="Beitrag berechnen"></input></a> \
                            </div> \
                        </div> \
                    </div> \
               </div>',


    labeledContentWithBigAntwortRowTemlate: ' \
                                    <div class="bline"> \
                                        <label class="longlabel"><%= label %></label> \
                                        <%= content %> \
                                        <br class="bterm" /> \
                                    </div> \
                                    ',

    labeledFrageContentWithMediumColumnsRowTemplate:
                        '<div class="bline"> \
                            <label class="longlabel"><%= label %><em><%= required %></em></label> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    labeledContentWithMediumColumnsRowTemplate:
                        '<div class="bline"> \
                            <label class="longlabel"><%= label %><em><%= required %></em></label> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    labeledContentNumberedWithMediumColumnsRowTemplate:
                        '<div class="bline"> \
                            <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label class="longlabel"><%= label %> <%= required %></label></div> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    labeledContentNumberedAndIdWithMediumColumnsRowTemplate:
                        '<div class="bline"> \
                            <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label class="longlabel"><%= label %> <small style="color: black">[<%= id %>]</small> <%= required %></label></div> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    emptyContent: '<div style="margin-bottom: 5px">',

    dateInputTemplate : '<input type="text" class="il" maxlength="10" placeholder="TT.MM.JJJJ">',

    radioInputWith2ItemsTemplate: '\
                        <div class="bline"> \
                            <label class="longlabel"><%= label %><em><%= required %></em>:</label> \
    	                    <div>\
                            <input id="<%= idOne %>" name="<%= name %>" value="<%= valueOne %>" type="radio"> \
                            <label><%= valueOne %></label> \
                            <br class="bterm" /> \
    	                    </div>\
                        </div>  \
                        <div class="bline bcontinue"> \
                            <input id="<%= idTwo %>" name="<%= name %>" value="<%= valueTwo %>" type="radio"> \
                            <label><%= valueTwo %></label> \
                           <br class="bterm" /> \
                        </div>',

    radioInputWith2ItemsNumberedTemplate: '\
                        <div class="bline"> \
                            <label class="longlabel"><%= label %><em><%= required %></em>:</label> \
                            <input id="<%= idOne %>" name="<%= name %>" value="<%= valueOne %>" type="radio"><span class="radio"></span> \
                            <label><%= valueOne %></label> \
                            <br class="bterm" /> \
                        </div>  \
                        <div class="bline bcontinue"> \
                            <input id="<%= idTwo %>" name="<%= name %>" value="<%= valueTwo %>" type="radio"><span class="radio"></span> \
                            <label><%= valueTwo %></label> \
                           <br class="bterm" /> \
                        </div>',

    radioInputWith2ItemsNumberedWithIdTemplate: '\
                        <div class="bline"> \
                            <label class="longlabel"><%= label %><em><%= required %></em>:</label> \
                            <input id="<%= idOne %>" name="<%= name %>" value="<%= valueOne %>" type="radio"><span class="radio"></span> \
                            <label><%= valueOne %></label> \
                            <br class="bterm" /> \
                        </div>  \
                        <div class="bline bcontinue"> \
                            <input id="<%= idTwo %>" name="<%= name %>" value="<%= valueTwo %>" type="radio"><span class="radio"></span> \
                            <label><%= valueTwo %></label> \
                           <br class="bterm" /> \
                        </div>',

    uebersichtTemplate: ' \
                                <div class="block producttable" kv_ref="kompakt_block"> \
                                    <h1 class="text-grey">Ihre Produktempfehlung</h1> \
                                    <div class="table"> \
                                        <table> \
                                            <tbody> \
                                                <tr> \
                                                    <th class="left header">Tarifname</th> \
                                                    <th class="header" kv_ref="name_kompakt">GesundheitGLOBAL Kompakt</th> \
                                                </tr> \
                                                <tr> \
                                                    <td class="left">Monat­licher Gesamt­beitrag</td> \
                                                    <td class=""><span kv_ref="beitrag_kompakt"></span>\u20AC</td> \
                                                </tr> \
                                                <tr> \
                                                    <td class="left">Versicherungsdauer</td> \
                                                    <td class="">bis zu 2 Jahre</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left header">Ambulante Tarifleistungen</th> \
                                                    <td class="header"></td> \
                                                </tr> \
                                                <tr> \
                                                    <td class="left ">Beratung und Behandlung beim Arzt oder Facharzt</td> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Medikamente</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Heilmittel</th> \
                                                    <td class="">bis 250 \u20AC</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Hilfsmittel</th> \
                                                    <td class="">unfallbedingt bis 150 \u20AC</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Brillen und Kontaktlinsen</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/no_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Heilpraktiker, Osteopath, Chiropraktiker</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/no_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left header">Stationäre Tarifleistungen</th> \
                                                    <td class="header"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Unterbringung, Verpflegung und Heilmittel</th> \
                                                    <td class="">unaufschiebbare Operationen und Operationsnebenkosten</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left header">Zahnärztliche Tarifleistungen</th> \
                                                    <td class="header"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Schmerzstillende Zahnbehandlung</th> \
                                                    <td class="">bis 300 \u20AC</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Zahnersatz</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/no_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Zahnbehandlung und Vorsorge</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/no_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Rücktransport nach Deutschland</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Tarifleistungen in Deutschland</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/no_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">24-Stunden-Notfall-Service</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                            </tbody> \
                                        </table> \
                                    </div> \
                                    <div class="buttonline"> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <a class="GesundheitGLOBALKOMPAKT" href="javascript:void(0);"><input type="button" name="GesundheitGLOBALKOMPAKTAuswaehlen" value="Tarif auswählen" onclick="javascript:void(0);" class="" title="Tarif auswählen"></input></a> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
                                <div class="block producttable" kv_ref="optimal_block"> \
                                    <h1 class="text-grey">Ihre Produktempfehlung</h1> \
                                    <div class="table"> \
                                        <table> \
                                            <tbody> \
                                                <tr> \
                                                    <th class="left header">Tarifname</th> \
                                                    <th class="header" kv_ref="name_optimal">GesundheitGLOBAL Optimal</th> \
                                                </tr> \
                                                <tr> \
                                                    <td class="left ">Monat­licher Gesamt­beitrag</td> \
                                                    <td class=""><span kv_ref="beitrag_optimal"></span>\u20AC</td> \
                                                </tr> \
                                                <tr> \
                                                    <td class="left ">Versicherungsdauer</td> \
                                                    <td class="">bis zu 5 Jahre</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left header">Ambulante Tarifleistungen</th> \
                                                    <td class="header"></td> \
                                                </tr> \
                                                <tr> \
                                                    <td class="left ">Beratung und Behandlung beim Arzt oder Facharzt</td> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Medikamente</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Heilmittel</th> \
                                                    <td class="">bis 250 \u20AC</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Hilfsmittel</th> \
                                                    <td class="">unfallbedingt bis 150 \u20AC</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Brillen und Kontaktlinsen</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/no_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Heilpraktiker, Osteopath, Chiropraktiker</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/no_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left header">Stationäre Tarifleistungen</th> \
                                                    <td class="header"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Unterbringung, Verpflegung und Heilmittel</th> \
                                                    <td class="">unaufschiebbare Operationen und Operationsnebenkosten</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Zahnärztliche Tarifleistungen</th> \
                                                    <td class=""></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Schmerzstillende Zahnbehandlung</th> \
                                                    <td class="">bis 500 \u20AC</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Zahnersatz</th> \
                                                    <td class="">unfallbedingt 80% bis 2.000 \u20AC im Kalenderjahr</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Zahnbehandlung und Vorsorge</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/no_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Rücktransport nach Deutschland</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/no_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Tarifleistungen in Deutschland</th> \
                                                    <td class="">6 Wochen im Kalenderjahr</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">24-Stunden-Notfall-Service</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                            </tbody> \
                                        </table> \
                                    </div> \
                                    <div class="buttonline"> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <a class="GesundheitGLOBALOPTIMAL" href="javascript:void(0);"><input type="button" name="GesundheitOPTIMALAuswaehlen" value="Tarif auswählen" onclick="javascript:void(0);" class="" title="Tarif auswählen"></input></a> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
                                <div class="block producttable" kv_ref="premium_block"> \
                                    <h1 class="text-grey">Ihre Produktempfehlung</h1> \
                                    <div class="table"> \
                                        <table> \
                                            <tbody> \
                                                <tr> \
                                                    <th class="left header">Tarifname</th> \
                                                    <th class="header" kv_ref="name_premium">GesundheitGLOBAL Premium</th> \
                                                </tr> \
                                                <tr> \
                                                    <td class="left ">Monat­licher Gesamt­beitrag</td> \
                                                    <td class=""><span kv_ref="beitrag_premium"></span>\u20AC</td> \
                                                </tr> \
                                                <tr> \
                                                    <td class="left ">Versicherungsdauer</td> \
                                                    <td class="">bis zu 5 Jahre</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left header">Ambulante Tarifleistungen</th> \
                                                    <td class="header"></td> \
                                                </tr> \
                                                <tr> \
                                                    <td class="left ">Beratung und Behandlung beim Arzt oder Facharzt</td> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Medikamente</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Heilmittel</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Hilfsmittel</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Brillen und Kontaktlinsen</th> \
                                                    <td class="">bis 150 &euro;</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Heilpraktiker, Osteopath, Chiropraktiker</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left header">Stationäre Tarifleistungen</th> \
                                                    <td class="header"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Unterbringung, Verpflegung und Heilmittel</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Zahnärztliche Tarifleistungen</th> \
                                                    <td class=""></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Schmerzstillende Zahnbehandlung</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Zahnersatz</th> \
                                                    <td class="">75% bis 3.000 \u20AC in den ersten drei Kalenderjahren, danach keine Begrenzung</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Zahnbehandlung und Vorsorge</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Rücktransport nach Deutschland</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">Tarifleistungen in Deutschland</th> \
                                                    <td class="">6 Wochen pro Reiseunterbrechung</td> \
                                                </tr> \
                                                <tr> \
                                                    <th class="left ">24-Stunden-Notfall-Service</th> \
                                                    <td class=""><img src="' + Config.mediaUrl+ 'images/icons/check_small.png"></td> \
                                                </tr> \
                                            </tbody> \
                                        </table> \
                                    </div> \
                                    <div class="buttonline"> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <a class="GesundheitGLOBALPREMIUM" href="javascript:void(0);"><input type="button" name="GesundheitPREMIUMAuswaehlen" value="Tarif auswählen" onclick="javascript:void(0);" class="" title="Tarif auswählen"></input></a> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
                                ',

    helpText: '<div class="helptxt" title="<%= helptext %>">?</div>',

    errorLabelTemplate: '\
                        <div class="blineover error"> \
                            <div class="msgerror"> \
                                <ul> \
                                    <li><%- error %></li> \
                                </ul> \
                            </div> \
                        </div>'

};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);
var FrageHelper = __webpack_require__(7);

function buildAngabenZurVPAndAddToRow(schrittTemplate, oContentBox) {
    var rootElement = this.rootElement;

    var that = this;

    // anrede
    var fnRowTemplate = _.template(schrittTemplate.radioInputWith2ItemsTemplate);

    var anredeRow = $(fnRowTemplate({label: "Geschlecht ", required: "*", name: "vp_geschlecht", idOne: "geschlecht_1", idTwo: "geschlecht_2", valueOne: "männlich", valueTwo: "weiblich"}));
    anredeRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "anredeRow");

    if (!SchrittRendererHelper.itemWithPseudoIdExists("anredeRow", rootElement)) {
        anredeRow.appendTo(oContentBox);
        anredeRow.find("input").eq(0).click(function() {
            that.getBO().vp.anrede = "HERR";
        });
        anredeRow.find("input").eq(1).click(function() {
            that.getBO().vp.anrede = "FRAU";
        });
    } else {
        anredeRow = SchrittRendererHelper.getItemByPseudoId("anredeRow", rootElement);
    }
    if (this.getBO().vp.anrede === "HERR") {
        anredeRow.find("input").eq(0).attr("checked", "checked");
    } else if (this.getBO().vp.anrede === "FRAU") {
        anredeRow.find("input").eq(1).attr("checked", "checked");
    }
    var fnAddAnredeError = function(errorText) {
        var anredeLabel = anredeRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorAnrede = $(fnErrorText({error: errorText}));

        errorAnrede.insertAfter(anredeLabel);
    };

    anredeRow.find(".error").remove();
    var validationErrorForAnrede = SchrittRendererHelper.getError(this.validationResult, "vp.anrede");
    if (validationErrorForAnrede) {
        fnAddAnredeError(validationErrorForAnrede);
    }
    var fnAnredeValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.anrede === "HERR" || that.getBO().vp.anrede === "FRAU") {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationAnredeObject = {
        fnErrorRemoval: function() {
            anredeRow.find(".error").remove();
        },
        fnValidation: fnAnredeValidation,
        fnAddError: function() {
            fnAddAnredeError("Die Angabe im Feld ist ungültig.");
        }
    };
    this.fnPruefen.push(validationAnredeObject);

    var prevSibling = anredeRow;

    // Staatsangehoerigkeit
    fnRowTemplate = _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

    var staatsangehoerigkeitSelect = $("<select />");
    var staatsangehoerigkeitRow = $(fnRowTemplate({label: "Staatsangehörigkeit ", required: "*", content: staatsangehoerigkeitSelect.prop("outerHTML")}));
    staatsangehoerigkeitRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "staatsangehoerigkeitRow");

    if (!SchrittRendererHelper.itemWithPseudoIdExists("staatsangehoerigkeitRow", rootElement)) {
        staatsangehoerigkeitRow.insertAfter(prevSibling);
    } else {
        staatsangehoerigkeitRow = SchrittRendererHelper.getItemByPseudoId("staatsangehoerigkeitRow", rootElement);
    }
    staatsangehoerigkeitSelect = staatsangehoerigkeitRow.find("select");
    staatsangehoerigkeitSelect.empty();
    if (this.getBO().svLand) {
        this.getBO().svLand.forEach(function(currLand) {
            var optionLand = $("<option value='" + currLand  +"'>" + currLand + "</option>");

            if (this.getBO().vp.staatsangehoerigkeit) {
                if (currLand === this.getBO().vp.staatsangehoerigkeit) {
                    optionLand.attr("selected", "selected");
                }
            } else if (currLand === "Deutschland") {
                this.getBO().vp.staatsangehoerigkeit = "Deutschland";
                optionLand.attr("selected", "selected");
            }
            staatsangehoerigkeitSelect.append(optionLand);
        }, this);
    }

    staatsangehoerigkeitSelect.change(function() {
        that.getBO().vp.staatsangehoerigkeit = $(this).val();
    });

    staatsangehoerigkeitRow.find(".error").remove();
    var validationErrorForStaatsangehoerigkeit = SchrittRendererHelper.getError(this.validationResult, "vp.staatsangehoerigkeit");
    var fnAddStaatsangehoerigkeitError = function(errorText) {
        var staatsangehoerigkeitLabel = staatsangehoerigkeitRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorStaatsangehoerigkeit = $(fnErrorText({error: errorText}));

        errorStaatsangehoerigkeit.insertAfter(staatsangehoerigkeitLabel);
    }
    if (validationErrorForStaatsangehoerigkeit) {
        fnAddStaatsangehoerigkeitError(validationErrorForStaatsangehoerigkeit);
    }

    var fnStaatsangehoerigkeitValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.staatsangehoerigkeit && that.getBO().vp.staatsangehoerigkeit.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationStaatsangehoerigkeitObject = {
        fnErrorRemoval: function() {
            staatsangehoerigkeitRow.find(".error").remove();
        },
        fnValidation: fnStaatsangehoerigkeitValidation,
        fnAddError: function() {
            fnAddStaatsangehoerigkeitError("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationStaatsangehoerigkeitObject);

    prevSibling = staatsangehoerigkeitRow;

    // Taetigkeitsstatus
    var KIND = "Kind";

    var taetigkeitsstatusSelect = $("<select />");
    var taetigkeitsstatusRow = $(fnRowTemplate({label: "Tätigkeitsstatus ", required: "*", content: taetigkeitsstatusSelect.prop("outerHTML")}));
    taetigkeitsstatusRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "taetigkeitsstatusRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("taetigkeitsstatusRow", rootElement)) {
        taetigkeitsstatusRow.insertAfter(prevSibling);
    } else {
        taetigkeitsstatusRow = SchrittRendererHelper.getItemByPseudoId("taetigkeitsstatusRow", rootElement);
    }

    taetigkeitsstatusRow.find(".error").remove();
    var fnAddTaetigkeitsstatusError = function(errorText) {
        var taetigkeitsstatusLabel = taetigkeitsstatusRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorTaetigkeitsstatus = $(fnErrorText({error: errorText}));

        errorTaetigkeitsstatus.insertAfter(taetigkeitsstatusLabel);
    }
    var validationErrorForTaetigkeitsstatus = SchrittRendererHelper.getError(this.validationResult, "vp.taetigkeitsstatus");
    if (validationErrorForTaetigkeitsstatus) {
        fnAddTaetigkeitsstatusError(validationErrorForTaetigkeitsstatus);
    }

    taetigkeitsstatusSelect = taetigkeitsstatusRow.find("select");
    taetigkeitsstatusSelect.empty();
    taetigkeitsstatusSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svTaetigkeitsstatus) {
        this.getBO().svTaetigkeitsstatus.forEach(function(currTaetigkeitsstatus) {
            var optionTaetigkeitsstatus = $("<option value='" + currTaetigkeitsstatus  +"'>" + currTaetigkeitsstatus + "</option>");

            if (this.getBO().vp.taetigkeitsstatus  === currTaetigkeitsstatus) {
                optionTaetigkeitsstatus.attr("selected", "selected");
            }
            taetigkeitsstatusSelect.append(optionTaetigkeitsstatus);
        }, this);
    }

    taetigkeitsstatusSelect.change(function() {
        var taetigkeitsstatus = $(this).val();
        if (!that.getBO().svTaetigkeitsstatus.some(function(currTaetigkeitsstatus) {
            return taetigkeitsstatus === currTaetigkeitsstatus;
        })) {
            taetigkeitsstatus = null;
        }

        that.getBO().vp.taetigkeitsstatus = taetigkeitsstatus;

        var berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
        var berufInput = berufRow.find("input");

        switch(taetigkeitsstatus) {
            case "Arbeitsloser":
                that.getBO().vp.beruf = "Arbeitsloser/e";
                berufInput.val("Arbeitsloser/e");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Hausfrau/-mann":
                that.getBO().vp.beruf = "Hausfrau, Hausmann";
                berufInput.val("Hausfrau, Hausmann");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case KIND:
                that.getBO().vp.beruf = taetigkeitsstatus;
                berufInput.val(taetigkeitsstatus);

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Pensionär":
                that.getBO().vp.beruf = "Pensionär/in";
                berufInput.val("Pensionär/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Rentner":
                that.getBO().vp.beruf = "Rentner/in";
                berufInput.val("Rentner/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Student":
                that.getBO().vp.beruf = "Student/in";
                berufInput.val("Student/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Schüler":
                that.getBO().vp.beruf = "Schüler/in";
                berufInput.val("Schüler/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            default:
                that.getBO().vp.beruf = "";
                berufInput.val("");

                SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", false);
                break;
        }

    });

    var fnTaetigkeitsstatusValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.taetigkeitsstatus && that.getBO().vp.taetigkeitsstatus.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationTaetigkeitsstatusObject = {
        fnErrorRemoval: function() {
            taetigkeitsstatusRow.find(".error").remove();
        },
        fnValidation: fnTaetigkeitsstatusValidation,
        fnAddError: function() {
            fnAddTaetigkeitsstatusError("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationTaetigkeitsstatusObject);

    prevSibling = taetigkeitsstatusRow;

    // Beruf

    var fnLabeledContentWithBigAntwortRowTemlate = _.template(schrittTemplate.labeledContentWithBigAntwortRowTemlate);

    var fnBerufInput = _.template(schrittTemplate.berufInputTemplate);
    var berufInput = $(fnBerufInput({ beruf : ("" || this.getBO().vp.beruf) }));

    var berufRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Ausgeübter Beruf (Nach Eingabe der ersten Buchstaben wird eine Auswahl angeboten, aus der Sie Ihren Beruf wählen können)*", content: berufInput.prop("outerHTML")}));
    berufRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "berufRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("berufRow", rootElement)) {
        berufRow.insertAfter(prevSibling);

        berufInput = berufRow.find("input");
        var oAutocompleteOptions = {
            ajaxFn: function(beruf) {
                var taetigkeitsstatus = that.getBO().vp.taetigkeitsstatus;
                that.getBO().vp.beruf = beruf;
                return that._getBerufSuggestionsFor(taetigkeitsstatus, beruf);
            },

            width: null,

            noVerifySuggestionFormat: true,

            onSelect: function(suggest) {
                that.getBO().vp.beruf = suggest.value;
            },

            onSelectCallback: function(suggestion) {
                return !suggestion.suggest;
            },

            formatResult: function(suggestion, currentValue) {
                var result = $.Autocomplete.formatResult(suggestion, currentValue);
                if (!suggestion.suggest) {
                    result = "Meinten Sie: <i>" + result + "</i>";
                }

                return result;
            },

            transformResult: function(ergebnisBeruf) {
                var result = {
                    suggestions: []
                };

                if (ergebnisBeruf.vorschlagstreffer > 0) {
                    this.suggest = true;
                    result.suggestions = ergebnisBeruf.vorschlaege.map(function(val) {
                        return {value: val.text, suggest: true};
                    });
                } else if (ergebnisBeruf.aehnlichkeitentreffer > 0) {
                    this.suggest = false;
                    result.suggestions = ergebnisBeruf.aehnlichkeiten.map(function(val) {
                        return {value: val, suggest: false};
                    });
                }

                return result;
            }
        };
        berufInput.autocomplete(oAutocompleteOptions);
        berufInput.val(this.getBO().vp.beruf);
    } else {
        berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
    }
    berufRow.find(".error").remove();
    var validationErrorForBeruf = SchrittRendererHelper.getError(this.validationResult, "vp.beruf");

    var fnAddErrorBeruf = function(errorText) {
        var berufLabel = berufRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorBeruf = $(fnErrorText({error: errorText}));

        errorBeruf.insertAfter(berufLabel);
    };

    if (validationErrorForBeruf) {
        fnAddErrorBeruf(validationErrorForBeruf);
    }

    var fnValidationBeruf = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (!that.getBO().vp.beruf || that.getBO().vp.beruf.trim().length === 0) {
            deferred.resolve(false);
        } else if (!that.getBO().vp.taetigkeitsstatus) {
            deferred.resolve(false);
        } else {
            that._getBerufSuggestionsFor(that.getBO().vp.taetigkeitsstatus, that.getBO().vp.beruf).then(function(ergebnisBeruf) {
                var ok = false;
                if (ergebnisBeruf && ergebnisBeruf.hasOwnProperty("vorschlagstreffer")) {
                    if (ergebnisBeruf.vorschlagstreffer > 0) {
                        if (ergebnisBeruf.vorschlaege.some(function(val) {
                            return val.text === that.getBO().vp.beruf;
                        })) {
                            ok = true;
                        }
                    }

                }

                deferred.resolve(ok);
            }).fail(function() {
                deferred.resolve(false);
            });
        }

        return promise;
    };

    var validationBerufObject = {
        fnErrorRemoval: function() {
            berufRow.find(".error").remove();
        },
        fnValidation: fnValidationBeruf,
        fnAddError: function() {
            fnAddErrorBeruf("Die Berufsangabe ist ungültig.");
        }
    };
    this.fnPruefen.push(validationBerufObject);


    prevSibling = berufRow;

    // Versicherungsstatus
    var PRIVAT_VESICHERT = "privat versichert / freie Heilfürsorge";

    var versicherungsstatusSelect = $("<select />");
    var versicherungsstatusRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Wie sind Sie krankenversichert? *", content: versicherungsstatusSelect.prop("outerHTML")}));
    versicherungsstatusRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "versicherungsstatusRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("versicherungsstatusRow", rootElement)) {
        versicherungsstatusRow.insertAfter(prevSibling);

        versicherungsstatusRow.find("select").change(function() {
            var selectedVersicherungsstatus = $(this).val();

            var krankenversicherungsschutzRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
            var krankenversicherungsschutzSelect = krankenversicherungsschutzRow.find("select");
            var koopRow = SchrittRendererHelper.getItemByPseudoId("koopRow", rootElement);

            if (selectedVersicherungsstatus === PRIVAT_VESICHERT || !selectedVersicherungsstatus) {
                krankenversicherungsschutzRow.hide();
                koopRow.hide();

                that.getBO().vp.aktuellerVersicherungsschutz = null;
                krankenversicherungsschutzSelect.find("option:selected").prop("selected", false);

                that.getBO().vp.versicherungsnummer = null;
                koopRow.find("input").val("");
            } else {
                krankenversicherungsschutzRow.show();
            }

            that.getBO().vp.versicherungsstatus = selectedVersicherungsstatus;
        });
    } else {
        versicherungsstatusRow = SchrittRendererHelper.getItemByPseudoId("versicherungsstatusRow", rootElement);
    }

    versicherungsstatusSelect = versicherungsstatusRow.find("select");

    versicherungsstatusSelect.empty();
    versicherungsstatusSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svVersicherungsstatus) {
        this.getBO().svVersicherungsstatus.forEach(function(currVersicherungsstatus) {
            var optionVersicherungsstatus = $("<option value='" + currVersicherungsstatus  +"'>" + currVersicherungsstatus + "</option>");

            if (this.getBO().vp.versicherungsstatus  === currVersicherungsstatus) {
                optionVersicherungsstatus.attr("selected", "selected");
            }
            versicherungsstatusSelect.append(optionVersicherungsstatus);
        }, this);
    }

    versicherungsstatusRow.find(".error").remove();
    var fnAddErrorVersicherungsstatus = function(errorText) {
        var versicherungsstatusLabel = versicherungsstatusRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorVersicherungsstatus = $(fnErrorText({error: errorText}));

        errorVersicherungsstatus.insertAfter(versicherungsstatusLabel);
    };

    var validationErrorForVersicherungsstatus = SchrittRendererHelper.getError(this.validationResult, "vp.versicherungsstatus");
    if (validationErrorForVersicherungsstatus) {
        fnAddErrorVersicherungsstatus(validationErrorForVersicherungsstatus);
    }

    var fnValidationVersicherungsstatus = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (that.getBO().vp.versicherungsstatus && that.getBO().vp.versicherungsstatus.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }

        return promise;
    };

    var validationVersicherungsstatusObject = {
        fnErrorRemoval: function() {
            versicherungsstatusRow.find(".error").remove();
        },
        fnValidation: fnValidationVersicherungsstatus,
        fnAddError: function() {
            fnAddErrorVersicherungsstatus("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationVersicherungsstatusObject);

    prevSibling = versicherungsstatusRow;

    // Krankenversicherungsschutz
    var krankenversicherungsschutzSelect = $("<select />");
    var krankenversicherungsschutzRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Bei welcher gesetzlichen Krankenkasse? *", content: krankenversicherungsschutzSelect.prop("outerHTML")}));
    krankenversicherungsschutzRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "krankenversicherungsschutzRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("krankenversicherungsschutzRow", rootElement)) {
        krankenversicherungsschutzRow.insertAfter(prevSibling);

        krankenversicherungsschutzRow.find("select").change(function() {
            var displayKoop = false;
            var selectedGKV = $(this).val();
            if (that.getBO().svKoopGKV && that.getBO().svKoopGKV.length > 0) {
                displayKoop = that.getBO().svKoopGKV.some(function(koop) {
                    return selectedGKV === koop;
                });
            }

            that.getBO().vp.aktuellerVersicherungsschutz = selectedGKV;

            if (displayKoop) {
                krankenversicherungsschutzRow.next().show();
            } else {
                krankenversicherungsschutzRow.next().hide();
                krankenversicherungsschutzRow.next().find("input").val("");
                that.getBO().vp.versicherungsnummer = "";
            }
        });
    } else {
        krankenversicherungsschutzRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
    }

    krankenversicherungsschutzSelect = krankenversicherungsschutzRow.find("select");
    if (!this.getBO().vp.gkvAuswahlMoeglich) {
        krankenversicherungsschutzSelect.prop("disabled", true);
    }

    krankenversicherungsschutzSelect.empty();
    krankenversicherungsschutzSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svGKV) {
        this.getBO().svGKV.forEach(function(currGKV) {
            var optionKrankenversicherungsschutz = $("<option value='" + currGKV  +"'>" + currGKV + "</option>");

            if (this.getBO().vp.aktuellerVersicherungsschutz === currGKV) {
                optionKrankenversicherungsschutz.attr("selected", "selected");
            }
            krankenversicherungsschutzSelect.append(optionKrankenversicherungsschutz);
        }, this);
    }
    if (this.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT || !this.getBO().vp.versicherungsstatus) {
        krankenversicherungsschutzRow.hide();
    }

    krankenversicherungsschutzRow.find(".error").remove();
    var fnAddErrorKrankenversicherungssschutz = function(errorText) {
        var krankenversicherungsschutzLabel = krankenversicherungsschutzRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorKrankenversicherungsschutz = $(fnErrorText({error: errorText}));

        errorKrankenversicherungsschutz.insertAfter(krankenversicherungsschutzLabel);
    };

    var validationErrorForKrankenversicherungsschutz = SchrittRendererHelper.getError(this.validationResult, "vp.gkv");
    if (validationErrorForKrankenversicherungsschutz) {
        fnAddErrorKrankenversicherungssschutz(validationErrorForKrankenversicherungsschutz);
    }

    var fnValidationKrankenversicherungsschutz = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (that.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT) {
            deferred.resolve(true);
        } else {
            if (that.getBO().vp.aktuellerVersicherungsschutz && that.getBO().vp.aktuellerVersicherungsschutz.length > 0) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        }

        return promise;
    };

    var validationKrankenversicherungsschutzObject = {
        fnErrorRemoval: function() {
            krankenversicherungsschutzRow.find(".error").remove();
        },
        fnValidation: fnValidationKrankenversicherungsschutz,
        fnAddError: function() {
            fnAddErrorKrankenversicherungssschutz("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationKrankenversicherungsschutzObject);

    prevSibling = krankenversicherungsschutzRow;

    // Koop Partner
    var fnKoopInput = _.template(schrittTemplate.koopInputTemplate);
    var koopInput = $(fnKoopInput({ value : ("" || this.getBO().vp.versicherungsnummer)}));

    var koopRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Bitte nennen Sie uns Ihre GKV-Versichertennummer (Diese finden Sie z.B. auf Ihrer Versichertenkarte) *", content: koopInput.prop("outerHTML")}));
    koopRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "koopRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("koopRow", rootElement)) {
        koopRow.insertAfter(prevSibling);

        koopRow.find("input").change(function() {
            that.getBO().vp.versicherungsnummer = $(this).val();
        });
    } else {
        koopRow = SchrittRendererHelper.getItemByPseudoId("koopRow", rootElement);
    }

    var fnCheckKoopIsRequired = function() {
        if (that.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT)
            return false;

        return that.getBO().svKoopGKV.some(function(koop) {
            return that.getBO().vp.aktuellerVersicherungsschutz === koop;
        });
    }

    if (this.getBO().svKoopGKV && that.getBO().svKoopGKV.length > 0) {
        if (!fnCheckKoopIsRequired()) {
            koopRow.hide();
        }
    }

    koopRow.find(".error").remove();
    var fnAddErrorKoop = function(errorText) {
        var koopLabel = koopRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorKoop = $(fnErrorText({error: errorText}));

        errorKoop.insertAfter(koopLabel);
    };
    var validationErrorForKoop = SchrittRendererHelper.getError(this.validationResult, "vp.gkvnr");
    if (validationErrorForKoop) {
        fnAddErrorKoop(validationErrorForKoop);
    }
    var fnValidationKoop = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (!fnCheckKoopIsRequired()) {
            deferred.resolve(true);
        } else if (!that.getBO().vp.versicherungsnummer || that.getBO().vp.versicherungsnummer.trim().length === 0) {
            deferred.resolve(false);
        } else if (!that.getBO().vp.versicherungsnummer.match(/^[A-Za-z]\d{9}$/)) {
            deferred.resolve(false);
        } else {
            deferred.resolve(true);
        }

        return promise;
    };
    var validationKoopObject = {
        fnErrorRemoval: function() {
            koopRow.find(".error").remove();
        },
        fnValidation: fnValidationKoop,
        fnAddError: function() {
            if (!that.getBO().vp.versicherungsnummer || that.getBO().vp.versicherungsnummer.trim().length === 0)
                fnAddErrorKoop("Die Angabe ist erforderlich.");
            else
                fnAddErrorKoop("Die Angabe ist ungültig.");
        }
    };
    this.fnPruefen.push(validationKoopObject);

    prevSibling = koopRow;


//    var validationOptKrankenversicherungsschutzObject = {
//        fnErrorRemoval: function() {
//        },
//        fnValidation: function() {
//            var deferred = $.Deferred();
//            var promise = deferred.promise();
//
//            if (that.getBO().vp.aktuellerVersicherungsschutz && that.getBO().vp.aktuellerVersicherungsschutz.length > 0 && that.getBO().vp.aktuellerVersicherungsschutz=='ausländische gesetzliche Krankenversicherung') {
//            	deferred.resolve(false);
//        	} else {
//        		deferred.resolve(true);
//        	}
//
//            return promise;
//        },
//        fnAddError: function() {
//        	var fnAddErrorKrankenversicherungssschutz = function(errorText) {
//                krankenversicherungsschutzRow.find(".error").remove();
//
//                var krankenversicherungsschutzLabel = krankenversicherungsschutzRow.find("label").first();
//                var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
//                var errorKrankenversicherungsschutz = $(fnErrorText({error: errorText}));
//                errorKrankenversicherungsschutz.insertAfter(krankenversicherungsschutzLabel);
//            };
//            fnAddErrorKrankenversicherungssschutz('Die Tarife können leider nicht online abgeschlossen werden, weil Frage [604] mit \"ausländische gesetzliche Krankenversicherung\" beantwortet wurde. Um die Voraussetzungen für die Versicherungsfähigkeit prüfen zu können, wenden Sie sich bitte an einen Betreuer. Danke!');
//        }
//    };
//    this.fnPruefen.push(validationOptKrankenversicherungsschutzObject);

}

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

var Schritt2Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt2Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt2Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(52);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt2Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;
    this.fnPruefen = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        var fnHeadTemplate = _.template(schrittTemplate.headTemplate);
        var textAnzeigepflicht = Util.getTextFromEncodedObject(this.getBO().anzeigepflicht);

        var headContent = $(fnHeadTemplate({produkt : this.getBO().produkt, anzeigepflicht: textAnzeigepflicht, versichererName: this.getBO().einstellung.versicherer.name}));
        headContent.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "headContent");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("headContent", rootElement)) {
            headContent.appendTo("div.kvo-main-content-container");

            // Beiblatt Anzeigepflicht
            headContent.find("a").eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckBeiblattAnzeigepflichtBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
        } else {
            headContent = SchrittRendererHelper.getItemByPseudoId("headContent", rootElement);
        }

        var lastRow = SchrittRendererHelper.getItemByPseudoId("infobox");

        // Contentbox
        var fnContentBoxWithRow = _.template(schrittTemplate.contentBoxWithRow);
        var contentBoxWithRow = $(fnContentBoxWithRow());
        contentBoxWithRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "contentBox");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("contentBox", rootElement)) {
            contentBoxWithRow.insertAfter(lastRow);
        } else {
            contentBoxWithRow = SchrittRendererHelper.getItemByPseudoId("contentBox", rootElement);
        }

        contentBoxWithRow.find(".commonError").remove();
        if (validationResult && validationResult.state === "NOK") {
            var commonErrors = validationResult.validationErrors.filter(function(validationError) {
                return validationError.fieldName.indexOf("vp.tarif") === 0 || validationError.fieldName === "vp.";
            });

            _.chain(commonErrors).reverse().forEach(function(commonError) {
                var fnLabeledContentWithBigAntwortRowTemlate = _.template(schrittTemplate.labeledContentWithBigAntwortRowTemlate);

                var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                var error = $(fnErrorText({error: commonError.message}));

                var errorRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Es liegen folgende Fehler vor:", content: error.prop("outerHTML")}));
                errorRow.addClass("commonError");
                errorRow.prependTo(contentBoxWithRow);
            });
        }

        // Geburtsdatum
        var fnContentBoxWithRowAndImageTemplate = _.template(schrittTemplate.contentBoxWithRowAndImageTemplate);
        var contentBoxWithRowAndImageTemplate = $(fnContentBoxWithRowAndImageTemplate({content : " Angaben zur versichernden Person"}));
        contentBoxWithRowAndImageTemplate.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "contentBoxAngabenZurVP");

        var contentBoxExists = SchrittRendererHelper.itemWithPseudoIdExists("contentBoxAngabenZurVP", rootElement);
        if (!contentBoxExists) {
            contentBoxWithRowAndImageTemplate.appendTo(contentBoxWithRow);
        } else {
            contentBoxWithRowAndImageTemplate = SchrittRendererHelper.getItemByPseudoId("contentBoxAngabenZurVP");
        }

        var fnGeburtsdatumRowTemplate = _.template(schrittTemplate.geburtsdatumRowTemplate);
        var geburtsdatumRow = $(fnGeburtsdatumRowTemplate());
        geburtsdatumRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "geburtsdatumRow");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("geburtsdatumRow", rootElement)) {
            geburtsdatumRow.appendTo(contentBoxWithRowAndImageTemplate);

            var geburtsdatumInput = geburtsdatumRow.find("input");
            geburtsdatumInput.val(this.getBO().vp.geburtsdatum);
            geburtsdatumInput.prop('disabled', true);
        } else {
            geburtsdatumRow = SchrittRendererHelper.getItemByPseudoId("geburtsdatumRow", rootElement);
        }

        lastRow = geburtsdatumRow;

        // Fragen

        function fnAddFrageValidator(oFrage, validationForFrageObject) {
            that.fnPruefen.push(validationForFrageObject);
        }

        var aReisezeitraumfragen = this.getBO().vp.fragen.filter(function(oFrage) {
            return oFrage.fragetyp === "TARIFIERUNGS_FRAGE" && oFrage.angabeTyp === "REISEZEITRAUM";
        });
        lastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, false, function() {}, null, aReisezeitraumfragen, false, false, lastRow);

        var aTarifierungsfragen = this.getBO().vp.fragen.filter(function(oFrage) {
            return oFrage.fragetyp === "TARIFIERUNGS_FRAGE" && oFrage.angabeTyp !== "REISEZEITRAUM";
        });
        lastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, false, function() {}, null, aTarifierungsfragen, false, false, lastRow);

        // Angaben zur VP
        if (bFirstRendering) {
        	$("<hr />").appendTo(contentBoxWithRowAndImageTemplate);
        }
        buildAngabenZurVPAndAddToRow.call(this, schrittTemplate, contentBoxWithRowAndImageTemplate);

        var fnRowSeparator = _.template(schrittTemplate.rowSeparator);
        if (!contentBoxExists) {
            var rowSeparator = $(fnRowSeparator());
            rowSeparator.insertAfter(contentBoxWithRowAndImageTemplate.children().last());
            lastRow = rowSeparator;
        }

        // Allgemeine Fragen
        lastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, true, fnAddFrageValidator, null, this.getBO().vp.antragsfragen, false, true, contentBoxWithRowAndImageTemplate.children().last());

        if (this.getBO().vp.antragsfragen && this.getBO().vp.antragsfragen.length > 0) {
            var fnWeiterSchritt3ButtonRowTemplate = _.template(schrittTemplate.weiterSchritt3ButtonRowTemplate);
            var weiterSchritt3ButtonRow = $(fnWeiterSchritt3ButtonRowTemplate());
            weiterSchritt3ButtonRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "weiterSchritt3ButtonRow");

            if (!SchrittRendererHelper.itemWithPseudoIdExists("weiterSchritt3ButtonRow", rootElement)) {
                weiterSchritt3ButtonRow.find("a").eq(0).click(function(event) {
                    event.preventDefault();

                    that._zurueck();
                });
                weiterSchritt3ButtonRow.find("a").eq(1).click(function(event) {
                    event.preventDefault();

                    that.setBusy(true);
                    that._pruefe().always(function() {
                        that.setBusy(false);
                    });
                });

                weiterSchritt3ButtonRow.insertAfter(contentBoxWithRowAndImageTemplate);
            } else {
                weiterSchritt3ButtonRow = SchrittRendererHelper.getItemByPseudoId("weiterSchritt3ButtonRow", rootElement);
            }
            lastRow = weiterSchritt3ButtonRow;
        }

        // Mehrwert Box

        var produktName = (this.validationResult && this.validationResult.vpTarife && this.validationResult.vpTarife.length > 0) ? this.validationResult.vpTarife[0].beschreibung : this.getBO().produkt;

        var mehrwertBoxTemplate = _.template(schrittTemplate.mehrwertBoxTemplate);
        var mehrwertBoxContent = $(mehrwertBoxTemplate({produkt : produktName, produktDesc : ""}));
        mehrwertBoxContent.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "mehrwertBoxContent");
        if (!SchrittRendererHelper.itemWithPseudoIdExists("mehrwertBoxContent", rootElement)) {
            mehrwertBoxContent.insertAfter(SchrittRendererHelper.getItemByPseudoId("kvo-content"));
        } else {
            mehrwertBoxContent = SchrittRendererHelper.getItemByPseudoId("mehrwertBoxContent", rootElement);
        }


        var mehrwertBoxWeitereInfosTemplate = _.template(schrittTemplate.mehrwertBoxWeitereInfosTemplate);
        var mehrwertBoxWeitereInfosContent = $(mehrwertBoxWeitereInfosTemplate());
        mehrwertBoxWeitereInfosContent.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "mehrwertBoxWeitereInfosContent");
        if (!SchrittRendererHelper.itemWithPseudoIdExists("mehrwertBoxWeitereInfosContent", rootElement)) {
            mehrwertBoxWeitereInfosContent.insertAfter(SchrittRendererHelper.getItemByPseudoId("content", mehrwertBoxContent));

            var links = mehrwertBoxWeitereInfosContent.find("a");

            // Tariferklaerung
            links.eq(0).click(function(e) {
                e.preventDefault();

                that._checkDeferreds(that.fnPruefen).then(function() {
                	var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                	getAndOpenDocument(druckstueckBOandUrl);
                }).fail(function() {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                });
            });
            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                that._checkDeferreds(that.fnPruefen).then(function() {
	                var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
	                getAndOpenDocument(druckstueckBOandUrl);
                }).fail(function() {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                });
            });
            links.eq(2).prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

        } else {
            mehrwertBoxWeitereInfosContent = SchrittRendererHelper.getItemByPseudoId("mehrwertBoxWeitereInfosContent", rootElement);
        }
        // Leistungen
        var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
        this.getBO().einstellung.modul.leistungen.forEach(function(leistung) {
            $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
        });

        if (this.validationResult && this.validationResult.state === "OK") {
            var nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("content", mehrwertBoxContent);

            $(".tarifbeitragContent").remove();
            $(".accordion").remove();

            if (this.validationResult.vpTarife && this.validationResult.vpTarife.length > 0) {
                this.validationResult.vpTarife.forEach(function(tarif) {
                    if (tarif.ausgewaehlt && !tarif.augesteuert) {
                        var mehrwertBoxTarifbeitragTemplate = _.template(schrittTemplate.mehrwertBoxTarifbeitragTemplate);
                        var tarifbeitragContent = $(mehrwertBoxTarifbeitragTemplate({beitrag: tarif.beitrag}));

                        tarifbeitragContent.insertAfter(nextPositionToPut);
                        tarifbeitragContent.addClass("tarifbeitragContent");
                        nextPositionToPut = tarifbeitragContent[tarifbeitragContent.length-1];

                        var mehrwertBoxTarifAccordionStartTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionStartTemplate);
                        var mehrwertBoxTarifAccordionStart = $(mehrwertBoxTarifAccordionStartTemplate({text : "Reisende/r, " + that.getBO().vp.geburtsdatum}));
                        mehrwertBoxTarifAccordionStart.insertAfter(nextPositionToPut);
                        nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("accordion", mehrwertBoxTarifAccordionStart);

                        mehrwertBoxTarifAccordionStart.find("a").click(function(){
                            mehrwertBoxTarifAccordionStart.find("a").toggleClass("active");
                            mehrwertBoxTarifAccordionStart.find("div.content").toggleClass("active");
                        });

                        var tarifWertContentTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionTarifWertTemplate);
                        var tarifWertContent = $(tarifWertContentTemplate({tarif: tarif.beschreibung, wert: tarif.beitrag}));
                        tarifWertContent.insertAfter(nextPositionToPut);

                        nextPositionToPut = tarifWertContent[tarifWertContent.length-1];

                        var accordionEndTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionEndTemplate);
                        var accordionEnd = $(accordionEndTemplate({beitrag: tarif.beitrag}));
                        accordionEnd.insertAfter(nextPositionToPut);
                    }
                }, this);
            }
        }

        defer.resolve();

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);

            setTimeout(function() {
            	var berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
            	var helpTextTemplate = _.template(schrittTemplate.helpText);
                var helpText = $(helpTextTemplate({helptext: 'Damit wir prüfen können, ob Sie im ausgewählten Tarif versichert werden können, benötigen wir Ihren ausgeübten Beruf.'}));
                berufRow.find("label").append(helpText);
            }, 0);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

       	window.jQuery(document).foundation();
    }.bind(this));

    return defer.promise();
};

Schritt2Renderer.prototype._getBerufSuggestionsFor = function(taetigkeitsstatus, beruf) {
    return this.oProdukt.getBerufSuggestionsFor(taetigkeitsstatus, beruf);
};

Schritt2Renderer.prototype._getBerufSuggestionsFor = function(taetigkeitsstatus, beruf) {
    return this.oProdukt.getBerufSuggestionsFor(taetigkeitsstatus, beruf);
};

Schritt2Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt2Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt2Renderer.prototype._getDruckstueckBeiblattAnzeigepflichtBOandUrl = function() {
    return this.oProdukt.getDruckstueckBeiblattAnzeigepflichtBOandUrl(this.getBO());
};

Schritt2Renderer.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt2Renderer.prototype._pruefe = function() {
    var deferred = $.Deferred();

    this._checkDeferreds(this.fnPruefen).then(function() {
        this.oProdukt.pruefe().then(function() {
            deferred.resolve.apply(deferred, arguments);
        }).fail(function() {
            deferred.reject.apply(deferred, arguments);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        });
    }.bind(this)).fail(function() {
        deferred.reject();
        SchrittRendererHelper.scrollToFirstError(this.rootElement);
    }.bind(this));

    return deferred.promise();
};

Schritt2Renderer.prototype._checkDeferreds = function(fnWithDeferreds) {
    var deferred = $.Deferred();

    var promises = [];

    fnWithDeferreds.forEach(function(oFnWithDeferred) {
        oFnWithDeferred.fnErrorRemoval();

        var promise = oFnWithDeferred.fnValidation();
        promises.push(promise);

        $.when(promise).then(function(result) {
            if (!result) {
                oFnWithDeferred.fnAddError();
            }
        });
    });

    $.when.apply($, promises).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
            deferred.resolve();
        } else {
            deferred.reject();
        }
    }.bind(this));

    return deferred.promise();
};

module.exports = Schritt2Renderer;


/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = {
    headTemplate: ' \
                        <a style="color: white" id="top_anchor" href="#"></a> \
                        <div class="off-canvas-wrap"> \
                            <div class="inner-wrap"> \
                                <header> \
                                <div class="sticky-wrapper" style=""> \
                                    <div class="contain-to-grid sticky"> \
                                        <section class="navigation"> \
                                            <nav> \
                                            <div class="clearfix row"> \
                                                <div class="large-12 columns hide-general"> \
                                                    <ul class="left"> \
                                                        <li> \
                                                        <h4>Tarifrechner <%= produkt %></h4> \
                                                        </li> \
                                                    </ul> \
                                                </div> \
                                            </div> \
                                            </nav> \
                                        </section> \
                                    </div> \
                                </div> \
                                </header> \
                                <main> \
                                <div class="row"> \
                                    <div class="large-12 small-12 columns content-container"> \
                                        <div class="row"> \
                                            <div class="large-12 columns"> \
                                                <div class="rowX"> \
                                                            <ol class="progress-indicator"> \
                                                                  <li class="" data-step="1"> \
                                                                        <span></span> \
                                                                  </li> \
                                                                  <li class="is-current" data-step="2"> \
                                                                        <span>Angaben zur Absicherung</span> \
                                                                  </li> \
                                                                  <li class="" data-step="3"> \
                                                                        <span></span> \
                                                                  </li> \
                                                                  <li class="" data-step="4"> \
                                                                        <span></span> \
                                                                  </li> \
                                                                  <li class="is-last" data-step="5"> \
                                                                        <span>Online beantragen</span> \
                                                                  </li> \
                                                            </ol> \
                                                      </div> \
                                                \
                                                </div> \
                                                <!-- Content --> \
                                                <!-- linker Contentbereich --> \
                                               <div class="large-8 medium-7 columns kvo-content" kv_ref="kvo-content"> \
                                                 <!-- Pflichtfelder, SSL --> \
                                                 <div class="kvo-content-1" kv_ref="kvo-content-1"> \
                                                    <div class="kvo-title"> \
                    	                                <h1>Antrag auf Auslandsreise-Krankenversicherung nach Tarif GesundheitGLOBAL</h1> \
                                                        <div class="row"> \
                                                            <div class="large-12 medium-12 columns"> \
                                                                <span>Ich beantrage bei der Union Krankenversicherung AG den Abschluss der zuvor ausgewählten Krankenversicherung(en), gegebenenfalls als Vertragsänderung.</span> \
                                                                <p>&nbsp;</p> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="medium-12 infobox" kv_ref="infobox"> \
                                                            <div class="dataSummary"><h2><b>Vorvertragliche Anzeigepflicht</b></h2><br><%= anzeigepflicht %>&nbsp;<a href="javascript:void(0);">Beiblatt zur vorvertraglichen Anzeigepflicht.</a> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                                <div class="row ssl"> \
                                                    <div class="columns medium-12 "> \
                                                        <p>&nbsp;</p> \
                                                         <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                                        <br> \
                                                        <span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
                                </main> \
                            </div> \
                        </div> \
                       ',

    mehrwertBoxTarifbeitragTemplate: ' \
                                    <div class="row display-sum"> \
                                        <div class="medium-7 small-8 columns"> \
                                            <label class="summary">Monatlicher Gesamtbeitrag</label> \
                                        </div> \
                                        <div class="medium-5 small-4 columns"> \
                                            <input readonly="" type="text" value="<%= beitrag %> \u20AC"> \
                                        </div> \
                                    </div> \
                                        ',

    mehrwertBoxTarifAccordionStartTemplate:
                                        ' \
                                        <dl class="accordion" data-accordion=""> \
                                            <dd class="accordion-navigation active"> \
                                                <a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
                                                <div id="panel1a" class="content active"> \
                                                    <div class="row" kv_ref="accordion"> \
                                                        <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= text %><br />(Zu versichernde Person)</label> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </dd> \
                                        </dl> \
                                        ',

    mehrwertBoxTarifAccordionTarifWertTemplate:
                                        ' \
                                        <div class="row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label><%= tarif %></label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= wert %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        <hr> \
                                        ',

    mehrwertBoxTarifAccordionEndTemplate:
                                        ' \
                                        <div class="row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label class="summary">Monatlicher Gesamtbeitrag</label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= beitrag %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        ',

    geburtsdatumRowTemplate : ' \
                                <div class="row" data-abide>  \
                                    <div class="medium-6 columns"> \
                                        <label kv_ref="geburtstagLabel">Geburtsdatum *</label> \
                                        <div class="row"> \
                                            <div class="large-12 medium-12 small-12 columns"> \
                                                <input placeholder="TT.MM.JJJJ" value="" maxlength="10" type="text" style=""> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
                                ',

    reisebeginnRowTemplate : ' \
                            <div class="row"> \
                                <div class="medium-6 columns"> \
                                    <label>Beginn der Reise *</label> \
                                    <div class="row"> \
                                    <div class="large-12 medium-12 small-12 columns"> \
                                        <input placeholder="TT.MM.JJJJ" value="" maxlength="10" name="p_reise_beginn" type="text" style=""> \
                                    </div> \
                                    </div> \
                                </div> \
                            </div> \
                                ',

    dateInputTemplate : '<input placeholder="TT.MM.JJJJ" maxlength="10" type="text" style="">',

    berufInputTemplate: '<input placeholder="" type="text" value="<%= beruf %>" maxlength="35" />',

    koopInputTemplate: '<input placeholder="" type="text" value="<%= value %>" maxlength="10" />',

    labeledContentWithMediumColumnsRowTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label><%= label %><%= required %></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <%= content %> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    labeledContentWithBigAntwortRowTemlate: ' \
                                    <div class="row"> \
                                        <div class="medium-9 columns"> \
                                            <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label><%= label %></label> \
                                            </div> \
                                            </div> \
                                            <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <%= content %>  \
                                            </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    ',

    labeledContentNumberedWithMediumColumnsRowTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <%= content %> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    labeledContentNumberedAndIdWithMediumColumnsRowTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <small style="color: black">[<%= id %>]</small> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <%= content %> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    radioInputWith2ItemsTemplate: '\
                        <div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label><%= label %><%= required %></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <div class="antwortGross frageAntwort" data-abide> \
                                            <input value="<%= valueOne %>" type="radio" id="<%= idOne %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idOne %>" class=""><%= valueOne %></label> \
                                            &nbsp;&nbsp; \
                                            <input value="<%= valueTwo %>" type="radio" id="<%= idTwo %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idTwo %>" class=""><%= valueTwo %></label> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    radioInputWith2ItemsNumberedTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <div class="antwortGross frageAntwort" data-abide> \
                                            <input value="<%= valueOne %>" type="radio" id="<%= idOne %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idOne %>" class=""><%= valueOne %></label> \
                                            &nbsp;&nbsp; \
                                            <input value="<%= valueTwo %>" type="radio" id="<%= idTwo %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idTwo %>" class=""><%= valueTwo %></label> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    radioInputWith2ItemsNumberedWithIdTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <small style="color: black">[<%= id %>]</small> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <div class="antwortGross frageAntwort" data-abide> \
                                            <input value="<%= valueOne %>" type="radio" id="<%= idOne %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idOne %>" class=""><%= valueOne %></label> \
                                            &nbsp;&nbsp; \
                                            <input value="<%= valueTwo %>" type="radio" id="<%= idTwo %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idTwo %>" class=""><%= valueTwo %></label> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    contentBoxWithRow: '\
            <div class="medium-12 contentbox"> \
            <div class="row"> \
            </div> \
            </div> \
            ',

    contentBoxWithRowAndImageTemplate: ' \
                            <div class="medium-12 contentbox"> \
                                <div class="row"> \
                                    <div class="medium-12 columns"> \
                                        <h2><i class="fa fa-user-plus fa-2x"></i> <%= content %></h2> \
                                    </div> \
                                </div> \
                            </div> \
                            ',

    errorLabelTemplate: '<small style="display: block" class="error"><%- error %></small>',

    weiterSchritt3ButtonRowTemplate: ' \
                                    <div class="medium-5 large-4 columns left"> \
                                        <p>&nbsp;</p> \
                                        <a class="button action-back expand back">zurück</a> \
                                        <p class="small-text button-subline">zu Schritt 1: "Beitrag berechnen"</p> \
                                    </div> \
                                    <div class="medium-5 large-4 columns right text-right"> \
                                        <p>&nbsp;</p> \
                                        <a class="call-to-action button expand check">weiter zu Schritt 3</a> \
                                        <p class="small-text button-subline">Eingabe der Personen- und Zahlungsdaten</p> \
                                    </div> \
                                    ',

    mehrwertBoxWeitereInfosTemplate : ' \
                                <div class="medium-11 small-12 summarybox left"> \
                                    <div class="row"> \
                                        <div class="medium-12 columns"> \
                                            <h2>Weiterführende Informationen</h2> \
                                            <ul> \
                                                <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
                                                <li><a target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                            </ul> \
                                        </div> \
                                    </div> \
                                </div> \
                            ',

    helpText: '<span data-tooltip="" class="has-tip" title="<%= helptext %>">&nbsp;<a class="info">i</a></span>',

    rowSeparator: "<hr />",

    emptyContent: '<div style="margin-bottom: 5px">',

    mehrwertBoxTemplate : ' \
                            <!-- rechte Mehrwertbox --> \
                            <div class="large-4 medium-5 columns"> \
                                <div class="row "> \
                                <!-- Ausgabe eingegebener Daten --> \
                                <div class="medium-11 small-12 summarybox right" kv_ref="content_parent"> \
                                    <div class="row" kv_ref="content"> \
                                        <div class="medium-12 columns"> \
                                            <h2>Ihre gewünschte Absicherung</h2> \
                                            <h1><%= produkt %></h1> \
                                            <p><%= produktDesc %></p> \
                                        <br kv_ref="trenner_leistungen" /> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                            '
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);
var FrageHelper = __webpack_require__(9);

function buildAngabenZurVPAndAddToRow(schrittTemplate, oContentBox) {
    var rootElement = this.rootElement;

    var that = this;

    // anrede
    var fnRowTemplate = _.template(schrittTemplate.radioInputWith2ItemsTemplate);

    var anredeRow = $(fnRowTemplate({label: "Geschlecht ", required: "*", name: "vp_geschlecht", idOne: "geschlecht_1", idTwo: "geschlecht_2", valueOne: "männlich", valueTwo: "weiblich"}));
    anredeRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "anredeRow");

    if (!SchrittRendererHelper.itemWithPseudoIdExists("anredeRow", rootElement)) {
        anredeRow.appendTo(oContentBox);
        anredeRow.find("input").eq(0).click(function() {
            that.getBO().vp.anrede = "HERR";
        });
        anredeRow.find("input").eq(1).click(function() {
            that.getBO().vp.anrede = "FRAU";
        });
    } else {
        anredeRow = SchrittRendererHelper.getItemByPseudoId("anredeRow", rootElement);
    }
    if (this.getBO().vp.anrede === "HERR") {
        anredeRow.find("input").eq(0).attr("checked", "checked");
    } else if (this.getBO().vp.anrede === "FRAU") {
        anredeRow.find("input").eq(1).attr("checked", "checked");
    }
    var fnAddAnredeError = function(errorText) {
        var anredeLabel = anredeRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorAnrede = $(fnErrorText({error: errorText}));

        errorAnrede.insertBefore(anredeLabel);
    };

    anredeRow.find(".error").remove();
    var validationErrorForAnrede = SchrittRendererHelper.getError(this.validationResult, "vp.anrede");
    if (validationErrorForAnrede) {
        fnAddAnredeError(validationErrorForAnrede);
    }
    var fnAnredeValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.anrede === "HERR" || that.getBO().vp.anrede === "FRAU") {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationAnredeObject = {
        fnErrorRemoval: function() {
            anredeRow.find(".error").remove();
        },
        fnValidation: fnAnredeValidation,
        fnAddError: function() {
            fnAddAnredeError("Die Angabe im Feld ist ungültig.");
        }
    };
    this.fnPruefen.push(validationAnredeObject);

    var prevSibling = anredeRow.last();

    // Staatsangehoerigkeit
    fnRowTemplate = _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

    var staatsangehoerigkeitSelect = $("<select />");
    var staatsangehoerigkeitRow = $(fnRowTemplate({label: "Staatsangehörigkeit ", required: "*", content: staatsangehoerigkeitSelect.prop("outerHTML")}));
    staatsangehoerigkeitRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "staatsangehoerigkeitRow");

    if (!SchrittRendererHelper.itemWithPseudoIdExists("staatsangehoerigkeitRow", rootElement)) {
        staatsangehoerigkeitRow.insertAfter(prevSibling);
    } else {
        staatsangehoerigkeitRow = SchrittRendererHelper.getItemByPseudoId("staatsangehoerigkeitRow", rootElement);
    }
    staatsangehoerigkeitSelect = staatsangehoerigkeitRow.find("select");
    staatsangehoerigkeitSelect.empty();
    if (this.getBO().svLand) {
        this.getBO().svLand.forEach(function(currLand) {
            var optionLand = $("<option value='" + currLand  +"'>" + currLand + "</option>");

            if (this.getBO().vp.staatsangehoerigkeit) {
                if (currLand === this.getBO().vp.staatsangehoerigkeit) {
                    optionLand.attr("selected", "selected");
                }
            } else if (currLand === "Deutschland") {
                this.getBO().vp.staatsangehoerigkeit = "Deutschland";
                optionLand.attr("selected", "selected");
            }
            staatsangehoerigkeitSelect.append(optionLand);
        }, this);
    }

    staatsangehoerigkeitSelect.change(function() {
        that.getBO().vp.staatsangehoerigkeit = $(this).val();
    });

    staatsangehoerigkeitRow.find(".error").remove();
    var validationErrorForStaatsangehoerigkeit = SchrittRendererHelper.getError(this.validationResult, "vp.staatsangehoerigkeit");
    var fnAddStaatsangehoerigkeitError = function(errorText) {
        var staatsangehoerigkeitLabel = staatsangehoerigkeitRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorStaatsangehoerigkeit = $(fnErrorText({error: errorText}));

        errorStaatsangehoerigkeit.insertBefore(staatsangehoerigkeitLabel);
    }
    if (validationErrorForStaatsangehoerigkeit) {
        fnAddStaatsangehoerigkeitError(validationErrorForStaatsangehoerigkeit);
    }

    var fnStaatsangehoerigkeitValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.staatsangehoerigkeit && that.getBO().vp.staatsangehoerigkeit.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationStaatsangehoerigkeitObject = {
        fnErrorRemoval: function() {
            staatsangehoerigkeitRow.find(".error").remove();
        },
        fnValidation: fnStaatsangehoerigkeitValidation,
        fnAddError: function() {
            fnAddStaatsangehoerigkeitError("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationStaatsangehoerigkeitObject);

    prevSibling = staatsangehoerigkeitRow.last();

    // Taetigkeitsstatus
    var KIND = "Kind";

    var taetigkeitsstatusSelect = $("<select />");
    var taetigkeitsstatusRow = $(fnRowTemplate({label: "Tätigkeitsstatus ", required: "*", content: taetigkeitsstatusSelect.prop("outerHTML")}));
    taetigkeitsstatusRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "taetigkeitsstatusRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("taetigkeitsstatusRow", rootElement)) {
        taetigkeitsstatusRow.insertAfter(prevSibling);
    } else {
        taetigkeitsstatusRow = SchrittRendererHelper.getItemByPseudoId("taetigkeitsstatusRow", rootElement);
    }

    taetigkeitsstatusRow.find(".error").remove();
    var fnAddTaetigkeitsstatusError = function(errorText) {
        var taetigkeitsstatusLabel = taetigkeitsstatusRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorTaetigkeitsstatus = $(fnErrorText({error: errorText}));

        errorTaetigkeitsstatus.insertBefore(taetigkeitsstatusLabel);
    }
    var validationErrorForTaetigkeitsstatus = SchrittRendererHelper.getError(this.validationResult, "vp.taetigkeitsstatus");
    if (validationErrorForTaetigkeitsstatus) {
        fnAddTaetigkeitsstatusError(validationErrorForTaetigkeitsstatus);
    }

    taetigkeitsstatusSelect = taetigkeitsstatusRow.find("select");
    taetigkeitsstatusSelect.empty();
    taetigkeitsstatusSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svTaetigkeitsstatus) {
        this.getBO().svTaetigkeitsstatus.forEach(function(currTaetigkeitsstatus) {
            var optionTaetigkeitsstatus = $("<option value='" + currTaetigkeitsstatus  +"'>" + currTaetigkeitsstatus + "</option>");

            if (this.getBO().vp.taetigkeitsstatus  === currTaetigkeitsstatus) {
                optionTaetigkeitsstatus.attr("selected", "selected");
            }
            taetigkeitsstatusSelect.append(optionTaetigkeitsstatus);
        }, this);
    }

    taetigkeitsstatusSelect.change(function() {
        var taetigkeitsstatus = $(this).val();
        if (!that.getBO().svTaetigkeitsstatus.some(function(currTaetigkeitsstatus) {
            return taetigkeitsstatus === currTaetigkeitsstatus;
        })) {
            taetigkeitsstatus = null;
        }

        that.getBO().vp.taetigkeitsstatus = taetigkeitsstatus;

        var berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
        var berufInput = berufRow.find("input");

        switch(taetigkeitsstatus) {
            case "Arbeitsloser":
                that.getBO().vp.beruf = "Arbeitsloser/e";
                berufInput.val("Arbeitsloser/e");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Hausfrau/-mann":
                that.getBO().vp.beruf = "Hausfrau, Hausmann";
                berufInput.val("Hausfrau, Hausmann");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case KIND:
                that.getBO().vp.beruf = taetigkeitsstatus;
                berufInput.val(taetigkeitsstatus);

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Pensionär":
                that.getBO().vp.beruf = "Pensionär/in";
                berufInput.val("Pensionär/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Rentner":
                that.getBO().vp.beruf = "Rentner/in";
                berufInput.val("Rentner/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Student":
                that.getBO().vp.beruf = "Student/in";
                berufInput.val("Student/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Schüler":
                that.getBO().vp.beruf = "Schüler/in";
                berufInput.val("Schüler/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            default:
                that.getBO().vp.beruf = "";
                berufInput.val("");

                SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", false);
                break;
        }

    });

    var fnTaetigkeitsstatusValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.taetigkeitsstatus && that.getBO().vp.taetigkeitsstatus.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationTaetigkeitsstatusObject = {
        fnErrorRemoval: function() {
            taetigkeitsstatusRow.find(".error").remove();
        },
        fnValidation: fnTaetigkeitsstatusValidation,
        fnAddError: function() {
            fnAddTaetigkeitsstatusError("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationTaetigkeitsstatusObject);

    prevSibling = taetigkeitsstatusRow.last();

    // Beruf

    var fnLabeledContentWithBigAntwortRowTemlate = _.template(schrittTemplate.labeledContentWithBigAntwortRowTemlate);

    var fnBerufInput = _.template(schrittTemplate.berufInputTemplate);
    var berufInput = $(fnBerufInput({ beruf : ("" || this.getBO().vp.beruf) }));

    var berufRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Ausgeübter Beruf (Nach Eingabe der ersten Buchstaben wird eine Auswahl angeboten, aus der Sie Ihren Beruf wählen können)*", content: berufInput.prop("outerHTML")}));
    berufRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "berufRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("berufRow", rootElement)) {
        berufRow.insertAfter(prevSibling);

        berufInput = berufRow.find("input");
        var oAutocompleteOptions = {
            ajaxFn: function(beruf) {
                var taetigkeitsstatus = that.getBO().vp.taetigkeitsstatus;
                that.getBO().vp.beruf = beruf;
                return that._getBerufSuggestionsFor(taetigkeitsstatus, beruf);
            },

            width: null,

            noVerifySuggestionFormat: true,

            onSelect: function(suggest) {
                that.getBO().vp.beruf = suggest.value;
            },

            onSelectCallback: function(suggestion) {
                return !suggestion.suggest;
            },

            formatResult: function(suggestion, currentValue) {
                var result = $.Autocomplete.formatResult(suggestion, currentValue);
                if (!suggestion.suggest) {
                    result = "Meinten Sie: <i>" + result + "</i>";
                }

                return result;
            },

            transformResult: function(ergebnisBeruf) {
                var result = {
                    suggestions: []
                };

                if (ergebnisBeruf.vorschlagstreffer > 0) {
                    this.suggest = true;
                    result.suggestions = ergebnisBeruf.vorschlaege.map(function(val) {
                        return {value: val.text, suggest: true};
                    });
                } else if (ergebnisBeruf.aehnlichkeitentreffer > 0) {
                    this.suggest = false;
                    result.suggestions = ergebnisBeruf.aehnlichkeiten.map(function(val) {
                        return {value: val, suggest: false};
                    });
                }

                return result;
            }
        };
        berufInput.autocomplete(oAutocompleteOptions);
        berufInput.val(this.getBO().vp.beruf);
    } else {
        berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
    }
    berufRow.find(".error").remove();
    var validationErrorForBeruf = SchrittRendererHelper.getError(this.validationResult, "vp.beruf");

    var fnAddErrorBeruf = function(errorText) {
        var berufLabel = berufRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorBeruf = $(fnErrorText({error: errorText}));

        errorBeruf.insertBefore(berufLabel);
    };

    if (validationErrorForBeruf) {
        fnAddErrorBeruf(validationErrorForBeruf);
    }

    var fnValidationBeruf = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (!that.getBO().vp.beruf || that.getBO().vp.beruf.trim().length === 0) {
            deferred.resolve(false);
        } else if (!that.getBO().vp.taetigkeitsstatus) {
            deferred.resolve(false);
        } else {
            that._getBerufSuggestionsFor(that.getBO().vp.taetigkeitsstatus, that.getBO().vp.beruf).then(function(ergebnisBeruf) {
                var ok = false;
                if (ergebnisBeruf && ergebnisBeruf.hasOwnProperty("vorschlagstreffer")) {
                    if (ergebnisBeruf.vorschlagstreffer > 0) {
                        if (ergebnisBeruf.vorschlaege.some(function(val) {
                            return val.text === that.getBO().vp.beruf;
                        })) {
                            ok = true;
                        }
                    }

                }

                deferred.resolve(ok);
            }).fail(function() {
                deferred.resolve(false);
            });
        }

        return promise;
    };

    var validationBerufObject = {
        fnErrorRemoval: function() {
            berufRow.find(".error").remove();
        },
        fnValidation: fnValidationBeruf,
        fnAddError: function() {
            fnAddErrorBeruf("Die Berufsangabe ist ungültig.");
        }
    };
    this.fnPruefen.push(validationBerufObject);


    prevSibling = berufRow.last();

    // Versicherungsstatus
    var PRIVAT_VESICHERT = "privat versichert / freie Heilfürsorge";

    var versicherungsstatusSelect = $("<select />");
    var versicherungsstatusRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Wie sind Sie krankenversichert? *", content: versicherungsstatusSelect.prop("outerHTML")}));
    versicherungsstatusRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "versicherungsstatusRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("versicherungsstatusRow", rootElement)) {
        versicherungsstatusRow.insertAfter(prevSibling);

        versicherungsstatusRow.find("select").change(function() {
            var selectedVersicherungsstatus = $(this).val();

            var krankenversicherungsschutzRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
            var krankenversicherungsschutzSelect = krankenversicherungsschutzRow.find("select");
            var koopRow = SchrittRendererHelper.getItemByPseudoId("koopRow", rootElement);

            if (selectedVersicherungsstatus === PRIVAT_VESICHERT || !selectedVersicherungsstatus) {
                krankenversicherungsschutzRow.hide();
                koopRow.hide();

                that.getBO().vp.aktuellerVersicherungsschutz = null;
                krankenversicherungsschutzSelect.find("option:selected").prop("selected", false);

                that.getBO().vp.versicherungsnummer = null;
                koopRow.find("input").val("");
            } else {
                krankenversicherungsschutzRow.show();
            }

            that.getBO().vp.versicherungsstatus = selectedVersicherungsstatus;
        });
    } else {
        versicherungsstatusRow = SchrittRendererHelper.getItemByPseudoId("versicherungsstatusRow", rootElement);
    }

    versicherungsstatusSelect = versicherungsstatusRow.find("select");

    versicherungsstatusSelect.empty();
    versicherungsstatusSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svVersicherungsstatus) {
        this.getBO().svVersicherungsstatus.forEach(function(currVersicherungsstatus) {
            var optionVersicherungsstatus = $("<option value='" + currVersicherungsstatus  +"'>" + currVersicherungsstatus + "</option>");

            if (this.getBO().vp.versicherungsstatus  === currVersicherungsstatus) {
                optionVersicherungsstatus.attr("selected", "selected");
            }
            versicherungsstatusSelect.append(optionVersicherungsstatus);
        }, this);
    }

    versicherungsstatusRow.find(".error").remove();
    var fnAddErrorVersicherungsstatus = function(errorText) {
        var versicherungsstatusLabel = versicherungsstatusRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorVersicherungsstatus = $(fnErrorText({error: errorText}));

        errorVersicherungsstatus.insertBefore(versicherungsstatusLabel);
    };

    var validationErrorForVersicherungsstatus = SchrittRendererHelper.getError(this.validationResult, "vp.versicherungsstatus");
    if (validationErrorForVersicherungsstatus) {
        fnAddErrorVersicherungsstatus(validationErrorForVersicherungsstatus);
    }

    var fnValidationVersicherungsstatus = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (that.getBO().vp.versicherungsstatus && that.getBO().vp.versicherungsstatus.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }

        return promise;
    };

    var validationVersicherungsstatusObject = {
        fnErrorRemoval: function() {
            versicherungsstatusRow.find(".error").remove();
        },
        fnValidation: fnValidationVersicherungsstatus,
        fnAddError: function() {
            fnAddErrorVersicherungsstatus("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationVersicherungsstatusObject);

    prevSibling = versicherungsstatusRow.last();

    // Krankenversicherungsschutz
    var krankenversicherungsschutzSelect = $("<select />");
    var krankenversicherungsschutzRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Bei welcher gesetzlichen Krankenkasse? *", content: krankenversicherungsschutzSelect.prop("outerHTML")}));
    krankenversicherungsschutzRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "krankenversicherungsschutzRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("krankenversicherungsschutzRow", rootElement)) {
        krankenversicherungsschutzRow.insertAfter(prevSibling);

        krankenversicherungsschutzRow.find("select").change(function() {
            var displayKoop = false;
            var selectedGKV = $(this).val();
            if (that.getBO().svKoopGKV && that.getBO().svKoopGKV.length > 0) {
                displayKoop = that.getBO().svKoopGKV.some(function(koop) {
                    return selectedGKV === koop;
                });
            }

            that.getBO().vp.aktuellerVersicherungsschutz = selectedGKV;

            if (displayKoop) {
                krankenversicherungsschutzRow.next().show();
            } else {
                krankenversicherungsschutzRow.next().hide();
                krankenversicherungsschutzRow.next().find("input").val("");
                that.getBO().vp.versicherungsnummer = "";
            }
        });
    } else {
        krankenversicherungsschutzRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
    }

    krankenversicherungsschutzSelect = krankenversicherungsschutzRow.find("select");
    if (!this.getBO().vp.gkvAuswahlMoeglich) {
        krankenversicherungsschutzSelect.prop("disabled", true);
    }

    krankenversicherungsschutzSelect.empty();
    krankenversicherungsschutzSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svGKV) {
        this.getBO().svGKV.forEach(function(currGKV) {
            var optionKrankenversicherungsschutz = $("<option value='" + currGKV  +"'>" + currGKV + "</option>");

            if (this.getBO().vp.aktuellerVersicherungsschutz === currGKV) {
                optionKrankenversicherungsschutz.attr("selected", "selected");
            }
            krankenversicherungsschutzSelect.append(optionKrankenversicherungsschutz);
        }, this);
    }
    if (this.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT || !this.getBO().vp.versicherungsstatus) {
        krankenversicherungsschutzRow.hide();
    }

    krankenversicherungsschutzRow.find(".error").remove();
    var fnAddErrorKrankenversicherungssschutz = function(errorText) {
        var krankenversicherungsschutzLabel = krankenversicherungsschutzRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorKrankenversicherungsschutz = $(fnErrorText({error: errorText}));

        errorKrankenversicherungsschutz.insertBefore(krankenversicherungsschutzLabel);
    };

    var validationErrorForKrankenversicherungsschutz = SchrittRendererHelper.getError(this.validationResult, "vp.gkv");
    if (validationErrorForKrankenversicherungsschutz) {
        fnAddErrorKrankenversicherungssschutz(validationErrorForKrankenversicherungsschutz);
    }

    var fnValidationKrankenversicherungsschutz = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (that.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT) {
            deferred.resolve(true);
        } else {
            if (that.getBO().vp.aktuellerVersicherungsschutz && that.getBO().vp.aktuellerVersicherungsschutz.length > 0) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        }

        return promise;
    };

    var validationKrankenversicherungsschutzObject = {
        fnErrorRemoval: function() {
            krankenversicherungsschutzRow.find(".error").remove();
        },
        fnValidation: fnValidationKrankenversicherungsschutz,
        fnAddError: function() {
            fnAddErrorKrankenversicherungssschutz("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationKrankenversicherungsschutzObject);

    prevSibling = krankenversicherungsschutzRow.last();

    // Koop Partner
    var fnKoopInput = _.template(schrittTemplate.koopInputTemplate);
    var koopInput = $(fnKoopInput({ value : ("" || this.getBO().vp.versicherungsnummer)}));

    var koopRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Bitte nennen Sie uns Ihre GKV-Versichertennummer (Diese finden Sie z.B. auf Ihrer Versichertenkarte) *", content: koopInput.prop("outerHTML")}));
    koopRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "koopRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("koopRow", rootElement)) {
        koopRow.insertAfter(prevSibling);

        koopRow.find("input").change(function() {
            that.getBO().vp.versicherungsnummer = $(this).val();
        });
    } else {
        koopRow = SchrittRendererHelper.getItemByPseudoId("koopRow", rootElement);
    }

    var fnCheckKoopIsRequired = function() {
        if (that.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT)
            return false;

        return that.getBO().svKoopGKV.some(function(koop) {
            return that.getBO().vp.aktuellerVersicherungsschutz === koop;
        });
    }

    if (this.getBO().svKoopGKV && that.getBO().svKoopGKV.length > 0) {
        if (!fnCheckKoopIsRequired()) {
            koopRow.hide();
        }
    }

    koopRow.find(".error").remove();
    var fnAddErrorKoop = function(errorText) {
        var koopLabel = koopRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorKoop = $(fnErrorText({error: errorText}));

        errorKoop.insertBefore(koopLabel);
    };
    var validationErrorForKoop = SchrittRendererHelper.getError(this.validationResult, "vp.gkvnr");
    if (validationErrorForKoop) {
        fnAddErrorKoop(validationErrorForKoop);
    }
    var fnValidationKoop = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (!fnCheckKoopIsRequired()) {
            deferred.resolve(true);
        } else if (!that.getBO().vp.versicherungsnummer || that.getBO().vp.versicherungsnummer.trim().length === 0) {
            deferred.resolve(false);
        } else if (!that.getBO().vp.versicherungsnummer.match(/^[A-Za-z]\d{9}$/)) {
            deferred.resolve(false);
        } else {
            deferred.resolve(true);
        }

        return promise;
    };
    var validationKoopObject = {
        fnErrorRemoval: function() {
            koopRow.find(".error").remove();
        },
        fnValidation: fnValidationKoop,
        fnAddError: function() {
            if (!that.getBO().vp.versicherungsnummer || that.getBO().vp.versicherungsnummer.trim().length === 0)
                fnAddErrorKoop("Die Angabe ist erforderlich.");
            else
                fnAddErrorKoop("Die Angabe ist ungültig.");
        }
    };
    this.fnPruefen.push(validationKoopObject);

    prevSibling = koopRow.last();


//    var validationOptKrankenversicherungsschutzObject = {
//        fnErrorRemoval: function() {
//        },
//        fnValidation: function() {
//            var deferred = $.Deferred();
//            var promise = deferred.promise();
//
//            if (that.getBO().vp.aktuellerVersicherungsschutz && that.getBO().vp.aktuellerVersicherungsschutz.length > 0 && that.getBO().vp.aktuellerVersicherungsschutz=='ausländische gesetzliche Krankenversicherung') {
//            	deferred.resolve(false);
//        	} else {
//        		deferred.resolve(true);
//        	}
//
//            return promise;
//        },
//        fnAddError: function() {
//        	var fnAddErrorKrankenversicherungssschutz = function(errorText) {
//                krankenversicherungsschutzRow.find(".error").remove();
//
//                var krankenversicherungsschutzLabel = krankenversicherungsschutzRow.find("label").first();
//                var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
//                var errorKrankenversicherungsschutz = $(fnErrorText({error: errorText}));
//                errorKrankenversicherungsschutz.insertBefore(krankenversicherungsschutzLabel);
//            };
//            fnAddErrorKrankenversicherungssschutz('Die Tarife können leider nicht online abgeschlossen werden, weil Frage [604] mit \"ausländische gesetzliche Krankenversicherung\" beantwortet wurde. Um die Voraussetzungen für die Versicherungsfähigkeit prüfen zu können, wenden Sie sich bitte an einen Betreuer. Danke!');
//        }
//    };
//    this.fnPruefen.push(validationOptKrankenversicherungsschutzObject);

}

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

var Schritt2RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt2RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt2RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(54);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt2RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;
    this.fnPruefen = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        var fnHeadTemplate = _.template(schrittTemplate.headTemplate);
        var textAnzeigepflicht = Util.getTextFromEncodedObject(this.getBO().anzeigepflicht);

        var headContent = $(fnHeadTemplate({produkt : this.getBO().produkt, anzeigepflicht: textAnzeigepflicht, versichererName: this.getBO().einstellung.versicherer.name}));
        headContent.filter("div.block").eq(0).attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "headContent");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("headContent", rootElement)) {
            headContent.appendTo(rootElement);

            // Beiblatt Anzeigepflicht
            headContent.find("a").eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckBeiblattAnzeigepflichtBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
        } else {
            headContent = SchrittRendererHelper.getItemByPseudoId("headContent", rootElement);
        }

        var lastRow = SchrittRendererHelper.getItemByPseudoId("infobox");

        // Contentbox
        var fnContentBoxWithRow = _.template(schrittTemplate.contentBoxWithRow);
        var contentBoxWithRow = $(fnContentBoxWithRow());
        contentBoxWithRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "contentBox");
        contentBoxWithRow.hide();

        if (!SchrittRendererHelper.itemWithPseudoIdExists("contentBox", rootElement)) {
            contentBoxWithRow.insertAfter(lastRow);
        } else {
            contentBoxWithRow = SchrittRendererHelper.getItemByPseudoId("contentBox", rootElement);
        }

        contentBoxWithRow.find(".commonError").remove();
        if (validationResult && validationResult.state === "NOK") {
            var commonErrors = validationResult.validationErrors.filter(function(validationError) {
                return validationError.fieldName.indexOf("vp.tarif") === 0 || validationError.fieldName === "vp.";
            });

            _.chain(commonErrors).reverse().forEach(function(commonError) {
                var fnLabeledContentWithBigAntwortRowTemlate = _.template(schrittTemplate.labeledContentWithBigAntwortRowTemlate);

                var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                var error = $(fnErrorText({error: commonError.message}));

                var errorRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Es liegen folgende Fehler vor:", content: error.prop("outerHTML")}));
                errorRow.addClass("commonError");
                errorRow.prependTo(contentBoxWithRow);
            });
            if (commonErrors.length > 0) {
                contentBoxWithRow.show();
            }
        }

        // Geburtsdatum
        var fnContentBoxWithRowAndImageTemplate = _.template(schrittTemplate.contentBoxWithRowAndImageTemplate);
        var contentBoxWithRowAndImageTemplate = $(fnContentBoxWithRowAndImageTemplate({content : "Ihre eingegebenen Daten"}));
        contentBoxWithRowAndImageTemplate.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "contentBoxIhreDaten");

        var contentBoxExists = SchrittRendererHelper.itemWithPseudoIdExists("contentBoxIhreDaten", rootElement);
        if (!contentBoxExists) {
            contentBoxWithRowAndImageTemplate.insertAfter(contentBoxWithRow);
        } else {
            contentBoxWithRowAndImageTemplate = SchrittRendererHelper.getItemByPseudoId("contentBoxIhreDaten");
        }

        var fnGeburtsdatumRowTemplate = _.template(schrittTemplate.geburtsdatumRowTemplate);
        var geburtsdatumRow = $(fnGeburtsdatumRowTemplate());
        geburtsdatumRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "geburtsdatumRow");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("geburtsdatumRow", rootElement)) {
            geburtsdatumRow.appendTo(contentBoxWithRowAndImageTemplate);

            var geburtsdatumInput = geburtsdatumRow.find("input");
            geburtsdatumInput.val(this.getBO().vp.geburtsdatum);
            geburtsdatumInput.prop('disabled', true);
        } else {
            geburtsdatumRow = SchrittRendererHelper.getItemByPseudoId("geburtsdatumRow", rootElement);
        }

        lastRow = geburtsdatumRow;

        // Fragen

        contentBoxWithRowAndImageTemplate = $(fnContentBoxWithRowAndImageTemplate({content : "Angaben zur zu versichernden Person"}));
        contentBoxWithRowAndImageTemplate.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "contentBoxAngabenZurVP");
        contentBoxExists = SchrittRendererHelper.itemWithPseudoIdExists("contentBoxAngabenZurVP", rootElement);
        if (!contentBoxExists) {
            contentBoxWithRowAndImageTemplate.insertAfter(lastRow.parent());
        } else {
            contentBoxWithRowAndImageTemplate = SchrittRendererHelper.getItemByPseudoId("contentBoxAngabenZurVP");
        }

        function fnAddFrageValidator(oFrage, validationForFrageObject) {
            that.fnPruefen.push(validationForFrageObject);
        }

        var aReisezeitraumfragen = this.getBO().vp.fragen.filter(function(oFrage) {
            return oFrage.fragetyp === "TARIFIERUNGS_FRAGE" && oFrage.angabeTyp === "REISEZEITRAUM";
        });
        lastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, false, function() {}, null, aReisezeitraumfragen, false, false, lastRow);

        var aTarifierungsfragen = this.getBO().vp.fragen.filter(function(oFrage) {
            return oFrage.fragetyp === "TARIFIERUNGS_FRAGE" && oFrage.angabeTyp !== "REISEZEITRAUM";
        });
        lastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, false, function() {}, null, aTarifierungsfragen, false, false, lastRow);

        // Angaben zur VP
        buildAngabenZurVPAndAddToRow.call(this, schrittTemplate, contentBoxWithRowAndImageTemplate);

        // Allgemeine Fragen
        lastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, true, fnAddFrageValidator, null, this.getBO().vp.antragsfragen, false, true, contentBoxWithRowAndImageTemplate.children().last());

        if (this.getBO().vp.antragsfragen && this.getBO().vp.antragsfragen.length > 0) {
            var fnWeiterSchritt3ButtonRowTemplate = _.template(schrittTemplate.weiterSchritt3ButtonRowTemplate);
            var weiterSchritt3ButtonRow = $(fnWeiterSchritt3ButtonRowTemplate());
            weiterSchritt3ButtonRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "weiterSchritt3ButtonRow");

            if (!SchrittRendererHelper.itemWithPseudoIdExists("weiterSchritt3ButtonRow", rootElement)) {
                weiterSchritt3ButtonRow.find("a").eq(0).click(function(event) {
                    event.preventDefault();

                    that._zurueck();
                });
                weiterSchritt3ButtonRow.find("a").eq(1).click(function(event) {
                    event.preventDefault();

                    that.setBusy(true);
                    that._pruefe().always(function() {
                        that.setBusy(false);
                    });
                });

                weiterSchritt3ButtonRow.appendTo(SchrittRendererHelper.getItemByPseudoId("hinweis_block", rootElement));
            } else {
                weiterSchritt3ButtonRow = SchrittRendererHelper.getItemByPseudoId("weiterSchritt3ButtonRow", rootElement);
            }
            lastRow = weiterSchritt3ButtonRow;
        }

        var weiterfuehrendeInformationenRow = $(_.template(schrittTemplate.weiterfuehrendeInformationenRow)());
        var weiterfuehrendeInformationen = SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement);
        if (weiterfuehrendeInformationen.length==0) {
            weiterfuehrendeInformationenRow.insertAfter(SchrittRendererHelper.getItemByPseudoId("hinweis_block", rootElement));
        }

        var link = SchrittRendererHelper.getItemByPseudoId("aussergerichtliche_streitbeilegung");
        link.prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

        defer.resolve();

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);

            setTimeout(function() {
                var staatsangehoerigkeitRow = SchrittRendererHelper.getItemByPseudoId("staatsangehoerigkeitRow", rootElement);
                var helpTextTemplate = _.template(schrittTemplate.helpText);
                var helpText = $(helpTextTemplate({helptext: "Bitte wählen Sie die Staatsangehörigkeit der zu versichernden Person aus."}));
                helpText.insertAfter(staatsangehoerigkeitRow.find("select"));

                var taetigkeitsstatusRow = SchrittRendererHelper.getItemByPseudoId("taetigkeitsstatusRow", rootElement);
                helpText = $(helpTextTemplate({helptext: "Damit wir prüfen können, ob Sie im ausgewählten Tarif versichert werden können, benötigen wir den Tätigkeitsstatus."}));
                helpText.insertAfter(taetigkeitsstatusRow.find("select"));

                var berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
                helpText = $(helpTextTemplate({helptext: "Damit wir prüfen können, ob Sie im ausgewählten Tarif versichert werden können, benötigen wir Ihren ausgeübten Beruf."}));
                helpText.insertAfter(berufRow.find("input"));

                var gkvRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
                helpText = $(helpTextTemplate({helptext: "Dank der Kooperation zu ausgewählten Krankenkassen können wir Ihnen einen vergünstigten Beitrag anbieten – Sollten Sie Mitglied bei dem entsprechenden Partner sein. Geben Sie hierfür bitte den Namen Ihrer Krankenkasse oder Gesellschaft an."}));
                helpText.insertAfter(gkvRow.find("select"));

                window.jQuery(document).trigger('if6_page_ready');
            }, 0);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

        window.jQuery(document).trigger('if6_page_ready');
    }.bind(this));

    return defer.promise();
};

Schritt2RendererIF6.prototype._getBerufSuggestionsFor = function(taetigkeitsstatus, beruf) {
    return this.oProdukt.getBerufSuggestionsFor(taetigkeitsstatus, beruf);
};

Schritt2RendererIF6.prototype._getBerufSuggestionsFor = function(taetigkeitsstatus, beruf) {
    return this.oProdukt.getBerufSuggestionsFor(taetigkeitsstatus, beruf);
};

Schritt2RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt2RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt2RendererIF6.prototype._getDruckstueckBeiblattAnzeigepflichtBOandUrl = function() {
    return this.oProdukt.getDruckstueckBeiblattAnzeigepflichtBOandUrl(this.getBO());
};

Schritt2RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt2RendererIF6.prototype._pruefe = function() {
    var deferred = $.Deferred();

    this._checkDeferreds(this.fnPruefen).then(function() {
        this.oProdukt.pruefe().then(function() {
            deferred.resolve.apply(deferred, arguments);
        }).fail(function() {
            deferred.reject.apply(deferred, arguments);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        });
    }.bind(this)).fail(function() {
        deferred.reject();
        SchrittRendererHelper.scrollToFirstError(this.rootElement);
    }.bind(this));

    return deferred.promise();
};

Schritt2RendererIF6.prototype._checkDeferreds = function(fnWithDeferreds) {
    var deferred = $.Deferred();

    var promises = [];

    fnWithDeferreds.forEach(function(oFnWithDeferred) {
        oFnWithDeferred.fnErrorRemoval();

        var promise = oFnWithDeferred.fnValidation();
        promises.push(promise);

        $.when(promise).then(function(result) {
            if (!result) {
                oFnWithDeferred.fnAddError();
            }
        });
    });

    $.when.apply($, promises).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
            deferred.resolve();
        } else {
            deferred.reject();
        }
    }.bind(this));

    return deferred.promise();
};

module.exports = Schritt2RendererIF6;


/***/ }),
/* 54 */
/***/ (function(module, exports) {

module.exports = {
    headTemplate: ' \
                    <!-- Progress / Header --> \
                    <div class="block" kv_ref="kvo_content"> \
                        <ul class="progress"> \
                            <li class="">1</li> \
                            <li class="active">2</li> \
                            <li class="">3</li> \
                            <li class="">4</li> \
                            <li class="">5</li> \
                        </ul>\
                        <h2>Antrag auf Auslandsreise-Krankenversicherung nach Tarif GesundheitGLOBAL</h2> \
                    </div> \
                    <!-- Contentbereich --> \
                    <div class="block" kv_ref="kvo-content"> \
                        <div class="bline btext-only"> \
                            <div><strong>Ich beantrage bei der Union Krankenversicherung AG den Abschluss der zuvor ausgewählten Krankenversicherung(en), gegebenenfalls als Vertragsänderung.</strong><br> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                    </div> \
                    <div class="block" kv_ref="infobox"> \
                        <h3>Vorvertragliche Anzeigepflicht</h3> \
                        <div class="bline btext-only"> \
                            <div></span><%= anzeigepflicht %>&nbsp;\
<a href="javascript:void(0);">Beiblatt zur vorvertraglichen Anzeigepflicht.</a>\
                            </div> \
                            <br class="bterm"> \
                        </div> \
                    </div> \
                    <!-- Dateneingabeblock --> \
                    <!-- Hinweisblock --> \
                    <div class="block" kv_ref="hinweis_block"> \
                        <div class="bline btext-only"> \
                            <div><strong>Hinweis:</strong> Die mit einem (*) gekennzeichneten Felder benötigen wir für die Bearbeitung Ihres Antrags.<br> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                    </div>',

    geburtsdatumRowTemplate : ' \
                                <div class="bline" kv_ref="geburtsdatumRow"> \
                                    <label class="longlabel" kv_ref="geburtstagLabel">Geburtsdatum<em>*</em>:</label> \
                                    <input type="text" name="p_geb_datum" class="il" maxlength="10" placeholder="TT.MM.JJJJ"> \
                                    <br class="bterm" /> \
                                    <br class="bterm" /> \
                                </div> \
                                ',

    reisebeginnRowTemplate : ' \
                                <div class="bline"> \
                                    <label>Beginn der Reise<em>*</em>:</label> \
                                    <input type="text" name="p_reise_beginn" class="il" maxlength="10" placeholder="TT.MM.JJJJ"> \
                                    <br class="bterm" /> \
                                    <br class="bterm" /> \
                                </div> \
                                ',

    dateInputTemplate : '<input type="text" class="il" maxlength="10" placeholder="TT.MM.JJJJ">',

    berufInputTemplate: '<input placeholder="" type="text" value="<%= beruf %>" maxlength="35" />',

    koopInputTemplate: '<input placeholder="" type="text" value="<%= value %>" maxlength="10" />',

    labeledFrageContentWithMediumColumnsRowTemplate:
				        '<div class="bline"> \
				            <label class="longlabel" style="height: auto;" ><%= label %><%= required %></label> \
				            <%= content %> \
				            <br class="bterm" /> \
				        </div>',

    labeledContentWithMediumColumnsRowTemplate:
                        '<div class="bline"> \
                            <label class="longlabel" style="height: auto;" ><%= label %><%= required %></label> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    labeledContentWithBigAntwortRowTemlate:
                        '<div class="bline"> \
                            <label class="longlabel" style="height: auto;" ><%= label %></label> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    labeledContentNumberedWithMediumColumnsRowTemplate:
                        '<div class="bline"> \
                            <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label class="longlabel" style="height: auto;"><%= label %> <%= required %></label></div> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    labeledContentNumberedAndIdWithMediumColumnsRowTemplate:
                        '<div class="bline"> \
                            <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label class="longlabel" style="height: auto;" ><%= label %> <small style="color: black">[<%= id %>]</small> <%= required %></label></div> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    radioInputWith2ItemsTemplate: '\
                        <div class="bline"> \
                            <label class="longlabel" style="height: auto"><%= label %><em><%= required %></em>:</label> \
    	                    <div>\
                            <input id="<%= idOne %>" name="<%= name %>" value="<%= valueOne %>" type="radio"> \
                            <label><%= valueOne %></label> \
                            <br class="bterm" /> \
    	                    </div>\
                        </div>  \
                        <div class="bline bcontinue"> \
                            <input id="<%= idTwo %>" name="<%= name %>" value="<%= valueTwo %>" type="radio"> \
                            <label><%= valueTwo %></label> \
                           <br class="bterm" /> \
                           <br class="bterm" /> \
                        </div>',


    radioInputWith2ItemsNumberedTemplate: '\
                        <div class="bline"> \
                            <label class="longlabel" style="height: auto"><%= number %>. <%= label %><em><%= required %></em>:</label> \
                            <div>\
                            <input id="<%= idOne %>" name="<%= name %>" value="<%= valueOne %>" type="radio"><span class="radio"></span> \
                            <label><%= valueOne %></label> \
                            <br class="bterm" /> \
                            </div>\
                        </div>  \
                        <div class="bline bcontinue"> \
                            <input id="<%= idTwo %>" name="<%= name %>" value="<%= valueTwo %>" type="radio"><span class="radio"></span> \
                            <label><%= valueTwo %></label> \
                           <br class="bterm" /> \
                           <br class="bterm" /> \
                        </div>',

    radioInputWith2ItemsNumberedWithIdTemplate:
                        '<div class="bline"> \
                            <label class="longlabel" style="height: auto"><%= number %>. <%= label %><em><small style="color: black">[<%= id %>]</small><%= required %></em>:</label> \
                            <div>\
                            <input id="<%= idOne %>" name="<%= name %>" value="<%= valueOne %>" type="radio"><span class="radio"></span> \
                            <label><%= valueOne %></label> \
    	                    <br class="bterm" /> \
                            </div>\
                        </div>  \
                        <div class="bline bcontinue"> \
                            <input id="<%= idTwo %>" name="<%= name %>" value="<%= valueTwo %>" type="radio"><span class="radio"></span> \
                            <label><%= valueTwo %></label> \
                            <br class="bterm" /> \
                        </div>',

    contentBoxWithRow: '\
                        <div class="contentbox block"> \
                            <div class="bline"> \
                            </div>  \
                        </div> \
                        ',

    contentBoxWithRowAndImageTemplate: ' \
                        <div class="contentbox block"> \
                            <h3><%= content %></h3> \
                            <div class="bline"> \
                            </div>  \
                        </div> \
                        ',

    errorLabelTemplate: '\
                        <div class="blineover error"> \
                            <div class="msgerror"> \
                                <ul> \
                                    <li><%- error %></li> \
                                </ul> \
                            </div> \
                        </div>',

    weiterSchritt3ButtonRowTemplate: ' \
                                    <div class="buttonline"> \
                                        <div class="bgroup2"> \
                                            <div> \
                                                <a class="zurueck" href="javascript:void(0);"><input type="button" value="zurück" onclick="javascript:void(0);" class="" title="zurück"></input></a> \
                                            </div> \
                                        </div> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <a class="GesundheitGLOBALPREMIUM" href="javascript:void(0);"><input type="button" value="weiter zu Schritt 3" onclick="javascript:void(0);" class="" title="weiter zu Schritt 3"></input></a> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    ',

    weiterfuehrendeInformationenRow: '\
                <div class="block" style="height: auto;" kv_ref="weiterfuehrendeInformationenRow"> \
                    <div class="service_center_box_title">Weiterführende Informationen</div> \
                    <div class="service_center_box_parsys parsys"> \
                        <div class="parbase service_center_thema section"> \
                            <a class="service_center_thema_link" target="_blank" href="javascript:void(0);" kv_ref="aussergerichtliche_streitbeilegung"> \
                                <span class="service_center_thema_link_text">Außergerichtliche Streitbeilegung</span> \
                            </a> \
                        </div> \
                    </div> \
                </div>',

    helpText: '<div class="helptxt" title="<%= helptext %>">?</div>',

    rowSeparator: '<br class="bterm" />',

    emptyContent: '<div style="margin-bottom: 5px">'
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);
var FrageHelper = __webpack_require__(7);

function buildKontoinhaber() {
    var kontoinhaber = "";
    if (this.getBO().vn.vorname) {
        kontoinhaber = this.getBO().vn.vorname;
    }
    if (this.getBO().vn.name) {
        if (kontoinhaber.length > 0)
            kontoinhaber += " ";
        kontoinhaber += this.getBO().vn.name;
    }

    return kontoinhaber;
}

function buildPropExtractorFn(obj, prop) {
    return function() {
        return Util.getProp(obj, [prop]) || "";
    };
}

function buildDefaultValidatorFn() {
    return function(propVal) {
        if (propVal === null || propVal.trim().length === 0) {
            return false;
        }

        return true;
    };
}

function buildErrorCheckFn(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, fieldName) {
    var validationAndErrorText = {
        fnValidation : buildDefaultValidatorFn(),

        errorText : "Die Angabe im Feld " + (fieldName ? fieldName + " " : "")  + "ist erforderlich."
    }

    return buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, [validationAndErrorText]);
}

function buildErrorCheckFnWithErrorHandling(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText) {
    var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");

    return function() {
        var deferred = $.Deferred();

        var subDeferreds = [];

        aFnValidationAndErrorText.every(function(validationAndErrorText) {
            var fnValidation = validationAndErrorText.fnValidation;
            var ok = fnValidation(fnPropExtractor());

            label.parent().find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
            var addError = function() {
                var error = $(fnErrorLabelTemplate({error: validationAndErrorText.errorText}));
                error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                error.insertAfter(label);
            }

            var subDeferred = $.Deferred();
            var proceed;

            if (Util.isPromise(ok)) {
                proceed = true;
                ok.then(function() {
                    subDeferred.resolve(true);
                }).fail(function() {
                    addError();
                    subDeferred.resolve(false);
                });
            } else if (ok) {
                subDeferred.resolve(true);
                proceed = true;
            } else {
                addError();
                subDeferred.resolve(false);
                proceed = false;
            }

            subDeferreds.push(subDeferred.promise());

            return proceed;
        });

        $.when.apply($, subDeferreds).then(function() {
            if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        });

        return deferred.promise();
    };
}

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

var Schritt3Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt3Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt3Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(56);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt3Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate({
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: this.getBO().einstellung.modul.tariftyp,
                lastschriftText: Util.getTextFromEncodedObject(this.getBO().texte.lastschrift)
            }));
            content.appendTo(rootElement);

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                that._pruefe();
            });

            var links = SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement).find("a");
            links.eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            links.eq(2).prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

            var fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);
            var errorTextInputIsRequired = "Die Angabe im Feld ist erforderlich.";

            // VP

            var anrede = this.getBO().vp.anrede === "HERR" ? "Herr" : "Frau";
            SchrittRendererHelper.getItemByPseudoId("vp_anrede", rootElement, "input").val(anrede);

            var vpVornameInput = SchrittRendererHelper.getItemByPseudoId("vp_vorname", rootElement, "input");
            vpVornameInput.val(this.getBO().vp.vorname);
            vpVornameInput.change(function() {
                that.getBO().vp.vorname = $(this).val();

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.vorname = that.getBO().vp.vorname;

                    SchrittRendererHelper.getItemByPseudoId("vn_vorname", rootElement, "input").val(that.getBO().vn.vorname);
                    var kontoinhaber = buildKontoinhaber.call(that);
                    SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vp, "vorname"), "vp_vorname", "Vorname"));

            var vpNameInput = SchrittRendererHelper.getItemByPseudoId("vp_name", rootElement, "input");
            vpNameInput.val(this.getBO().vp.name || "");
            vpNameInput.change(function() {
                that.getBO().vp.name = $(this).val();

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.name = that.getBO().vp.name;

                    SchrittRendererHelper.getItemByPseudoId("vn_name", rootElement, "input").val(that.getBO().vn.name);
                    var kontoinhaber = buildKontoinhaber.call(that);
                    SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vp, "name"), "vp_name", "Familienname"));

            SchrittRendererHelper.getItemByPseudoId("vp_geburtsdatum", rootElement, "input").val(this.getBO().vp.geburtsdatum);

            // VN

            if (!this.getBO().vp.isVn) {
                SchrittRendererHelper.getItemByPseudoId("hinweis", rootElement).show();
            } else {
                SchrittRendererHelper.getItemByPseudoId("hinweis", rootElement).hide();
            }

            var vnAnredeInput = SchrittRendererHelper.getItemByPseudoId("vn_anrede", rootElement, "select");
            if (this.getBO().vn.anrede) {
                vnAnredeInput.val(this.getBO().vn.anrede);
            }
            if (this.getBO().vp.isVn) {
                vnAnredeInput.prop("disabled", true);
            } else {
                vnAnredeInput.prop("disabled", false);
            }
            vnAnredeInput.change(function() {
                that.getBO().vn.anrede = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "anrede"), "vn_anrede", "Anrede"));

            var vnTitelInput = SchrittRendererHelper.getItemByPseudoId("vn_titel", rootElement, "input");
            vnTitelInput.val(this.getBO().vn.titel || "");
            vnTitelInput.change(function() {
                that.getBO().vn.titel = $(this).val();
            });

            var vnVornameInput = SchrittRendererHelper.getItemByPseudoId("vn_vorname", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnVornameInput.prop("disabled", true);
            } else {
                vnVornameInput.prop("disabled", false);
            }
            vnVornameInput.val(this.getBO().vn.vorname || "");
            vnVornameInput.change(function() {
                that.getBO().vn.vorname = $(this).val();

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "vorname"), "vn_vorname", "Vorname"));

            var vnNameInput = SchrittRendererHelper.getItemByPseudoId("vn_name", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnNameInput.prop("disabled", true);
            } else {
                vnNameInput.prop("disabled", false);
            }
            vnNameInput.val(this.getBO().vn.name || "");
            vnNameInput.change(function() {
                that.getBO().vn.name = $(this).val();

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "name"), "vn_name", "Familienname"));

            var vnGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId("vn_geburtsdatum", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnGeburtsdatumInput.prop("disabled", true);
            } else {
                vnGeburtsdatumInput.prop("disabled", false);
            }
            vnGeburtsdatumInput.val(this.getBO().vn.geburtsdatum || "");
            //vnGeburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
            vnGeburtsdatumInput.inputmask({alias: "datum"});
            var geburtsdatumHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().vn.geburtsdatum = res;
                } else {
                    that.getBO().vn.geburtsdatum = unmaskedValue;
                }
            };
            vnGeburtsdatumInput.keyup(geburtsdatumHandler);
            vnGeburtsdatumInput.blur(geburtsdatumHandler);
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "geburtsdatum"), "vn_geburtsdatum", [{
                fnValidation: function(propVal) {
                    return !!Util.parseAsDateAndFormatAsString(propVal);
                },

                errorText: "Die Angabe im Feld ist kein gültiges Datum."
            }, {
                fnValidation: function(propVal) {
                    var res = Util.parseAsDateObject(propVal);

                    if (res) {
                        return Util.calculateAlter(res) >= 18;
                    }
                },
                errorText: "Der/Die Versicherungsnehmer/in muss mindestens 18 Jahre alt sein."
            }]));

            var vnPlzInput = SchrittRendererHelper.getItemByPseudoId("vn_plz", rootElement, "input");
            vnPlzInput.val(this.getBO().vn.plz || "");
            vnPlzInput.change(function() {
                that.getBO().vn.plz = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "plz"), "vn_plz", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\d{5}$/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige Postleitzahl."
            }, {
                fnValidation: function(propVal) {
                    //if (!that.getBO().einstellung.betreuer && (that.getBO().einstellung.betreuerwahl && that.getBO().betreuer.manuelleAuswahl === false || !that.getBO().einstellung.betreuerwahl))  {
                        return that.oProdukt.checkBetreuergebiet(propVal);
                    /*} else {
                        return true;
                    }*/
                },

                errorText: "Die Postleitzahl befindet sich nicht in einem von uns betreuten Gebiet."
            }]));

            var vnOrtInput = SchrittRendererHelper.getItemByPseudoId("vn_ort", rootElement, "input");
            vnOrtInput.val(this.getBO().vn.ort || "");
            vnOrtInput.change(function() {
                that.getBO().vn.ort = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "ort"), "vn_ort", "Ort"));

            var vnStrasseInput = SchrittRendererHelper.getItemByPseudoId("vn_strasse", rootElement, "input");
            vnStrasseInput.val(this.getBO().vn.strasse || "");
            vnStrasseInput.change(function() {
                that.getBO().vn.strasse = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "strasse"), "vn_strasse", "Strasse"));

            var vnHausnrInput = SchrittRendererHelper.getItemByPseudoId("vn_hausnr", rootElement, "input");
            vnHausnrInput.val(this.getBO().vn.hausnr || "");
            vnHausnrInput.change(function() {
                that.getBO().vn.hausnr = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "hausnr"), "vn_hausnr", "Hausnr."));

            var vnTelefonInput = SchrittRendererHelper.getItemByPseudoId("vn_telefon", rootElement, "input");
            vnTelefonInput.val(this.getBO().vn.telefon || "");
            vnTelefonInput.change(function() {
                that.getBO().vn.telefon = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "telefon"), "vn_telefon", [{
                fnValidation: function(propVal) {
                    if (propVal === undefined || propVal === null || propVal === "")
                        return true;
                    return propVal.match(/^(?:\+\d+)?\s*(?:\(\d+\)\s*(?:[\/–-]\s*)?)?\d+(?:\s*(?:[\s\/–-]\s*)?\d+)*$/);
                },

                errorText: "Die Angabe im Feld ist keine gültige Telefonnummer."
            }]));

            var vnMailInput = SchrittRendererHelper.getItemByPseudoId("vn_mail", rootElement, "input");
            vnMailInput.val(this.getBO().vn.mail || "");
            vnMailInput.change(function() {
                that.getBO().vn.mail = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "mail"), "vn_mail", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige E-Mail Adresse."
            }]));

            SchrittRendererHelper.getItemByPseudoId("vn_zahlungsart", rootElement, "input").val(this.getBO().vn.zahlungsdaten.zahlungsart || "");

            var zahlungsweiseInput = SchrittRendererHelper.getItemByPseudoId("vn_zahlungsweise", rootElement, "select");
//            zahlungsweiseInput.val(this.getBO().vn.zahlungsdaten.zahlungsweise || "");
            if (this.getBO().zahlungsweisen) {
            	var vnzw = this.getBO().vn.zahlungsdaten.zahlungsweise;
                zahlungsweiseInput.empty();
            	zahlungsweiseInput.append($("<option value='Bitte wählen'>Bitte wählen</option>"));
                this.getBO().zahlungsweisen.forEach(function(zw) {
                    var optionZw = $("<option value='" + zw  +"'>" + zw + "</option>");
                    if (zw === vnzw) {
                    	optionZw.attr("selected", "selected");
                    }

                    zahlungsweiseInput.append(optionZw);
                }, this);
            }
            zahlungsweiseInput.change(function() {
                var zahlungsweise = $(this).val();
                that.getBO().vn.zahlungsdaten.zahlungsweise = zahlungsweise;

                var textAndBeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(that.validationResult && that.validationResult.vpTarife.length > 0 ? that.validationResult.vpTarife[0] : null, zahlungsweise);
                SchrittRendererHelper.getItemByPseudoId("beitrag_row").find("label").first().text(textAndBeitrag.text);
                SchrittRendererHelper.getItemByPseudoId("beitrag_row").find("input").first().val(textAndBeitrag.value + " \u20AC");
                SchrittRendererHelper.getItemByPseudoId("detail_beitrag_gesamt_row").find("label").first().text(textAndBeitrag.text);
                SchrittRendererHelper.getItemByPseudoId("detail_beitrag_gesamt_row").find("input").first().val(textAndBeitrag.value + " \u20AC");
                SchrittRendererHelper.getItemByPseudoId("detail_beitrag_row").find("input").first().val(textAndBeitrag.value + " \u20AC");
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten, "zahlungsweise"), "vn_zahlungsweise", "Zahlungsweise"));

            var kontoinhaber = buildKontoinhaber.call(this);
            SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);

            var ibanCheck = $("#p_kontotyp_iban");
            var ktoCheck = $("#p_kontotyp_kto");

            var ibanBlock = SchrittRendererHelper.getItemByPseudoId("block_iban", rootElement);
            var ktoBlock = SchrittRendererHelper.getItemByPseudoId("block_kto", rootElement);
            var bankBlock = SchrittRendererHelper.getItemByPseudoId("block_bank", rootElement);

            var ibanInput = SchrittRendererHelper.getItemByPseudoId("vn_iban", rootElement, "input");
            var bicInput = SchrittRendererHelper.getItemByPseudoId("vn_bic", rootElement, "input");
            var blzInput = SchrittRendererHelper.getItemByPseudoId("vn_blz", rootElement, "input");
            var ktoInput = SchrittRendererHelper.getItemByPseudoId("vn_kto", rootElement, "input");
            var bankInput = SchrittRendererHelper.getItemByPseudoId("vn_bank", rootElement, "input");

            if (this.getBO().vn.zahlungsdaten.iban.selected) {
                ibanCheck.prop("checked", true);
                ktoCheck.prop("checked", false);

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            } else if (this.getBO().vn.zahlungsdaten.kto.selected) {
                ibanCheck.prop("checked", false);
                ktoCheck.prop("checked", true);

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            }
            ibanInput.val(this.getBO().vn.zahlungsdaten.iban.no || "");
            bicInput.val(this.getBO().vn.zahlungsdaten.iban.bic || "");
            blzInput.val(this.getBO().vn.zahlungsdaten.kto.blz || "");
            ktoInput.val(this.getBO().vn.zahlungsdaten.kto.no || "");
            bankInput.val(this.getBO().vn.zahlungsdaten.bank || "");

            ibanCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = true;
                that.getBO().vn.zahlungsdaten.kto.selected = false;

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            });
            ktoCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = false;
                that.getBO().vn.zahlungsdaten.kto.selected = true;

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, "vn_kontotyp", [{
                fnValidation: function() {
                    return that.getBO().vn.zahlungsdaten.kto.selected === true || that.getBO().vn.zahlungsdaten.iban.selected === true ? true : false;
                },

                errorText: "Die Auswahl im Feld Kontotyp ist erforderlich."
            }]));

            bankInput.change(function() {
                that.getBO().vn.zahlungsdaten.bank = $(this).val();
            });

            $(ibanInput).change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.iban.no = val;
            });

            $(bicInput).change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });

            $(ibanInput).av_suggest_iban({
                bancfield: bankInput,
                bicfield: bicInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("ibanerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "no"), "vn_iban", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.no === null || that.getBO().vn.zahlungsdaten.iban.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d(?: \d{4} \d{4} \d{4} \d{4}) \d\d$/);
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    var deferred = $.Deferred();
                    that._checkIBAN(that.getBO().vn.zahlungsdaten.iban.no).then(function(oResult) {
                        if (oResult.state === "OK" && oResult.ergebnisIban === 0) {
                            var res = that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d (\d{4} \d{4}) \d{4} \d{4} \d\d$/);
                            if (res) {
                                that._getBLZSuggestionsFor(res[1].split(' ').join('')).then(function(oResult) {
                                    if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                        var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#(.*)/);
                                        if (bank) {
                                            that.getBO().vn.zahlungsdaten.bank = bank[1];
                                            bankInput.val(bank[1]);
                                            that.getBO().vn.zahlungsdaten.iban.bic = bank[2];
                                            bicInput.val(bank[2]);
                                            deferred.resolve(true);
                                        } else {
                                            deferred.reject(false);
                                        }
                                    } else {
                                        deferred.reject(false);
                                    }
                                }).fail(function() {
                                    deferred.reject(false);
                                });
                            } else {
                                deferred.reject(false);
                            }
                        } else {
                            deferred.reject(false);
                        }
                    }).fail(function() {
                        deferred.reject(false);
                    });

                    return deferred.promise();
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }]));

            bicInput.change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "bic"), "vn_bic", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.bic === null || that.getBO().vn.zahlungsdaten.iban.bic === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.bic.length === 0) {
                        return false;
                    }
                    return true;
                },

                errorText: "Die Angabe im Feld BIC ist ungültig."
            }]));

            ktoInput.change(function() {
                that.getBO().vn.zahlungsdaten.kto.no = $(this).val();
            });

            blzInput.change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.kto.blz = val;
            });
            blzInput.av_suggest_banc({
                bancfield: bankInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("blzerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "no"), "vn_kto", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no === null || that.getBO().vn.zahlungsdaten.kto.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.kto.no.match(/^\d{5,10}$/);
                },

                errorText: "Die Angabe im Feld Kontonummer ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no != null && that.getBO().vn.zahlungsdaten.kto.no.length > 0 &&
                        that.getBO().vn.zahlungsdaten.kto.blz != null && that.getBO().vn.zahlungsdaten.kto.blz.length > 0) {
                        var deferred = $.Deferred();
                        that._checkKonto(that.getBO().vn.zahlungsdaten.kto.blz, that.getBO().vn.zahlungsdaten.kto.no).then(function(oResult) {
                            if (oResult.state === "OK" && oResult.ergebnisKonto === 0) {
                                deferred.resolve(true);
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    }

                    return true;
                },

                errorText: "Die angegebene Bankverbindung ist ungültig."
            }]));
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_blz", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.blz === null || that.getBO().vn.zahlungsdaten.kto.blz === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.blz.length === 0) {
                        return false;
                    }
                    if (that.getBO().vn.zahlungsdaten.kto.blz.match(/^\d{5,10}$/)) {
                        var deferred = $.Deferred();

                        that._getBLZSuggestionsFor(that.getBO().vn.zahlungsdaten.kto.blz).then(function(oResult) {
                            if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#.*/);
                                if (bank) {
                                    that.getBO().vn.zahlungsdaten.bank = bank[1];
                                    bankInput.val(bank[1]);
                                    deferred.resolve(true);
                                } else {
                                    deferred.reject(false);
                                }
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    } else {
                        return false;
                    }
                },

                errorText: "Die Angabe im Feld Bankleitzahl ist ungültig."
            }]));

            //
            var ksmCheck = SchrittRendererHelper.getItemByPseudoId("vn_ksm", rootElement, "input");
            if (this.getBO().vn.zahlungsdaten.ksmSelected) {
                ksmCheck.prop("checked", true);
            }
            ksmCheck.change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vn.zahlungsdaten.ksmSelected = true;
                } else {
                    that.getBO().vn.zahlungsdaten.ksmSelected = false;
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_ksm", [{
                fnValidation: function(propVal) {
                    return (that.getBO().vn.zahlungsdaten.ksmSelected);
                },

                errorText: "Ihre Zustimmung ist erforderlich."
            }]));

            //
            if (!that.getBO().einstellung.betreuerFestDefiniert && (that.getBO().einstellung.betreuerwahl === true || that.getBO().einstellung.betreuer)) {
                var ksmBlockRow = SchrittRendererHelper.getItemByPseudoId("ksm_block", rootElement);

                var fnBetreuerSeparator = _.template(schrittTemplate.betreuerSeparator);
                var betreuerSeparator = $(fnBetreuerSeparator());
                betreuerSeparator.insertAfter(ksmBlockRow);

                var fnBetreuerauswahlRow = _.template(schrittTemplate.betreuerauswahlRow);
                var betreuerauswahlRow = $(fnBetreuerauswahlRow({beraterauswahl: that.getBO().einstellung.betreuerwahl ? "Beraterauswahl" : "Ihr Berater"}));
                betreuerauswahlRow.insertAfter(betreuerSeparator);

                var nextPositionToInsert = betreuerauswahlRow;

                if (that.getBO().einstellung.betreuer) {
                    var fnBetreuerRow =_.template(schrittTemplate.betreuerRowTemplate);
                    var betreuerLabel = that.getBO().einstellung.betreuer.beschreibungen.join("<br />");
                    var betreuerRow = $(fnBetreuerRow({betreuerLabel : betreuerLabel}));
                    betreuerRow.insertAfter(nextPositionToInsert);
                    nextPositionToInsert = betreuerRow.last();
                }
                if (that.getBO().einstellung.betreuerwahl) {
                    var fnBetreuerSelectionRow = _.template(schrittTemplate.betreuerauswahlEntscheidungRow);
                    var betreuerSelectionRow = $(fnBetreuerSelectionRow());
                    betreuerSelectionRow.insertAfter(nextPositionToInsert);

                    var fnAddBetreuerItems;

                    //

                    var fnBetreuerWaehlenRow = _.template(schrittTemplate.betreuerWaehlenRow);
                    var betreuerWaehlenRow = $(fnBetreuerWaehlenRow());

                    if (!that.getBO().betreuer.manuelleAuswahl) {
                        betreuerWaehlenRow.hide();
                    }
                    betreuerWaehlenRow.insertAfter(betreuerSelectionRow);

                    betreuerWaehlenRow.find("a").click(function() {
                        var kv_ref_name = that.getBO().einstellung.betreuerzwang ? "betreuer_waehlen_label" : "betreuer_auswahl";
                        var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                        label.parent().find(".error").remove();
                        if (!that.getBO().vn.plz || !that.getBO().vn.plz.match(/^\d{5}$/)) {
                            var error = $(fnErrorLabelTemplate({error: "Geben Sie eine PLZ an."}));
                            error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                            error.insertAfter(label);
                        } else {
                            that.setBusy(true);
                            $(".betreuerInput").remove();
                            SchrittRendererHelper.getItemByPseudoId("betreuerInDerNaehe", rootElement).hide();
                            that._getBetreuerliste().then(function(betreuerliste) {
                                that.getBO().betreuer.auswahlListe = betreuerliste;
                                if (betreuerliste) {
                                    SchrittRendererHelper.getItemByPseudoId("betreuerInDerNaehe", rootElement).show();
                                    that.getBO().betreuer.auswahlListe.forEach(fnAddBetreuerItems);
                                }
                            }).fail(function(errorText) {
                                if (!errorText) {
                                    errorText = "Die Beratersuche ist fehlgeschlagen."
                                }
                                var error = $(fnErrorLabelTemplate({error: errorText}));
                                error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                                error.insertAfter(label);
                            }).always(function() {
                                that.setBusy(false);
                            });;
                        }
                    });

                    //

                    var fnBetreuerInDerNaeheRow = _.template(schrittTemplate.betreuerInDerNaeheRow);
                    var betreuerInDerNaeheRow = $(fnBetreuerInDerNaeheRow());

                    if (!that.getBO().betreuer.manuelleAuswahl) {
                        betreuerInDerNaeheRow.hide();
                    }
                    betreuerInDerNaeheRow.insertAfter(betreuerWaehlenRow);

                    //

                    var fnBetreuerInputRowTemplate = _.template(schrittTemplate.betreuerInputRowTemplate);
                    var lastPositionToAdd = betreuerInDerNaeheRow;
                    fnAddBetreuerItems = function(betreuer, index) {
                        if (index === 0) {
                            lastPositionToAdd = betreuerInDerNaeheRow;
                        }
                        var betreuerInputRow = $(fnBetreuerInputRowTemplate({betreuerVal: index, betreuerLabel: betreuer.beschreibungen.join(", ")}));
                        if (!that.getBO().betreuer.manuelleAuswahl) {
                            betreuerInputRow.hide();
                        }
                        betreuerInputRow.insertAfter(lastPositionToAdd);
                        betreuerInputRow.find("input").click(function() {
                            var selection = $(this).val();
                            if (selection !== null && selection !== undefined) {
                                selection = parseInt(selection);
                            }
                            that.getBO().betreuer.auswahlListe.forEach(function(betreuer, index) {
                                if (index === selection)
                                    betreuer.selected = true;
                                else
                                    betreuer.selected = false;
                            });
                        });

                        lastPositionToAdd = betreuerInputRow;
                    };

                    if (that.getBO().betreuer.auswahlListe) {
                        that.getBO().betreuer.auswahlListe.forEach(fnAddBetreuerItems);

                        $(".betreuerInput :input").prop("checked", false);
                        that.getBO().betreuer.auswahlListe.some(function(betreuer, index) {
                            if (betreuer.selected) {
                                $(".betreuerInput :input").eq(index).prop("checked", true);
                                return true;
                            }
                            return  false;
                        });
                    }

                    //

                    betreuerSelectionRow.find("input").eq(0).click(function() {
                        that.getBO().betreuer.manuelleAuswahl = true;

                        SchrittRendererHelper.getItemByPseudoId("betreuer_waehlen", rootElement).show();

                    });
                    betreuerSelectionRow.find("input").eq(1).click(function() {
                        that.getBO().betreuer.manuelleAuswahl = false;

                        SchrittRendererHelper.getItemByPseudoId("betreuer_waehlen", rootElement).hide();
                        SchrittRendererHelper.getItemByPseudoId("betreuerInDerNaehe", rootElement).hide();
                        $(".betreuerInput").remove();
                        that.getBO().betreuer.auswahlListe = null;
                    });
                    if (that.getBO().betreuer.manuelleAuswahl) {
                        betreuerSelectionRow.find("input").eq(0).prop("checked", true);
                    } else if (that.getBO().betreuer.manuelleAuswahl === false) {
                        betreuerSelectionRow.find("input").eq(1).prop("checked", true);
                    }
                    if (this.getBO().einstellung.betreuerzwang) {
                        betreuerSelectionRow.hide();

                        this.getBO().betreuer.manuelleAuswahl = true;
                        SchrittRendererHelper.getItemByPseudoId("betreuer_waehlen", rootElement).show();
                    }

                    this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, that.getBO().einstellung.betreuerzwang ? "betreuer_waehlen_label" : "betreuer_auswahl", [{
                        fnValidation: function(propVal) {
                            if (that.getBO().betreuer.manuelleAuswahl === null) {
                                return false;
                            } else if (that.getBO().betreuer.manuelleAuswahl) {
                                if (!that.getBO().betreuer.auswahlListe)
                                    return false;
                                else if (!that.getBO().betreuer.auswahlListe.some(function(betreuer) {
                                    return betreuer.selected;
                                })) {
                                    return false;
                                }
                            }
                            return true;
                        },

                        errorText: "Geben Sie eine Beraterauswahl an und wählen nach Klick auf 'Berater wählen' Ihren Berater aus."
                    }]));

                    this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, this.getBO().einstellung.betreuerzwang ? "betreuer_waehlen_label" : "betreuer_auswahl", [{
                        fnValidation: function(propVal) {
                        	if (!that.getBO().einstellung.betreuer && that.getBO().einstellung.betreuerwahl && that.getBO().betreuer.manuelleAuswahl === true) {
                        		var betreuer = null;
                        		that.getBO().betreuer.auswahlListe.some(function(currentBetreuer) {
                                    if (currentBetreuer.selected) {
                                    	betreuer = currentBetreuer;
                                    	return true;
                                    }
                                    return false;
                        		});
                        		if (betreuer && betreuer.detailFetchRequired===true) {
                        			var deferred = $.Deferred();
                        	    	that.oProdukt.getBetreuerdetailsFor(betreuer).then(function(betreuer2){
                        	    		Util.merge(betreuer2, betreuer);
                        	    		deferred.resolve(true);
                        	    	}).fail(function(){
                        	    		deferred.reject(false);
                        	    	});
                        	    	return deferred.promise();
                        		}
                        	}
                        	return true;
                        },

                        errorText: "Die Beraterdaten konnten nicht ermittelt werden. Bitte versuchen es erneut."
                    }]));
                }
            }
            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            this.getBO().einstellung.modul.leistungen.forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });
        }

        var nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("absicherungContent", rootElement);

        if (this.validationResult && this.validationResult.state === "OK") {
            $(".tarifbeitragContent").remove();
            $(".accordion").remove();

            if (this.validationResult.vpTarife && this.validationResult.vpTarife.length > 0) {
                this.validationResult.vpTarife.forEach(function(tarif) {
                    if (tarif.ausgewaehlt && !tarif.augesteuert) {
                        var textAndBeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(that.validationResult && that.validationResult.vpTarife.length > 0 ? that.validationResult.vpTarife[0] : null, that.getBO().vn.zahlungsdaten.zahlungsweise);
                        var mehrwertBoxTarifbeitragTemplate = _.template(schrittTemplate.mehrwertBoxTarifbeitragTemplate);
                        var tarifbeitragContent = $(mehrwertBoxTarifbeitragTemplate({zahlungsweiseGesamtbeitrag: textAndBeitrag.text, beitragGesamtbeitrag: textAndBeitrag.value}));

                        tarifbeitragContent.insertAfter(nextPositionToPut);
                        tarifbeitragContent.addClass("tarifbeitragContent");
                        nextPositionToPut = tarifbeitragContent[tarifbeitragContent.length-1];

                        var mehrwertBoxTarifAccordionStartTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionStartTemplate);
                        var mehrwertBoxTarifAccordionStart = $(mehrwertBoxTarifAccordionStartTemplate({text : "Reisende/r, " + that.getBO().vp.geburtsdatum}));
                        mehrwertBoxTarifAccordionStart.insertAfter(nextPositionToPut);
                        nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("accordion", mehrwertBoxTarifAccordionStart);

                        mehrwertBoxTarifAccordionStart.find("a").click(function(){
                            mehrwertBoxTarifAccordionStart.find("a").toggleClass("active");
                            mehrwertBoxTarifAccordionStart.find("div.content").toggleClass("active");
                        });

                        var tarifWertContentTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionTarifWertTemplate);
                        var tarifWertContent = $(tarifWertContentTemplate({tarif: that.getBO().produkt, wert: textAndBeitrag.value}));
                        tarifWertContent.insertAfter(nextPositionToPut);

                        nextPositionToPut = tarifWertContent[tarifWertContent.length-1];

                        var accordionEndTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionEndTemplate);
                        var accordionEnd = $(accordionEndTemplate({zahlungsweiseGesamtbeitrag: textAndBeitrag.text, beitragGesamtbeitrag: textAndBeitrag.value}));
                        accordionEnd.insertAfter(nextPositionToPut);
                    }
                }, this);
            }
        }
        if (this.getBO().vn.zahlungsdaten.zahlungsweise) {
            var textAndBeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(this.validationResult && this.validationResult.vpTarife.length > 0 ? this.validationResult.vpTarife[0] : null, this.getBO().vn.zahlungsdaten.zahlungsweise);
            SchrittRendererHelper.getItemByPseudoId("beitrag_row").find("label").first().text(textAndBeitrag.text);
            SchrittRendererHelper.getItemByPseudoId("beitrag_row").find("input").first().val(textAndBeitrag.value + " \u20AC");
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

       	window.jQuery(document).foundation();

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt3Renderer.prototype._getBetreuerliste = function() {
    return this.oProdukt.getBetreuerlisteFor(this.getBO().vn.plz);
};

Schritt3Renderer.prototype._checkKonto = function(blz, no) {
    return this.oProdukt.checkKonto(blz, no);
};

Schritt3Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt3Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt3Renderer.prototype._checkIBAN = function(iban) {
    return this.oProdukt.checkIBAN(iban);
};

Schritt3Renderer.prototype._getBLZSuggestionsFor = function(blz) {
    return this.oProdukt.getBLZSuggestionsFor(blz);
};

Schritt3Renderer.prototype._getIbanSuggestionsFor = function(iban) {
    return this.oProdukt.getIbanSuggestionsFor(iban);
};

Schritt3Renderer.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt3Renderer.prototype._pruefe = function() {
    var that = this;
    var deferreds = [];

    this.fnErrorChecks.forEach(function(fnErrorCheck) {
        deferreds.push(fnErrorCheck());
    });

    that.setBusy(true);
    $.when.apply($, deferreds).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
            return val === true;
        })) {
            that.oProdukt.weiter();
        } else {
            SchrittRendererHelper.scrollToFirstError(that.rootElement);
        }
    }).always(function() {
        that.setBusy(false);
        SchrittRendererHelper.scrollToFirstError(that.rootElement);
    });
};

module.exports = Schritt3Renderer;


/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = {
    mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%= produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
                                <div class="rowX"> \
                                            <ol class="progress-indicator"> \
                                                    <li class="" data-step="1"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="2"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-current" data-step="3"> \
                                                        <span>Personen- und Zahlungsdaten</span> \
                                                    </li> \
                                                    <li class="" data-step="4"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-last" data-step="5"> \
                                                        <span>Online beantragen</span> \
                                                    </li> \
                                            </ol> \
                                        </div> \
                                \
                                </div> \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <!-- Pflichtfelder, SSL --> \
                                    <div class="kvo-content-2"> \
    \
                                    <div class="kvo-title"> \
                                        <h1>Personen- und Zahlungsdaten</h1> \
                                        <div class="row"> \
                                            <div class="large-12 medium-12 columns"> \
                                                <span>Danke für Ihre Mühe bei der Beantwortung der Absicherungs-Fragen. Zur Ausstellung Ihres Versicherungssscheins benötigen wir noch einige persönliche Angaben und eine Bankverbindung.</span> \
                                                <p>&nbsp;</p> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    <div class="row"> \
                                        <div class="medium-12 contentbox"> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2><i class="fa fa-user-plus fa-2x"></i> Zu versichernde Person</h2> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label kv_ref="vp_anrede">Anrede *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input type="text" kv_ref="vp_anrede" readonly="readonly"></input> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vp_vorname"></label> <label kv_ref="vp_name"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Vorname *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Vorname" type="text" value="" maxlength="35" kv_ref="vp_vorname"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Nachname *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Nachname" type="text" value="" maxlength="35" kv_ref="vp_name"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vp_geburtsdatum">Geburtsdatum *</label> \
                                                <div class="row"> \
                                                    <div class="large-12 medium-12 small-12 columns"> \
                                                    <input class="intType autoTab" placeholder="TT.MM.JJJJ" value="" maxlength="10" readonly="readonly" kv_ref="vp_geburtsdatum" type="text"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        \
                                        <hr> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2><i class="fa fa-user-circle fa-2x"></i> Versicherungsnehmer (mindestens 18 Jahre)</h2> \
                                            </div> \
                                        </div> \
                                        <div class="row datasummary" kv_ref="hinweis" style="display: none"> \
                                            <div class="medium-9 small-9 columns"> \
                                                <i class="fa fa-info-circle"></i> <b>Hinweis:</b> Bei Versicherung von minderjährigen Kindern darf nur ein Erziehungsberechtigter als Versicherungsnehmer angegeben werden. \
                                            </div> \
                                            <div class="medium-3 small-3 columns dataEdit text-center"> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_anrede"></label><label kv_ref="vn_titel"></label>  \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Anrede *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <select kv_ref="vn_anrede"> \
                                                        <option value="">Bitte auswählen</option> \
                                                        <option value="HERR"> Herr</option> \
                                                        <option value="FRAU"> Frau</option> \
                                                    </select> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Titel (optional)</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Titel" maxlength="35" type="text" value="" kv_ref="vn_titel"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_vorname"></label><label kv_ref="vn_name"></label>  \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Vorname *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Vorname" maxlength="35" type="text" value="" kv_ref="vn_vorname"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Nachname *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Nachname" type="text" value="" maxlength="35" kv_ref="vn_name"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_geburtsdatum">Geburtsdatum *</label> \
                                                <div class="row"> \
                                                    <div class="large-12 medium-12 small-12 columns"> \
                                                    <input class="intType autoTab" placeholder="TT.MM.JJJJ" value="" maxlength="10" kv_ref="vn_geburtsdatum" type="text"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_plz"></label> <label kv_ref="vn_ort"></label>\
                                            </div> \
                                            <div class="large-6 medium-12 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="medium-4 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label>PLZ *</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="PLZ" type="text" value="" maxlength="5" kv_ref="vn_plz"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                    <div class="medium-8 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label>Ort *</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="Hauptwohnsitz muss in D sein" type="text" value="" maxlength="35" kv_ref="vn_ort"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_strasse"></label> <label kv_ref="vn_hausnr"></label> \
                                            </div> \
                                            <div class="large-6 medium-12 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="medium-8 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label>Strasse *</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="Strasse" type="text" value="" maxlength="35" kv_ref="vn_strasse"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                    <div class="medium-4 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label kv_ref="vn_hausnr">Hausnr. *</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="Nr." type="text" value="" maxlength="5" kv_ref="vn_hausnr"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_telefon">Telefon (optional)<span data-tooltip="" class="has-tip" title="Rückfragen zu Ihren Angaben sind am einfachsten telefonisch zu klären. Durch die Angabe Ihrer Telefonnummer helfen Sie uns, dass wir bei Unklarheiten schneller Ihren Versicherungsschutz in die Wege leiten können.">&nbsp;<a class="info">i</a></span></label> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Telefon" type="text" value="" maxlength="24" kv_ref="vn_telefon"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_mail">E-Mail *<span data-tooltip="" class="has-tip" title="Bitte geben Sie Ihre E-Mail-Adresse an, damit wir Ihnen nach Abschluss von <%= produkt %> umgehend Ihre Versicherungsbestätigung schicken können.">&nbsp;<a class="info">i</a></span></label> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="E-Mail" type="text" value="" maxlength="50" kv_ref="vn_mail"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
    \
                                        <hr> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-eur fa-stack-1x fa-inverse"></i></span> Zahlungsdaten</h2> \
                                                <p class="sumContent">SEPA-Lastschriftmandat für wiederkehrende SEPA-Basislastschriften</p> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_zahlungsart"></label> \<label kv_ref="vn_zahlungsweise"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                    <div class="small-12 columns" data-abide> \
                                                    <label>Zahlungsart<span data-tooltip="" class="has-tip" title="Bei uns können Sie Ihre fälligen Versicherungsbeiträge bequem per Lastschrift bezahlen. Wählen Sie einfach dazu noch Ihre gewünschte Zahlungsweise aus. Ein Online-Abschluss mit einem ausländischen SEPA-Konto ist leider nicht möglich. Um die Versicherung abschließen zu können, wenden Sie sich bitte an Ihren Berater.">&nbsp;<a class="info">i</a></span></label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input type="text" readonly="readonly" value="" kv_ref="vn_zahlungsart"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                    <div class="small-12 columns" data-abide> \
                                                    <label>Gewünschte Zahlungsweise *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <select kv_ref="vn_zahlungsweise"> \
                                                        <option value="">Bitte auswählen</option> \
                                                        <option value="monatlich">monatlich</option> \
                                                        <option value="vierteljährlich">vierteljährlich</option> \
                                                        <option value="halbjährlich">halbjährlich</option> \
                                                        <option value="jährlich">jährlich</option> \
                                                    </select> \
    \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <div class="row"> \
                                                    <div class="small-12 columns" data-abide> \
                                                    <label kv_ref="vn_bank_inhaber">Kontoinhaber (Versicherungsnehmer)</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input type="text" readonly="readonly" value="" kv_ref="vn_bank_inhaber"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-12 columns" data-abide> \
                                                <label kv_ref="vn_kontotyp">Angabe der Bankverbindung *</label> \
                                                <div class="row"> \
                                                    <div class="medium-6 columns"> \
                                                        <input value="ja" type="radio" id="p_kontotyp_iban" style="border: 0px; width: 20px" name="p_kontotyp"><label for="p_kontotyp_iban" class="">IBAN (22 stellig)</label> \
                                                    </div> \
                                                    <div class="medium-6 columns"> \
                                                    <input value="nein" type="radio" id="p_kontotyp_kto" style="border: 0px; width: 20px" name="p_kontotyp"><label for="p_kontotyp_kto" class="">Kontonr. und Bankleitzahl</label> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div style="display: none;" kv_ref="block_iban" class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_iban"></label> \<label kv_ref="vn_bic"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>IBAN *</label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <span role="status" aria-live="polite" class="ui-helper-hidden-accessible"></span><input maxlength="34" type="text" value="" placeholder="DE12 3456 7890 1234 5678 90" kv_ref="vn_iban"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>BIC </label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <input placeholder="BIC" maxlength="11" type="text" value="" kv_ref="vn_bic"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div  style="display: none;" kv_ref="block_kto"class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_blz"></label> \<label kv_ref="vn_kto"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>Bankleitzahl *</label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <span role="status" aria-live="polite" class="ui-helper-hidden-accessible"></span><input placeholder="Bankleitzahl" maxlength="8" type="text" value="" kv_ref="vn_blz"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>Kontonummer *</label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <input placeholder="Kontonummer" maxlength="15" type="text" value="" kv_ref="vn_kto"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div style="display: none;" class="row" kv_ref="block_bank"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_bank">Name der Bank (wird automatisch ausgefüllt) *</label> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Name der Bank" maxlength="100" type="text" value="" kv_ref="vn_bank"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-12 columns" data-abide> \
                                                <label kv_ref="vn_ksm">&nbsp;</label> \
                                            </div> \
                                        </div> \
                                        <div class="row dataSummary" kv_ref="ksm_block"> \
                                            <div class="small-1 columns"> \
                                                <input value="true" type="checkbox" kv_ref="vn_ksm" id="p_ksm"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_ksm"></label> \
                                            </div> \
                                            <div class="small-11 columns"> \
                                                <%= lastschriftText %><span data-tooltip="" class="has-tip" title="Indem Sie das Häkchen setzen, geben Sie uns Ihre Einwilligung, den Versicherungsbeitrag per SEPA-Lastschrift von Ihrem Konto einziehen zu dürfen. Auch die Versicherungsleistungen überweisen wir mit dieser Einwilligung auf Ihr genanntes Konto.">&nbsp;<a class="info">i</a></span> \
                                            </div> \
                                        </div> \
                                        </div> \
                                        <!-- Buttons --> \
                                        <div class="row"> \
                                        <div class="medium-5 large-4 columns left"> \
                                            <p>&nbsp;</p> \
                                            <a class="button action-back expand back">zurück</a> \
                                            <p class="small-text button-subline">zu Schritt 2: "Antrag ausfüllen"</p> \
                                        </div> \
                                        <div class="medium-5 large-4 columns right text-right"> \
                                            <p>&nbsp;</p> \
                                            <a class="call-to-action button expand check">weiter zu Schritt 4</a> \
                                            <p class="small-text button-subline">Überprüfung der Angaben</p> \
                                        </div> \
                                        </div> \
    \
                                </div></div><div class="row ssl"> \
                                        <div class="columns medium-12 "> \
                                        <p>&nbsp;</p> \
                                        <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                        <br> \
                                        <span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                        </div> \
                                    </div> \
                                </div> \
    \
    \
                                <div class="large-4 medium-5 columns"> \
                                 	<div class="row "> \
                                        <!-- Ausgabe eingegebener Daten --> \
                                     	<div class="medium-11 small-12 summarybox right"> \
                                          	<div class="row" kv_ref="absicherungContent"> \
                                               	<div class="medium-12 columns"> \
                                                    <h2>Ihre gewünschte Absicherung</h2> \
                                                    <h1><%= produkt %></h1> \
                                                    <p><%= produktDesc %></p> \
                                                    <br kv_ref="trenner_leistungen" /> \
                                                </div> \
                                            </div> \
                                            <div class="medium-11 small-12 summarybox left"> \
                                                <div class="row" kv_ref="weiterfuehrendeInformationenRow"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Weiterführende Informationen</h2> \
                                                        <ul> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
                                                            <li><a target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                                        </ul> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                     </div> \
                                  </div> \
                              </div> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>',


    mehrwertBoxTarifbeitragTemplate: ' \
                                    <div class="row display-sum" kv_ref="beitrag_row"> \
                                        <div class="medium-7 small-8 columns"> \
                                            <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                        </div> \
                                        <div class="medium-5 small-4 columns"> \
                                            <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                        </div> \
                                    </div> \
                                        ',

    mehrwertBoxTarifAccordionStartTemplate:
                                        ' \
                                        <dl class="accordion" data-accordion=""> \
                                            <dd class="accordion-navigation active"> \
                                                <a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
                                                <div id="panel1a" class="content active"> \
                                                    <div class="row" kv_ref="accordion"> \
                                                        <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= text %><br />(Zu versichernde Person)</label> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </dd> \
                                        </dl> \
                                        ',

    mehrwertBoxTarifAccordionTarifWertTemplate:
                                        ' \
                                        <div class="row" kv_ref="detail_beitrag_row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label><%= tarif %></label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= wert %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        <hr> \
                                        ',

    mehrwertBoxTarifAccordionEndTemplate:
                                        ' \
                                        <div class="row" kv_ref="detail_beitrag_gesamt_row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        ',

    betreuerauswahlRow: ' \
                        <div class="row"> \
                            <div class="medium-12 columns"> \
                                <h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-map-marker fa-stack-1x fa-inverse"></i></span> <%= beraterauswahl %></h2> \
                                <p class="sumContent"></p> \
                            </div> \
                        </div> \
                        ',

    betreuerSeparator: '<hr>',

    betreuerauswahlEntscheidungRow: ' \
                                    <div class="row"> \
                                        <div class="medium-12 columns"> \
                                            <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="betreuer_auswahl">Möchten Sie einen Berater in Ihrer Nähe auswählen?</label> \
                                            </div> \
                                            </div> \
                                            <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <input type="radio" value="ja" id="p_betreuerauswahl_ja" name="p_betreuerauswahl"><label for="p_betreuerauswahl_ja" class="">ja</label> \
                                                &nbsp;&nbsp; \
                                                <input type="radio" value="nein" id="p_betreuerauswahl_nein" name="p_betreuerauswahl"><label for="p_betreuerauswahl_nein" class="">nein</label> \
                                            </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    ',

    betreuerInDerNaeheRow: ' \
                        <div class="row betreuerAuswahl" kv_ref="betreuerInDerNaehe"> \
                            <div class="medium-12 columns"> \
                                <p><br>Berater in Ihrer Nähe:</p> \
                            </div> \
                        </div> \
                        ',

    betreuerInputRowTemplate: ' \
                            <div class="row betreuerAuswahl betreuerInput"> \
                            <div class="medium-12 columns"> \
                                <input type="radio" value="<%= betreuerVal %>" id="p_betreuer_<%= betreuerVal %>" name="p_betreuer"><label for="p_betreuer_<%= betreuerVal %>" class=""><%= betreuerLabel %></label> \
                            </div> \
                            </div> \
                            ',

    betreuerRowTemplate: ' \
                            <div class="row"> \
                            <div class="medium-12 columns"> \
                                <%= betreuerLabel %> \
                            </div> \
                            </div> \
                            <br /> \
                            ',

    betreuerWaehlenRow: ' \
                                <div class="row" kv_ref="betreuer_waehlen"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label kv_ref="betreuer_waehlen_label"></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-5 large-4 columns left text-right"> \
                                        <p>&nbsp;</p> \
                                        <a href="javascript:void(0);" class="button expand">Berater wählen</a> \
                                    </div> \
                                </div> \
                                </div> \
                                ',

    errorLabelTemplate: '<small style="display: block" class="error"><%- error %></small>'

};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

function buildKontoinhaber() {
    var kontoinhaber = "";
    if (this.getBO().vn.vorname) {
        kontoinhaber = this.getBO().vn.vorname;
    }
    if (this.getBO().vn.name) {
        if (kontoinhaber.length > 0)
            kontoinhaber += " ";
        kontoinhaber += this.getBO().vn.name;
    }

    return kontoinhaber;
}

function buildPropExtractorFn(obj, prop) {
    return function() {
        return Util.getProp(obj, [prop]) || "";
    };
}

function buildDefaultValidatorFn() {
    return function(propVal) {
        if (propVal === null || propVal.trim().length === 0) {
            return false;
        }

        return true;
    };
}

function buildErrorCheckFn(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, fieldName, followingFnValidationAndErrorText) {
    var validationAndErrorText = {
        fnValidation : buildDefaultValidatorFn(),

        errorText : "Die Angabe im Feld " + (fieldName ? fieldName + " " : "")  + "ist erforderlich."
    }

    var aFnValidationAndErrorText = !followingFnValidationAndErrorText ? [validationAndErrorText] : [validationAndErrorText, followingFnValidationAndErrorText];
    return buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText);
}

function buildErrorXSSValidatorObj() {
    var validationAndErrorText = {
            fnValidation : function(propVal) {
            	if (propVal) {
            		var c;
        	    	for (var i=0; i<propVal.length; i++) {
        	    		c = propVal.charAt(i);
            	    	if (c=='['  || c==';' || c=='(' || c==')'
        	        		|| c=='"'  || c=='´' || c=='`' || c==','
        	        		|| c=='<'  || c=='>' || c=='/' || c=='\\'
        	        		/*|| c=='\''*/  || c=='=' || c=='#' || c==']')
        	    		   return false;
        	    	}
        	    	return true;
        	    }
    	    	return true;
            },

            //errorText: "Die Sonderzeichen [;()\"´`,<>/\\'=#] sind nicht erlaubt."
            errorText: "Die Sonderzeichen [;()\"´`,<>/\\=#] sind nicht erlaubt."
        };

    return validationAndErrorText;
}

function buildErrorXSSValidatorFn(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, followingFnValidationAndErrorText) {
	var validationAndErrorText = buildErrorXSSValidatorObj.call(this);

    var aFnValidationAndErrorText = !followingFnValidationAndErrorText ? [validationAndErrorText] : [validationAndErrorText, followingFnValidationAndErrorText];
    return buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText);
}

function buildErrorCheckFnWithErrorHandling(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText) {
    var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");

    return function() {
        var deferred = $.Deferred();

        var subDeferreds = [];

        aFnValidationAndErrorText.every(function(validationAndErrorText) {
            var fnValidation = validationAndErrorText.fnValidation;
            var ok = fnValidation(fnPropExtractor());

            label.parent().find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
            var addError = function() {
                var error = $(fnErrorLabelTemplate({error: validationAndErrorText.errorText}));
                error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                error.insertBefore(label);
            }

            var subDeferred = $.Deferred();
            var proceed;

            if (Util.isPromise(ok)) {
                proceed = true;
                ok.then(function() {
                    subDeferred.resolve(true);
                }).fail(function() {
                    addError();
                    subDeferred.resolve(false);
                });
            } else if (ok) {
                subDeferred.resolve(true);
                proceed = true;
            } else {
                addError();
                subDeferred.resolve(false);
                proceed = false;
            }

            subDeferreds.push(subDeferred.promise());

            return proceed;
        });

        $.when.apply($, subDeferreds).then(function() {
            if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        });

        return deferred.promise();
    };
}

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

var Schritt3RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt3RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt3RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(58);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt3RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate({
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: this.getBO().einstellung.modul.tariftyp,
                lastschriftText: Util.getTextFromEncodedObject(this.getBO().texte.lastschrift)
            }));
            content.appendTo(rootElement);

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                that._pruefe();
            });

            var fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);
            var errorTextInputIsRequired = "Die Angabe im Feld ist erforderlich.";

            // VP

            var vpAnredeHerrInput = SchrittRendererHelper.getItemByPseudoId("vp_anrede_herr", rootElement, "input");
            var vpAnredeFrauInput = SchrittRendererHelper.getItemByPseudoId("vp_anrede_frau", rootElement, "input");
            if (this.getBO().vp.anrede === "HERR") {
                vpAnredeHerrInput.prop("checked", true);
                vpAnredeFrauInput.prop("checked", false);
            } else if (this.getBO().vp.anrede === "FRAU") {
                vpAnredeHerrInput.prop("checked", false);
                vpAnredeFrauInput.prop("checked", true);
            }
            vpAnredeHerrInput.click(function() {
                that.getBO().vp.anrede = "HERR";

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.anrede = that.getBO().vp.anrede;

                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input")).prop("checked", true);
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input")).next().addClass("checked");
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input")).prop("checked", false);
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input")).next().removeClass("checked");
                }
            });
            vpAnredeFrauInput.click(function() {
                that.getBO().vp.anrede = "FRAU";

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.anrede = that.getBO().vp.anrede;

                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input")).prop("checked", false);
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input")).next().removeClass("checked");
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input")).prop("checked", true);
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input")).next().addClass("checked");
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vp, "anrede"), "vp_anrede_herr", "Anrede"));

            var vpVornameInput = SchrittRendererHelper.getItemByPseudoId("vp_vorname", rootElement, "input");
            vpVornameInput.val(this.getBO().vp.vorname);
            vpVornameInput.change(function() {
                that.getBO().vp.vorname = $(this).val();

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.vorname = that.getBO().vp.vorname;

                    SchrittRendererHelper.getItemByPseudoId("vn_vorname", rootElement, "input").val(that.getBO().vn.vorname);
                    var kontoinhaber = buildKontoinhaber.call(that);
                    SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vp, "vorname"), "vp_vorname", "Vorname", buildErrorXSSValidatorObj.call(this)));

            var vpNameInput = SchrittRendererHelper.getItemByPseudoId("vp_name", rootElement, "input");
            vpNameInput.val(this.getBO().vp.name || "");
            vpNameInput.change(function() {
                that.getBO().vp.name = $(this).val();

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.name = that.getBO().vp.name;

                    SchrittRendererHelper.getItemByPseudoId("vn_name", rootElement, "input").val(that.getBO().vn.name);
                    var kontoinhaber = buildKontoinhaber.call(that);
                    SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vp, "name"), "vp_name", "Familienname", buildErrorXSSValidatorObj.call(this)));

            SchrittRendererHelper.getItemByPseudoId("vp_geburtsdatum", rootElement, "input").val(this.getBO().vp.geburtsdatum);

            // VN

            if (!this.getBO().vp.isVn) {
                SchrittRendererHelper.getItemByPseudoId("hinweis", rootElement).show();
            } else {
                SchrittRendererHelper.getItemByPseudoId("hinweis", rootElement).hide();
            }

            var vnAnredeHerrInput = SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input");
            var vnAnredeFrauInput = SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input");
            if (this.getBO().vn.anrede === "HERR") {
                vnAnredeHerrInput.prop("checked", true);
                vnAnredeFrauInput.prop("checked", false);
            } else if (this.getBO().vn.anrede === "FRAU") {
                vnAnredeHerrInput.prop("checked", false);
                vnAnredeFrauInput.prop("checked", true);
            }
            if (this.getBO().vp.isVn) {
                vnAnredeHerrInput.prop("disabled", true);
                vnAnredeFrauInput.prop("disabled", true);
            } else {
                vnAnredeHerrInput.prop("disabled", false);
                vnAnredeFrauInput.prop("disabled", false);
            }
            vnAnredeHerrInput.click(function() {
                that.getBO().vn.anrede = "HERR";
            });
            vnAnredeFrauInput.click(function() {
                that.getBO().vn.anrede = "FRAU";
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "anrede"), "vn_anrede_herr", "Anrede"));

            var vnTitelInput = SchrittRendererHelper.getItemByPseudoId("vn_titel", rootElement, "input");
            vnTitelInput.val(this.getBO().vn.titel || "");
            vnTitelInput.change(function() {
                that.getBO().vn.titel = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorXSSValidatorFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "titel"), "vn_titel"));

            var vnVornameInput = SchrittRendererHelper.getItemByPseudoId("vn_vorname", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnVornameInput.prop("disabled", true);
            } else {
                vnVornameInput.prop("disabled", false);
            }
            vnVornameInput.val(this.getBO().vn.vorname || "");
            vnVornameInput.change(function() {
                that.getBO().vn.vorname = $(this).val();

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "vorname"), "vn_vorname", "Vorname", buildErrorXSSValidatorObj.call(this)));

            var vnNameInput = SchrittRendererHelper.getItemByPseudoId("vn_name", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnNameInput.prop("disabled", true);
            } else {
                vnNameInput.prop("disabled", false);
            }
            vnNameInput.val(this.getBO().vn.name || "");
            vnNameInput.change(function() {
                that.getBO().vn.name = $(this).val();

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "name"), "vn_name", "Familienname", buildErrorXSSValidatorObj.call(this)));

            var vnGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId("vn_geburtsdatum", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnGeburtsdatumInput.prop("disabled", true);
            } else {
                vnGeburtsdatumInput.prop("disabled", false);
            }
            vnGeburtsdatumInput.val(this.getBO().vn.geburtsdatum || "");
            //vnGeburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
            vnGeburtsdatumInput.inputmask({alias: "datum"});
            var geburtsdatumHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().vn.geburtsdatum = res;
                } else {
                    that.getBO().vn.geburtsdatum = unmaskedValue;
                }
            };
            vnGeburtsdatumInput.keyup(geburtsdatumHandler);
            vnGeburtsdatumInput.blur(geburtsdatumHandler);
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "geburtsdatum"), "vn_geburtsdatum", [{
                fnValidation: function(propVal) {
                    return !!Util.parseAsDateAndFormatAsString(propVal);
                },

                errorText: "Die Angabe im Feld ist kein gültiges Datum."
            }, {
                fnValidation: function(propVal) {
                    var res = Util.parseAsDateObject(propVal);

                    if (res) {
                        return Util.calculateAlter(res) >= 18;
                    }
                },
                errorText: "Der/Die Versicherungsnehmer/in muss mindestens 18 Jahre alt sein."
            }]));

            var vnPlzInput = SchrittRendererHelper.getItemByPseudoId("vn_plz", rootElement, "input");
            vnPlzInput.val(this.getBO().vn.plz || "");
            vnPlzInput.change(function() {
                that.getBO().vn.plz = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "plz"), "vn_plz", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\d{5}$/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige Postleitzahl."
            }, {
                fnValidation: function(propVal) {
                    //if (!that.getBO().einstellung.betreuer && (that.getBO().einstellung.betreuerwahl && that.getBO().betreuer.manuelleAuswahl === false || !that.getBO().einstellung.betreuerwahl))  {
                        return that.oProdukt.checkBetreuergebiet(propVal);
                    /*} else {
                        return true;
                    }*/
                },

                errorText: "Die Postleitzahl befindet sich nicht in einem von uns betreuten Gebiet."
            }]));

            var vnOrtInput = SchrittRendererHelper.getItemByPseudoId("vn_ort", rootElement, "input");
            vnOrtInput.val(this.getBO().vn.ort || "");
            vnOrtInput.change(function() {
                that.getBO().vn.ort = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "ort"), "vn_ort", "Ort", buildErrorXSSValidatorObj.call(this)));

            var vnStrasseInput = SchrittRendererHelper.getItemByPseudoId("vn_strasse", rootElement, "input");
            vnStrasseInput.val(this.getBO().vn.strasse || "");
            vnStrasseInput.change(function() {
                that.getBO().vn.strasse = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "strasse"), "vn_strasse", "Strasse", buildErrorXSSValidatorObj.call(this)));

            var vnHausnrInput = SchrittRendererHelper.getItemByPseudoId("vn_hausnr", rootElement, "input");
            vnHausnrInput.val(this.getBO().vn.hausnr || "");
            vnHausnrInput.change(function() {
                that.getBO().vn.hausnr = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "hausnr"), "vn_hausnr", "Hausnr.", buildErrorXSSValidatorObj.call(this)));

            var vnTelefonInput = SchrittRendererHelper.getItemByPseudoId("vn_telefon", rootElement, "input");
            vnTelefonInput.val(this.getBO().vn.telefon || "");
            vnTelefonInput.change(function() {
                that.getBO().vn.telefon = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "telefon"), "vn_telefon", [{
                fnValidation: function(propVal) {
                    if (propVal === undefined || propVal === null || propVal === "")
                        return true;
                    return propVal.match(/^(?:\+\d+)?\s*(?:\(\d+\)\s*(?:[\/–-]\s*)?)?\d+(?:\s*(?:[\s\/–-]\s*)?\d+)*$/);
                },

                errorText: "Die Angabe im Feld ist keine gültige Telefonnummer."
            }]));

            var vnMailInput = SchrittRendererHelper.getItemByPseudoId("vn_mail", rootElement, "input");
            vnMailInput.val(this.getBO().vn.mail || "");
            vnMailInput.change(function() {
                that.getBO().vn.mail = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "mail"), "vn_mail", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige E-Mail Adresse."
            }]));


            SchrittRendererHelper.getItemByPseudoId("vn_zahlungsart", rootElement, "input").val(this.getBO().vn.zahlungsdaten.zahlungsart || "");

            var zahlungsweiseInput = SchrittRendererHelper.getItemByPseudoId("vn_zahlungsweise", rootElement, "select");
            //zahlungsweiseInput.val(this.getBO().vn.zahlungsdaten.zahlungsweise || "");
            if (this.getBO().zahlungsweisen) {
            	var vnzw = this.getBO().vn.zahlungsdaten.zahlungsweise;
                zahlungsweiseInput.empty();
            	zahlungsweiseInput.append($("<option value='Bitte wählen'>Bitte wählen</option>"));
                this.getBO().zahlungsweisen.forEach(function(zw) {
                    var optionZw = $("<option value='" + zw  +"'>" + zw + "</option>");
                    if (zw === vnzw) {
                    	optionZw.attr("selected", "selected");
                    }

                    zahlungsweiseInput.append(optionZw);
                }, this);
            }
            zahlungsweiseInput.change(function() {
                var zahlungsweise = $(this).val();
                that.getBO().vn.zahlungsdaten.zahlungsweise = zahlungsweise;
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten, "zahlungsweise"), "vn_zahlungsweise", "Zahlungsweise"));

            var kontoinhaber = buildKontoinhaber.call(this);
            SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);

            var ibanCheck = $("#p_kontotyp_iban");
            var ktoCheck = $("#p_kontotyp_kto");

            var ibanBlock = SchrittRendererHelper.getItemByPseudoId("block_iban", rootElement);
            var ktoBlock = SchrittRendererHelper.getItemByPseudoId("block_kto", rootElement);
            var bankBlock = SchrittRendererHelper.getItemByPseudoId("block_bank", rootElement);

            var ibanInput = SchrittRendererHelper.getItemByPseudoId("vn_iban", rootElement, "input");
            var bicInput = SchrittRendererHelper.getItemByPseudoId("vn_bic", rootElement, "input");
            var blzInput = SchrittRendererHelper.getItemByPseudoId("vn_blz", rootElement, "input");
            var ktoInput = SchrittRendererHelper.getItemByPseudoId("vn_kto", rootElement, "input");
            var bankInput = SchrittRendererHelper.getItemByPseudoId("vn_bank", rootElement, "input");

            if (this.getBO().vn.zahlungsdaten.iban.selected) {
                ibanCheck.prop("checked", true);
                ktoCheck.prop("checked", false);

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            } else if (this.getBO().vn.zahlungsdaten.kto.selected) {
                ibanCheck.prop("checked", false);
                ktoCheck.prop("checked", true);

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            }
            ibanInput.val(this.getBO().vn.zahlungsdaten.iban.no || "");
            bicInput.val(this.getBO().vn.zahlungsdaten.iban.bic || "");
            blzInput.val(this.getBO().vn.zahlungsdaten.kto.blz || "");
            ktoInput.val(this.getBO().vn.zahlungsdaten.kto.no || "");
            bankInput.val(this.getBO().vn.zahlungsdaten.bank || "");

            ibanCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = true;
                that.getBO().vn.zahlungsdaten.kto.selected = false;

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            });
            ktoCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = false;
                that.getBO().vn.zahlungsdaten.kto.selected = true;

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, "vn_kontotyp", [{
                fnValidation: function() {
                    return that.getBO().vn.zahlungsdaten.kto.selected === true || that.getBO().vn.zahlungsdaten.iban.selected === true ? true : false;
                },

                errorText: "Die Auswahl im Feld Kontotyp ist erforderlich."
            }]));

            bankInput.change(function() {
                that.getBO().vn.zahlungsdaten.bank = $(this).val();
            });

            $(ibanInput).change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.iban.no = val;
            });

            $(bicInput).change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });

            $(ibanInput).av_suggest_iban({
                bancfield: bankInput,
                bicfield: bicInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("ibanerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "no"), "vn_iban", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.no === null || that.getBO().vn.zahlungsdaten.iban.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d(?: \d{4} \d{4} \d{4} \d{4}) \d\d$/);
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    var deferred = $.Deferred();
                    that._checkIBAN(that.getBO().vn.zahlungsdaten.iban.no).then(function(oResult) {
                        if (oResult.state === "OK" && oResult.ergebnisIban === 0) {
                            var res = that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d (\d{4} \d{4}) \d{4} \d{4} \d\d$/);
                            if (res) {
                                that._getBLZSuggestionsFor(res[1].split(' ').join('')).then(function(oResult) {
                                    if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                        var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#(.*)/);
                                        if (bank) {
                                            that.getBO().vn.zahlungsdaten.bank = bank[1];
                                            bankInput.val(bank[1]);
                                            that.getBO().vn.zahlungsdaten.iban.bic = bank[2];
                                            bicInput.val(bank[2]);
                                            deferred.resolve(true);
                                        } else {
                                            deferred.reject(false);
                                        }
                                    } else {
                                        deferred.reject(false);
                                    }
                                }).fail(function() {
                                    deferred.reject(false);
                                });
                            } else {
                                deferred.reject(false);
                            }
                        } else {
                            deferred.reject(false);
                        }
                    }).fail(function() {
                        deferred.reject(false);
                    });

                    return deferred.promise();
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }]));

            bicInput.change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "bic"), "vn_bic", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.bic === null || that.getBO().vn.zahlungsdaten.iban.bic === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.bic.length === 0) {
                        return false;
                    }
                    return true;
                },

                errorText: "Die Angabe im Feld BIC ist ungültig."
            }]));

            ktoInput.change(function() {
                that.getBO().vn.zahlungsdaten.kto.no = $(this).val();
            });

            blzInput.change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.kto.blz = val;
            });
            blzInput.av_suggest_banc({
                bancfield: bankInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("blzerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "no"), "vn_kto", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no === null || that.getBO().vn.zahlungsdaten.kto.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.kto.no.match(/^\d{5,10}$/);
                },

                errorText: "Die Angabe im Feld Kontonummer ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no != null && that.getBO().vn.zahlungsdaten.kto.no.length > 0 &&
                        that.getBO().vn.zahlungsdaten.kto.blz != null && that.getBO().vn.zahlungsdaten.kto.blz.length > 0) {
                        var deferred = $.Deferred();
                        that._checkKonto(that.getBO().vn.zahlungsdaten.kto.blz, that.getBO().vn.zahlungsdaten.kto.no).then(function(oResult) {
                            if (oResult.state === "OK" && oResult.ergebnisKonto === 0) {
                                deferred.resolve(true);
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    }

                    return true;
                },

                errorText: "Die angegebene Bankverbindung ist ungültig."
            }]));
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_blz", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.blz === null || that.getBO().vn.zahlungsdaten.kto.blz === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.blz.length === 0) {
                        return false;
                    }
                    if (that.getBO().vn.zahlungsdaten.kto.blz.match(/^\d{5,10}$/)) {
                        var deferred = $.Deferred();

                        that._getBLZSuggestionsFor(that.getBO().vn.zahlungsdaten.kto.blz).then(function(oResult) {
                            if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#.*/);
                                if (bank) {
                                    that.getBO().vn.zahlungsdaten.bank = bank[1];
                                    bankInput.val(bank[1]);
                                    deferred.resolve(true);
                                } else {
                                    deferred.reject(false);
                                }
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    } else {
                        return false;
                    }
                },

                errorText: "Die Angabe im Feld Bankleitzahl ist ungültig."
            }]));

            //
            var ksmCheck = SchrittRendererHelper.getItemByPseudoId("vn_ksm", rootElement, "input");
            if (this.getBO().vn.zahlungsdaten.ksmSelected) {
                ksmCheck.prop("checked", true);
            }
            ksmCheck.change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vn.zahlungsdaten.ksmSelected = true;
                } else {
                    that.getBO().vn.zahlungsdaten.ksmSelected = false;
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_ksm", [{
                fnValidation: function(propVal) {
                    return (that.getBO().vn.zahlungsdaten.ksmSelected);
                },

                errorText: "Ihre Zustimmung ist erforderlich."
            }]));

            //
           /* if (!that.getBO().einstellung.betreuerFestDefiniert && that.getBO().einstellung.betreuer) {
                var fnBetreuerRow =_.template(schrittTemplate.beraterTemplate);
                var betreuerLabel = that.getBO().einstellung.betreuer.beschreibungen.join(", ");
                var betreuerRow = $(fnBetreuerRow({berater : betreuerLabel}));
                betreuerRow.insertBefore(SchrittRendererHelper.getItemByPseudoId("vn_block", rootElement));
            }*/
        }

        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt3RendererIF6.prototype._getBetreuerliste = function() {
    return this.oProdukt.getBetreuerlisteFor(this.getBO().vn.plz);
};

Schritt3RendererIF6.prototype._checkKonto = function(blz, no) {
    return this.oProdukt.checkKonto(blz, no);
};

Schritt3RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt3RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt3RendererIF6.prototype._checkIBAN = function(iban) {
    return this.oProdukt.checkIBAN(iban);
};

Schritt3RendererIF6.prototype._getBLZSuggestionsFor = function(blz) {
    return this.oProdukt.getBLZSuggestionsFor(blz);
};

Schritt3RendererIF6.prototype._getIbanSuggestionsFor = function(iban) {
    return this.oProdukt.getIbanSuggestionsFor(iban);
};

Schritt3RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt3RendererIF6.prototype._pruefe = function() {
    var that = this;
    var deferreds = [];

    this.fnErrorChecks.forEach(function(fnErrorCheck) {
        deferreds.push(fnErrorCheck());
    });

    that.setBusy(true);
    $.when.apply($, deferreds).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
            return val === true;
        })) {
            that.oProdukt.weiter();
        } else {
            SchrittRendererHelper.scrollToFirstError(that.rootElement);
        }
    }).always(function() {
        that.setBusy(false);
        SchrittRendererHelper.scrollToFirstError(that.rootElement);
    });
};

module.exports = Schritt3RendererIF6;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate : ' \
                <div kv_ref="kvo_content"> \
                    <!-- Progress / Header --> \
                    <div class="block"> \
                        <ul class="progress"> \
                            <li class="">1</li> \
                            <li class="">2</li> \
                            <li class="active">3</li> \
                            <li class="">4</li> \
                            <li class="">5</li> \
                        </ul> \
                        <h2>Personen- und Zahlungsdaten zu Tarif <%= produkt %></h2> \
                    </div> \
                    <!-- Contentbereich --> \
                    <!-- Beantragungshinweisblock --> \
                    <div class="block"> \
                        <p><strong> Danke für Ihre Mühe bei der Beantwortung der Absicherungs-Fragen. Zur Ausstellung Ihres Versicherungsscheins benötigen wir noch einige persönliche Angaben und eine Bankverbindung.</strong></p> \
                    </div> \
                    <!-- Dateneingabeblock --> \
                    <!-- VPDaten --> \
                    <div class="block"> \
                        <h3>Zu versichernde Person</h3> \
                        <!-- Anrede Radiobuttons --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_anrede_herr" kv_ref="vp_anrede_herr">Anrede<em>*</em>:</label> \
                            <input id="vp_anrede_herr" name="vp_anrede" kv_ref="vp_anrede_herr" type="radio" class="" disabled="disabled"> \
                            <label for="vp_anrede_herr">Herr</label> \
                            <br class="bterm" /> \
                        </div> \
                        <div class="bline bcontinue"> \
                            <input id="vp_anrede_frau" name="vp_anrede" kv_ref="vp_anrede_frau" type="radio" class="" disabled="disabled"> \
                            <label for="vp_anrede_frau">Frau</label> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Vorname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_vorname" kv_ref="vp_vorname">Vorname<em>*</em>:</label> \
                            <input type="text" name="Vorname" id="vp_vorname" value="" class="ixl" maxlength="" placeholder="" kv_ref="vp_vorname"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Nachname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_name" kv_ref="vp_name">Nachname<em>*</em>:</label> \
                            <input type="text" name="Nachname" id="vp_name" value="" class="ixl" maxlength="" placeholder="" kv_ref="vp_name"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Geburtsdatum --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_geburtsdatum" kv_ref="vp_geburtsdatum">Geburtsdatum:</label> \
                            <input type="text" name="Geburtsdatum" id="vp_geburtsdatum" value="" class="il" maxlength="10" placeholder="TT.MM.JJJJ" kv_ref="vp_geburtsdatum" readonly="readonly"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                    </div> \
                    <!-- VNDaten --> \
                    <div class="block" kv_ref="vn_block"> \
                        <h3>Versicherungsnehmer (mindestens 18 Jahre)</h3> \
                        <div class="bline btext-only" kv_ref="hinweis" style="display: none"> \
                            <div><strong><b>Hinweis:</b> Bei Versicherung von minderjährigen Kindern darf nur ein Erziehungsberechtigter als Versicherungsnehmer angegeben werden.</strong><br> \
                            </div> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Anrede Radiobuttons --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_anrede" kv_ref="vn_anrede_herr">Anrede<em>*</em>:</label> \
                            <input id="vn_anrede_herr" name="vn_anrede" kv_ref="vn_anrede_herr" type="radio" class=""> \
                            <label for="vn_anrede_herr">Herr</label> \
                            <br class="bterm" /> \
                        </div> \
                        <div class="bline bcontinue"> \
                            <input id="vn_anrede_frau" name="vn_anrede" kv_ref="vn_anrede_frau" type="radio" class=""> \
                            <label for="vn_anrede_frau">Frau</label> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Titel --> \
                        <div class="bline"> \
                            <label class="longlabel" for="Titel1" kv_ref="vn_titel">Titel <em>(optional)</em>:</label> \
                            <input type="text" name="Titel" id="Titel1" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_titel"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Vorname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_vorname" kv_ref="vn_vorname">Vorname<em>*</em>:</label> \
                            <input type="text" name="Vorname" id="vn_vorname" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_vorname"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Nachname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_name" kv_ref="vn_name">Nachname<em>*</em>:</label> \
                            <input type="text" name="Nachname" id="vn_name" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_name"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Geburtsdatum --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_geburtsdatum" kv_ref="vn_geburtsdatum">Geburtsdatum<em>*</em>:</label> \
                            <input type="text" name="Geburtsdatum" id="vn_geburtsdatum" value="" class="il" maxlength="10" placeholder="TT.MM.JJJJ" kv_ref="vn_geburtsdatum"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- PLZ --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_plz" kv_ref="vn_plz">Postleitzahl<em>*</em>:</label> \
                            <input type="text" name="PLZ" id="vn_plz" value="" class="im" maxlength="5" placeholder="" kv_ref="vn_plz"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Ort --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_ort" kv_ref="vn_ort">Ort<em>*</em>:</label> \
                            <input type="text" name="Ort" id="vn_ort" value="" class="ixl" maxlength="20" placeholder="Hauptwohnsitz muss in D sein" kv_ref="vn_ort"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Strasse --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_strasse" kv_ref="vn_strasse">Strasse<em>*</em>:</label> \
                            <input type="text" name="Strasse" id="vn_strasse" value="" class="ixl" maxlength="30" placeholder="" kv_ref="vn_strasse"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Hausnummer --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_hausnr" kv_ref="vn_hausnr">Hausnummer<em>*</em>:</label> \
                            <input type="text" name="Hausnummer" id="vn_hausnr" value="" class="im" maxlength="10" placeholder="" kv_ref="vn_hausnr"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Telefon --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_telefon" kv_ref="vn_telefon">Telefon <em>(optional)</em>:</label> \
                            <input type="text" name="Telefon" id="vn_telefon" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_telefon"> \
                            <div class="helptxt" title="Rückfragen zu Ihren Angaben sind am einfachsten telefonisch zu klären. Durch die Angabe Ihrer Telefonnummer helfen Sie uns, dass wir bei Unklarheiten schneller Ihren Versicherungsschutz in die Wege leiten können.">?</div> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- E-Mail --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_mail" kv_ref="vn_mail">E-Mail<em>*</em>:</label> \
                            <input type="text" name="E-Mail" id="vn_mail" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_mail"> \
                            <div class="helptxt" title="Bitte geben Sie Ihre E-Mail-Adresse an, damit wir Ihnen nach Abschluss von <%= produkt %> umgehend Ihre Versicherungsbestätigung schicken können.">?</div> \
                            <br class="bterm" /> \
                        </div> \
                    </div> \
                    <!-- Dateneingabeblock --> \
                    <!-- Dateneingabeblock --> \
                    <!-- Zahlungsdaten --> \
                    <div class="block"> \
                        <h3>Zahlungsdaten</h3> \
                        <div class="bline btext-only"> \
                            <div><strong>SEPA-Lastschriftmandat für wiederkehrende SEPA-Basislastschriften</strong><br> \
                            </div> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Zahlungsart --> \
                        <div class="bline"> \
                            <label class=" longlabel" for="zart" kv_ref="vn_kontotyp">Zahlungsart<em>*</em>:</label> \
                            <input type="text" name="zart" id="zart" kv_ref="vn_zahlungsart" value="Bankeinzug per Lastschrift" class="ixl" maxlength="" placeholder="" disabled> \
                            <div class="helptxt" title="Bei uns können Sie Ihre fälligen Versicherungsbeiträge bequem per Lastschrift bezahlen. Wählen Sie einfach dazu noch Ihre gewünschte Zahlungsweise aus. Ein Online-Abschluss mit einem ausländischen SEPA-Konto ist leider nicht möglich. Um die Versicherung abschließen zu können, wenden Sie sich bitte an Ihren Berater.">?</div> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Zahlungweise --> \
                        <div class="bline"> \
                            <label class="longlabel" for="zarw" kv_ref="vn_zahlungsweise">Gewünschte Zahlungsweise<em>*</em>:</label> \
                            <select kv_ref="vn_zahlungsweise"> \
                                <option value="">Bitte auswählen</option> \
                                <option value="monatlich">monatlich</option> \
                                <option value="vierteljährlich">vierteljährlich</option> \
                                <option value="halbjährlich">halbjährlich</option> \
                                <option value="jährlich">jährlich</option> \
                            </select> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Kontoinhaber --> \
                        <div class="bline"> \
                            <label class="longlabel" for="Kontoinhaber" kv_ref="vn_bank_inhaber">Kontoinhaber (Versicherungsnehmer):</label> \
                            <input type="text" kv_ref="vn_bank_inhaber" id="Kontoinhaber" value="" class="ixl" maxlength="" placeholder="" disabled> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Bankverbindung Radiobuttons --> \
                        <div class="bline"> \
                            <label class="longlabel" class="longlabel" for="Bankverbindung">Angabe der Bankverbindung<em>*</em>:</label> \
                            <input id="p_kontotyp_iban" name="Bankverbindung" type="radio" class=""> \
                            <label for="p_kontotyp_iban">IBAN (22-stellig)</label> \
                            <br class="bterm" /> \
                        </div> \
                        <div class="bline bcontinue"> \
                            <input id="p_kontotyp_kto" name="Bankverbindung" type="radio" class=""> \
                            <label for="p_kontotyp_kto">Kontonummer und Bankleitzahl</label> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- IBAN --> \
                        <div style="display: none;" kv_ref="block_iban"> \
    	                    <div class="bline"> \
                                <label class="longlabel" for="IBAN" kv_ref="vn_iban">IBAN (22-stellig)<em>*</em>:</label> \
                                <input type="text" name="IBAN" id="IBAN" value="" class="ixl" maxlength="" placeholder="DE12 3456 7890 1234 5678 90" kv_ref="vn_iban"> \
                                <br class="bterm" /> \
    	                    </div>\
                            <!-- BIC --> \
                            <div class="bline"> \
                                <label class="longlabel" for="BIC" kv_ref="vn_bic">BIC<em></em>:</label> \
                                <input type="text" name="BIC" id="BIC" value="" class="ixl" maxlength="10" placeholder="" disabled="disabled" kv_ref="vn_bic"> \
                                <br class="bterm" /> \
                            </div>\
                        </div> \
                        <!-- BLZ --> \
                        <div  style="display: none;" kv_ref="block_kto"class="bline"> \
                            <div class="bline"> \
                                <label for="Bankleitzahl" kv_ref="vn_blz">Bankleitzahl<em>*</em>:</label> \
                                <input type="text" name="Bankleitzahl" id="Bankleitzahl" value="" class="ixl" maxlength="8" placeholder="" kv_ref="vn_blz"> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- BIC --> \
                            <div class="bline"> \
                                <label for="Kontonummer" kv_ref="vn_kto">Kontonummer<em>*</em>:</label> \
                                <input type="text" name="Kontonummer" id="Kontonummer" value="" class="ixl" maxlength="15" placeholder="" kv_ref="vn_kto"> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- Bank --> \
                        <div class="bline" style="display: none;" kv_ref="block_bank"> \
                            <label class="longlabel" for="Bank" kv_ref="vn_bank">Name der Bank (wird automatisch ausgefüllt)<em>*</em>:</label> \
                            <input type="text" name="Bank" id="Bank" value="" class="ixl" maxlength="" placeholder="" disabled="disabled" kv_ref="vn_bank"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- SEPA-Mandat --> \
                        <div class="bline"> \
                            <label class="longlabel" kv_ref="vn_ksm">SEPA-Lastschriftmandat<em>*</em>:</label> \
                            <input id="vn_ksm" kv_ref="vn_ksm" name="checkbox" type="checkbox"> \
                            <div class="helptxt" title="Indem Sie das Häkchen setzen, geben Sie uns Ihre Einwilligung, den Versicherungsbeitrag per SEPA-Lastschrift von Ihrem Konto einziehen zu dürfen. Auch die Versicherungsleistungen überweisen wir mit dieser Einwilligung auf Ihr genanntes Konto.">?</div> \
                            <label class="longtext" style="padding-left: 240px; text-align: left;" for="vn_ksm"><%= lastschriftText %></label> \
                            <br class="bterm"> \
                            <br class="bterm"> \
                        </div> \
                    </div> \
                    <!-- Button-Actionblock --> \
                    <!-- Hinweisblock --> \
                    <div class="block"> \
                        <div class="bline btext-only"> \
                            <div><strong>Hinweis:</strong> Die mit einem (*) gekennzeichneten Felder benötigen wir für die Bearbeitung Ihres Antrags.<br> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                    </div> \
                    <!-- Button --> \
                    <div class="buttonline"> \
                        <div class="bgroup2"> \
                            <div> \
                                <a class="back" href="javascript:void(0);"><input type="button" value="zurück" onclick="javascript:void(0);" class="" title="zurück"></input></a> \
                            </div> \
                        </div> \
                        <div class="bgroup1"> \
                            <div> \
                                <a class="check" href="javascript:void(0);"><input type="button" value="weiter zu Schritt 4" onclick="javascript:void(0);" class="" title="weiter zu Schritt 4"></input></a> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                    ',

    errorLabelTemplate: ' \
        <div class="blineover error"> \
            <div class="msgerror"> \
                <ul> \
                    <li><%- error %></li> \
                </ul> \
            </div> \
        </div>'
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

var Schritt4Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt4Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt4Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(60);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

Schritt4Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var laufzeit = "";
            var kuendigungsfrist = "3 Monate zum Ende eines Kalenderjahres";
            var betreuer = "";
            var hasBetreuer = false;
            var kontoArt = this.getBO().vn.zahlungsdaten.iban.selected ? "IBAN/BIC" : "Konto/BLZ";
            var konto = this.getBO().vn.zahlungsdaten.iban.selected ? this.getBO().vn.zahlungsdaten.iban.no + "/" + this.getBO().vn.zahlungsdaten.iban.bic :
                            this.getBO().vn.zahlungsdaten.kto.no + "/" + this.getBO().vn.zahlungsdaten.kto.blz;

            if (this.getBO().einstellung.betreuerFestDefiniert) {
                hasBetreuer = false;
            } else if (this.getBO().einstellung.betreuerwahl) {
                if (this.getBO().betreuer.auswahlListe && this.getBO().betreuer.manuelleAuswahl) {
                    this.getBO().betreuer.auswahlListe.some(function(currentBetreuer) {
                        if (currentBetreuer.selected) {
                            betreuer = currentBetreuer.beschreibungen.join("<br />");
                            hasBetreuer = true;
                            return true;
                        }
                        return;
                    });
                }
            } else if (this.getBO().einstellung.betreuer) {
                betreuer = this.getBO().einstellung.betreuer.beschreibungen.join("<br />");
                hasBetreuer = true;
            }

            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(validationResult.vpTarife[0], this.getBO().vn.zahlungsdaten.zahlungsweise);

            var renderBO = {
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: this.getBO().einstellung.modul.tariftyp,

                zahlungsweiseGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.text,
                beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value,

                beitrag: validationResult.vpTarife[0].beitrag,

                versicherungsbeginn: this.getBO().vp.versicherungsbeginn,
                laufzeit: laufzeit,
                kuendigungsfrist: kuendigungsfrist,
                vpName: this.getBO().vp.vorname + " " + this.getBO().vp.name,
                vpAnredeName: (this.getBO().vp.anrede === "HERR" ? "Herr" : "Frau") + " " + this.getBO().vp.vorname + " " + this.getBO().vp.name,
                vpGeburtsdatum: this.getBO().vp.geburtsdatum,
                vpStaatsangehoerigkeit: this.getBO().vp.staatsangehoerigkeit,
                vpTaetigkeitsstatus: this.getBO().vp.taetigkeitsstatus,
                vpBeruf: this.getBO().vp.beruf,
                vpVersicherungsstatus: this.getBO().vp.versicherungsstatus,
                vpKrankenversicherungsschutz: this.getBO().vp.aktuellerVersicherungsschutz,
                vpVersicherungsnummer: this.getBO().vp.versicherungsnummer,

                vnAnredeName: (this.getBO().vn.anrede === "HERR" ? "Herr" : "Frau") + " " + (this.getBO().vn.titel ? this.getBO().vn.titel + " " : "") + this.getBO().vn.vorname + " " + this.getBO().vn.name,
                vnGeburtsdatum: this.getBO().vn.geburtsdatum,
                vnStrasseHausnr: this.getBO().vn.strasse + " " + this.getBO().vn.hausnr,
                vnPlzOrt: this.getBO().vn.plz + " " + this.getBO().vn.ort,
                vnTelefon: this.getBO().vn.telefon,
                vnMail: this.getBO().vn.mail,
                vnBetreuer: betreuer,

                zahlungsart: this.getBO().vn.zahlungsdaten.zahlungsart,
                zahlungsweise: this.getBO().vn.zahlungsdaten.zahlungsweise,
                kontoArt: kontoArt,
                konto: konto,
                kontoinhaber: this.getBO().vn.vorname + " " + this.getBO().vn.name,
                bankName: this.getBO().vn.zahlungsdaten.bank
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));

            if (!hasBetreuer) {
                content.find("[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='betreuer_separator']").hide();
                content.find("[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='betreuer_header']").hide();
                content.find("[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='betreuer_value']").hide();
            }

            content.appendTo(rootElement);

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                that._pruefe();
            });

            var links = SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement).find("a");
            links.eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            links.eq(2).prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

            if (this.getBO().vp.versicherungsnummer === null || this.getBO().vp.versicherungsnummer === undefined || this.getBO().vp.versicherungsnummer.length === 0) {
                SchrittRendererHelper.getItemByPseudoId("versicherungsnummer_row", rootElement).hide();
            } else {
                SchrittRendererHelper.getItemByPseudoId("versicherungsnummer_row", rootElement).show();
            }

            var mehrwertBoxTarifAccordion_row = SchrittRendererHelper.getItemByPseudoId("mehrwertBoxTarifAccordion_row", rootElement);
            mehrwertBoxTarifAccordion_row.find("a").click(function(){
                mehrwertBoxTarifAccordion_row.find("a").toggleClass("active");
                mehrwertBoxTarifAccordion_row.find("div.content").toggleClass("active");
            });

            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            this.getBO().einstellung.modul.leistungen.forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt4Renderer.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt4Renderer.prototype._pruefe = function() {
    this.oProdukt.weiter();
};

Schritt4Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt4Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

module.exports = Schritt4Renderer;


/***/ }),
/* 60 */
/***/ (function(module, exports) {

module.exports = {
	mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%= produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
                                <div class="rowX"> \
                                            <ol class="progress-indicator"> \
                                                    <li class="" data-step="1"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="2"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="3"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-current" data-step="4"> \
                                                        <span>Angaben überprüfen</span> \
                                                    </li> \
                                                    <li class="is-last" data-step="5"> \
                                                        <span>Online beantragen</span> \
                                                    </li> \
                                            </ol> \
                                        </div> \
                                \
                                </div> \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <!-- Pflichtfelder, SSL --> \
                                    <div class="kvo-content-2"> \
    \
										<div class="kvo-title"> \
											<h1>Angaben überprüfen</h1> \
											<div class="row"> \
												<div class="medium-12 columns"> \
													<span>Auf dieser Seite sehen Sie Ihre bisherigen Angaben im Überblick. Bitte überprüfen Sie Ihre eingegebenen Daten sorgfältig und beachten Sie den Beginn Ihrer gewünschten Absicherung.</span> \
													<p>&nbsp;</p> \
												</div> \
											</div> \
        	                                <hr/> \
											<div class="kvo-content"> \
												<div class="row"> \
													<div class="medium-12 contentbox"> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-shield fa-stack-1x fa-inverse"></i></span> Gewünschte Absicherung</h2> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<div class="contentbox"> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Tarif:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= produkt %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Versicherungsbeginn:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= versicherungsbeginn %></p> \
																	</div> \
																</div> \
															</div> \
															</div> \
														</div> \
													\
														<hr/> \
														<div class="row"> \
															<div class="medium-9 small-9 columns"> \
															<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-user-plus fa-stack-1x fa-inverse"></i></span> Zu versichernde Person</h2> \
															</div> \
															<div class="medium-3 small-3 columns dataEdit text-center"> \
																<a class="back" href="javascript:void(0);">Ändern <i class="fa fa-pencil"></i></a> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<div class="contentbox"> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Anrede, Name:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpAnredeName %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Geburtsdatum:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpGeburtsdatum %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Staatsangehörigkeit:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpStaatsangehoerigkeit %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Tätigkeitsstatus:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpTaetigkeitsstatus %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Ausgeübter Beruf:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpBeruf %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Versicherungsstatus:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpVersicherungsstatus %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Aktueller Krankenversicherungsschutz:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpKrankenversicherungsschutz %></p> \
																	</div> \
																</div> \
																<div class="row" kv_ref="versicherungsnummer_row" style="display: none"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">GKV-Versichertennummer:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpVersicherungsnummer %></p> \
																	</div> \
																</div> \
															</div> \
															</div> \
														</div> \
														\
														<hr/> \
														<div class="row"> \
															<div class="medium-9 small-9 columns"> \
																<h2><i class="fa fa-user-circle-o fa-2x"></i> Versicherungsnehmer</h2> \
															</div> \
															<div class="medium-3 small-3 columns dataEdit text-center"> \
																<a class="back" href="javascript:void(0);">Ändern <i class="fa fa-pencil"></i></a> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
																<div class="contentbox"> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Anrede, Name:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnAnredeName %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Geburtsdatum:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnGeburtsdatum %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Straße:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnStrasseHausnr %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">PLZ, Ort:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnPlzOrt %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Telefon:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnTelefon %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">E-Mail:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnMail %></p> \
																	</div> \
																	</div> \
																</div> \
															</div> \
														</div> \
					\
														<hr kv_ref="betreuer_separator" /> \
														<div class="row" kv_ref="betreuer_header"> \
															<div class="medium-9 small-9 columns"> \
																<h2><span class="fa-stack fa-lg"><i class="fa fa-map-marker fa-stack-2x"></i></span> Ihr Berater</h2> \
															</div> \
														</div> \
														<div class="row" kv_ref="betreuer_value"> \
															<div class="medium-12 columns"> \
																<div class="contentbox"> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class=""><b><%= vnBetreuer %></b></p> \
																	</div> \
																	</div> \
																</div> \
															</div> \
														</div> \
					\
														<hr /> \
														<div class="row"> \
															<div class="medium-9 small-9 columns"> \
																<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-eur fa-stack-1x fa-inverse"></i></span> Zahlungsdaten</h2> \
															</div> \
															<div class="medium-3 small-3 columns dataEdit text-center"> \
																<a class="back" href="javascript:void(0);">Ändern <i class="fa fa-pencil"></i></a> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
																<div class="contentbox"> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Zahlungsart:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= zahlungsart %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Gewünschte Zahlungsweise:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= zahlungsweise %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline"><%= kontoArt %>:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= konto %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Kontoinhaber:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= kontoinhaber %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Name der Bank:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= bankName %></p> \
																	</div> \
																	</div> \
																</div> \
															</div> \
														</div> \
														\
														<hr/> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-user-plus fa-stack-1x fa-inverse"></i></span> Ihr Gesamtbeitrag</h2> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<div class="contentbox"> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline sumContent">Zu versichernde Person</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline"><%= produkt %></p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= beitragGesamtbeitrag %> \u20AC</p> \
																	</div> \
																</div> \
																<hr /> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="medium-text button-subline"><%= zahlungsweiseGesamtbeitrag %></p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= beitragGesamtbeitrag %> \u20AC</p> \
																	</div> \
																</div> \
															</div> \
															</div> \
														</div> \
														\
													<!-- Buttons --> \
														<div class="row"> \
														<div class="medium-5 large-4 columns left"> \
															<p>&nbsp;</p> \
															<a class="button action-back expand back">zurück</a> \
															<p class="small-text button-subline">zu Schritt 3: "Personen- und Zahlungsdaten"</p> \
														</div> \
														<div class="medium-5 large-4 columns right text-right"> \
															<p>&nbsp;</p> \
															<a class="call-to-action button expand check">weiter</a> \
															<p class="small-text button-subline">zu Schritt 5: Vertragsgrundlagen und Online-Antrag</p> \
														</div> \
													</div> \
													<div class="row ssl"> \
				                                        <div class="columns medium-12 "> \
                				                    	    <p>&nbsp;</p> \
                                					        <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                        					<br> \
                                        					<span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                        				</div> \
                                    				</div> \
												</div> \
											</div> \
										</div> \
									</div> \
								</div> \
								</div> \
    \
    \
                                <!-- rechte Mehrwertbox --> \
                                <div class="large-4 medium-5 columns"> \
                                 	<div class="row "> \
                                        <!-- Ausgabe eingegebener Daten --> \
                                     	<div class="medium-11 small-12 summarybox right"> \
                                          	<div class="row" kv_ref="absicherungContent"> \
                                               	<div class="medium-12 columns"> \
                                                    <h2>Ihre gewünschte Absicherung</h2> \
                                                    <h1><%= produkt %></h1> \
                                                    <p><%= produktDesc %></p> \
													<br kv_ref="trenner_leistungen" /> \
                                                </div> \
                                            </div> \
                                            <div class="row display-sum tarifbeitragContent" kv_ref="beitrag_row"> \
                                                <div class="medium-7 small-8 columns"> \
                                                    <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                                </div> \
                                                <div class="medium-5 small-4 columns"> \
                                                     <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                                </div> \
                                            </div> \
                                            <dl class="accordion" data-accordion="" kv_ref="mehrwertBoxTarifAccordion_row"> \
                                                <dd class="accordion-navigation active"> \
                                                    <a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
                                                    <div id="panel1a" class="content active"> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= vpName %>, <%= vpGeburtsdatum %><br />(Zu versichernde Person)</label> \
                                                            </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label><%= produkt %></label> \
                                                            </div> \
                                                            <div class="medium-5 small-4 columns"> \
                                                                <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                                            </div> \
                                                        </div> \
                                                        <hr /> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                                            </div> \
                                                            <div class="medium-5 small-4 columns"> \
                                                                <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                </dd> \
                                            </dl> \
                                            <div class="medium-11 small-12 summarybox left"> \
                                                <div class="row" kv_ref="weiterfuehrendeInformationenRow"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Weiterführende Informationen</h2> \
                                                        <ul> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
		                                                    <li><a target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                                        </ul> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                     </div> \
                                  </div> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>'
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

var Schritt4RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt4RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt4RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(62);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

Schritt4RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var laufzeit = "";
            var kuendigungsfrist = "3 Monate zum Ende eines Kalenderjahres";
            var betreuer = "";
            var hasBetreuer = false;
            var kontoArt = this.getBO().vn.zahlungsdaten.iban.selected ? "IBAN/BIC" : "Konto/BLZ";
            var konto = this.getBO().vn.zahlungsdaten.iban.selected ? this.getBO().vn.zahlungsdaten.iban.no + "/" + this.getBO().vn.zahlungsdaten.iban.bic :
                            this.getBO().vn.zahlungsdaten.kto.no + "/" + this.getBO().vn.zahlungsdaten.kto.blz;

            if (this.getBO().einstellung.betreuerFestDefiniert) {
                hasBetreuer = false;
            } else if (this.getBO().einstellung.betreuerwahl) {
                if (this.getBO().betreuer.auswahlListe && this.getBO().betreuer.manuelleAuswahl) {
                    this.getBO().betreuer.auswahlListe.some(function(currentBetreuer) {
                        if (currentBetreuer.selected) {
                            betreuer = currentBetreuer.beschreibungen.join("<br />");
                            hasBetreuer = true;
                            return true;
                        }
                        return;
                    });
                }
            } else if (this.getBO().einstellung.betreuer) {
                betreuer = this.getBO().einstellung.betreuer.beschreibungen.join("<br />");
                hasBetreuer = true;
            }

            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(validationResult.vpTarife[0], this.getBO().vn.zahlungsdaten.zahlungsweise);

            var renderBO = {
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: this.getBO().einstellung.modul.tariftyp,

                beitrag: validationResult.vpTarife[0].beitrag,

                versicherungsbeginn: this.getBO().vp.versicherungsbeginn,
                laufzeit: laufzeit,
                kuendigungsfrist: kuendigungsfrist,
                vpName: this.getBO().vp.vorname + " " + this.getBO().vp.name,
                vpAnredeName: (this.getBO().vp.anrede === "HERR" ? "Herr" : "Frau") + " " + this.getBO().vp.vorname + " " + this.getBO().vp.name,
                vpGeburtsdatum: this.getBO().vp.geburtsdatum,
                vpStaatsangehoerigkeit: this.getBO().vp.staatsangehoerigkeit,
                vpTaetigkeitsstatus: this.getBO().vp.taetigkeitsstatus,
                vpBeruf: this.getBO().vp.beruf,
                vpVersicherungsstatus: this.getBO().vp.versicherungsstatus,
                vpKrankenversicherungsschutz: this.getBO().vp.aktuellerVersicherungsschutz,
                vpVersicherungsnummer: this.getBO().vp.versicherungsnummer,

                vnAnredeName: (this.getBO().vn.anrede === "HERR" ? "Herr" : "Frau") + " " + (this.getBO().vn.titel ? this.getBO().vn.titel + " " : "") + this.getBO().vn.vorname + " " + this.getBO().vn.name,
                vnGeburtsdatum: this.getBO().vn.geburtsdatum,
                vnStrasseHausnr: this.getBO().vn.strasse + " " + this.getBO().vn.hausnr,
                vnPlzOrt: this.getBO().vn.plz + " " + this.getBO().vn.ort,
                vnTelefon: this.getBO().vn.telefon,
                vnMail: this.getBO().vn.mail,
                vnBetreuer: betreuer,

                zahlungsart: this.getBO().vn.zahlungsdaten.zahlungsart,
                zahlungsweise: this.getBO().vn.zahlungsdaten.zahlungsweise,
                kontoArt: kontoArt,
                konto: konto,
                kontoinhaber: this.getBO().vn.vorname + " " + this.getBO().vn.name,
                bankName: this.getBO().vn.zahlungsdaten.bank
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));

            if (hasBetreuer) {
                SchrittRendererHelper.getItemByPseudoId("berater_block", content).show();
            }

            var fnGesamtbeitragTemplate = _.template(schrittTemplate.vpGesamtbeitragTemplate);
            var gesamtbeitragRows = $(fnGesamtbeitragTemplate({produkt: this.getBO().produkt, beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value, zahlungsweiseGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.text}));
            gesamtbeitragRows.appendTo(content);

            if (!hasBetreuer) {
                SchrittRendererHelper.getItemByPseudoId("berater_block", content).hide();
            } else {
                SchrittRendererHelper.getItemByPseudoId("berater_block", content).show();
            }

            content.appendTo(rootElement);

            var fnActionRow = _.template(schrittTemplate.actionRowTemplate);
            var actionRow = $(fnActionRow());
            actionRow.insertAfter(gesamtbeitragRows);

            actionRow.find("input.back").click(function() {
                that._zurueck();
            });
            content.find("a.back").click(function() {
                that._zurueck();
            });
            actionRow.find("input.check").click(function() {
                that._pruefe();
            });            
        }

        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt4RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt4RendererIF6.prototype._pruefe = function() {
    this.oProdukt.weiter();
};

Schritt4RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt4RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

module.exports = Schritt4RendererIF6;


/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = {
	mainTemplate: ' \
                    <div kv_ref="kvo_content"> \
                        <!-- Progress / Header --> \
                        <div class="block"> \
                            <ul class="progress"> \
                                <li class="">1</li> \
                                <li class="">2</li> \
                                <li class="">3</li> \
                                <li class="active">4</li> \
                                <li class="">5</li> \
                            </ul> \
                            <h2>Angaben zu Tarif <%- produkt %> überprüfen</h2> \
                        </div> \
                        <!-- Contentbereich --> \
                        <div class="block"> \
                            <p><strong>Auf dieser Seite sehen Sie Ihre bisherigen Angaben im Überblick. Bitte überprüfen Sie Ihre eingegebenen Daten sorgfältig und beachten Sie den Beginn Ihrer gewünschten Absicherung.</strong></p> \
                        </div> \
                        <!-- Datenausgabeblock --> \
                        <!-- Produkt --> \
                        <div class="block"> \
                            <h3>Gewünschte Absicherung</h3> \
                            <!-- Tarif --> \
                            <div class="bline"> \
                                <label for="">Tarif:</label> \
                                <span><%- produkt %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Versicherungsbeginn --> \
                            <div class="bline"> \
                                <label for="">Versicherungsbeginn:</label> \
                                <span><%- versicherungsbeginn %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- VP --> \
                        <div class="block"> \
                            <div class="bline"> \
                                <div class=""> \
                                    <h3>Zu versichernde Person</h3> \
                                </div> \
                                <div class="editbutton"> \
                                    <a class="back" href="javascript:void(0);">Ändern</a> \
                                </div> \
                                <br class="bterm" /> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Name --> \
                            <div class="bline"> \
                                <label for="">Anrede, Name:</label> \
                                <span><%- vpAnredeName %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Geburtsdatum --> \
                            <div class="bline"> \
                                <label for="">Geburtsdatum:</label> \
                                <span><%- vpGeburtsdatum %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Staatsangehoerigkeit --> \
                            <div class="bline"> \
                                <label for="">Staatsangehörigkeit:</label> \
                                <span><%- vpStaatsangehoerigkeit %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Taetigkeitsstatus --> \
                            <div class="bline"> \
                                <label for="">Tätigkeitsstatus:</label> \
                                <span><%- vpTaetigkeitsstatus %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Beruf --> \
                            <div class="bline"> \
                                <label for="">Ausgeübter Beruf:</label> \
                                <span><%- vpBeruf %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Versicherungsstatus --> \
                            <div class="bline"> \
                                <label for="">Versicherungsstatus:</label> \
                                <span><%- vpVersicherungsstatus %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Krankenversicherungsschutz --> \
                            <div class="bline"> \
                                <label for="">Aktueller Krankenversicherungsschutz:</label> \
                                <span><%- vpKrankenversicherungsschutz %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Versichertennummer --> \
                            <div class="bline" kv_ref="versicherungsnummer_row" style="display: none"> \
                                <label for="">GKV-Versichertennummer:</label> \
                                <span><%- vpVersicherungsnummer %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- VN --> \
                        <div class="block"> \
                            <!-- VN Ueberschrift --> \
                            <div class="bline"> \
                                <div class=""> \
                                    <h3>Versicherungsnehmer</h3> \
                                </div> \
                                <div class="editbutton"> \
                                    <a class="back" href="javascript:void(0);">Ändern</a> \
                                </div> \
                                <br class="bterm" /> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Anrede --> \
                            <div class="bline"> \
                                <label for="">Anrede, Name:</label> \
                                <span><%- vnAnredeName %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Geburtsdatum --> \
                            <div class="bline"> \
                                <label for="">Geburtsdatum:</label> \
                                <span><%- vnGeburtsdatum %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Strasse --> \
                            <div class="bline"> \
                                <label for="">Straße:</label> \
                                <span><%- vnStrasseHausnr %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Plz --> \
                            <div class="bline"> \
                                <label for="">PLZ, Ort:</label> \
                                <span><%- vnPlzOrt %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Telefon --> \
                            <div class="bline"> \
                                <label for="">Telefon:</label> \
                                <span><%- vnTelefon %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- E-Mail --> \
                            <div class="bline"> \
                                <label for="">E-Mail:</label> \
                                <span><%- vnMail %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- Zahlungsdaten --> \
                        <div class="block"> \
                            <!-- Zahlungsdaten --> \
                            <div class="bline"> \
                                <div class=""> \
                                    <h3>Zahlungsdaten</h3> \
                                </div> \
                                <div class="editbutton"> \
                                    <a class="back" href="javascript:void(0);">Ändern</a> \
                                </div> \
                                <br class="bterm" /> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Zahlungsart --> \
                            <div class="bline"> \
                                <label for="">Zahlungsart:</label> \
                                <span><%- zahlungsart %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Zahlungsweise --> \
                            <div class="bline"> \
                                <label for="">Zahlungsweise:</label> \
                                <span><%- zahlungsweise %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Kontoart --> \
                            <div class="bline"> \
                                <label for=""><%- kontoArt %>:</label> \
                                <span><%- konto %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Kontoinhaber --> \
                            <div class="bline"> \
                                <label for="">Kontoinhaber:</label> \
                                <span><%- kontoinhaber %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Name der Bank --> \
                            <div class="bline"> \
                                <label for="">Name der Bank:</label> \
                                <span><%- bankName %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                    </div>',

    vpGesamtbeitragTemplate: ' \
                    <div class="block"> \
                        <h1>Ihr Gesamtbeitrag</h1> \
                        <div class="table"> \
                            <table> \
                                <tbody> \
                                    <tr> \
                                        <th class="left header">Tarifname</th> \
                                        <th class="header"><%- produkt %></th> \
                                    </tr> \
                                </tbody> \
                                <tfoot> \
                                    <tr> \
                                        <th class="left header"><%- zahlungsweiseGesamtbeitrag %></th> \
                                        <td class="header"><%- beitragGesamtbeitrag %> \u20AC</td> \
                                    </tr> \
                                </tfoot> \
                            </table> \
                            <br class="bterm" /> \
                        </div> \
                    </div>',

    actionRowTemplate: '\
                        <div class="block" style="height: auto;"> \
                        <!-- Button --> \
                            <div class="buttonline"> \
                                <div class="bgroup2"> \
                                    <div> \
                                        <input type="submit" name="zurück" value="zurück" class="back" onclick="return false;" class="" title="zurück"> \
                                    </div> \
                                </div> \
                                <div class="bgroup1"> \
                                    <div> \
                                        <input type="submit" name="Weiter" id="defaultAction" class="check" value="Weiter" onclick="return false;" class="" title="Weiter"> \
                                    </div> \
                                </div> \
                            </div> \
                        </div'

};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);


var fnErrorLabelTemplate;

function getAndOpenDocument(druckstueckBOandUrl) {
    var deferred = $.Deferred();

    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                deferred.resolve();
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                deferred.reject();
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            deferred.reject();
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });

    return deferred.promise();
}

function clearErrors(kv_ref_name, label) {
    label.parent().find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
}

function addError(kv_ref_name, label, errorText) {
    var error = $(fnErrorLabelTemplate({error: errorText}));
    error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
    error.insertAfter(label);
}

var Schritt5Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt5Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt5Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(64);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt5Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(this.getBO().vpTarife[0], this.getBO().vn.zahlungsdaten.zahlungsweise);

            var textPapierverzicht = Util.getTextFromEncodedObject(this.getBO().texte.papierverzicht);
            var textAbschlusserklaerung = Util.getTextFromEncodedObject(this.getBO().texte.abschlusserklaerung);
            var textBeratungsverzicht = Util.getTextFromEncodedObject(this.getBO().texte.beratungsverzicht);
            var textVertragsinformation = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformation);

            var textDatenschutzTitle = Util.getTextFromEncodedObject(this.getBO().texte.datenschutzTitle);
            var textVertragsgrundlagen = Util.getTextFromEncodedObject(this.getBO().texte.vertragsgrundlagen);
            var textVertragsinformationTitle = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformationTitle);
            var textDatenschutz = Util.getTextFromEncodedObject(this.getBO().texte.datenschutz);

            var renderBO = {
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: this.getBO().einstellung.modul.tariftyp,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                vpName: this.getBO().vp.vorname + " " + this.getBO().vp.name,
                vpGeburtsdatum: this.getBO().vp.geburtsdatum,
                beitrag: this.getBO().vpTarife[0].beitrag,
                zahlungsweiseGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.text,
                beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value,
                textPapierverzicht: textPapierverzicht,
                textAbschlusserklaerung: textAbschlusserklaerung,
                textBeratungsverzicht: textBeratungsverzicht,
                textVertragsinformation: textVertragsinformation,
                textDatenschutzTitle: textDatenschutzTitle,
                textVertragsgrundlagen: textVertragsgrundlagen,
                textVertragsinformationTitle: textVertragsinformationTitle,
                textDatenschutz: textDatenschutz
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);

            SchrittRendererHelper.getItemByPseudoId("capt", rootElement, "input").change(function() {
                that.getBO().capt.bildCode = $(this).val();
            });
            SchrittRendererHelper.getItemByPseudoId("beratung", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noBeratung.accepted = true;
                } else {
                    that.getBO().noBeratung.accepted = false;
                }
            });
            var checkBeratung = function() {
                var kv_ref_name = "beratung";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().noBeratung.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            SchrittRendererHelper.getItemByPseudoId("papierunterlagen", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noPapierunterlagen.accepted = true;
                } else {
                    that.getBO().noPapierunterlagen.accepted = false;
                }
            });
            var checkPapierunterlagen = function() {
                var kv_ref_name = "papierunterlagen";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().noPapierunterlagen.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };

            SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vvg.accepted = true;
                } else {
                    that.getBO().vvg.accepted = false;
                }
            });
            if (!this.getBO().vvg.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", true);
            }
            SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().datenschutzerklaerung.accepted = true;
                } else {
                    that.getBO().datenschutzerklaerung.accepted = false;
                }
            });
            content.find("a.vvg").click(function() {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckVertragsinformationBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().vvg.downloaded = true;
                });
            });
            var checkVVG = function() {
                var kv_ref_name = "vvg";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().vvg.downloaded) {
                    addError(kv_ref_name, label, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().vvg.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            content.find("a.datenschutz").click(function() {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckDatenschutzBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().datenschutzerklaerung.downloaded = true;
                });
            });
            if (!this.getBO().datenschutzerklaerung.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", true);
            }
            var checkDS = function() {
                var kv_ref_name = "ds";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().datenschutzerklaerung.downloaded) {
                    addError(kv_ref_name, label, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().datenschutzerklaerung.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            var checkCaptcha = function() {
                var kv_ref_name = "capt";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (that.getBO().capt.bildCode === null || that.getBO().capt.bildCode.length === 0 || that.getBO().capt.bildCode.length > 20) {
                    addError(kv_ref_name, label, "Sie müssen den im Bild angezeigten Sicherheitscode eingeben.");
                    return false;
                }

                return true;
            }

            this._updateCaptcha();

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                var okBeratung = checkBeratung();
                var okPapierunterlagen = checkPapierunterlagen();
                var okVVG = checkVVG();
                var okDS = checkDS();
                var okCaptcha = checkCaptcha();

                if (okBeratung && okPapierunterlagen && okVVG && okDS && okCaptcha) {
                    that._abschluss();
                } else {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                }
            });

            var links = SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement).find("a");
            links.eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            links.eq(2).prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

            var mehrwertBoxTarifAccordion_row = SchrittRendererHelper.getItemByPseudoId("mehrwertBoxTarifAccordion_row", rootElement);
            mehrwertBoxTarifAccordion_row.find("a").click(function(){
                mehrwertBoxTarifAccordion_row.find("a").toggleClass("active");
                mehrwertBoxTarifAccordion_row.find("div.content").toggleClass("active");
            });

            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            this.getBO().einstellung.modul.leistungen.forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt5Renderer.prototype._getDruckstueckDatenschutzBOandUrl = function() {
    return this.oProdukt.getDruckstueckDatenschutzBOandUrl(this.getBO());
};

Schritt5Renderer.prototype._getDruckstueckVertragsinformationBOandUrl = function() {
    return this.oProdukt.getDruckstueckVertragsinformationBOandUrl(this.getBO());
};

Schritt5Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt5Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt5Renderer.prototype._updateCaptcha = function() {
    this._getCaptcha().then(function(oResult) {
        //SchrittRendererHelper.getItemByPseudoId("capt_im", rootElement).attr("src", Config.resourceUrl + "?token=" + oResult);
        this.getBO().capt.token = oResult.token;
        SchrittRendererHelper.getItemByPseudoId("capt_im", this.rootElement).attr("src", Config.resourceUrl + "?token=" + oResult.captcha.bytes);
     }.bind(this)).fail(function(e) {
        var kv_ref_name = "commonErrors";

        var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
        clearErrors(kv_ref_name, label);

        if (e.validationErrors) {
            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });

            // wg. insertAfter am Ende
            addError(kv_ref_name, label, "Es liegen folgende Fehler vor:");

            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
   }.bind(this));
};

Schritt5Renderer.prototype._getCaptcha = function() {
    return this.oProdukt.getCaptcha(this.getBO());
};

Schritt5Renderer.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt5Renderer.prototype._abschluss = function() {
    var that = this;

    this.setBusy(true);
    this.oProdukt.abschluss(this.getBO()).then(function(oResult) {
        that.oProdukt.abschlussFinish(that.getBO(), oResult);
    }).fail(function(e) {
        if (e === "token") {
            var kv_ref_name = "capt";
            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);
            addError(kv_ref_name, label, "Der angegebene Bildcode muss mit dem angezeigten übereinstimmen.");
        } else if (e !== null && e !== undefined && typeof e === "object" && e.validationErrors) {
            var kv_ref_name = "commonErrors";

            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);

            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });
        }
        that.getBO().capt.bildCode = "";
        SchrittRendererHelper.getItemByPseudoId("capt", that.rootElement, "input").val("");

        SchrittRendererHelper.scrollToFirstError(that.rootElement);
        that._updateCaptcha();
    }).always(function() {
        that.setBusy(false);
    });
};

module.exports = Schritt5Renderer;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%= produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
                                <div class="rowX"> \
                                            <ol class="progress-indicator"> \
                                                    <li class="" data-step="1"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="2"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="3"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="4"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-current" data-step="5"> \
                                                        <span>Online beantragen</span> \
                                                    </li> \
                                            </ol> \
                                        </div> \
                                \
                                </div> \
    \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <!-- Pflichtfelder, SSL --> \
                                    <div class="kvo-content-2"> \
    \
                                        <div class="kvo-title"> \
                                           <h1>Vertragsgrundlagen und Erklärungen des Antragstellers und der zu versichernden Personen</h1> \
								            <div class="row"> \
									            <div class="large-12 medium-12 columns"> \
									                <span>In diesem Schritt finden Sie alle rechtlich notwendigen Dokumente rund um Ihre gewünschte Absicherung, bevor Sie am Ende der Seite Ihren Online-Antrag an uns absenden können.</span> \
									                <p>&nbsp;</p> \
									            </div> \
									        </div> \
                                        </div> \
        	                            <hr/> \
                                        <div class="kvo-content"> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <%= textVertragsgrundlagen %> <a target="_blank" href="https://get.adobe.com/de/reader/"><img border="0" src="' + Config.mediaUrl + 'form/fod_style/base/resources/img/get_reader.png" type="image" name="imageField"></a>\
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns" data-abide> \
                                                    <label kv_ref="commonErrors"></label> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="beratung"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-1" type="radio" class="digit-1" id="image-radio-1"><label style="left: 5px;" for="image-radio-1"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <b>Verzicht auf Beratung</b> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_beratung" id="p_beratung" kv_ref="beratung"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_beratung"></label> \
                                                        </div> \
                                                        <%= textBeratungsverzicht %> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="vvg"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-2" type="radio" class="digit-2" id="image-radio-2"><label style="left: 5px;" for="image-radio-2"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                        <strong>Herunterladen wichtiger Vertragsinformationen</strong><br/><%= textVertragsinformationTitle %><br> \
                                                            <p>&nbsp;</p> \
                                                            <a class="button erklaerung vvg">Herunterladen</a> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_vvg" id="p_vvg" kv_ref="vvg"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_vvg"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"><%= textVertragsinformation %></div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="papierunterlagen"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-3" type="radio" class="digit-3" id="image-radio-3"><label style="left: 5px;" for="image-radio-3"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <b>Verzicht auf Papierunterlagen</b> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_papierunterlagen" id="p_papierunterlagen" kv_ref="papierunterlagen"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_papierunterlagen"></label> \
                                                        </div> \
                                                        <%= textPapierverzicht %> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="ds"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-4" type="radio" class="digit-4" id="image-radio-4"><label style="left: 5px;" for="image-radio-4"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                             <strong>Herunterladen wichtiger Datenschutzinformationen</strong><br>Bitte laden Sie die "<b>Einwilligungsklauseln zum Datenschutz und Einwilligung in die Erhebung und Verwendung von Gesundheitsdaten und Schweigepflichtentbindungserklärung</b>" herunter. \
                                                            <p>&nbsp;</p> \
                                                            <a class="button datenschutz">Herunterladen</a> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_ds" id="p_ds" kv_ref="ds"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_ds"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <%= textDatenschutz %> \
                                                        </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-5" type="radio" class="digit-5" id="image-radio-5"><label style="left: 5px;" for="image-radio-5"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <div class="row"> \
                                                                <div class="small-12 columns"> \
                                                                    <b>Abschließende Erklärung</b> \
                                                                    <%= textAbschlusserklaerung %> \
                                                                    <br>Die mit * gekennzeichneten Tarife werden parallel angeboten. Die Erläuterung in dem Informationsblatt "Weitere Vertragsgrundlagen und Zusatzerklärungen des Antragstellers und der zu versichernden Personen" habe ich gelesen. \
                                                                    <p>&nbsp;</p> \
                                                                </div> \
                                                            </div> \
                                                            <div class="row"> \
                                                                <div class="small-12 columns"> \
                                                                    <img kv_ref="capt_im" type="image" border="0"> \
                                                                    <p>&nbsp;</p> \
                                                                </div> \
                                                            </div> \
                                                            <div class="row"> \
                                                                <div class="small-12 columns" data-abide> \
                                                                    <label>Geben Sie hier den im oberen Bild angezeigten Sicherheitscode ein (Groß- und Kleinschreibung kann vernachlässigt werden):</label> \
                                                                    <label kv_ref="capt"></label> \
                                                                </div> \
                                                            </div> \
                                                            <div class="row"> \
                                                                <div class="small-4 columns"> \
                                                                    <input maxlength="15" type="text" class="antwort" style="text-transform: uppercase;" kv_ref="capt"> \
                                                                </div> \
                                                            </div> \
                                                        </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                                \
                                            <!-- Buttons --> \
                                            <div class="row"> \
                                                <div class="medium-5 large-4 columns left"> \
                                                    <p>&nbsp;</p> \
                                                    <a class="button expand action-back back">zurück</a> \
                                                    <p class="small-text button-subline">zu Schritt 4: "Angaben Überprüfen"</p> \
                                                </div> \
                                                <div class="medium-5 large-4 columns right text-right"> \
                                                    <p>&nbsp;</p> \
                                                    <a class="call-to-action button expand check">Jetzt zahlungspflichtig online beantragen</a> \
                                                </div> \
                                            </div> \
                                            <div class="row ssl"> \
                                                <div class="columns medium-12 "> \
                                                    <p>&nbsp;</p> \
                                                    <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                                    <br> \
                                                    <span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                                </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
 \
                                <!-- rechte Mehrwertbox --> \
                                <div class="large-4 medium-5 columns"> \
                                 	<div class="row "> \
                                        <!-- Ausgabe eingegebener Daten --> \
                                     	<div class="medium-11 small-12 summarybox right"> \
                                          	<div class="row" kv_ref="absicherungContent"> \
                                               	<div class="medium-12 columns"> \
                                                    <h2>Ihre gewünschte Absicherung</h2> \
                                                    <h1><%= produkt %></h1> \
                                                    <p><%= produktDesc %></p> \
                                                    <br kv_ref="trenner_leistungen" /> \
                                                </div> \
                                            </div> \
                                            <div class="row display-sum tarifbeitragContent"> \
                                                <div class="medium-7 small-8 columns"> \
                                                    <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                                </div> \
                                                <div class="medium-5 small-4 columns"> \
                                                     <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                                </div> \
                                            </div> \
                                            <dl class="accordion" data-accordion="" kv_ref="mehrwertBoxTarifAccordion_row"> \
                                                <dd class="accordion-navigation active"> \
                                                    <a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
                                                    <div id="panel1a" class="content active"> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= vpName %>, <%= vpGeburtsdatum %><br />(Zu versichernde Person)</label> \
                                                            </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label><%= produkt %></label> \
                                                            </div> \
                                                            <div class="medium-5 small-4 columns"> \
                                                                <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                                            </div> \
                                                        </div> \
                                                        <hr /> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                                            </div> \
                                                            <div class="medium-5 small-4 columns"> \
                                                                <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                </dd> \
                                            </dl> \
                                            <div class="medium-11 small-12 summarybox left"> \
                                                <div class="row" kv_ref="weiterfuehrendeInformationenRow"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Weiterführende Informationen</h2> \
                                                        <ul> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
                                                            <li><a target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                                        </ul> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                     </div> \
                                  </div> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>',

    errorLabelTemplate: '<small style="display: block" class="error"><%- error %></small>'
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);


var fnErrorLabelTemplate;

function getAndOpenDocument(druckstueckBOandUrl) {
    var deferred = $.Deferred();

    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                deferred.resolve();
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                deferred.reject();
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            deferred.reject();
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });

    return deferred.promise();
}

function clearErrors(kv_ref_name, label) {
    label.parent().find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
}

function addError(kv_ref_name, label, errorText) {
    var error = $(fnErrorLabelTemplate({error: errorText}));
    error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
    error.insertBefore(label);
}

var Schritt5RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt5RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt5RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(66);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt5RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(this.getBO().vpTarife[0], this.getBO().vn.zahlungsdaten.zahlungsweise);

            var textPapierverzicht = Util.getTextFromEncodedObject(this.getBO().texte.papierverzicht);
            var textAbschlusserklaerung = Util.getTextFromEncodedObject(this.getBO().texte.abschlusserklaerung);
            var textBeratungsverzicht = Util.getTextFromEncodedObject(this.getBO().texte.beratungsverzicht);
            var textVertragsinformation = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformation);

            var textDatenschutzTitle = Util.getTextFromEncodedObject(this.getBO().texte.datenschutzTitle);
            var textVertragsgrundlagen = Util.getTextFromEncodedObject(this.getBO().texte.vertragsgrundlagen);
            var textVertragsinformationTitle = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformationTitle);
            var textDatenschutz = Util.getTextFromEncodedObject(this.getBO().texte.datenschutz);

            var renderBO = {
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: this.getBO().einstellung.modul.tariftyp,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                zahlungsweiseGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.text,
                beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value,
                textPapierverzicht: textPapierverzicht,
                textAbschlusserklaerung: textAbschlusserklaerung,
                textBeratungsverzicht: textBeratungsverzicht,
                textVertragsinformation: textVertragsinformation,
                textDatenschutzTitle: textDatenschutzTitle,
                textVertragsgrundlagen: textVertragsgrundlagen,
                textVertragsinformationTitle: textVertragsinformationTitle,
                textDatenschutz: textDatenschutz,
                textVisitenkarteTitle: 'Gerne möchten wir Sie darüber informieren, mit wem Sie es zu tun haben. Laden Sie dazu bitte die Vermittlerinformationen (PDF) herunter.',
                textVisitenkarte: 'Hiermit bestätige ich die Vermittlerinformationen heruntergeladen und gelesen zu haben.',
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);

            if (this.getBO().iddDetails.visitenkartenURL && this.getBO().iddDetails.visitenkartenURL.length>0) {
            	SchrittRendererHelper.getItemByPseudoId("vkCont", rootElement).show();

            	SchrittRendererHelper.getItemByPseudoId("kvo_content", rootElement).find("div.consal_block_nummer").each(function(idx){
            		$(this).html('' + (idx+1));
            	});

                SchrittRendererHelper.getItemByPseudoId("vk", rootElement, "input").change(function() {
                    if($(this).is(":checked")) {
                        that.getBO().vk.accepted = true;
                    } else {
                        that.getBO().vk.accepted = false;
                    }
                });

                SchrittRendererHelper.getItemByPseudoId("vk", rootElement, "input").prop("disabled", true);
                that.getBO().vk.downloaded = false;

                content.find("input.visitenkarte").click(function() {
                    SchrittRendererHelper.getItemByPseudoId("vk", rootElement, "input").prop("disabled", false);

                    that.getBO().vk.downloaded = true;
                    var druckstueckBOandUrl = that.getBO().iddDetails.visitenkartenURL;
                    var win = window.open("", "_blank");
                    win.location.href = druckstueckBOandUrl;
                });

                SchrittRendererHelper.getItemByPseudoId("vermverinfo1", rootElement).hide();
                SchrittRendererHelper.getItemByPseudoId("vermverinfo2", rootElement).hide();
            }
            var checkVk = function() {
            	if (that.getBO().iddDetails.visitenkartenURL && that.getBO().iddDetails.visitenkartenURL.length>0) {
	                var kv_ref_name = "vk_hidden";

	                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
	                clearErrors(kv_ref_name, input);

	                if (!that.getBO().vk.accepted) {
	                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
	                    return false;
	                }
                }
                return true;
            };

            SchrittRendererHelper.getItemByPseudoId("capt", rootElement, "input").change(function() {
                that.getBO().capt.bildCode = $(this).val();
            });
            SchrittRendererHelper.getItemByPseudoId("beratung", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noBeratung.accepted = true;
                } else {
                    that.getBO().noBeratung.accepted = false;
                }
            });
            var checkBeratung = function() {
                var kv_ref_name = "beratung_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().noBeratung.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            SchrittRendererHelper.getItemByPseudoId("papierunterlagen", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noPapierunterlagen.accepted = true;
                } else {
                    that.getBO().noPapierunterlagen.accepted = false;
                }
            });
            var checkPapierunterlagen = function() {
                var kv_ref_name = "papierunterlagen_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().noPapierunterlagen.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };

            SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vvg.accepted = true;
                } else {
                    that.getBO().vvg.accepted = false;
                }
            });
            if (!this.getBO().vvg.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", true);
            }
            SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().datenschutzerklaerung.accepted = true;
                } else {
                    that.getBO().datenschutzerklaerung.accepted = false;
                }
            });
            content.find("input.vvg").click(function() {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckVertragsinformationBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().vvg.downloaded = true;
                });
            });
            var checkVVG = function() {
                var kv_ref_name = "vvg_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().vvg.downloaded) {
                    addError(kv_ref_name, input, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().vvg.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            content.find("input.datenschutz").click(function() {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckDatenschutzBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().datenschutzerklaerung.downloaded = true;
                });
            });
            if (!this.getBO().datenschutzerklaerung.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", true);
            }
            var checkDS = function() {
                var kv_ref_name = "ds_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().datenschutzerklaerung.downloaded) {
                    addError(kv_ref_name, input, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().datenschutzerklaerung.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            var checkCaptcha = function() {
                var kv_ref_name = "capt";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (that.getBO().capt.bildCode === null || that.getBO().capt.bildCode.length === 0 || that.getBO().capt.bildCode.length > 20) {
                    addError(kv_ref_name, input, "Sie müssen den im Bild angezeigten Sicherheitscode eingeben.", true);
                    return false;
                }

                return true;
            };

            this._updateCaptcha();

            content.find("input.back").click(function() {
                that._zurueck();
            });
            content.find("input.check").click(function() {
                var okBeratung = checkBeratung();
                var okPapierunterlagen = checkPapierunterlagen();
                var okVVG = checkVVG();
                var okDS = checkDS();
                var okCaptcha = checkCaptcha();
                var okVk = checkVk();

                if (okBeratung && okPapierunterlagen && okVVG && okDS && okCaptcha && okVk) {
                    that._abschluss();
                } else {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                }
            });
        }

        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt5RendererIF6.prototype._getDruckstueckDatenschutzBOandUrl = function() {
    return this.oProdukt.getDruckstueckDatenschutzBOandUrl(this.getBO());
};

Schritt5RendererIF6.prototype._getDruckstueckVertragsinformationBOandUrl = function() {
    return this.oProdukt.getDruckstueckVertragsinformationBOandUrl(this.getBO());
};

Schritt5RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt5RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt5RendererIF6.prototype._updateCaptcha = function() {
    this._getCaptcha().then(function(oResult) {
        //SchrittRendererHelper.getItemByPseudoId("capt_im", rootElement).attr("src", Config.resourceUrl + "?token=" + oResult);
        this.getBO().capt.token = oResult.token;
        SchrittRendererHelper.getItemByPseudoId("capt_im", this.rootElement).attr("src", Config.resourceUrl + "?token=" + oResult.captcha.bytes);
    }.bind(this)).fail(function(e) {
        var kv_ref_name = "commonErrors";

        var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
        clearErrors(kv_ref_name, label);

        if (e.validationErrors) {
            addError(kv_ref_name, label, "Es liegen folgende Fehler vor:");

            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });

            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
    }.bind(this));
};

Schritt5RendererIF6.prototype._getCaptcha = function() {
    return this.oProdukt.getCaptcha(this.getBO());
};

Schritt5RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt5RendererIF6.prototype._abschluss = function() {
    var that = this;

    this.setBusy(true);
    this.oProdukt.abschluss(this.getBO()).then(function(oResult) {
        that.oProdukt.abschlussFinish(that.getBO(), oResult);
    }).fail(function(e) {
        if (e === "token") {
            var kv_ref_name = "capt";
            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);
            addError(kv_ref_name, label, "Der angegebene Bildcode muss mit dem angezeigten übereinstimmen.");
        } else if (e !== null && e !== undefined && typeof e === "object" && e.validationErrors) {
            var kv_ref_name = "commonErrors";

            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);

            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });
        }
        that.getBO().capt.bildCode = "";
        SchrittRendererHelper.getItemByPseudoId("capt", that.rootElement, "input").val("");

        SchrittRendererHelper.scrollToFirstError(that.rootElement);
        that._updateCaptcha();
    }).always(function() {
        that.setBusy(false);
    });
};

module.exports = Schritt5RendererIF6;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
                    <div kv_ref="kvo_content"> \
                        <!-- Progress / Header --> \
                        <div class="block"> \
                        <ul class="progress"> \
                            <li class="">1</li> \
                            <li class="">2</li> \
                            <li class="">3</li> \
                            <li class="">4</li> \
                            <li class="active">5</li> \
                        </ul> \
                        <h2>Vertragsgrundlagen und Erklärungen des Antragstellers und der zu versichernden Person(en)</h2> \
                        </div> \
                        <!-- Contentbereich --> \
                        <!-- Hinweisblock --> \
                        <div class="block"> \
                        <p><strong>In diesem Schritt finden Sie alle rechtlich notwendigen Dokumente rund um Ihre gewünschte Absicherung, bevor Sie am Ende der Seite Ihren Online-Auftrag an uns absenden können.</strong></p> \
                        </div> \
                        <!-- Vertragsrundlagen --> \
                        <div class="block"> \
                        <%= textVertragsgrundlagen %> <a target="_blank" href="https://get.adobe.com/de/reader/"><img border="0" src="' + Config.mediaUrl + 'images/get_reader.png" type="image" name="imageField"></a>\
                        </div> \
                        <!-- Visitenkarte --> \
                        <div class="block" style="display:none" kv_ref="vkCont"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">1</div> \
                                <div class="centered_in_left_of_two_columns distanced_in_left_of_two_columns"><input id="p_ds" name="checkbox" type="checkbox" kv_ref="vk"></div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <label for="p_vk"> \
                                    <p> \
                                    <strong>Herunterladen Vermittlerinformation, §15 VersVemV, §60 VVG </strong><br><%= textVisitenkarteTitle %> \
                                    <div class="buttonline textleft"> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <input type="submit" class="visitenkarte" id="p_vk" name="Herunterladen" value="Herunterladen" onclick="return false;" title="Herunterladen"> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="vk_hidden"> \
                                    </div> \
                                    <p><br/><%= textVisitenkarte %></p> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Beratung --> \
                        <div class="block"> \
                            <div class="left_of_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">1</div> \
                                <div class="centered_in_left_of_two_columns"><input id="p_beratung" name="checkbox" type="checkbox" kv_ref="beratung"></div> \
                            </div> \
                            <div class="right_of_two_columns"> \
                                <label for="p_beratung"> \
                                    <p> \
                                    <strong>Verzicht auf Beratung</strong><br/>Im Zuge des Online-Abschlusses verzichte ich auf eine Beratung. Mir ist bewusst, dass der Verzicht sich nachteilig auf die Möglichkeit auswirken kann, Schadenersatzansprüche wegen Verletzung der Beratungs- und Dokumentationspflicht geltend zu machen. \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="beratung_hidden"> \
                                    </div> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Vertragsinfos --> \
                        <div class="block"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">2</div> \
                                <div class="centered_in_left_of_two_columns distanced_in_left_of_two_columns"><input id="p_vvg" name="checkbox" type="checkbox" kv_ref="vvg"></div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <label for="p_vvg"> \
                                    <p> \
                                    <strong>Herunterladen wichtiger Vertragsinformationen</strong><br/><%= textVertragsinformationTitle %> \
                                        <!-- Button --> \
                                        <div class="buttonline textleft"> \
                                            <div class="bgroup1"> \
                                                <div> \
                                                    <input type="submit" class="vvg" name="Herunterladen" value="Herunterladen" onclick="return false;" class="" title="Herunterladen"> \
                                                </div> \
                                            </div> \
                                        </div> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="vvg_hidden"> \
                                    </div> \
                                    <p><%= textVertragsinformation %></p> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Papierunterlagen --> \
                        <div class="block"> \
                            <div class="left_of_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">3</div> \
                                <div class="centered_in_left_of_two_columns"><input id="p_papierunterlagen" name="checkbox" type="checkbox" kv_ref="papierunterlagen"></div> \
                            </div> \
                            <div class="right_of_two_columns"> \
                                <label for="p_papierunterlagen"> \
                                    <p> \
                                    <strong>Verzicht auf Papierunterlagen</strong><br/><%= textPapierverzicht %> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="papierunterlagen_hidden"> \
                                    </div> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Einwilligungsklauseln --> \
                        <div class="block"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">4</div> \
                                <div class="centered_in_left_of_two_columns distanced_in_left_of_two_columns"><input id="p_ds" name="checkbox" type="checkbox" kv_ref="ds"></div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <label for="p_ds"> \
                                    <p> \
                                        <strong>Herunterladen wichtiger Datenschutzinformationen</strong><br><%= textDatenschutzTitle %> \
                                        <div class="buttonline textleft"> \
                                            <div class="bgroup1"> \
                                                <div> \
                                                    <input type="submit" class="datenschutz" name="Herunterladen" value="Herunterladen" onclick="return false;" class="" title="Herunterladen"> \
                                                </div> \
                                            </div> \
                                        </div> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="ds_hidden"> \
                                    </div> \
                                    <%= textDatenschutz %> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Erklärung --> \
                        <div class="block"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">5</div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <p> \
                                    <%= textAbschlusserklaerung %> \
                                    <div class="image block-center"> \
                                        <img kv_ref="capt_im" type="image" border="0"> \
                                    </div> \
                                </p> \
                                <p>Geben Sie hier den im oberen Bild angezeigten Sicherheitscode ein:</p> \
                                <div class="bline"> \
                                    <label for="captcha" kv_ref="capt">Sicherheitscode:</label> \
                                    <input type="text" name="captcha" id="captcha" value="" class="il" maxlength="10" placeholder="" style="text-transform: uppercase;" kv_ref="capt"> \
                                    <br class="bterm" /> \
                                </div> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Button-Actionblock --> \
                        <!-- Hinweisblock --> \
                        <div class="block leer"> \
                        </div> \
                        <!-- Button --> \
                        <div class="buttonline"> \
                        <div class="bgroup2"> \
                            <div> \
                                <input type="submit" class="back" name="zurück" value="zurück" onclick="return false;" class="" title="zurück"> \
                            </div> \
                        </div> \
                        <div class="bgroup1"> \
                            <div> \
                                <input type="submit" class="check" name="Jetzt zahlungspflichtig online beantragen" id="defaultAction" value="Jetzt zahlungspflichtig online beantragen" onclick="return false;" class="" title="Jetzt zahlungspflichtig online beantragen"> \
                            </div> \
                        </div> \
                        </div> \
                    </div>',

    errorLabelTemplate: ' \
                    <div class="blineover error"> \
                        <div class="msgerror"> \
                            <ul> \
                                <li><%- error %></li> \
                            </ul> \
                        </div> \
                    </div>'

};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);


var fnErrorLabelTemplate;

function getUrlFor(content) {
    return Config.resourceUrl + "?token=" + content;
}

var Schritt6Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt6Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt6Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(68);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt6Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var bo = this.getBO().bo;
            var anrede = (bo.vn.anrede === "HERR" ? "geehrter Herr" : "geehrte Frau") + " " + (bo.vn.titel ? bo.vn.titel + " " : "") + bo.vn.vorname + " " + bo.vn.name;
            var renderBO = {
                anrede: anrede,
                produkt: bo.produkt,
                antragsNr: validationResult.antragsnr,
                produktDesc: "",
                hotline: bo.einstellung.versicherer.hotline,
                oeffnungszeit: bo.einstellung.versicherer.oeffnungszeit,
                versichererName: bo.einstellung.versicherer.name,
                versichererAddr1: bo.einstellung.versicherer.adr1,
                versichererAddr2: bo.einstellung.versicherer.adr2,
                versichererTelefon: bo.einstellung.versicherer.telefon,
                versichererFax: bo.einstellung.versicherer.fax
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            var urlForContent = getUrlFor(that.getBO().result.antragstream.bytes);
            content.find("a.print").attr("href", urlForContent);
            content.find("a.save").attr("href", urlForContent);
            content.find("a.save").attr("download", "Antrag-" + validationResult.antragsnr + ".pdf");
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt6Renderer.prototype._print = function() {
};

Schritt6Renderer.prototype._save = function() {
};

module.exports = Schritt6Renderer;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%= produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <div class="kvo-title"> \
                                        <h1>Sehr <%= anrede %>,</h1> \
                                        <div class="row"> \
                                            <div class="large-12 columns"> \
                                                <span>vielen Dank, dass Sie sich für die Union Krankenversicherung AG als Ihren Partner rund um Ihre Gesundheit entschieden haben.</span> \
                                                <p>&nbsp;</p> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    <div class="kvo-content"> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-file-text-o fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Ihr Antrag mit der Antragsnummer <b><%= antragsNr %></b> ist bei uns eingegangen. Sie können ihn anzeigen oder speichern.</span> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                            <div class="medium-12 columns"> \
                                            <div class="row"> \
                                                    <div class="medium-4 columns"> \
                                                        <p>&nbsp;</p> \
                                                    </div> \
                                                    <div class="medium-4 columns left text-right"> \
                                                        <p>&nbsp;</p> \
                                                        <a href="javascript:void(0);" class="button expand print" target="_blank">Antrag anzeigen</a> \
                                                    </div> \
                                                    <div class="medium-4 columns right text-right"> \
                                                        <p>&nbsp;</p> \
                                                        <a href="javascript:void(0);" class="call-to-action button expand save" download>Antrag speichern</a> \
                                                    </div> \
                                            </div> \
                                            </div> \
                                        \
                                        <div class="row"> \
                                            <div class="medium-2 columns"> \
                                            &nbsp; \
                                            </div> \
                                            </div> \
                                        \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <p>Um die Dateien zu öffnen, benötigen Sie den kostenlosen Adobe Reader. Falls Sie ihn auf Ihrem Rechner noch nicht installiert sein sollte, können Sie hier den <a  target="_blank" href="https://get.adobe.com/de/reader/"><img border="0" src="' + Config.mediaUrl + 'form/fod_style/base/resources/img/get_reader.png" type="image" name="imageField"></a> herunterladen.</p> \
                                            </div> \
                                        </div> \
        \
                                        <div class="row"> \
                                            <div class="medium-2 columns"> \
                                            &nbsp; \
                                            </div> \
                                            </div> \
                                        <div class="row"> \
                                            <div class="medium-2 columns"> \
                                            &nbsp; \
                                            </div> \
                                            </div> \
                                        \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                    <div class="row"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Wie geht es jetzt weiter?</h2> \
                                                    </div> \
                                                    </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-shield  fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Um Ihre persönlichen Daten zu schützen, versenden wir keine E-Mail mit dem Antrags-PDF im Anhang. Eine Kopie des bei uns gespeicherten Antrags kann von Ihnen jederzeit angefordert werden.</span> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-envelope-open-o  fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Bei Fragen zu Ihrem Antrag setzen wir uns zeitnah mit Ihnen in Verbindung. Bei der Annahme Ihres Antrages senden wir Ihnen einen Versicherungsschein mit Ihrer persönlichen Versicherungsnummer per Post zu.</span> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-envelope-o  fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Wenn Sie später Leistungen einreichen wollen, können Sie dies per App oder Post erledigen.</span> \
                                                        <p><a href="https://www.ukv.de/content/service/leistungsantrag/" target="_blank"><i class="fa fa-caret-right"></i> Mehr erfahren</a> \
                                                    </p></div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
        \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2>Vielen Dank für Ihr Vertrauen</h2> \
        \
                                                <p> \
                                                <%= versichererName %><br> \
                                                <%= versichererAddr1 %><br>  \
                                                <%= versichererAddr2 %><br>  \
                                                Telefon: <%= versichererTelefon %><br>  \
                                                Fax: <%= versichererFax %> \
                                                </p> \
                                            </div> \
                                        </div> \
                                        <div class="row kvo-ssl"> \
                                            <div class="columns medium-12 "> \
                                                <p>&nbsp;</p> \
                                                <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                                <br> \
                                                <span class="secure"> Die Übertragung Ihrer Daten erfolgt verschlüsselt über einen sicheren Server.</span> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
 \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>'
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);


var fnErrorLabelTemplate;

function getUrlFor(content) {
    return Config.resourceUrl + "?token=" + content;
}

var Schritt6RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt6RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt6RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(70);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt6RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var bo = this.getBO().bo;
            var anrede = (bo.vn.anrede === "HERR" ? "geehrter Herr" : "geehrte Frau") + " " + (bo.vn.titel ? bo.vn.titel + " " : "") + bo.vn.vorname + " " + bo.vn.name;
            var renderBO = {
                anrede: anrede,
                produkt: bo.produkt,
                antragsNr: validationResult.antragsnr,
                produktDesc: "",
                hotline: bo.einstellung.versicherer.hotline,
                oeffnungszeit: bo.einstellung.versicherer.oeffnungszeit,
                versichererName: bo.einstellung.versicherer.name,
                versichererAddr1: bo.einstellung.versicherer.adr1,
                versichererAddr2: bo.einstellung.versicherer.adr2,
                versichererTelefon: bo.einstellung.versicherer.telefon,
                versichererFax: bo.einstellung.versicherer.fax
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            var urlForContent = getUrlFor(that.getBO().result.antragstream.bytes);
            content.find("a.print").attr("href", urlForContent);
            content.find("a.save").attr("href", urlForContent);
            content.find("a.save").attr("download", "Antrag-" + validationResult.antragsnr + ".pdf");

            /*fnTemplate = _.template(schrittTemplate.nextPartTemplate);
            var contentNext = $(fnTemplate(renderBO));
            contentNext.appendTo(content);*/
        }

        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt6RendererIF6.prototype._print = function() {
};

Schritt6RendererIF6.prototype._save = function() {
};

module.exports = Schritt6RendererIF6;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
                    <div kv_ref="kvo_content"> \
                        <!-- Contentbereich --> \
                        <!-- Ansprache --> \
                        <div class="block"> \
                            <h3>Sehr <%- anrede %>,</h3> \
                            <p>vielen Dank, dass Sie sich für die Union Krankenversicherung AG als Ihren Partner rund um Ihre Gesundheit entschieden haben. \
                            </p> \
                            <p>Ihr Antrag mit der Antragsnummer <strong><%- antragsNr %></strong> ist bei uns eingegangen. Sie können ihn jetzt anzeigen oder speichern. \
                            </p> \
                            <br class="bterm"> \
                            <!-- Buttons --> \
                            <div class="if6_buttonline section"> \
                                <span></span> \
                                <div class="buttonline_inner parsys"> \
                                <div class="secondary section"><span></span> \
                                    <a href="javascript:void(0);" class="print" target="_blank">Antrag anzeigen</a> \
                                </div> \
                                <div class="primary section"><span></span> \
                                    <a href="javascript:void(0);" class="save" download>Antrag speichern</a> \
                                </div> \
                                </div> \
                            </div> \
                        </div> \
                        <div class="block"> \
                        <!-- Adobe Reader --> \
                            <div class="if6_adobe section"> \
						        <a href="javascript:void(0);"> \
						        <div class="image"> \
						            <a href="https://get.adobe.com/de/reader/"><img src="' + Config.mediaUrl + 'images/get_reader.png" alt=""></a> \
						        </div> \
                                <div> \
                                    <p>Der Antrag wird als PDF-Dokument generiert. Falls Sie ihn auf Ihrem Rechner noch nicht installiert sein sollte, können Sie hier den Acrobat Reader herunterladen.</p> \
                                </div> \
                                </a> \
                            </div> \
                        </div> \
                        <!-- Weiter --> \
                        <div class="block-inner block"> \
                            <h3>Wie geht es jetzt weiter?</h3> \
                        </div> \
                        <div class="block-inner"> \
	                        <!-- Iconbox Datenschutz --> \
	                        <div class="cbox-small cbox cbox-icon section"> \
	                            <span class="icon icon-emblem"></span> \
	                            <h2>Datenschutz</h2> \
	                            <p>Um Ihre persönlichen Daten zu schützen, versenden wir keine E-Mail mit dem Antrags-PDF im Anhang. Eine Kopie des bei uns gespeicherten Antrags kann von Ihnen jederzeit angefordert werden.<br></p> \
	                        </div> \
	                        <!-- Iconbox Fragen zum Antrag --> \
	                        <div class="cbox-small cbox cbox-icon section"> \
	                            <span class="icon icon-letter-in-envelope"></span> \
	                            <h2>Fragen zum Antrag</h2> \
	                            <p>Bei Fragen zu Ihrem Antrag setzen wir uns zeitnah mit Ihnen in Verbindung. Bei Annahme Ihres Antrages senden wir Ihnen einen Versicherungsschein mit Ihrer persönlichen Versicherungsnummer per Post zu.<br></p> \
	                        </div> \
	                        <!-- Iconbox Leistungen einreichen --> \
	                        <div class="cbox-small cbox cbox-icon section"> \
	                            <span class="icon icon-app"></span> \
	                            <h2>Leistungen einreichen</h2> \
	                            <p>Wenn Sie später Leistungen einreichen wollen, können Sie dies per App oder Post machen.<br></p> \
	                            <div class="textbutton"><a title="Mehr erfahren" href="https://www.ukv.de/content/service/leistungsantrag/" target="_blank">Mehr erfahren</a></div> \
	                        </div> \
                        </div> \
                        <!-- Danke --> \
                        <div class="block-inner"> \
	                        <div class="cbox cbox-large cbox-banking section"> \
	                            <div class="block"> \
	                                <h3>Vielen Dank für Ihr Vertrauen!</h3> \
	                                <p><%- versichererName %><br> \
	                                    <%- versichererAddr1 %><br> \
	                                    <%- versichererAddr2 %><br> \
	                                    Telefon: <%- versichererTelefon %><br> \
	                                    Telefax: <%- versichererFax %><br> \
	                                </p> \
	                            </div> \
	                        </div> \
                        </div> \
                    </div>',

    nextPartTemplate: ' \
                <!-- Weiter --> \
                <div class="cbox cbox-large cbox-banking section"> \
                    <div class="block"> \
                        <h3>Wie geht es jetzt weiter?</h3> \
                    </div> \
                </div> \
                <!-- Iconbox Datenschutz --> \
                <div class="cbox-small cbox cbox-icon section"> \
                    <span class="icon icon-emblem"></span> \
                    <h2>Datenschutz</h2> \
                    <p>Um Ihre persönlichen Daten zu schützen, versenden wir keine E-Mail mit dem Antrags-PDF im Anhang. Eine Kopie des bei uns gespeicherten Antrags kann von Ihnen jederzeit angefordert werden.<br></p> \
                </div> \
                <!-- Iconbox Fragen zum Antrag --> \
                <div class="cbox-small cbox cbox-icon section"> \
                    <span class="icon icon-letter-in-envelope"></span> \
                    <h2>Fragen zum Antrag</h2> \
                    <p>Bei Fragen zu Ihrem Antrag setzen wir uns zeitnah mit Ihnen in Verbindung. Bei Annahme Ihres Antrages senden wir Ihnen einen Versicherungsschein mit Ihrer persönlichen Versicherungsnummer per Post zu.<br></p> \
                </div> \
                <!-- Iconbox Leistungen einreichen --> \
                <div class="cbox-small cbox cbox-icon section"> \
                    <span class="icon icon-app"></span> \
                    <h2>Leistungen einreichen</h2> \
                    <p>Wenn Sie später Leistungen einreichen wollen, können Sie dies per App oder Post machen.<br></p> \
                    <div class="textbutton"><a title="Mehr erfahren" href="https://www.ukv.de/content/service/leistungsantrag/" target="_blank">Mehr erfahren</a></div> \
                </div> \
                <!-- Danke --> \
                <div class="cbox cbox-large cbox-banking section"> \
                    <div class="block"> \
                        <h3>Vielen Dank für Ihr Vertrauen!</h3> \
                        <p><%- versichererName %><br> \
                            <%- versichererAddr1 %><br> \
                            <%- versichererAddr2 %><br> \
                            Telefon: <%- versichererTelefon %><br> \
                            Telefax: <%- versichererFax %><br> \
                        </p> \
                    </div> \
                </div> \
            '
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var Produkt = __webpack_require__(8);
var ProduktStatus = __webpack_require__(72);
var ProduktRendererFactory = __webpack_require__(73);
var ProduktTr = __webpack_require__(12);
var Util = __webpack_require__(2);
var Config = __webpack_require__(0);

var findFrageBy = function(aFragen, fnFragePredicate) {
    var foundFrage;
    aFragen.some(function(oFrage) {
        if (fnFragePredicate(oFrage)) {
            foundFrage = oFrage;
            return true;
        }
    })

    if (!foundFrage) {
        aFragen.forEach(function(oFrage) {
            if (oFrage.fragen && oFrage.fragen.length > 0) {
                var res = findFrageBy(oFrage.fragen, fnFragePredicate);

                if (res) {
                    foundFrage = res;
                    return true;
                }
            }
        });
    }

    if (foundFrage) {
        return foundFrage;
    }
};


var ZVProdukt = function(name, oBO, sStyle, mode) {
    Produkt.call(this, name);

    this.status = ProduktStatus.SCHRITT1;
    this.style = sStyle;
    this.mode = mode;

    this.renderer = ProduktRendererFactory.getSchritt1RendererByStyle(sStyle, this);
    this.updateBO(oBO);

    this.vorbelegung = {};
    if (window["kvo_betreuer"]) {
        this.vorbelegung.betreuer = Util.copyOf(window["kvo_betreuer"]);
    }
    if (window["kvo_daten"]) {
        this.vorbelegung.daten = Util.copyOf(window["kvo_daten"]);
    }
};

ZVProdukt.prototype = Object.create(Produkt.prototype);
var _super_ = Produkt.prototype;

ZVProdukt.prototype.setBusy = function(bBusy) {
    this.renderer.setBusy(bBusy);
};

ZVProdukt.prototype.render = function(validationResult) {
    return this.renderer.render(validationResult);
};

ZVProdukt.prototype.updateBO = function(oBO) {
    this.data = oBO;

    var schritt1BO = {
        produkt : this.name,
        einstellung : Util.copyOf(this.data.einstellung),
        svGKV : Util.copyOf(oBO.svGKV),
        svKoopGKV : Util.copyOf(oBO.svKoopGKV),
        svLand : Util.copyOf(oBO.svLand),
        svTaetigkeitsstatus : Util.copyOf(oBO.svTaetigkeitsstatus),
        svVersicherungsstatus : Util.copyOf(oBO.svVersicherungsstatus),
        versicherungsbeginn: Util.nextVersicherungsbeginn(true),
        vp : {
            gkvAuswahlMoeglich : (oBO.vpGKV === null || oBO.vpGKV === ""),
            geburtsdatum : null,
            anrede : null,
            staatsangehoerigkeit : null,
            taetigkeitsstatus : null,
            beruf : null,
            versicherungsstatus : null,
            aktuellerVersicherungsschutz : oBO.vpGKV,
            fragen : oBO.vpFragen || [],
            antragsfragen : [],
            antragsfragenBerechnet : false,
            frageIdToTarife : null
        },
        anzeigepflicht: Util.getProp(oBO, ["texte", "Anzeigepflicht"])
    };
    if (schritt1BO.anzeigepflicht) {
        schritt1BO.anzeigepflicht = Util.getTextFromEncodedObject(JSON.parse(schritt1BO.anzeigepflicht));
    }

    if (this.vorbelegung && this.vorbelegung.daten && this.vorbelegung.daten.vps && this.vorbelegung.daten.vps.length > 0) {
        schritt1BO.vp.anrede = (this.vorbelegung.daten.vps[0].geschlecht === "weiblich" ? "FRAU" : "HERR");
        schritt1BO.vp.staatsangehoerigkeit = this.vorbelegung.daten.vps[0].staatsangehoerigkeit;
        schritt1BO.vp.taetigkeitsstatus = this.vorbelegung.daten.vps[0].taetigkeitsstatus;
        schritt1BO.vp.beruf = this.vorbelegung.daten.vps[0].beruf;
        schritt1BO.vp.versicherungsstatus = this.vorbelegung.daten.vps[0].versicherungsstatus;
        schritt1BO.vp.aktuellerVersicherungsschutz = this.vorbelegung.daten.vps[0].gkv;
        schritt1BO.vp.versicherungsnummer = this.vorbelegung.daten.vps[0].versicherungsnummer;
        schritt1BO.vp.geburtsdatum = this.vorbelegung.daten.vps[0].geburtsdatum;
        schritt1BO.versicherungsbeginn = this.vorbelegung.daten.vps[0].versicherungsbeginn;

    	if (this.vorbelegung.daten.vps[0].tarifierungsfragen) {
    		//var schritt1Ueberspringen = false;
    		var fehlendeZaehneFrage = findFrageBy(schritt1BO.vp.fragen, function(oFrage) {
                if (oFrage.externalfrageId === "TF0016") {
                    return true;
                }
                return false;
            });
            if (fehlendeZaehneFrage) {
            	if (this.vorbelegung.daten.vps[0].tarifierungsfragen['fehlendeZaehne']) {
            		fehlendeZaehneFrage.antworten = [this.vorbelegung.daten.vps[0].tarifierungsfragen.fehlendeZaehne];
            		//schritt1Ueberspringen = true;
            	}
            }

            var tagegeldhoehe = findFrageBy(schritt1BO.vp.fragen, function(oFrage) {
                if (oFrage.externalfrageId === "TF0006" || oFrage.externalfrageId === "TF0007" || oFrage.externalfrageId === "TF0013" ) {
                    return true;
                }
                return false;
            });
            if (tagegeldhoehe) {
            	if (this.vorbelegung.daten.vps[0].tarifierungsfragen['tagegeldhoehe']) {
            		tagegeldhoehe.antworten = [this.vorbelegung.daten.vps[0].tarifierungsfragen.tagegeldhoehe];
            		//schritt1Ueberspringen = true;
            	}
            }

    	}
    }
    this.schritt1BO = schritt1BO;

    this.renderer.setBO(schritt1BO);
};

ZVProdukt.prototype.zurueck = function() {
    if (this.status === ProduktStatus.SCHRITT2) {
        this.status = ProduktStatus.SCHRITT1;

        this.renderer = ProduktRendererFactory.getSchritt1RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt1BO);
        this.renderer.render(this.schritt1Result);
    } else if (this.status === ProduktStatus.SCHRITT3) {
        this.status = ProduktStatus.SCHRITT2;

        this.renderer = ProduktRendererFactory.getSchritt2RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt2BO);
        this.renderer.render(this.schritt1Result);
    } else if (this.status === ProduktStatus.SCHRITT4) {
        this.status = ProduktStatus.SCHRITT3;

        this.renderer = ProduktRendererFactory.getSchritt3RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt3BO);
        this.renderer.render(this.schritt1Result);
    }

};

ZVProdukt.prototype.weiter = function(oValidationResult) {
    if (this.status === ProduktStatus.SCHRITT1) {
        if (!this.schritt2BO) {
            this.schritt2BO = {
                produkt : this.name,
                einstellung : Util.copyOf(this.data.einstellung),
                betreuer: {
                    manuelleAuswahl: null,
                    auswahlListe : null
                },
                versicherungsbeginn : null,
                vp : {
                    geburtsdatum : null,
                    anrede : null,
                    vorname : null,
                    name : null,
                    isVn: false
                },
                vn : {
                    anrede : null,
                    titel : null,
                    vorname : null,
                    name : null,
                    geburtsdatum : null,
                    plz : null,
                    ort : null,
                    strasse : null,
                    hausnr : null,
                    telefon : null,
                    mail : null,
                    zahlungsdaten : {
                        zahlungsart : "Bankeinzug per Lastschrift",
                        zahlungsweise : null,
                        iban : {
                            selected : false,
                            no : null,
                            bic : false
                        },
                        kto : {
                            selected : false,
                            no : null,
                            blz : null
                        },
                        bank : null,
                        ksmSelected: false
                    }
                }
            }
        }

        //
        this.schritt2BO.produkt = oValidationResult.vpTarife[0].beschreibung;
        Util.merge({
            versicherungsbeginn: this.schritt1BO.versicherungsbeginn,
            vp : {
                geburtsdatum : this.schritt1BO.vp.geburtsdatum,
                anrede : this.schritt1BO.vp.anrede,
                taetigkeitsstatus: this.schritt1BO.vp.taetigkeitsstatus,
                beruf: this.schritt1BO.vp.beruf,
                versicherungsstatus: this.schritt1BO.vp.versicherungsstatus,
                aktuellerVersicherungsschutz: this.schritt1BO.vp.aktuellerVersicherungsschutz,
                versicherungsnummer: this.schritt1BO.vp.versicherungsnummer,
                staatsangehoerigkeit: this.schritt1BO.vp.staatsangehoerigkeit
            },
        }, this.schritt2BO);
        this.schritt2BO.texte = Util.copyOf(oValidationResult.texte);

        if (this.vorbelegung.betreuer) {
            this.schritt2BO.einstellung.betreuer = Util.copyOf(this.vorbelegung.betreuer);
            this.data.einstellung.betreuerFestDefiniert = true;
            this.schritt2BO.einstellung.betreuerFestDefiniert = this.data.einstellung.betreuerFestDefiniert;
            if (this.data.einstellung.betreuerFinal===true) {
                delete this.vorbelegung["betreuer"];
            }
        }
        if (this.vorbelegung.daten) {
            var vnIsUsable = this.schritt1BO.vp.geburtsdatum === this.vorbelegung.daten.vn.geburtsdatum &&
                this.schritt2BO.vp.anrede === (this.vorbelegung.daten.vn.geschlecht === "weiblich" ?  "FRAU" : "HERR");

            if (this.vorbelegung.daten.vn) {
                if (vnIsUsable) {
                    this.schritt2BO.vn.vorname = this.vorbelegung.daten.vn.vorname;
                    this.schritt2BO.vn.name = this.vorbelegung.daten.vn.name;
                    this.schritt2BO.vn.plz = this.vorbelegung.daten.vn.plz;
                    this.schritt2BO.vn.ort = this.vorbelegung.daten.vn.ort;
                    this.schritt2BO.vn.strasse = this.vorbelegung.daten.vn.strasse;
                    this.schritt2BO.vn.hausnr = this.vorbelegung.daten.vn.hausNr;
                    this.schritt2BO.vn.telefon = this.vorbelegung.daten.vn.telefon;
                    this.schritt2BO.vn.mail = this.vorbelegung.daten.vn.email;
                    this.schritt2BO.vn.vorname = this.vorbelegung.daten.vn.vorname;
                }
            }
            if (this.vorbelegung.daten.vps && this.vorbelegung.daten.vps.length > 0) {
                this.schritt2BO.vp.name = this.vorbelegung.daten.vps[0].name;
                this.schritt2BO.vp.vorname = this.vorbelegung.daten.vps[0].vorname;
            }
            if (this.vorbelegung.daten.bankdaten) {
                if (this.vorbelegung.daten.bankdaten.kontoNr != null && this.vorbelegung.daten.bankdaten.kontoNr.length > 0) {
                    this.schritt2BO.zahlungsdaten.kto.selected = true;
                    this.schritt2BO.zahlungsdaten.kto.no = this.vorbelegung.daten.bankdaten.kontoNr;
                    this.schritt2BO.zahlungsdaten.kto.blz = this.vorbelegung.daten.bankdaten.blz;
                    this.schritt2BO.zahlungsdaten.bank = this.vorbelegung.daten.bankdaten.bankname;
                }
                else if (this.vorbelegung.daten.bankdaten.iban != null && this.vorbelegung.daten.bankdaten.iban.length > 0) {
                    this.schritt2BO.zahlungsdaten.iban.selected = true;
                    this.schritt2BO.zahlungsdaten.iban.no = this.vorbelegung.daten.bankdaten.iban;
                    this.schritt2BO.zahlungsdaten.kto.bic = this.vorbelegung.daten.bankdaten.blz;
                    this.schritt2BO.zahlungsdaten.bank = this.vorbelegung.daten.bankdaten.bankname;
                }
            }
            delete this.vorbelegung["daten"];
        }


        if (Util.isVolljaehrig(this.schritt1BO.vp.geburtsdatum)) {
            this.schritt2BO.vn.anrede = this.schritt1BO.vp.anrede;
            this.schritt2BO.vn.geburtsdatum = this.schritt1BO.vp.geburtsdatum;
            this.schritt2BO.vn.name = this.schritt2BO.vp.name;
            this.schritt2BO.vn.vorname = this.schritt2BO.vp.vorname;
            this.schritt2BO.vp.isVn = true;
        } else {
            this.schritt2BO.vp.isVn = false;
        }

        this.schritt2BO.vp.fragen = this.schritt1BO.vp.fragen;
        if (oValidationResult.vpFragen)
        	this.schritt2BO.vp.fragen = oValidationResult.vpFragen;
        this.schritt2BO.vp.antragsfragen = this.schritt1BO.vp.antragsfragen;

        this.status = ProduktStatus.SCHRITT2;

        this.renderer = ProduktRendererFactory.getSchritt2RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt2BO);

        var context = this.data.context;
        if (!context)
        	context = {};
        context.mode = this.mode;

        var antragBO = Util.copyOf(this.data);
        antragBO.mandant = Config.mandant;
        antragBO.aid = Config.aid;
        antragBO.context = context;
        antragBO.versicherungsbeginn = this.schritt2BO.versicherungsbeginn;
        antragBO.vpFragen = this.schritt2BO.vp.fragen;
        antragBO.vpAntragsfragen = this.schritt2BO.vp.antragsfragen;
        antragBO.vpGKV = this.schritt2BO.vp.aktuellerVersicherungsschutz;
        antragBO.berechneSelbst = true;
        antragBO.berechneKind = false;
        antragBO.vpGeburtsdatum = this.schritt2BO.vp.geburtsdatum;
        antragBO.vpGeschlecht = this.schritt2BO.vp.anrede;

        ProduktTr.antrag(antragBO).done(function(antragResult){
        	this.schritt2BO.zahlungsweisen = antragResult.vpZahlungsweisen;

        	this.renderer.render(oValidationResult);
        }.bind(this));
    } else if (this.status === ProduktStatus.SCHRITT2) {
        this.schritt3BO = Util.copyOf(this.schritt2BO);
        this.status = ProduktStatus.SCHRITT3;

        this.renderer = ProduktRendererFactory.getSchritt3RendererByStyle(this.style, this);
        this.renderer.setBO(this.schritt3BO);

        var context = this.data.context;
        if (!context)
        	context = {};
        context.mode = this.mode;

        ProduktTr.getTexte({
            "mandant": Config.mandant,
            "aid": Config.aid,
            "context": context /*{
                "id": null,
                "mode": "TEST"
            }*/,
            "typ": "TEXTE",
            "texteVP": {
                "anrede": this.schritt3BO.vp.anrede,
                "name": "TestVP",
                "vorname": "Peter",
                "geburtsdatum": this.schritt3BO.vp.geburtsdatum,
                "id": "1",
                "vn": false,
                "versicherungsbeginn": this.schritt3BO.versicherungsbeginn,
                "beruf": this.schritt3BO.vp.beruf,
                "taetigkeitsstatus": this.schritt3BO.vp.taetigkeitsstatus,
                "versorgerBeruf": null,
                "versorgerTaetigkeitsstatus": null,
                "versicherungsstatus": this.schritt3BO.vp.versicherungsstatus,
                "gkv": this.schritt3BO.vp.aktuellerVersicherungsschutz,
                "versicherungsnummer": this.schritt3BO.vp.versicherungsnummer,
                "staatsangehoerigkeit": this.schritt3BO.vp.staatsangehoerigkeit
            },
            "texteTarif": this.schritt1Result.vpTarife[0]
        }, "Papierverzicht", "Abschlusserklaerung", "Beratungsverzicht", "Vertragsinformation", "DatenschutzTitle", "Vertragsgrundlagen", "VertragsinformationTitle", "Datenschutz").done(function(oTextResult) {
            this.schritt3BO.texte = {
                papierverzicht : JSON.parse(oTextResult.ergebnisTexte.Papierverzicht),
                abschlusserklaerung : JSON.parse(oTextResult.ergebnisTexte.Abschlusserklaerung),
                beratungsverzicht : JSON.parse(oTextResult.ergebnisTexte.Beratungsverzicht),
                vertragsinformation: JSON.parse(oTextResult.ergebnisTexte.Vertragsinformation),

                datenschutzTitle : JSON.parse(oTextResult.ergebnisTexte.DatenschutzTitle),
                vertragsgrundlagen: JSON.parse(oTextResult.ergebnisTexte.Vertragsgrundlagen),
                vertragsinformationTitle : JSON.parse(oTextResult.ergebnisTexte.VertragsinformationTitle),
                datenschutz : JSON.parse(oTextResult.ergebnisTexte.Datenschutz),
            };

            this.renderer.render(this.schritt1Result);
        }.bind(this));
    } else if (this.status === ProduktStatus.SCHRITT3) {
        if (!this.schritt4BO) {
            this.schritt4BO = {
                    produkt : this.name,
                    einstellung : Util.copyOf(this.data.einstellung),
                    vk : {
                        accepted: false,
                    },
                    vvg : {
                        accepted: false,
                        downloaded: false
                    },
                    datenschutzerklaerung : {
                        accepted: false,
                        downloaded: false
                    },
                    noBeratung : {
                        accepted: false,
                    },
                    noPapierunterlagen : {
                        accepted: false,
                    }
            };
        } else {
            this.schritt4BO.vvg.accepted = false;
            this.schritt4BO.datenschutzerklaerung.accepted = false;
        }
        this.schritt4BO.versicherungsbeginn = this.schritt3BO.versicherungsbeginn;
        this.schritt4BO.isKoopGKV = this.schritt1BO.svKoopGKV && this.schritt1BO.svKoopGKV.some(function(koop) { return koop === this.schritt1BO.vp.aktuellerVersicherungsschutz; }, this);
        this.schritt4BO.produkt = this.schritt3BO.produkt;
        this.schritt4BO.capt = {
            bildCode: null,
            token: null
        };
        this.schritt4BO.betreuer = null;
        this.schritt4BO.texte = Util.copyOf(this.schritt3BO.texte);

        if (this.data.einstellung.betreuerwahl) {
            if (this.schritt3BO.betreuer.auswahlListe && this.schritt3BO.betreuer.manuelleAuswahl) {
                this.schritt3BO.betreuer.auswahlListe.some(function(currentBetreuer) {
                    if (currentBetreuer.selected) {
                        this.schritt4BO.betreuer = Util.copyOf(currentBetreuer);
                        delete this.schritt4BO.betreuer["selected"];
                        return true;
                    }
                    return false;
                }, this);
            }
        } else if (this.data.einstellung.betreuer) {
            this.schritt4BO.betreuer = Util.copyOf(this.data.einstellung.betreuer);
            if (this.data.einstellung.betreuerFinal!=true && this.vorbelegung.betreuer) {
            	this.schritt4BO.betreuer = Util.copyOf(this.vorbelegung.betreuer);
            }
        }

        this.schritt4BO.vp = Util.copyOf(this.schritt3BO.vp);
        this.schritt4BO.vn = Util.copyOf(this.schritt3BO.vn);
        this.schritt4BO.vp.tfFragen = Util.copyOf(this.schritt2BO.vp.fragen); //verwende schritt2, da berechnete Antwortn in Schitt1 nicht enthalten sind
        this.schritt4BO.vp.fragen = Util.copyOf(this.schritt2BO.vp.fragen); //verwende schritt2, da berechnete Antwortn in Schitt1 nicht enthalten sind
        this.schritt4BO.vp.antragsfragen = Util.copyOf(this.schritt2BO.vp.antragsfragen); //verwende schritt2, da berechnete Antwortn in Schitt1 nicht enthalten sind
        this.schritt4BO.vpTarife = Util.copyOf(this.data.vpTarife);
        this.status = ProduktStatus.SCHRITT4;

        var context = this.data.context;
        if (!context)
        	context = {};
        context.mode = this.mode;

        var iddPromise = ProduktTr.getIddDetails({
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            typ: "IDDDETAILS",
            iddDetails: this.schritt4BO.betreuer ? this.schritt4BO.betreuer : this.schritt3BO.einstellung.betreuer
        });

        $.when(iddPromise).done(function(iddDetails) {
            this.schritt4BO.iddDetails = iddDetails;

            this.renderer = ProduktRendererFactory.getSchritt4RendererByStyle(this.style, this);
            this.renderer.setBO(this.schritt4BO);
            this.renderer.render(this.schritt1Result);
        }.bind(this));
    }
};

ZVProdukt.prototype.abschlussFinish = function(oBO, oResult) {
    if (this.status === ProduktStatus.SCHRITT4) {
        this.status = ProduktStatus.SCHRITT5;
        this.renderer = ProduktRendererFactory.getSchritt5RendererByStyle(this.style, this);

        this.schritt5BO = {
            bo: oBO,
            result: oResult
        }
        this.renderer.setBO(this.schritt5BO);
        this.renderer.render(oResult);

        // TODO cleanup data
    }
};

ZVProdukt.prototype.berechne = function() {
    var defer = $.Deferred();

    var oBO = this.schritt1BO;

    var oTrBO = Util.copyOf(this.data);

    var gkv = oBO.vp.aktuellerVersicherungsschutz || null;

    var geburtsdatum = oBO.vp.geburtsdatum;

    if (geburtsdatum !== oBO.vp.antragsfragenGeburtsdatum) {
        return this.berechneAntragsfragen(true);
    }

    var taetigkeitsstatus = oBO.vp.taetigkeitsstatus || null;
    var staatsangehoerigkeit = oBO.vp.staatsangehoerigkeit || null;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    oTrBO.mandant = Config.mandant;
    oTrBO.aid = Config.aid;
    oTrBO.context = context;
    oTrBO.versicherungsbeginn = oBO.versicherungsbeginn;
    oTrBO.vpFragen = oBO.vp.fragen;
    oTrBO.vpAntragsfragen = oBO.vp.antragsfragen;
    oTrBO.vpGKV = oBO.vp.aktuellerVersicherungsschutz;
    oTrBO.berechneSelbst = true;
    oTrBO.berechneKind = false;
    oTrBO.vpGeburtsdatum = oBO.vp.geburtsdatum;
    oTrBO.vpGeschlecht = oBO.vp.anrede;

    ProduktTr.einstiegBerechnen(oTrBO).done(function(oResult) {
        if (oResult.state !== "OK") {
            if (oResult.validationErrors && oResult.validationErrors.length > 0) {
                oResult.validationErrors.forEach(function(oValidationError) {
                    if (oValidationError.fieldName === "versicherungsbeginn") {
                        oValidationError.fieldName = "vp.versicherungsbeginn";
                        oValidationError.message = oValidationError.message;
                        return true;
                    }
                });
            } else if (oResult.state === "EXCEPTION") {
                if (oResult.exeption && oResult.exeption.errorCode === "wrongInputData") {
                    if (oResult.exeption.message) {
                        if (oResult.exeption.message.indexOf("Versicherungsbegnn") > 0 || oResult.exeption.message.indexOf("Versicherungsbeginn") > 0) {
                            oResult = {
                                state: "NOK",
                                validationErrors: [{
                                    fieldName: "vp.versicherungsbeginn",
                                    message: "Der Versicherungsbeginn ist ungültig"

                                }]
                            }
                        } else {
                            oResult = {
                                state: "NOK",
                                validationErrors: [{
                                    fieldName: "vp.tarif",
                                    message: oResult.exeption.message

                                }]
                            }
                        }
                    }
                }
            }
            this.render(oResult);
            defer.resolve(oResult);
        } else if (oResult.state === "OK") {
        	var pVP = Util.copyOf(oBO.vp);
        	pVP.versicherungsbeginn = oBO.versicherungsbeginn;
        	pVP.vorname = "TEMP_HANS";
        	pVP.name = "TEMP_MUSTERMANN";
        	pVP.gkv = oBO.vp.aktuellerVersicherungsschutz;
        	pVP.id = "1";

        	var pBO = {
        	  mandant: Config.mandant,
              aid: Config.aid,
              context: context,
	          vp: pVP,
	          vpTarife: Util.copyOf(this.data.vpTarife),
	          vpTFFragen: oResult.vpFragen ? oResult.vpFragen : Util.copyOf(oBO.vp.fragen),
	          vpAntragsfragen: Util.copyOf(oBO.vp.antragsfragen)
        	};

        	ProduktTr.pruefung(pBO).done(function(oPruefungResult){
                if (oPruefungResult.state !== "OK") {
                    if (oPruefungResult.validationErrors && oPruefungResult.validationErrors.length > 0) {
                        oPruefungResult.validationErrors.forEach(function(oValidationError) {
                            if (oValidationError.fieldName === "versicherungsbeginn" && oReisebeginn) {
                                oValidationError.fieldName = "vp." + oReisebeginn.externalfrageId;
                                oValidationError.message = oValidationError.message.replace("KV.versicherungsbeginn",
                                    "KV.vp.fragen" + oReisebeginn.externalfrageId);
                                oValidationError.message = oValidationError.message.replace(/\s\s/, " ");
                                return true;
                            }
                        });
                    } else if (oPruefungResult.state === "EXCEPTION") {
                        if (oPruefungResult.exeption && oPruefungResult.exeption.errorCode === "wrongInputData") {
                            if (oPruefungResult.exeption.message) {
                                if (oPruefungResult.exeption.message.indexOf("Versicherungsbegnn") > 0 || oPruefungResult.exeption.message.indexOf("Versicherungsbeginn") > 0) {
                                    oPruefungResult = {
                                        state: "NOK",
                                        validationErrors: [{
                                            fieldName: "vp.fragen" + oReisebeginn.externalfrageId,
                                            message: "Der Versicherungsbeginn ist ungültig"

                                        }]
                                    }
                                } else {
                                    oPruefungResult = {
                                        state: "NOK",
                                        validationErrors: [{
                                            fieldName: "vp.tarif",
                                            message: oPruefungResult.exeption.message

                                        }]
                                    }
                                }
                            }
                        }
                    }
                    this.render(oPruefungResult);
                    defer.resolve(oPruefungResult);
                } else if (oResult.state === "OK") {
		            ProduktTr.getTexte({
		                "mandant": Config.mandant,
		                "aid": Config.aid,
		                "context": context /*{
		                    "id": null,
		                    "mode": "TEST"
		                }*/,
		                "typ": "TEXTE",
		                "texteVP": {
		                    "anrede": oBO.vp.anrede,
		                    "name": "TestVP",
		                    "vorname": "Peter",
		                    "geburtsdatum": oBO.vp.geburtsdatum,
		                    "id": "1",
		                    "vn": false,
		                    "versicherungsbeginn": oBO.versicherungsbeginn,
		                    "beruf": oBO.vp.beruf,
		                    "taetigkeitsstatus": oBO.vp.taetigkeitsstatus,
		                    "versorgerBeruf": null,
		                    "versorgerTaetigkeitsstatus": null,
		                    "versicherungsstatus": oBO.vp.versicherungsstatus,
		                    "gkv": oBO.vp.aktuellerVersicherungsschutz,
		                    "versicherungsnummer": oBO.vp.versicherungsnummer,
		                    "staatsangehoerigkeit": oBO.vp.staatsangehoerigkeit
		                },
		                "texteTarif": oResult.vpTarife[0]
		            }, "Lastschrift").done(function(oTextResult) {
		                oResult.texte = {
		                    lastschrift : JSON.parse(oTextResult.ergebnisTexte.Lastschrift)
		                };

		                defer.resolve(oResult);
		                this.schritt1Result = oResult;

		                this.weiter(oResult);
		            }.bind(this)).fail(function() {
		                defer.reject();
		            });
                }
        	}.bind(this)).fail(function(){
        		defer.reject();
        	});

        }

    }.bind(this)).fail(function() {
        defer.reject();
    });

    return defer.promise();
};

ZVProdukt.prototype.berechneAntragsfragen = function(bForcePruefen) {
    var defer = $.Deferred();

    var oBO = this.schritt1BO;

    var oTrBO = Util.copyOf(this.data);

    var gkv = oBO.vp.aktuellerVersicherungsschutz || null;

    var geburtsdatum = oBO.vp.geburtsdatum;

    var taetigkeitsstatus = oBO.vp.taetigkeitsstatus || null;
    var staatsangehoerigkeit = oBO.vp.staatsangehoerigkeit || null;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    oTrBO.mandant = Config.mandant;
    oTrBO.aid = Config.aid;
    oTrBO.context = context;
    oTrBO.typ = "FRAGEN";
    oTrBO.versicherungsbeginn = oBO.versicherungsbeginn;
    oTrBO.vpFragen = oBO.vp.fragen;
    oTrBO.vpGKV = oBO.vp.aktuellerVersicherungsschutz;
    oTrBO.berechneSelbst = true;
    oTrBO.berechneKind = false;
    oTrBO.vpGeburtsdatum = oBO.vp.geburtsdatum;
    oTrBO.vpGeschlecht = oBO.vp.anrede;

    function cberror(oResult) {
        if (oResult.state !== "OK") {
            if (oResult.validationErrors && oResult.validationErrors.length > 0) {
                oResult.validationErrors.forEach(function(oValidationError) {
                    if (oValidationError.fieldName === "versicherungsbeginn") {
                        oValidationError.fieldName = "vp.versicherungsbeginn";
                        oValidationError.message = oValidationError.message;
                        return true;
                    }
                });
            } else if (oResult.state === "EXCEPTION") {
                if (oResult.exeption && oResult.exeption.errorCode === "wrongInputData") {
                    if (oResult.exeption.message) {
                        if (oResult.exeption.message.indexOf("Versicherungsbegnn") > 0 || oResult.exeption.message.indexOf("Versicherungsbeginn") > 0) {
                            oResult = {
                                state: "NOK",
                                validationErrors: [{
                                    fieldName: "vp.versicherungsbeginn",
                                    message: "Der Versicherungsbeginn ist ungültig"

                                }]
                            }
                        } else {
                            oResult = {
                                state: "NOK",
                                validationErrors: [{
                                    fieldName: "vp.tarif",
                                    message: oResult.exeption.message

                                }]
                            }
                        }
                    }
                }
            }
        }
    }

	ProduktTr.einstiegBerechnen(oTrBO).done(function(oResult0) {
    	if (oResult0.state !== "OK") {
    		var erg = cberror(oResult0);
    		if (erg===true || erg===false)
    			return erg;
    		this.render(oResult0);
            defer.resolve(oResult0);
        }  else {
            ProduktTr.antrag(oTrBO).done(function(oResult){
            	oResult.vpTarife = oResult0.vpTarife;

                if (oResult.state !== "OK") {
                	var erg = cberror(oResult);
            		if (erg===true || erg===false)
            			return erg;
                }
                else {
	                var oldAntragsfragen = this.schritt1BO.vp.antragsfragen;

	                this.schritt1BO.vp.antragsfragen = oResult.vpAntragsfragen || this.schritt1BO.vp.antragsfragen;
	                this.schritt1BO.vp.antragsfragenGeburtsdatum = geburtsdatum;
	                this.schritt1BO.vp.antragsfragenBerechnet = true;

	                this.schritt1BO.vp.antragsfragen.forEach(function(oAntragsfrage) {
	                    var gleicheFrage = findFrageBy(oldAntragsfragen, function(oFrage) {
	                        if (oFrage.externalfrageId === oAntragsfrage.externalfrageId) {
	                            return true;
	                        }
	                        return false;
	                    });

	                    if (gleicheFrage) {
	                        oAntragsfrage.antworten = gleicheFrage.antworten;
	                    }
	                }, this);

	                if (bForcePruefen) {
	                    oResult = {
	                        state: "NOK",
	                        validationErrors: [{
	                            fieldName: "vp.tarif",
	                            message: "Aufgrund einer Änderung Ihrer Angaben musste eine Neuberechnung durchgeführt werden. Überprüfen Sie bitte Ihre Angaben noch einmal."

	                        }],
	                        context: {
	                            performPruefen: bForcePruefen
	                        }
	                    }
	                }
                }
                this.render(oResult);
                defer.resolve(oResult);
        	}.bind(this));
        }
    }.bind(this)).fail(function() {
        defer.reject();
    });

    return defer.promise();
};

ZVProdukt.prototype.getBerufSuggestionsFor = function(taetigkeitsstatus, beruf) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBerufSuggestionsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BERUF",
        kategorie: taetigkeitsstatus,
        berufText: beruf
    });
};

ZVProdukt.prototype.checkKonto = function(blz, konto) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.checkKonto({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "KONTO",
        kategorie: null,
        kontoBlz: blz,
        kontoNummer: konto
    });
};

ZVProdukt.prototype.checkIBAN = function(iban) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.checkKonto({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "IBAN",
        kategorie: null,
        ibanText: iban
    });
};

ZVProdukt.prototype.getBLZSuggestionsFor = function(blz) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBLZSuggestionsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BLZ",
        kategorie: null,
        blzText: blz
    });
};

ZVProdukt.prototype.getIbanSuggestionsFor = function(iban) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getIbanSuggestionsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "IBAN",
        kategorie: null,
        ibanText: iban
    });
};

ZVProdukt.prototype.getBetreuerlisteFor = function(plz) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBetreuerlisteFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BETREUERLISTE",
        kategorie: null,
        betreuerlistePlz: plz
    });
};

ZVProdukt.prototype.checkBetreuergebiet = function(plz) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBetreuerlisteFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "GEBIET",
        kategorie: null,
        gebietPlz: plz
    });
};

ZVProdukt.prototype.getBetreuerdetailsFor = function(betreuer) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return ProduktTr.getBetreuerdetailsFor({
        mandant: Config.mandant,
        aid: Config.aid,
        context: context,
        typ: "BETREUERDETAILS",
        kategorie: null,
        betreuerdetails: betreuer /*{
            agenturname: null,
            agenturemail: null,
            vermittlernummer: null,
            adeId: null,
            type: null
        }*/
    });
};

ZVProdukt.prototype.getDruckstueckTariferklaerungBOandUrl = function(oBO) {
    var versicherungsbeginn = (oBO.versicherungsbeginn ? oBO.versicherungsbeginn : Util.nextVersicherungsbeginn(true));
    var gkv = oBO.vp.aktuellerVersicherungsschutz || null;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "TARIF",
            druckstueckTarif: {
                druckSelbst: true,
                tkz: this.data.vpTarife[0].tkz,
                versicherungsbeginn: versicherungsbeginn,
                gkv: gkv
            }
        },
        serviceUrl: ProduktTr.getDruckstueckTariferklaerungUrl()
    };
};

ZVProdukt.prototype.getDruckstueckVorschlagBOandUrl = function(oBO) {
    var versicherungsbeginn = (oBO.versicherungsbeginn ? oBO.versicherungsbeginn : Util.nextVersicherungsbeginn(true));
    var gkv = oBO.vp.aktuellerVersicherungsschutz || null;
    var geburtsdatum = oBO.vp.geburtsdatum || null;
    var taetigkeitsstatus = oBO.vp.taetigkeitsstatus || null;
    var staatsangehoerigkeit = oBO.vp.staatsangehoerigkeit || null;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "VORSCHLAG",
            druckstueckTarif: null,
            druckstueckBeratung: null,
            druckstueckDatenschutz: null,
            druckstueckAnzeigepflicht: null,
            druckstueckSchweigepflicht: null,
            druckstueckVertragsinformation: null,
            druckstueckVorschlag: {
                vps: [{
                    anrede: oBO.vp.anrede,
                    name: "TestVP",
                    vorname: "Peter",
                    geburtsdatum: geburtsdatum,
                    id: "1",
                    vn: false,
                    versicherungsbeginn: versicherungsbeginn,
                    beruf: oBO.vp.beruf,
                    taetigkeitsstatus: taetigkeitsstatus,
                    versorgerBeruf: null,
                    versorgerTaetigkeitsstatus: null,
                    versicherungsstatus: "freiwillig gesetzlich versichert",
                    gkv: gkv,
                    versicherungsnummer: oBO.vp.versicherungsnummer,
                    staatsangehoerigkeit: staatsangehoerigkeit
                }],
                tarife: [this.data.vpTarife],
                fragen: [oBO.vp.fragen],
                antragsfragen: [oBO.vp.antragsfragen],
            }
        },
        serviceUrl: ProduktTr.getDruckstueckVorschlagUrl()
    };
};

ZVProdukt.prototype.getDruckstueckBeiblattAnzeigepflichtBOandUrl = function(oBO) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "ANZEIGEPFLICHT_BEIBLATT",
            druckstueckTarif: null,
            druckstueckBeratung: null,
            druckstueckDatenschutz: null,
            druckstueckAnzeigepflicht: {
                risikotraeger: this.data.vpTarife[0].risikotraeger
            }
        },
        serviceUrl: ProduktTr.getDruckstueckBeiblattAnzeigepflichtUrl()
    };

};

ZVProdukt.prototype.getDruckstueckVvgBOandUrl = function(oBO) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "VVG_SCHWEIGEPFLICHT",
            druckstueckTarif: null,
            druckstueckBeratung: null,
            druckstueckDatenschutz: null,
            druckstueckAnzeigepflicht: null,
            druckstueckSchweigepflicht: {
                risikotraeger: this.data.vpTarife[0].risikotraeger
            }
        },
        serviceUrl: ProduktTr.getDruckstueckVvgUrl()
    };
};

ZVProdukt.prototype.getDruckstueckVertragsinformationBOandUrl = function(oBO) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "VERTRAGSINFORMATIONEN",
            druckstueckVertragsinformation: {
                vn: {
                    anrede: oBO.vn.anrede,
                    name: oBO.vn.name,
                    vorname: oBO.vn.vorname,
                    geburtsdatum: oBO.vn.geburtsdatum,
                    titel: oBO.vn.titel,
                    strasse: oBO.vn.strasse,
                    hausNr: oBO.vn.hausnr,
                    plz: oBO.vn.plz,
                    ort: oBO.vn.ort,
                    telefon: oBO.vn.telefon,
                    email: oBO.vn.mail,
                    sepamandat: oBO.vn.zahlungsdaten.ksmSelected,
                    natioalitaet: null,
                    beruf: null,
                    taetigkeitsstatus: null,
                    bankdaten: {
                        kontotyp: null,
                        vorname: null,
                        name: null,
                        kontoNr: null,
                        blz: null,
                        bankname: null,
                        iban: null,
                        bic: null,
                        zahlweise: null,
                        kenntnisSM: false
                    }
                },
                vps: [{
                    anrede: oBO.vp.anrede,
                    name: oBO.vp.name,
                    vorname: oBO.vp.vorname,
                    geburtsdatum: oBO.vp.geburtsdatum,
                    id: "1",
                    vn: oBO.vp.isVn,
                    versicherungsbeginn: oBO.versicherungsbeginn,
                    beruf: oBO.vp.beruf,
                    taetigkeitsstatus: oBO.vp.taetigkeitsstatus,
                    versorgerBeruf: null,
                    versorgerTaetigkeitsstatus: null,
                    versicherungsstatus: oBO.vp.versicherungsstatus,
                    gkv: oBO.vp.aktuellerVersicherungsschutz,
                    versicherungsnummer: oBO.vp.versicherungsnummer,
                    staatsangehoerigkeit: oBO.vp.staatsangehoerigkeit
                }],
                tarife: [oBO.vpTarife],
                fragen: [oBO.vp.tfFragen],
                antragsfragen: null,
                iddData: oBO.iddDetails.data,
                visitenkartenURL: oBO.iddDetails.visitenkartenURL
            }
        },
        serviceUrl: ProduktTr.getDruckstueckVertragsinformationUrl()
    };
};

ZVProdukt.prototype.getDruckstueckDatenschutzBOandUrl = function(oBO) {
    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    return {
        bo: {
            mandant: Config.mandant,
            aid: Config.aid,
            context: context,
            druckstuecktyp: "DATENSCHUTZ",
            druckstueckTarif: null,
            druckstueckBeratung: null,
            druckstueckDatenschutz: {
                berechneSelbst: true,
                vpGKV: oBO.vp.aktuellerVersicherungsschutz,
                vpTarife: oBO.vpTarife,
                binary: true,
                berechneKind: false
            },
            druckstueckAnzeigepflicht: null,
            druckstueckSchweigepflicht: null
        },
        serviceUrl: ProduktTr.getDruckstueckDatenschutzUrl()
    };
};

function buildFinalBO(bAbschluss, oBO) {
    var vn = {
        "anrede": oBO.vn.anrede,
        "name": oBO.vn.name,
        "vorname": oBO.vn.vorname,
        "geburtsdatum": oBO.vn.geburtsdatum,
        "titel": oBO.vn.titel,
        "strasse": oBO.vn.strasse,
        "hausNr": oBO.vn.hausnr,
        "plz": oBO.vn.plz,
        "ort": oBO.vn.ort,
        "telefon": oBO.vn.telefon,
        "email": oBO.vn.mail,
        "sepamandat": oBO.vn.zahlungsdaten.ksmSelected,
        "natioalitaet": null,
        "beruf": null,
        "taetigkeitsstatus": null,
        "bankdaten": {
            "kontotyp": oBO.vn.zahlungsdaten.iban.selected ? "IBAN" : "KTO",
            "vorname": oBO.vn.vorname,
            "name": oBO.vn.name,
            "kontoNr": oBO.vn.zahlungsdaten.kto.selected ? oBO.vn.zahlungsdaten.kto.no : null,
            "blz": oBO.vn.zahlungsdaten.kto.selected ? oBO.vn.zahlungsdaten.kto.blz : null,
            "bankname": oBO.vn.zahlungsdaten.bank,
            "iban": oBO.vn.zahlungsdaten.iban.selected ? oBO.vn.zahlungsdaten.iban.no : null,
            "bic": oBO.vn.zahlungsdaten.iban.selected ? oBO.vn.zahlungsdaten.iban.bic : null,
            "zahlweise": oBO.vn.zahlungsdaten.zahlungsweise,
            "kenntnisSM": oBO.vn.zahlungsdaten.ksmSelected
        }
    };

    var betreuer = oBO.betreuer;
    if (betreuer===null)
        betreuer = this.schritt3BO.einstellung.betreuer;

    var context = this.data.context;
    if (!context)
    	context = {};
    context.mode = this.mode;

    var req = {
            "mandant": Config.mandant,
            "aid": Config.aid,
            "context": context,
            "abschlussart": bAbschluss ? "VOLLZUG" : "VORBEREITUNG",
            "abschlussdaten": {
                "berechneSelbst": true,
                "berechneKind": false,
                "telefonBenachrichtigung": true,
                "telefonPrivat": oBO.vn.telefon,
                "telefonMobil": null,
                "mailBenachrichtigung": false,
                "mail": oBO.vn.mail,
                "einwilligungserklaerung": bAbschluss ? oBO.vvg.accepted : true,
                "vvg": true,
                "datenschutzerklaerung": bAbschluss ? oBO.datenschutzerklaerung.accepted : false,
                "beratungsverzicht": oBO.noBeratung.accepted,
                "papierverzicht": oBO.noPapierunterlagen.accepted,
                "betreuer": betreuer,
                "iddData": oBO.iddDetails.data,
                "vn": vn,
                "vps": [{
                    "anrede": oBO.vp.anrede,
                    "name": oBO.vp.name,
                    "vorname": oBO.vp.vorname,
                    "geburtsdatum": oBO.vp.geburtsdatum,
                    "id": "1",
                    "vn": oBO.vp.isVn,
                    "versicherungsbeginn": oBO.versicherungsbeginn,
                    "beruf": oBO.vp.beruf,
                    "taetigkeitsstatus": oBO.vp.taetigkeitsstatus,
                    "versorgerBeruf": null,
                    "versorgerTaetigkeitsstatus": null,
                    "versicherungsstatus": oBO.vp.versicherungsstatus,
                    "gkv": oBO.vp.aktuellerVersicherungsschutz,
                    "versicherungsnummer": oBO.vp.versicherungsnummer,
                    "staatsangehoerigkeit": oBO.vp.staatsangehoerigkeit
                }],
                "tarife": [oBO.vpTarife],
                "tffragen": [oBO.vp.tfFragen],
                "antragsfragen": [oBO.vp.antragsfragen],
            },
            "vollzug": null
    };

    if (bAbschluss) {
        req.vollzug = {
            bildcode: oBO.capt.bildCode,
            token: oBO.capt.token
        }
    }

    return req;
}

ZVProdukt.prototype.getCaptcha = function(oBO) {
    return ProduktTr.getCaptcha(buildFinalBO.call(this, false, oBO));
};

ZVProdukt.prototype.abschluss = function(oBO) {
    return ProduktTr.abschluss(buildFinalBO.call(this, true, oBO));
};

module.exports = ZVProdukt;


/***/ }),
/* 72 */
/***/ (function(module, exports) {

module.exports = {
    SCHRITT1: "SCHRITT1",
    SCHRITT2: "SCHRITT2",
    SCHRITT3: "SCHRITT3",
    SCHRITT4: "SCHRITT4",
    SCHRITT5: "SCHRITT5"
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var Schritt1Renderer = __webpack_require__(74);
var Schritt1RendererIF6 = __webpack_require__(76);
var Schritt2Renderer = __webpack_require__(78);
var Schritt2RendererIF6 = __webpack_require__(80);
var Schritt3Renderer = __webpack_require__(82);
var Schritt3RendererIF6 = __webpack_require__(84);
var Schritt4Renderer = __webpack_require__(86);
var Schritt4RendererIF6 = __webpack_require__(88);
var Schritt5Renderer = __webpack_require__(90);
var Schritt5RendererIF6 = __webpack_require__(92);

module.exports = {
    getSchritt1RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt1Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt1RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt2RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt2Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt2RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt3RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt3Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt3RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt4RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt4Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt4RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    },

    getSchritt5RendererByStyle : function(sStyle, oProdukt) {
        switch(sStyle) {
            case "oev":
                return new Schritt5Renderer(oProdukt, sStyle);
            case "if6":
                return new Schritt5RendererIF6(oProdukt, sStyle);
            default:
                throw new Error("no renderer defined");
        }
    }
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);
var FrageHelper = __webpack_require__(7);

function buildAngabenZurVPAndAddToRow(schrittTemplate, oContentBox) {
    var rootElement = this.rootElement;

    var that = this;

    // anrede
    var fnRowTemplate = _.template(schrittTemplate.radioInputWith2ItemsTemplate);

    var anredeRow = $(fnRowTemplate({label: "Geschlecht ", required: "*", name: "vp_geschlecht", idOne: "geschlecht_1", idTwo: "geschlecht_2", valueOne: "männlich", valueTwo: "weiblich"}));
    anredeRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "anredeRow");

    if (!SchrittRendererHelper.itemWithPseudoIdExists("anredeRow", rootElement)) {
        anredeRow.appendTo(oContentBox);
        anredeRow.find("input").eq(0).click(function() {
            that.getBO().vp.anrede = "HERR";
        });
        anredeRow.find("input").eq(1).click(function() {
            that.getBO().vp.anrede = "FRAU";
        });
    } else {
        anredeRow = SchrittRendererHelper.getItemByPseudoId("anredeRow", rootElement);
    }
    if (this.getBO().vp.anrede === "HERR") {
        anredeRow.find("input").eq(0).attr("checked", "checked");
    } else if (this.getBO().vp.anrede === "FRAU") {
        anredeRow.find("input").eq(1).attr("checked", "checked");
    }
    var fnAddAnredeError = function(errorText) {
        var anredeLabel = anredeRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorAnrede = $(fnErrorText({error: errorText}));

        errorAnrede.insertAfter(anredeLabel);
    };

    anredeRow.find(".error").remove();
    var validationErrorForAnrede = SchrittRendererHelper.getError(this.validationResult, "vp.anrede");
    if (validationErrorForAnrede) {
        fnAddAnredeError(validationErrorForAnrede);
    }
    var fnAnredeValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.anrede === "HERR" || that.getBO().vp.anrede === "FRAU") {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationAnredeObject = {
        fnErrorRemoval: function() {
            anredeRow.find(".error").remove();
        },
        fnValidation: fnAnredeValidation,
        fnAddError: function() {
            fnAddAnredeError("Die Angabe im Feld ist ungültig.");
        }
    };
    this.fnPruefen.push(validationAnredeObject);

    var prevSibling = anredeRow;

    // Staatsangehoerigkeit
    fnRowTemplate = _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

    var staatsangehoerigkeitSelect = $("<select />");
    var staatsangehoerigkeitRow = $(fnRowTemplate({label: "Staatsangehörigkeit ", required: "*", content: staatsangehoerigkeitSelect.prop("outerHTML")}));
    staatsangehoerigkeitRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "staatsangehoerigkeitRow");

    if (!SchrittRendererHelper.itemWithPseudoIdExists("staatsangehoerigkeitRow", rootElement)) {
        staatsangehoerigkeitRow.insertAfter(prevSibling);
    } else {
        staatsangehoerigkeitRow = SchrittRendererHelper.getItemByPseudoId("staatsangehoerigkeitRow", rootElement);
    }
    staatsangehoerigkeitSelect = staatsangehoerigkeitRow.find("select");
    staatsangehoerigkeitSelect.empty();
    if (this.getBO().svLand) {
        this.getBO().svLand.forEach(function(currLand) {
            var optionLand = $("<option value='" + currLand  +"'>" + currLand + "</option>");

            if (this.getBO().vp.staatsangehoerigkeit) {
                if (currLand === this.getBO().vp.staatsangehoerigkeit) {
                    optionLand.attr("selected", "selected");
                }
            } else if (currLand === "Deutschland") {
                this.getBO().vp.staatsangehoerigkeit = "Deutschland";
                optionLand.attr("selected", "selected");
            }
            staatsangehoerigkeitSelect.append(optionLand);
        }, this);
    }

    staatsangehoerigkeitSelect.change(function() {
        that.getBO().vp.staatsangehoerigkeit = $(this).val();
    });

    staatsangehoerigkeitRow.find(".error").remove();
    var validationErrorForStaatsangehoerigkeit = SchrittRendererHelper.getError(this.validationResult, "vp.staatsangehoerigkeit");
    var fnAddStaatsangehoerigkeitError = function(errorText) {
        var staatsangehoerigkeitLabel = staatsangehoerigkeitRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorStaatsangehoerigkeit = $(fnErrorText({error: errorText}));

        errorStaatsangehoerigkeit.insertAfter(staatsangehoerigkeitLabel);
    }
    if (validationErrorForStaatsangehoerigkeit) {
        fnAddStaatsangehoerigkeitError(validationErrorForStaatsangehoerigkeit);
    }

    var fnStaatsangehoerigkeitValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.staatsangehoerigkeit && that.getBO().vp.staatsangehoerigkeit.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationStaatsangehoerigkeitObject = {
        fnErrorRemoval: function() {
            staatsangehoerigkeitRow.find(".error").remove();
        },
        fnValidation: fnStaatsangehoerigkeitValidation,
        fnAddError: function() {
            fnAddStaatsangehoerigkeitError("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationStaatsangehoerigkeitObject);

    prevSibling = staatsangehoerigkeitRow;

    // Taetigkeitsstatus
    var KIND = "Kind";

    var taetigkeitsstatusSelect = $("<select />");
    var taetigkeitsstatusRow = $(fnRowTemplate({label: "Tätigkeitsstatus ", required: "*", content: taetigkeitsstatusSelect.prop("outerHTML")}));
    taetigkeitsstatusRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "taetigkeitsstatusRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("taetigkeitsstatusRow", rootElement)) {
        taetigkeitsstatusRow.insertAfter(prevSibling);
    } else {
        taetigkeitsstatusRow = SchrittRendererHelper.getItemByPseudoId("taetigkeitsstatusRow", rootElement);
    }

    taetigkeitsstatusRow.find(".error").remove();
    var fnAddTaetigkeitsstatusError = function(errorText) {
        var taetigkeitsstatusLabel = taetigkeitsstatusRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorTaetigkeitsstatus = $(fnErrorText({error: errorText}));

        errorTaetigkeitsstatus.insertAfter(taetigkeitsstatusLabel);
    }
    var validationErrorForTaetigkeitsstatus = SchrittRendererHelper.getError(this.validationResult, "vp.taetigkeitsstatus");
    if (validationErrorForTaetigkeitsstatus) {
        fnAddTaetigkeitsstatusError(validationErrorForTaetigkeitsstatus);
    }

    taetigkeitsstatusSelect = taetigkeitsstatusRow.find("select");
    taetigkeitsstatusSelect.empty();
    taetigkeitsstatusSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svTaetigkeitsstatus) {
        this.getBO().svTaetigkeitsstatus.forEach(function(currTaetigkeitsstatus) {
            var optionTaetigkeitsstatus = $("<option value='" + currTaetigkeitsstatus  +"'>" + currTaetigkeitsstatus + "</option>");

            if (this.getBO().vp.taetigkeitsstatus  === currTaetigkeitsstatus) {
                optionTaetigkeitsstatus.attr("selected", "selected");
            }
            taetigkeitsstatusSelect.append(optionTaetigkeitsstatus);
        }, this);
    }

    taetigkeitsstatusSelect.change(function() {
        var taetigkeitsstatus = $(this).val();
        if (!that.getBO().svTaetigkeitsstatus.some(function(currTaetigkeitsstatus) {
            return taetigkeitsstatus === currTaetigkeitsstatus;
        })) {
            taetigkeitsstatus = null;
        }

        that.getBO().vp.taetigkeitsstatus = taetigkeitsstatus;

        var berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
        var berufInput = berufRow.find("input");

        switch(taetigkeitsstatus) {
            case "Arbeitsloser":
                that.getBO().vp.beruf = "Arbeitsloser/e";
                berufInput.val("Arbeitsloser/e");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Hausfrau/-mann":
                that.getBO().vp.beruf = "Hausfrau, Hausmann";
                berufInput.val("Hausfrau, Hausmann");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case KIND:
                that.getBO().vp.beruf = taetigkeitsstatus;
                berufInput.val(taetigkeitsstatus);

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Pensionär":
                that.getBO().vp.beruf = "Pensionär/in";
                berufInput.val("Pensionär/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Rentner":
                that.getBO().vp.beruf = "Rentner/in";
                berufInput.val("Rentner/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Student":
                that.getBO().vp.beruf = "Student/in";
                berufInput.val("Student/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Schüler":
                that.getBO().vp.beruf = "Schüler/in";
                berufInput.val("Schüler/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            default:
                that.getBO().vp.beruf = "";
                berufInput.val("");

                SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", false);
                break;
        }

    });

    var fnTaetigkeitsstatusValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.taetigkeitsstatus && that.getBO().vp.taetigkeitsstatus.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationTaetigkeitsstatusObject = {
        fnErrorRemoval: function() {
            taetigkeitsstatusRow.find(".error").remove();
        },
        fnValidation: fnTaetigkeitsstatusValidation,
        fnAddError: function() {
            fnAddTaetigkeitsstatusError("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationTaetigkeitsstatusObject);

    prevSibling = taetigkeitsstatusRow;

    // Beruf

    var fnLabeledContentWithBigAntwortRowTemlate = _.template(schrittTemplate.labeledContentWithBigAntwortRowTemlate);

    var fnBerufInput = _.template(schrittTemplate.berufInputTemplate);
    var berufInput = $(fnBerufInput({ beruf : ("" || this.getBO().vp.beruf) }));

    var berufRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Ausgeübter Beruf (Nach Eingabe der ersten Buchstaben wird eine Auswahl angeboten, aus der Sie Ihren Beruf wählen können)*", content: berufInput.prop("outerHTML")}));
    berufRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "berufRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("berufRow", rootElement)) {
        berufRow.insertAfter(prevSibling);

        berufInput = berufRow.find("input");
        var oAutocompleteOptions = {
            ajaxFn: function(beruf) {
                var taetigkeitsstatus = that.getBO().vp.taetigkeitsstatus;
                that.getBO().vp.beruf = beruf;
                return that._getBerufSuggestionsFor(taetigkeitsstatus, beruf);
            },

            width: null,

            noVerifySuggestionFormat: true,

            onSelect: function(suggest) {
                that.getBO().vp.beruf = suggest.value;
            },

            onSelectCallback: function(suggestion) {
                return !suggestion.suggest;
            },

            formatResult: function(suggestion, currentValue) {
                var result = $.Autocomplete.formatResult(suggestion, currentValue);
                if (!suggestion.suggest) {
                    result = "Meinten Sie: <i>" + result + "</i>";
                }

                return result;
            },

            transformResult: function(ergebnisBeruf) {
                var result = {
                    suggestions: []
                };

                if (ergebnisBeruf.vorschlagstreffer > 0) {
                    this.suggest = true;
                    result.suggestions = ergebnisBeruf.vorschlaege.map(function(val) {
                        return {value: val.text, suggest: true};
                    });
                } else if (ergebnisBeruf.aehnlichkeitentreffer > 0) {
                    this.suggest = false;
                    result.suggestions = ergebnisBeruf.aehnlichkeiten.map(function(val) {
                        return {value: val, suggest: false};
                    });
                }

                return result;
            }
        };
        berufInput.autocomplete(oAutocompleteOptions);
        berufInput.val(this.getBO().vp.beruf);
    } else {
        berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
    }
    berufRow.find(".error").remove();
    var validationErrorForBeruf = SchrittRendererHelper.getError(this.validationResult, "vp.beruf");

    var fnAddErrorBeruf = function(errorText) {
        var berufLabel = berufRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorBeruf = $(fnErrorText({error: errorText}));

        errorBeruf.insertAfter(berufLabel);
    };

    if (validationErrorForBeruf) {
        fnAddErrorBeruf(validationErrorForBeruf);
    }

    var fnValidationBeruf = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (!that.getBO().vp.beruf || that.getBO().vp.beruf.trim().length === 0) {
            deferred.resolve(false);
        } else if (!that.getBO().vp.taetigkeitsstatus) {
            deferred.resolve(false);
        } else {
            that._getBerufSuggestionsFor(that.getBO().vp.taetigkeitsstatus, that.getBO().vp.beruf).then(function(ergebnisBeruf) {
                var ok = false;
                if (ergebnisBeruf && ergebnisBeruf.hasOwnProperty("vorschlagstreffer")) {
                    if (ergebnisBeruf.vorschlagstreffer > 0) {
                        if (ergebnisBeruf.vorschlaege.some(function(val) {
                            return val.text === that.getBO().vp.beruf;
                        })) {
                            ok = true;
                        }
                    }

                }

                deferred.resolve(ok);
            }).fail(function() {
                deferred.resolve(false);
            });
        }

        return promise;
    };

    var validationBerufObject = {
        fnErrorRemoval: function() {
            berufRow.find(".error").remove();
        },
        fnValidation: fnValidationBeruf,
        fnAddError: function() {
            fnAddErrorBeruf("Die Berufsangabe ist ungültig.");
        }
    };
    this.fnPruefen.push(validationBerufObject);


    prevSibling = berufRow;

    // Versicherungsstatus
    var PRIVAT_VESICHERT = "privat versichert / freie Heilfürsorge";

    var versicherungsstatusSelect = $("<select />");
    var versicherungsstatusRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Wie sind Sie krankenversichert? *", content: versicherungsstatusSelect.prop("outerHTML")}));
    versicherungsstatusRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "versicherungsstatusRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("versicherungsstatusRow", rootElement)) {
        versicherungsstatusRow.insertAfter(prevSibling);

        versicherungsstatusRow.find("select").change(function() {
            var selectedVersicherungsstatus = $(this).val();

            var krankenversicherungsschutzRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
            var krankenversicherungsschutzSelect = krankenversicherungsschutzRow.find("select");
            var koopRow = SchrittRendererHelper.getItemByPseudoId("koopRow", rootElement);

            if (selectedVersicherungsstatus === PRIVAT_VESICHERT || !selectedVersicherungsstatus) {
                krankenversicherungsschutzRow.hide();
                koopRow.hide();

                that.getBO().vp.aktuellerVersicherungsschutz = null;
                krankenversicherungsschutzSelect.find("option:selected").prop("selected", false);

                that.getBO().vp.versicherungsnummer = null;
                koopRow.find("input").val("");
            } else {
                krankenversicherungsschutzRow.show();
            }

            that.getBO().vp.versicherungsstatus = selectedVersicherungsstatus;
        });
    } else {
        versicherungsstatusRow = SchrittRendererHelper.getItemByPseudoId("versicherungsstatusRow", rootElement);
    }

    versicherungsstatusSelect = versicherungsstatusRow.find("select");

    versicherungsstatusSelect.empty();
    versicherungsstatusSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svVersicherungsstatus) {
        this.getBO().svVersicherungsstatus.forEach(function(currVersicherungsstatus) {
            var optionVersicherungsstatus = $("<option value='" + currVersicherungsstatus  +"'>" + currVersicherungsstatus + "</option>");

            if (this.getBO().vp.versicherungsstatus  === currVersicherungsstatus) {
                optionVersicherungsstatus.attr("selected", "selected");
            }
            versicherungsstatusSelect.append(optionVersicherungsstatus);
        }, this);
    }

    versicherungsstatusRow.find(".error").remove();
    var fnAddErrorVersicherungsstatus = function(errorText) {
        var versicherungsstatusLabel = versicherungsstatusRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorVersicherungsstatus = $(fnErrorText({error: errorText}));

        errorVersicherungsstatus.insertAfter(versicherungsstatusLabel);
    };

    var validationErrorForVersicherungsstatus = SchrittRendererHelper.getError(this.validationResult, "vp.versicherungsstatus");
    if (validationErrorForVersicherungsstatus) {
        fnAddErrorVersicherungsstatus(validationErrorForVersicherungsstatus);
    }

    var fnValidationVersicherungsstatus = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (that.getBO().vp.versicherungsstatus && that.getBO().vp.versicherungsstatus.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }

        return promise;
    };

    var validationVersicherungsstatusObject = {
        fnErrorRemoval: function() {
            versicherungsstatusRow.find(".error").remove();
        },
        fnValidation: fnValidationVersicherungsstatus,
        fnAddError: function() {
            fnAddErrorVersicherungsstatus("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationVersicherungsstatusObject);

    prevSibling = versicherungsstatusRow;

    // Krankenversicherungsschutz
    var krankenversicherungsschutzSelect = $("<select />");
    var krankenversicherungsschutzRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Bei welcher gesetzlichen Krankenkasse? *", content: krankenversicherungsschutzSelect.prop("outerHTML")}));
    krankenversicherungsschutzRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "krankenversicherungsschutzRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("krankenversicherungsschutzRow", rootElement)) {
        krankenversicherungsschutzRow.insertAfter(prevSibling);

        krankenversicherungsschutzRow.find("select").change(function() {
            var displayKoop = false;
            var selectedGKV = $(this).val();
            if (that.getBO().svKoopGKV && that.getBO().svKoopGKV.length > 0) {
                displayKoop = that.getBO().svKoopGKV.some(function(koop) {
                    return selectedGKV === koop;
                });
            }

            that.getBO().vp.aktuellerVersicherungsschutz = selectedGKV;

            if (displayKoop) {
                krankenversicherungsschutzRow.next().show();
            } else {
                krankenversicherungsschutzRow.next().hide();
                krankenversicherungsschutzRow.next().find("input").val("");
                that.getBO().vp.versicherungsnummer = "";
            }
        });
    } else {
        krankenversicherungsschutzRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
    }

    krankenversicherungsschutzSelect = krankenversicherungsschutzRow.find("select");
    krankenversicherungsschutzSelect.prop("disabled", !this.getBO().vp.gkvAuswahlMoeglich);

    krankenversicherungsschutzSelect.empty();
    krankenversicherungsschutzSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svGKV) {
        this.getBO().svGKV.forEach(function(currGKV) {
            var optionKrankenversicherungsschutz = $("<option value='" + currGKV  +"'>" + currGKV + "</option>");

            if (this.getBO().vp.aktuellerVersicherungsschutz === currGKV) {
                optionKrankenversicherungsschutz.attr("selected", "selected");
            }
            krankenversicherungsschutzSelect.append(optionKrankenversicherungsschutz);
        }, this);
    }
    if (this.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT || !this.getBO().vp.versicherungsstatus) {
        krankenversicherungsschutzRow.hide();
    }

    krankenversicherungsschutzRow.find(".error").remove();
    var fnAddErrorKrankenversicherungssschutz = function(errorText) {
        var krankenversicherungsschutzLabel = krankenversicherungsschutzRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorKrankenversicherungsschutz = $(fnErrorText({error: errorText}));

        errorKrankenversicherungsschutz.insertAfter(krankenversicherungsschutzLabel);
    };

    var validationErrorForKrankenversicherungsschutz = SchrittRendererHelper.getError(this.validationResult, "vp.gkv");
    if (validationErrorForKrankenversicherungsschutz) {
        fnAddErrorKrankenversicherungssschutz(validationErrorForKrankenversicherungsschutz);
    }

    var fnValidationKrankenversicherungsschutz = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (that.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT) {
            deferred.resolve(true);
        } else {
            if (that.getBO().vp.aktuellerVersicherungsschutz && that.getBO().vp.aktuellerVersicherungsschutz.length > 0) {
           		deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        }

        return promise;
    };

    var validationKrankenversicherungsschutzObject = {
        fnErrorRemoval: function() {
            krankenversicherungsschutzRow.find(".error").remove();
        },
        fnValidation: fnValidationKrankenversicherungsschutz,
        fnAddError: function() {
            fnAddErrorKrankenversicherungssschutz('Eine Auswahl ist erforderlich.');
        }
    };
    this.fnPruefen.push(validationKrankenversicherungsschutzObject);

    prevSibling = krankenversicherungsschutzRow;

    // Koop Partner
    var fnKoopInput = _.template(schrittTemplate.koopInputTemplate);
    var koopInput = $(fnKoopInput({ value : ("" || this.getBO().vp.versicherungsnummer)}));

    var koopRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Bitte nennen Sie uns Ihre GKV-Versichertennummer (Diese finden Sie z.B. auf Ihrer Versichertenkarte) *", content: koopInput.prop("outerHTML")}));
    koopRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "koopRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("koopRow", rootElement)) {
        koopRow.insertAfter(prevSibling);

        koopRow.find("input").change(function() {
            that.getBO().vp.versicherungsnummer = $(this).val();
        });
    } else {
        koopRow = SchrittRendererHelper.getItemByPseudoId("koopRow", rootElement);
    }

    var fnCheckKoopIsRequired = function() {
        if (that.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT)
            return false;

        return that.getBO().svKoopGKV.some(function(koop) {
            return that.getBO().vp.aktuellerVersicherungsschutz === koop;
        });
    }

    if (this.getBO().svKoopGKV && that.getBO().svKoopGKV.length > 0) {
        if (!fnCheckKoopIsRequired()) {
            koopRow.hide();
        }
    }

    koopRow.find(".error").remove();
    var fnAddErrorKoop = function(errorText) {
        var koopLabel = koopRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorKoop = $(fnErrorText({error: errorText}));

        errorKoop.insertAfter(koopLabel);
    };
    var validationErrorForKoop = SchrittRendererHelper.getError(this.validationResult, "vp.gkvnr");
    if (validationErrorForKoop) {
        fnAddErrorKoop(validationErrorForKoop);
    }
    var fnValidationKoop = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (!fnCheckKoopIsRequired()) {
            deferred.resolve(true);
        } else if (!that.getBO().vp.versicherungsnummer || that.getBO().vp.versicherungsnummer.trim().length === 0) {
            deferred.resolve(false);
        } else if (!that.getBO().vp.versicherungsnummer.match(/^[A-Za-z]\d{9}$/)) {
            deferred.resolve(false);
        } else {
            deferred.resolve(true);
        }

        return promise;
    };
    var validationKoopObject = {
        fnErrorRemoval: function() {
            koopRow.find(".error").remove();
        },
        fnValidation: fnValidationKoop,
        fnAddError: function() {
            if (!that.getBO().vp.versicherungsnummer || that.getBO().vp.versicherungsnummer.trim().length === 0)
                fnAddErrorKoop("Die Angabe ist erforderlich.");
            else
                fnAddErrorKoop("Die Angabe ist ungültig.");
        }
    };
    this.fnPruefen.push(validationKoopObject);
//    this.fnPruefen = this.fnBerechnen.slice(0);

    prevSibling = koopRow;
}

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

var Schritt1Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt1Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt1Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(75);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt1Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;
    this.fnPruefen = [];
    this.fnBerechnen = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        var fnHeadTemplate = _.template(schrittTemplate.headTemplate);

        var headContent = $(fnHeadTemplate({produkt : this.getBO().produkt, anzeigepflicht: this.getBO().anzeigepflicht}));
        headContent.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "headContent");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("headContent", rootElement)) {
            headContent.appendTo("div.kvo-main-content-container");

            // Beiblatt Anzeigepflicht
            headContent.find("a").eq(1).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckBeiblattAnzeigepflichtBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
        } else {
            headContent = SchrittRendererHelper.getItemByPseudoId("headContent", rootElement);
            rootElement.find(".anzeigepflicht").remove();

            var anzeigepflicht = $(this.getBO().anzeigepflicht);
            anzeigepflicht.addClass("anzeigepflicht");
            anzeigepflicht.insertAfter(SchrittRendererHelper.getItemByPseudoId("anzeigepflichtAnchor", rootElement));
        }
        SchrittRendererHelper.getItemByPseudoId("ich_beantrage", rootElement).html(
            "Ich beantrage bei der " + (Util.getProp(this.getBO(), ["einstellung", "versicherer", "name"]) || "") + "  den Abschluss der zuvor ausgewählten Krankenversicherung(en), gegebenenfalls als Vertragsänderung.");

        var lastRow = SchrittRendererHelper.getItemByPseudoId("infobox");

        // Contentbox
        var fnContentBoxWithRow = _.template(schrittTemplate.contentBoxWithRow);
        var contentBoxWithRow = $(fnContentBoxWithRow());
        contentBoxWithRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "contentBox");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("contentBox", rootElement)) {
            contentBoxWithRow.insertAfter(lastRow);
        } else {
            contentBoxWithRow = SchrittRendererHelper.getItemByPseudoId("contentBox", rootElement);
        }

        contentBoxWithRow.find(".commonError").remove();
        if (validationResult && validationResult.state === "NOK") {
            var commonErrors = validationResult.validationErrors.filter(function(validationError) {
                return validationError.fieldName.indexOf("vp.tarif") === 0 || validationError.fieldName === "vp.";
            });

            _.chain(commonErrors).reverse().forEach(function(commonError) {
                var fnLabeledContentWithBigAntwortRowTemlate = _.template(schrittTemplate.labeledContentWithBigAntwortRowTemlate);

                var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                var error = $(fnErrorText({error: commonError.message}));

                var errorRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Es liegen folgende Fehler vor:", content: error.prop("outerHTML")}));
                errorRow.addClass("commonError");
                errorRow.prependTo(contentBoxWithRow);
            });
        }


        var fnContentBoxWithRowAndImageTemplate = _.template(schrittTemplate.contentBoxWithRowAndImageTemplate);
        var contentBoxWithRowAndImageTemplate = $(fnContentBoxWithRowAndImageTemplate({content : " Angaben zur zu versichernden Person"}));
        contentBoxWithRowAndImageTemplate.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "contentBoxAngabenZurVP");

        var contentBoxExists = SchrittRendererHelper.itemWithPseudoIdExists("contentBoxAngabenZurVP", rootElement);
        if (!contentBoxExists) {
            contentBoxWithRowAndImageTemplate.appendTo(contentBoxWithRow);
        } else {
            contentBoxWithRowAndImageTemplate = SchrittRendererHelper.getItemByPseudoId("contentBoxAngabenZurVP");
        }

        // Versicherungsbeginn

        var fnVersicherungsbeginnRowTemplate = _.template(schrittTemplate.versicherungsbeginnRowTemplate);
        var versicherungsbeginnRow = $(fnVersicherungsbeginnRowTemplate());

        if (!SchrittRendererHelper.itemWithPseudoIdExists("versicherungsbeginnRow", rootElement)) {
            versicherungsbeginnRow.appendTo(contentBoxWithRowAndImageTemplate);

            var versicherungsbeginnInput = versicherungsbeginnRow.find("input");
            versicherungsbeginnInput.val(this.getBO().versicherungsbeginn || "");
            //versicherungsbeginnInput.inputmask("99.99.9999", {alias: "date"});
            versicherungsbeginnInput.inputmask({alias: "datum"});
            var inputHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().versicherungsbeginn = res;
                } else {
                    that.getBO().versicherungsbeginn = unmaskedValue;
                }
            };
            $(versicherungsbeginnInput).keyup(inputHandler);
            $(versicherungsbeginnInput).blur(inputHandler);
        } else {
            versicherungsbeginnRow = SchrittRendererHelper.getItemByPseudoId("versicherungsbeginnRow", rootElement);
            var versicherungsbeginnInput = versicherungsbeginnRow.find("input");
            versicherungsbeginnInput.val(this.getBO().versicherungsbeginn || "");
        }


        var validationErrorForVersicherungsbeginn = SchrittRendererHelper.getError(this.validationResult, "vp.versicherungsbeginn");
        versicherungsbeginnRow.find(".error").remove();
        var fnAddVersicherungsbeginnError = function(errorText) {
            var versicherungsbeginnLabel = SchrittRendererHelper.getItemByPseudoId("versicherungsbeginnLabel", versicherungsbeginnRow);
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorVersicherungsbeginn = $(fnErrorText({error: errorText}));

            errorVersicherungsbeginn.insertAfter(versicherungsbeginnLabel);
        }

        if (validationErrorForVersicherungsbeginn) {
            fnAddVersicherungsbeginnError(validationErrorForVersicherungsbeginn);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

        var validationVersicherungsbeginnObject = {
            fnErrorRemoval: function() {
                versicherungsbeginnRow.find(".error").remove();
            },
            fnValidation: function() {
                var deferred = $.Deferred();
                var promise = deferred.promise();

                var ok = false;
                if (that.getBO().versicherungsbeginn) {
                    var date = Util.parseAsDateObject(that.getBO().versicherungsbeginn);

                    if (date) {
                        ok = !(Util.isInPast(date));
                    }
                }
                deferred.resolve(ok);

                return promise;
            },
            fnAddError: function() {
                fnAddVersicherungsbeginnError("Die Angabe ist ungültig.");
            }
        };
        this.fnBerechnen.push(validationVersicherungsbeginnObject);

        lastRow = versicherungsbeginnRow;

        // Geburtsdatum

        var fnGeburtsdatumRowTemplate = _.template(schrittTemplate.geburtsdatumRowTemplate);
        var geburtsdatumRow = $(fnGeburtsdatumRowTemplate());

        if (!SchrittRendererHelper.itemWithPseudoIdExists("geburtsdatumRow", rootElement)) {
            geburtsdatumRow.insertAfter(lastRow);

            var geburtsdatumInput = geburtsdatumRow.find("input");
            geburtsdatumInput.val(this.getBO().vp.geburtsdatum || "");
            //geburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
            geburtsdatumInput.inputmask({alias: "datum"});
            var inputHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().vp.geburtsdatum = res;
                } else {
                    that.getBO().vp.geburtsdatum = unmaskedValue;
                }
            };
            $(geburtsdatumInput).keyup(inputHandler);
            $(geburtsdatumInput).blur(inputHandler);
        } else {
            geburtsdatumRow = SchrittRendererHelper.getItemByPseudoId("geburtsdatumRow", rootElement);
            var geburtsdatumInput = geburtsdatumRow.find("input");
            geburtsdatumInput.val(this.getBO().vp.geburtsdatum || "");
        }

        var validationErrorForGeburtsdatum = SchrittRendererHelper.getError(this.validationResult, "vp.geburtsdatum");
        geburtsdatumRow.find(".error").remove();
        var fnAddGeburtsdatumError = function(errorText) {
            var geburtstagLabel = SchrittRendererHelper.getItemByPseudoId("geburtstagLabel", geburtsdatumRow);
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorGeburtstag = $(fnErrorText({error: errorText}));

            errorGeburtstag.insertAfter(geburtstagLabel);
        }

        if (validationErrorForGeburtsdatum) {
            fnAddGeburtsdatumError(validationErrorForGeburtsdatum);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

        var validationGeburtsdatumObject = {
            fnErrorRemoval: function() {
                geburtsdatumRow.find(".error").remove();
            },
            fnValidation: function() {
                var deferred = $.Deferred();
                var promise = deferred.promise();

                var ok = false;
                if (that.getBO().vp.geburtsdatum) {
                    var date = Util.parseAsDateObject(that.getBO().vp.geburtsdatum);

                    if (date) {
                        if (Util.isToday(date) || Util.isInPast(date)) {
                            var alter = Util.calculateAlter(date);

                            if (alter < 120) {
                                ok = true;
                            }
                        }
                    }
                }
                deferred.resolve(ok);

                return promise;
            },
            fnAddError: function() {
                fnAddGeburtsdatumError("Die Angabe ist ungültig.");
            }
        };
        this.fnBerechnen.push(validationGeburtsdatumObject);




//        var validationOptKrankenversicherungsschutzObject = {
//            fnErrorRemoval: function() {
//            	//
//                //krankenversicherungsschutzRow.find(".error").remove();
//            },
//            fnValidation: function() {
//                var deferred = $.Deferred();
//                var promise = deferred.promise();
//
//                if (that.getBO().vp.aktuellerVersicherungsschutz && that.getBO().vp.aktuellerVersicherungsschutz.length > 0 && that.getBO().vp.aktuellerVersicherungsschutz=='ausländische gesetzliche Krankenversicherung') {
//                	deferred.resolve(false);
//            	} else {
//            		deferred.resolve(true);
//            	}
//
//                return promise;
//            },
//            fnAddError: function() {
//            	var fnAddErrorKrankenversicherungssschutz = function(errorText) {
//                    var krankenversicherungsschutzRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
//                    krankenversicherungsschutzRow.find(".error").remove();
//
//                    var krankenversicherungsschutzLabel = krankenversicherungsschutzRow.find("label").first();
//                    var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
//                    var errorKrankenversicherungsschutz = $(fnErrorText({error: errorText}));
//                    errorKrankenversicherungsschutz.insertAfter(krankenversicherungsschutzLabel);
//                };
//                fnAddErrorKrankenversicherungssschutz('Die Tarife können leider nicht online abgeschlossen werden, weil Frage [604] mit \"ausländische gesetzliche Krankenversicherung\" beantwortet wurde. Um die Voraussetzungen für die Versicherungsfähigkeit prüfen zu können, wenden Sie sich bitte an einen Betreuer. Danke!');
//            }
//        };
//        this.fnBerechnen.push(validationOptKrankenversicherungsschutzObject);



        lastRow = geburtsdatumRow;

        // Fragen

        function fnAddFrageValidator(oFrage, validationForFrageObject) {
            that.fnPruefen.push(validationForFrageObject);
            if (oFrage.fragetyp === "TARIFIERUNGS_FRAGE") {
                that.fnBerechnen.push(validationForFrageObject);
            }
        }

        var aTarifierungsfragen = this.getBO().vp.fragen.filter(function(oFrage) {
            return oFrage.fragetyp === "TARIFIERUNGS_FRAGE";
        });
        lastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, true, fnAddFrageValidator, null, aTarifierungsfragen, false, false, lastRow);

        // berechnen
        var fnBerechnenSchritt1ButtonRowTemplate = _.template(schrittTemplate.berechnenSchritt1ButtonRowTemplate);
        var berechnenSchritt1ButtonRow = $(fnBerechnenSchritt1ButtonRowTemplate());

        if (!SchrittRendererHelper.itemWithPseudoIdExists("berechnenSchritt1ButtonRow", rootElement)) {
            berechnenSchritt1ButtonRow.find("a").eq(0).click(function(event) {
                event.preventDefault();

                that.setBusy(true);
                that._berechneAntragsfragen().always(function() {
                    that.setBusy(false);
                });
            });

            berechnenSchritt1ButtonRow = berechnenSchritt1ButtonRow.last();
            berechnenSchritt1ButtonRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "berechnenSchritt1ButtonRow");
            berechnenSchritt1ButtonRow.appendTo(contentBoxWithRowAndImageTemplate);
        } else {
            berechnenSchritt1ButtonRow = SchrittRendererHelper.getItemByPseudoId("berechnenSchritt1ButtonRow", rootElement);
        }
        lastRow = berechnenSchritt1ButtonRow;

        var fnRowSeparator = _.template(schrittTemplate.rowSeparator);
        if (!contentBoxExists) {
            var rowSeparator = $(fnRowSeparator());
            rowSeparator.insertAfter(contentBoxWithRowAndImageTemplate.children().last());
            lastRow = rowSeparator.last();

            lastRow.addClass("rowSeparator");
        } else {
            lastRow = rootElement.find(".rowSeparator");
        }

        // Allgemeine Fragen
        if (this.getBO().vp.antragsfragenBerechnet) {
            $("div.antragsfragen").remove();

            // Angaben zur VP
//            this.fnPruefen.push(validationOptKrankenversicherungsschutzObject);
            buildAngabenZurVPAndAddToRow.call(this, schrittTemplate, contentBoxWithRowAndImageTemplate);

            var newLastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, true, fnAddFrageValidator, null, this.getBO().vp.antragsfragen, false, true, contentBoxWithRowAndImageTemplate.children().last());
            lastRow.nextAll().addClass("antragsfragen");
            lastRow = newLastRow;

            if (this.getBO().vp.antragsfragen && this.getBO().vp.antragsfragen.length > 0) {
                var fnweiterSchritt2ButtonRowTemplate = _.template(schrittTemplate.weiterSchritt2ButtonRowTemplate);
                var weiterSchritt2ButtonRow = $(fnweiterSchritt2ButtonRowTemplate());
                weiterSchritt2ButtonRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "weiterSchritt2ButtonRow");

                if (!SchrittRendererHelper.itemWithPseudoIdExists("weiterSchritt2ButtonRow", rootElement)) {
                    weiterSchritt2ButtonRow.find("a").eq(0).click(function(event) {
                        event.preventDefault();

                        that.setBusy(true);
                        that._berechneUndWeiter().always(function() {
                            that.setBusy(false);
                        });
                    });

                    weiterSchritt2ButtonRow.insertAfter(contentBoxWithRowAndImageTemplate);
                } else {
                    weiterSchritt2ButtonRow = SchrittRendererHelper.getItemByPseudoId("weiterSchritt2ButtonRow", rootElement);
                }
                lastRow = weiterSchritt2ButtonRow;
            }
        }

        // Mehrwert Box

        var produktName = (this.validationResult && this.validationResult.vpTarife && this.validationResult.vpTarife.length > 0) ? this.validationResult.vpTarife[0].beschreibung : this.getBO().produkt;

        var mehrwertBoxTemplate = _.template(schrittTemplate.mehrwertBoxTemplate);
        var mehrwertBoxContent = $(mehrwertBoxTemplate({produkt : produktName, produktDesc : ""}));
        mehrwertBoxContent.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "mehrwertBoxContent");
        if (!SchrittRendererHelper.itemWithPseudoIdExists("mehrwertBoxContent", rootElement)) {
            mehrwertBoxContent.insertAfter(SchrittRendererHelper.getItemByPseudoId("kvo-content"));
        } else {
            mehrwertBoxContent = SchrittRendererHelper.getItemByPseudoId("mehrwertBoxContent", rootElement);
        }


        var mehrwertBoxWeitereInfosTemplate = _.template(schrittTemplate.mehrwertBoxWeitereInfosTemplate);
        var mehrwertBoxWeitereInfosContent = $(mehrwertBoxWeitereInfosTemplate());
        mehrwertBoxWeitereInfosContent.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "mehrwertBoxWeitereInfosContent");
        if (!SchrittRendererHelper.itemWithPseudoIdExists("mehrwertBoxWeitereInfosContent", rootElement)) {
            mehrwertBoxWeitereInfosContent.insertAfter(SchrittRendererHelper.getItemByPseudoId("content", mehrwertBoxContent));

            var links = mehrwertBoxWeitereInfosContent.find("a");

            // Tariferklaerung
            links.eq(0).click(function(e) {
                e.preventDefault();

                that._checkDeferreds(that.fnBerechnen).then(function() {
                	var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                    getAndOpenDocument(druckstueckBOandUrl);
                }).fail(function() {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                });

            });

            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                // Vorschlag
                that._checkDeferreds(that.fnBerechnen).then(function() {
                    var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                    getAndOpenDocument(druckstueckBOandUrl);
                }).fail(function() {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                });
            });

            links.eq(2).prop("href", Util.getProp(this.getBO(), ["einstellung", "versicherer", "urlStreitbeilegung"]));

        } else {
            mehrwertBoxWeitereInfosContent = SchrittRendererHelper.getItemByPseudoId("mehrwertBoxWeitereInfosContent", rootElement);

            links = mehrwertBoxWeitereInfosContent.find("a");
            links.eq(2).prop("href", Util.getProp(this.getBO(), ["einstellung", "versicherer", "urlStreitbeilegung"]));
        }

        var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
        trennerLeistungen.nextAll().remove();
        var leistungen = Util.getProp(this.getBO(), ["einstellung", "modul", "leistungen"]);
        if (leistungen) {
            leistungen.forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });
        }
        /*var leistungenHeader = Util.getProp(this.getBO(), ["einstellung", "modul", "leistungenHeader"]);
        if (leistungenHeader) {
           $('<h2>'+leistungenHeader+"</h2>").insertAfter(trennerLeistungen);
        }*/


        if (this.validationResult && this.validationResult.state === "OK") {
            var nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("content", mehrwertBoxContent);

            $(".tarifbeitragContent").remove();
            $(".accordion").remove();

            if (this.validationResult.vpTarife && this.validationResult.vpTarife.length > 0) {
                this.validationResult.vpTarife.forEach(function(tarif) {
                    if (tarif.ausgewaehlt && !tarif.augesteuert) {
                        var textAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(that.validationResult && that.validationResult.vpTarife.length > 0 ? that.validationResult.vpTarife[0].beitrag : null);
                        var textAndBeitragOhneRZ = SchrittRendererHelper.determineZahlbeitragTextAndValue(that.validationResult && that.validationResult.vpTarife.length > 0 ? that.validationResult.vpTarife[0].beitragOhneRZ : null);
                        var mehrwertBoxTarifbeitragTemplate = _.template(schrittTemplate.mehrwertBoxTarifbeitragTemplate);
                        var tarifbeitragContent = $(mehrwertBoxTarifbeitragTemplate({beitrag: textAndBeitrag.value}));

                        tarifbeitragContent.insertAfter(nextPositionToPut);
                        tarifbeitragContent.addClass("tarifbeitragContent");
                        nextPositionToPut = tarifbeitragContent[tarifbeitragContent.length-1];

                        var mehrwertBoxTarifAccordionStartTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionStartTemplate);
                        var mehrwertBoxTarifAccordionStart = $(mehrwertBoxTarifAccordionStartTemplate({text : "Zu versichernde Person, " + that.getBO().vp.geburtsdatum}));
                        mehrwertBoxTarifAccordionStart.insertAfter(nextPositionToPut);
                        nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("accordion", mehrwertBoxTarifAccordionStart);

                        mehrwertBoxTarifAccordionStart.find("a").click(function(){
                            mehrwertBoxTarifAccordionStart.find("a").toggleClass("active");
                            mehrwertBoxTarifAccordionStart.find("div.content").toggleClass("active");
                        });

                        var tarifWertContentTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionTarifWertTemplate);
                        var tarifWertContent = $(tarifWertContentTemplate({tarif: that.getBO().produkt, wert: textAndBeitragOhneRZ.value}));
                        tarifWertContent.insertAfter(nextPositionToPut);
                        nextPositionToPut = tarifWertContent[tarifWertContent.length-1];

                        if (tarif.risikozuschlaege && tarif.risikozuschlaege.length>0) {
                        	var rz = 0;
                        	for (var i=0; i<tarif.risikozuschlaege.length; i++)
                        		rz += tarif.risikozuschlaege[i].ro_rzAbsolut;

                        	var rzText = tarif.risikozuschlaege.length==1 && tarif.risikozuschlaege[0].webText && tarif.risikozuschlaege[0].webText.length>0 ? ("  + " + tarif.risikozuschlaege[0].webText) : " + Risikozuschlag";
                        	var rzAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(rz);
                        	var rzWertContentTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionRzWertTemplate);
                        	var rzContent = $(rzWertContentTemplate({rzText: rzText, rzWert: rzAndBeitrag.value}));
                        	rzContent.insertAfter(nextPositionToPut);

                            nextPositionToPut = rzContent[rzContent.length-1];
                        }

                        var accordionEndTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionEndTemplate);
                        var accordionEnd = $(accordionEndTemplate({beitrag: tarif.beitrag}));
                        accordionEnd.insertAfter(nextPositionToPut);
                    }
                }, this);
            }
        } /*else  if (this.validationResult && this.validationResult.state === "NOK") {
            $(".tarifbeitragContent").remove();
            $(".accordion").remove();
        }*/


        defer.resolve();

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);

            setTimeout(function() {
            	var berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
            	var helpTextTemplate = _.template(schrittTemplate.helpText);
                var helpText = $(helpTextTemplate({helptext: 'Damit wir prüfen können, ob Sie im ausgewählten Tarif versichert werden können, benötigen wir Ihren ausgeübten Beruf.'}));
                berufRow.find("label").append(helpText);
            }, 0);
        } else {
            if (this.validationResult && this.validationResult.context && this.validationResult.context.performPruefen) {
                this._performPruefen();
            } else {
                SchrittRendererHelper.scrollToFirstError(this.rootElement);
            }
        }

       	window.jQuery(document).foundation();
    }.bind(this));

    return defer.promise();
};

Schritt1Renderer.prototype._getBerufSuggestionsFor = function(taetigkeitsstatus, beruf) {
    return this.oProdukt.getBerufSuggestionsFor(taetigkeitsstatus, beruf);
};

Schritt1Renderer.prototype._getBerufSuggestionsFor = function(taetigkeitsstatus, beruf) {
    return this.oProdukt.getBerufSuggestionsFor(taetigkeitsstatus, beruf);
};

Schritt1Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt1Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt1Renderer.prototype._getDruckstueckBeiblattAnzeigepflichtBOandUrl = function() {
    return this.oProdukt.getDruckstueckBeiblattAnzeigepflichtBOandUrl(this.getBO());
};

Schritt1Renderer.prototype._performPruefen = function() {
    var deferred = $.Deferred();

    this._checkDeferreds(this.fnPruefen).fail(function() {
        deferred.reject();
        SchrittRendererHelper.scrollToFirstError(this.rootElement);
    }.bind(this));

    return deferred.promise();
};

Schritt1Renderer.prototype._berechneAntragsfragen = function() {
    var deferred = $.Deferred();

    this._checkDeferreds(this.fnBerechnen).then(function() {
        this.oProdukt.berechneAntragsfragen().then(function() {
            deferred.resolve.apply(deferred, arguments);
        }).fail(function() {
            deferred.reject.apply(deferred, arguments);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        });
    }.bind(this)).fail(function() {
        deferred.reject();
        SchrittRendererHelper.scrollToFirstError(this.rootElement);
    }.bind(this));

    return deferred.promise();
};

Schritt1Renderer.prototype._berechneUndWeiter = function() {
    var deferred = $.Deferred();

    this._checkDeferreds(this.fnPruefen).then(function() {
        this.oProdukt.berechne().then(function() {
            deferred.resolve.apply(deferred, arguments);
        }).fail(function() {
            deferred.reject.apply(deferred, arguments);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        });
    }.bind(this)).fail(function() {
        deferred.reject();
        SchrittRendererHelper.scrollToFirstError(this.rootElement);
    }.bind(this));

    return deferred.promise();
};

Schritt1Renderer.prototype._checkDeferreds = function(fnWithDeferreds) {
    var deferred = $.Deferred();

    var promises = [];

    fnWithDeferreds.forEach(function(oFnWithDeferred) {
        oFnWithDeferred.fnErrorRemoval();

        var promise = oFnWithDeferred.fnValidation();
        promises.push(promise);

        $.when(promise).then(function(result) {
            if (!result) {
                oFnWithDeferred.fnAddError();
            }
        });
    });

    $.when.apply($, promises).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
            deferred.resolve();
        } else {
            deferred.reject();
        }
    }.bind(this));

    return deferred.promise();
};

module.exports = Schritt1Renderer;


/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = {
    headTemplate: ' \
                        <div class="off-canvas-wrap"> \
                            <a style="color: white" id="top_anchor" href="#"></a> \
                            <div class="inner-wrap"> \
                                <header> \
                                <div class="sticky-wrapper" style=""> \
                                    <div class="contain-to-grid sticky"> \
                                        <section class="navigation"> \
                                            <nav> \
                                            <div class="clearfix row"> \
                                                <div class="large-12 columns hide-general"> \
                                                    <ul class="left"> \
                                                        <li> \
                                                        <h4>Tarifrechner <%= produkt %></h4> \
                                                        </li> \
                                                    </ul> \
                                                </div> \
                                            </div> \
                                            </nav> \
                                        </section> \
                                    </div> \
                                </div> \
                                </header> \
                                <main> \
                                <div class="row"> \
                                    <div class="large-12 small-12 columns content-container"> \
                                        <div class="row"> \
                                            <div class="large-12 columns"> \
                                                <div class="rowX"> \
                                                            <ol class="progress-indicator"> \
                                                                  <li class="is-current" data-step="1"> \
                                                                        <span>Angaben zur Absicherung</span> \
                                                                  </li> \
                                                                  <li class="" data-step="2"> \
                                                                        <span></span> \
                                                                  </li> \
                                                                  <li class="" data-step="3"> \
                                                                        <span></span> \
                                                                  </li> \
                                                                  <li class="is-last" data-step="4"> \
                                                                        <span>Online beantragen</span> \
                                                                  </li> \
                                                            </ol> \
                                                      </div> \
                                                \
                                                </div> \
                                                <!-- Content --> \
                                                <!-- linker Contentbereich --> \
                                               <div class="large-8 medium-7 columns kvo-content" kv_ref="kvo-content"> \
                                                 <!-- Pflichtfelder, SSL --> \
                                                 <div class="kvo-content-1" kv_ref="kvo-content-1"> \
                                                    <div class="kvo-title"> \
                    	                                <h1>Antrag auf <%= produkt %></h1> \
                                                        <div class="row"> \
                                                            <div class="large-12 medium-12 columns"> \
                                                                <span kv_ref="ich_beantrage"></span> \
                                                                <p>&nbsp;</p> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="medium-12 infobox" kv_ref="infobox"> \
                                                            <div class="dataSummary"><h2><b>Vorvertragliche Anzeigepflicht</b></h2><br><span kv_ref="anzeigepflichtAnchor"></span><%= anzeigepflicht %>&nbsp;<a href="javascript:void(0);">Beiblatt zur vorvertraglichen Anzeigepflicht.</a> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                                <div class="row ssl"> \
                                                    <div class="columns medium-12 "> \
                                                        <p>&nbsp;</p> \
                                                         <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                                        <br> \
                                                        <span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
                                </main> \
                            </div> \
                        </div> \
                       ',

    mehrwertBoxTarifbeitragTemplate: ' \
                                    <div class="row display-sum"> \
                                        <div class="medium-7 small-8 columns"> \
                                            <label class="summary">Monatlicher Gesamtbeitrag</label> \
                                        </div> \
                                        <div class="medium-5 small-4 columns"> \
                                            <input readonly="" type="text" value="<%= beitrag %> \u20AC"> \
                                        </div> \
                                    </div> \
                                        ',

    mehrwertBoxTarifAccordionStartTemplate:
                                        ' \
                                        <dl class="accordion" data-accordion=""> \
                                            <dd class="accordion-navigation active"> \
                                                <a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
                                                <div id="panel1a" class="content active"> \
                                                    <div class="row" kv_ref="accordion"> \
                                                        <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= text %></label> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </dd> \
                                        </dl> \
                                        ',

    mehrwertBoxTarifAccordionTarifWertTemplate:
                                        ' \
                                        <div class="row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label><%= tarif %></label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= wert %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        <hr> \
                                        ',

    mehrwertBoxTarifAccordionRzWertTemplate:
                                        ' \
                                        <div class="row" kv_ref="detail_rz_row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label><%= rzText %></label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= rzWert %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        ',


    mehrwertBoxTarifAccordionEndTemplate:
                                        ' \
                                        <div class="row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label class="summary">Monatlicher Gesamtbeitrag</label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= beitrag %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        ',

    geburtsdatumRowTemplate : ' \
                                <div class="row" kv_ref="geburtsdatumRow" data-abide>  \
                                    <div class="medium-6 columns"> \
                                        <label kv_ref="geburtstagLabel">Geburtsdatum *</label> \
                                        <div class="row"> \
                                            <div class="large-12 medium-12 small-12 columns"> \
                                                <input placeholder="TT.MM.JJJJ" value="" maxlength="10" type="text" style=""> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
                                ',

    versicherungsbeginnRowTemplate : ' \
                                <div class="row" kv_ref="versicherungsbeginnRow" data-abide>  \
                                    <div class="medium-6 columns"> \
                                        <label kv_ref="versicherungsbeginnLabel">Versicherungsbeginn *</label> \
                                        <div class="row"> \
                                            <div class="large-12 medium-12 small-12 columns"> \
                                                <input placeholder="TT.MM.JJJJ" value="" maxlength="10" type="text" style=""> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
                                ',

    dateInputTemplate : '<input placeholder="TT.MM.JJJJ" maxlength="10" type="text" style="">',

    stringInputTemplate : '<input maxlength="30" type="text" style="">',

    berufInputTemplate: '<input placeholder="" type="text" value="<%= beruf %>" maxlength="35" />',

    koopInputTemplate: '<input placeholder="" type="text" value="<%= value %>" maxlength="10" />',

    labeledContentWithMediumColumnsRowTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label><%= label %><%= required %></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <%= content %> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    labeledContentWithBigAntwortRowTemlate: ' \
                                    <div class="row"> \
                                        <div class="medium-9 columns"> \
                                            <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label><%= label %></label> \
                                            </div> \
                                            </div> \
                                            <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <%= content %>  \
                                            </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    ',

    labeledContentNumberedWithMediumColumnsRowTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <%= content %> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    labeledContentNumberedAndIdWithMediumColumnsRowTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <small style="color: black">[<%= id %>]</small> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <%= content %> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    radioInputWith2ItemsTemplate: '\
                        <div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label><%= label %><%= required %></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <div class="antwortGross frageAntwort" data-abide> \
                                            <input value="<%= valueOne %>" type="radio" id="<%= idOne %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idOne %>" class=""><%= valueOne %></label> \
                                            &nbsp;&nbsp; \
                                            <input value="<%= valueTwo %>" type="radio" id="<%= idTwo %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idTwo %>" class=""><%= valueTwo %></label> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    radioInputWith2ItemsNumberedTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %><%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <div class="antwortGross frageAntwort" data-abide> \
                                            <input value="<%= valueOne %>" type="radio" id="<%= idOne %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idOne %>" class=""><%= valueOne %></label> \
                                            &nbsp;&nbsp; \
                                            <input value="<%= valueTwo %>" type="radio" id="<%= idTwo %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idTwo %>" class=""><%= valueTwo %></label> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    radioInputWith2ItemsNumberedWithIdTemplate:
                        '<div class="row"> \
                            <div class="medium-12 columns"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label><%= label %> <small style="color: black">[<%= id %>]</small> <%= required %></label></div> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-6 columns"> \
                                        <div class="antwortGross frageAntwort" data-abide> \
                                            <input value="<%= valueOne %>" type="radio" id="<%= idOne %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idOne %>" class=""><%= valueOne %></label> \
                                            &nbsp;&nbsp; \
                                            <input value="<%= valueTwo %>" type="radio" id="<%= idTwo %>" name="<%= name %>" style="border: 0px; width: 20px"><label for="<%= idTwo %>" class=""><%= valueTwo %></label> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                        </div>',

    contentBoxWithRow: '\
            <div class="medium-12 contentbox"> \
            <div class="row"> \
            </div> \
            </div> \
            ',

    contentBoxWithRowAndImageTemplate: ' \
                            <div class="medium-12 contentbox"> \
                                <div class="row"> \
                                    <div class="medium-12 columns"> \
                                        <h2><i class="fa fa-user-plus fa-2x"></i> <%= content %></h2> \
                                    </div> \
                                </div> \
                            </div> \
                            ',

    errorLabelTemplate: '<small style="display: block" class="error"><%- error %></small>',

    weiterSchritt2ButtonRowTemplate: ' \
                                    <div class="medium-5 large-4 columns left"> \
                                        <p>&nbsp;</p> \
                                    </div> \
                                    <div class="medium-5 large-4 columns right text-right"> \
                                        <p>&nbsp;</p> \
                                        <a class="call-to-action button expand check">weiter zu Schritt 2</a> \
                                        <p class="small-text button-subline">Eingabe der Personen- und Zahlungsdaten</p> \
                                    </div> \
                                    ',

    berechnenSchritt1ButtonRowTemplate: ' \
                                    <div class="medium-5 large-4 columns left"> \
                                        <p>&nbsp;</p> \
                                    </div> \
                                    <div class="medium-5 large-4 columns right text-right"> \
                                        <p>&nbsp;</p> \
                                        <a class="call-to-action button expand check">Beitrag berechnen</a> \
                                    </div> \
                                    ',

    mehrwertBoxWeitereInfosTemplate : ' \
                                <div class="medium-11 small-12 summarybox left"> \
                                    <div class="row"> \
                                        <div class="medium-12 columns"> \
                                            <h2>Weiterführende Informationen</h2> \
                                            <ul> \
                                                <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
                                                <li><a href="javascript:void(0);" target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                            </ul> \
                                        </div> \
                                    </div> \
                                </div> \
                            ',

    rowSeparator: '<div class="row"></div><hr />',

    emptyContent: '<div style="margin-bottom: 5px; margin-top: 5px">',

    helpText: '<span data-tooltip="" class="has-tip" title="<%= helptext %>">&nbsp;<a class="info">i</a></span>',

    mehrwertBoxTemplate : ' \
                            <!-- rechte Mehrwertbox --> \
                            <div class="large-4 medium-5 columns"> \
                                <div class="row "> \
                                <!-- Ausgabe eingegebener Daten --> \
                                <div class="medium-11 small-12 summarybox right" kv_ref="content_parent"> \
                                    <div class="row" kv_ref="content"> \
                                        <div class="medium-12 columns"> \
                                            <h2>Ihre gewünschte Absicherung</h2> \
                                            <h1><%= produkt %></h1> \
                                            <p><%= produktDesc %></p> \
                                        <br kv_ref="trenner_leistungen" /> \
                                        </div> \
                                    </div> \
                                </div> \
                            </div> \
                            '
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);
var FrageHelper = __webpack_require__(9);

function buildAngabenZurVPAndAddToRow(schrittTemplate, oContentBox) {
    var rootElement = this.rootElement;

    var that = this;

    // anrede
    var fnRowTemplate = _.template(schrittTemplate.radioInputWith2ItemsTemplate);

    var anredeRow = $(fnRowTemplate({label: "Geschlecht ", required: "*", name: "vp_geschlecht", idOne: "geschlecht_1", idTwo: "geschlecht_2", valueOne: "männlich", valueTwo: "weiblich"}));
    anredeRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "anredeRow");

    if (!SchrittRendererHelper.itemWithPseudoIdExists("anredeRow", rootElement)) {
        anredeRow.appendTo(oContentBox);
        anredeRow.find("input").eq(0).click(function() {
            that.getBO().vp.anrede = "HERR";
        });
        anredeRow.find("input").eq(1).click(function() {
            that.getBO().vp.anrede = "FRAU";
        });
    } else {
        anredeRow = SchrittRendererHelper.getItemByPseudoId("anredeRow", rootElement);
    }
    if (this.getBO().vp.anrede === "HERR") {
        anredeRow.find("input").eq(0).attr("checked", "checked");
    } else if (this.getBO().vp.anrede === "FRAU") {
        anredeRow.find("input").eq(1).attr("checked", "checked");
    }
    var fnAddAnredeError = function(errorText) {
        var anredeLabel = anredeRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorAnrede = $(fnErrorText({error: errorText}));

        errorAnrede.insertBefore(anredeLabel);
    };

    anredeRow.find(".error").remove();
    var validationErrorForAnrede = SchrittRendererHelper.getError(this.validationResult, "vp.anrede");
    if (validationErrorForAnrede) {
        fnAddAnredeError(validationErrorForAnrede);
    }
    var fnAnredeValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.anrede === "HERR" || that.getBO().vp.anrede === "FRAU") {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationAnredeObject = {
        fnErrorRemoval: function() {
            anredeRow.find(".error").remove();
        },
        fnValidation: fnAnredeValidation,
        fnAddError: function() {
            fnAddAnredeError("Die Angabe im Feld ist ungültig.");
        }
    };
    this.fnPruefen.push(validationAnredeObject);

    var prevSibling = anredeRow.last();

    // Staatsangehoerigkeit
    fnRowTemplate = _.template(schrittTemplate.labeledContentWithMediumColumnsRowTemplate);

    var staatsangehoerigkeitSelect = $("<select />");
    var staatsangehoerigkeitRow = $(fnRowTemplate({label: "Staatsangehörigkeit ", required: "*", content: staatsangehoerigkeitSelect.prop("outerHTML")}));
    staatsangehoerigkeitRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "staatsangehoerigkeitRow");

    if (!SchrittRendererHelper.itemWithPseudoIdExists("staatsangehoerigkeitRow", rootElement)) {
        staatsangehoerigkeitRow.insertAfter(prevSibling);
    } else {
        staatsangehoerigkeitRow = SchrittRendererHelper.getItemByPseudoId("staatsangehoerigkeitRow", rootElement);
    }
    staatsangehoerigkeitSelect = staatsangehoerigkeitRow.find("select");
    staatsangehoerigkeitSelect.empty();
    if (this.getBO().svLand) {
        this.getBO().svLand.forEach(function(currLand) {
            var optionLand = $("<option value='" + currLand  +"'>" + currLand + "</option>");

            if (this.getBO().vp.staatsangehoerigkeit) {
                if (currLand === this.getBO().vp.staatsangehoerigkeit) {
                    optionLand.attr("selected", "selected");
                }
            } else if (currLand === "Deutschland") {
                this.getBO().vp.staatsangehoerigkeit = "Deutschland";
                optionLand.attr("selected", "selected");
            }
            staatsangehoerigkeitSelect.append(optionLand);
        }, this);
    }

    staatsangehoerigkeitSelect.change(function() {
        that.getBO().vp.staatsangehoerigkeit = $(this).val();
    });

    staatsangehoerigkeitRow.find(".error").remove();
    var validationErrorForStaatsangehoerigkeit = SchrittRendererHelper.getError(this.validationResult, "vp.staatsangehoerigkeit");
    var fnAddStaatsangehoerigkeitError = function(errorText) {
        var staatsangehoerigkeitLabel = staatsangehoerigkeitRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorStaatsangehoerigkeit = $(fnErrorText({error: errorText}));

        errorStaatsangehoerigkeit.insertBefore(staatsangehoerigkeitLabel);
    }
    if (validationErrorForStaatsangehoerigkeit) {
        fnAddStaatsangehoerigkeitError(validationErrorForStaatsangehoerigkeit);
    }

    var fnStaatsangehoerigkeitValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.staatsangehoerigkeit && that.getBO().vp.staatsangehoerigkeit.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationStaatsangehoerigkeitObject = {
        fnErrorRemoval: function() {
            staatsangehoerigkeitRow.find(".error").remove();
        },
        fnValidation: fnStaatsangehoerigkeitValidation,
        fnAddError: function() {
            fnAddStaatsangehoerigkeitError("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationStaatsangehoerigkeitObject);

    prevSibling = staatsangehoerigkeitRow.last();

    // Taetigkeitsstatus
    var KIND = "Kind";

    var taetigkeitsstatusSelect = $("<select />");
    var taetigkeitsstatusRow = $(fnRowTemplate({label: "Tätigkeitsstatus ", required: "*", content: taetigkeitsstatusSelect.prop("outerHTML")}));
    taetigkeitsstatusRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "taetigkeitsstatusRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("taetigkeitsstatusRow", rootElement)) {
        taetigkeitsstatusRow.insertAfter(prevSibling);
    } else {
        taetigkeitsstatusRow = SchrittRendererHelper.getItemByPseudoId("taetigkeitsstatusRow", rootElement);
    }

    taetigkeitsstatusRow.find(".error").remove();
    var fnAddTaetigkeitsstatusError = function(errorText) {
        var taetigkeitsstatusLabel = taetigkeitsstatusRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorTaetigkeitsstatus = $(fnErrorText({error: errorText}));

        errorTaetigkeitsstatus.insertBefore(taetigkeitsstatusLabel);
    }
    var validationErrorForTaetigkeitsstatus = SchrittRendererHelper.getError(this.validationResult, "vp.taetigkeitsstatus");
    if (validationErrorForTaetigkeitsstatus) {
        fnAddTaetigkeitsstatusError(validationErrorForTaetigkeitsstatus);
    }

    taetigkeitsstatusSelect = taetigkeitsstatusRow.find("select");
    taetigkeitsstatusSelect.empty();
    taetigkeitsstatusSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svTaetigkeitsstatus) {
        this.getBO().svTaetigkeitsstatus.forEach(function(currTaetigkeitsstatus) {
            var optionTaetigkeitsstatus = $("<option value='" + currTaetigkeitsstatus  +"'>" + currTaetigkeitsstatus + "</option>");

            if (this.getBO().vp.taetigkeitsstatus  === currTaetigkeitsstatus) {
                optionTaetigkeitsstatus.attr("selected", "selected");
            }
            taetigkeitsstatusSelect.append(optionTaetigkeitsstatus);
        }, this);
    }

    taetigkeitsstatusSelect.change(function() {
        var taetigkeitsstatus = $(this).val();
        if (!that.getBO().svTaetigkeitsstatus.some(function(currTaetigkeitsstatus) {
            return taetigkeitsstatus === currTaetigkeitsstatus;
        })) {
            taetigkeitsstatus = null;
        }

        that.getBO().vp.taetigkeitsstatus = taetigkeitsstatus;

        var berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
        var berufInput = berufRow.find("input");

        switch(taetigkeitsstatus) {
            case "Arbeitsloser":
                that.getBO().vp.beruf = "Arbeitsloser/e";
                berufInput.val("Arbeitsloser/e");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Hausfrau/-mann":
                that.getBO().vp.beruf = "Hausfrau, Hausmann";
                berufInput.val("Hausfrau, Hausmann");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case KIND:
                that.getBO().vp.beruf = taetigkeitsstatus;
                berufInput.val(taetigkeitsstatus);

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Pensionär":
                that.getBO().vp.beruf = "Pensionär/in";
                berufInput.val("Pensionär/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Rentner":
                that.getBO().vp.beruf = "Rentner/in";
                berufInput.val("Rentner/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Student":
                that.getBO().vp.beruf = "Student/in";
                berufInput.val("Student/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            case "Schüler":
                that.getBO().vp.beruf = "Schüler/in";
                berufInput.val("Schüler/in");

                //SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", true);
                break;
            default:
                that.getBO().vp.beruf = "";
                berufInput.val("");

                SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement).find("input").prop("disabled", false);
                break;
        }

    });

    var fnTaetigkeitsstatusValidation = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();
        if (that.getBO().vp.taetigkeitsstatus && that.getBO().vp.taetigkeitsstatus.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }
        return promise;
    };
    var validationTaetigkeitsstatusObject = {
        fnErrorRemoval: function() {
            taetigkeitsstatusRow.find(".error").remove();
        },
        fnValidation: fnTaetigkeitsstatusValidation,
        fnAddError: function() {
            fnAddTaetigkeitsstatusError("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationTaetigkeitsstatusObject);

    prevSibling = taetigkeitsstatusRow.last();

    // Beruf

    var fnLabeledContentWithBigAntwortRowTemlate = _.template(schrittTemplate.labeledContentWithBigAntwortRowTemlate);

    var fnBerufInput = _.template(schrittTemplate.berufInputTemplate);
    var berufInput = $(fnBerufInput({ beruf : ("" || this.getBO().vp.beruf) }));

    var berufRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Ausgeübter Beruf (Nach Eingabe der ersten Buchstaben wird eine Auswahl angeboten, aus der Sie Ihren Beruf wählen können)*", content: berufInput.prop("outerHTML")}));
    berufRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "berufRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("berufRow", rootElement)) {
        berufRow.insertAfter(prevSibling);

        berufInput = berufRow.find("input");
        var oAutocompleteOptions = {
            ajaxFn: function(beruf) {
                var taetigkeitsstatus = that.getBO().vp.taetigkeitsstatus;
                that.getBO().vp.beruf = beruf;
                return that._getBerufSuggestionsFor(taetigkeitsstatus, beruf);
            },

            width: null,

            noVerifySuggestionFormat: true,

            onSelect: function(suggest) {
                that.getBO().vp.beruf = suggest.value;
            },

            onSelectCallback: function(suggestion) {
                return !suggestion.suggest;
            },

            formatResult: function(suggestion, currentValue) {
                var result = $.Autocomplete.formatResult(suggestion, currentValue);
                if (!suggestion.suggest) {
                    result = "Meinten Sie: <i>" + result + "</i>";
                }

                return result;
            },

            transformResult: function(ergebnisBeruf) {
                var result = {
                    suggestions: []
                };

                if (ergebnisBeruf.vorschlagstreffer > 0) {
                    this.suggest = true;
                    result.suggestions = ergebnisBeruf.vorschlaege.map(function(val) {
                        return {value: val.text, suggest: true};
                    });
                } else if (ergebnisBeruf.aehnlichkeitentreffer > 0) {
                    this.suggest = false;
                    result.suggestions = ergebnisBeruf.aehnlichkeiten.map(function(val) {
                        return {value: val, suggest: false};
                    });
                }

                return result;
            }
        };
        berufInput.autocomplete(oAutocompleteOptions);
        berufInput.val(this.getBO().vp.beruf);
    } else {
        berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
    }
    berufRow.find(".error").remove();
    var validationErrorForBeruf = SchrittRendererHelper.getError(this.validationResult, "vp.beruf");

    var fnAddErrorBeruf = function(errorText) {
        var berufLabel = berufRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorBeruf = $(fnErrorText({error: errorText}));

        errorBeruf.insertBefore(berufLabel);
    };

    if (validationErrorForBeruf) {
        fnAddErrorBeruf(validationErrorForBeruf);
    }

    var fnValidationBeruf = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (!that.getBO().vp.beruf || that.getBO().vp.beruf.trim().length === 0) {
            deferred.resolve(false);
        } else if (!that.getBO().vp.taetigkeitsstatus) {
            deferred.resolve(false);
        } else {
            that._getBerufSuggestionsFor(that.getBO().vp.taetigkeitsstatus, that.getBO().vp.beruf).then(function(ergebnisBeruf) {
                var ok = false;
                if (ergebnisBeruf && ergebnisBeruf.hasOwnProperty("vorschlagstreffer")) {
                    if (ergebnisBeruf.vorschlagstreffer > 0) {
                        if (ergebnisBeruf.vorschlaege.some(function(val) {
                            return val.text === that.getBO().vp.beruf;
                        })) {
                            ok = true;
                        }
                    }

                }

                deferred.resolve(ok);
            }).fail(function() {
                deferred.resolve(false);
            });
        }

        return promise;
    };

    var validationBerufObject = {
        fnErrorRemoval: function() {
            berufRow.find(".error").remove();
        },
        fnValidation: fnValidationBeruf,
        fnAddError: function() {
            fnAddErrorBeruf("Die Berufsangabe ist ungültig.");
        }
    };
    this.fnPruefen.push(validationBerufObject);


    prevSibling = berufRow.last();

    // Versicherungsstatus
    var PRIVAT_VESICHERT = "privat versichert / freie Heilfürsorge";

    var versicherungsstatusSelect = $("<select />");
    var versicherungsstatusRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Wie sind Sie krankenversichert? *", content: versicherungsstatusSelect.prop("outerHTML")}));
    versicherungsstatusRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "versicherungsstatusRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("versicherungsstatusRow", rootElement)) {
        versicherungsstatusRow.insertAfter(prevSibling);

        versicherungsstatusRow.find("select").change(function() {
            var selectedVersicherungsstatus = $(this).val();

            var krankenversicherungsschutzRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
            var krankenversicherungsschutzSelect = krankenversicherungsschutzRow.find("select");
            var koopRow = SchrittRendererHelper.getItemByPseudoId("koopRow", rootElement);

            if (selectedVersicherungsstatus === PRIVAT_VESICHERT || !selectedVersicherungsstatus) {
                krankenversicherungsschutzRow.hide();
                koopRow.hide();

                that.getBO().vp.aktuellerVersicherungsschutz = null;
                krankenversicherungsschutzSelect.find("option:selected").prop("selected", false);

                that.getBO().vp.versicherungsnummer = null;
                koopRow.find("input").val("");
            } else {
                krankenversicherungsschutzRow.show();
            }

            that.getBO().vp.versicherungsstatus = selectedVersicherungsstatus;
        });
    } else {
        versicherungsstatusRow = SchrittRendererHelper.getItemByPseudoId("versicherungsstatusRow", rootElement);
    }

    versicherungsstatusSelect = versicherungsstatusRow.find("select");

    versicherungsstatusSelect.empty();
    versicherungsstatusSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svVersicherungsstatus) {
        this.getBO().svVersicherungsstatus.forEach(function(currVersicherungsstatus) {
            var optionVersicherungsstatus = $("<option value='" + currVersicherungsstatus  +"'>" + currVersicherungsstatus + "</option>");

            if (this.getBO().vp.versicherungsstatus  === currVersicherungsstatus) {
                optionVersicherungsstatus.attr("selected", "selected");
            }
            versicherungsstatusSelect.append(optionVersicherungsstatus);
        }, this);
    }

    versicherungsstatusRow.find(".error").remove();
    var fnAddErrorVersicherungsstatus = function(errorText) {
        var versicherungsstatusLabel = versicherungsstatusRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorVersicherungsstatus = $(fnErrorText({error: errorText}));

        errorVersicherungsstatus.insertBefore(versicherungsstatusLabel);
    };

    var validationErrorForVersicherungsstatus = SchrittRendererHelper.getError(this.validationResult, "vp.versicherungsstatus");
    if (validationErrorForVersicherungsstatus) {
        fnAddErrorVersicherungsstatus(validationErrorForVersicherungsstatus);
    }

    var fnValidationVersicherungsstatus = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (that.getBO().vp.versicherungsstatus && that.getBO().vp.versicherungsstatus.length > 0) {
            deferred.resolve(true);
        } else {
            deferred.resolve(false);
        }

        return promise;
    };

    var validationVersicherungsstatusObject = {
        fnErrorRemoval: function() {
            versicherungsstatusRow.find(".error").remove();
        },
        fnValidation: fnValidationVersicherungsstatus,
        fnAddError: function() {
            fnAddErrorVersicherungsstatus("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationVersicherungsstatusObject);

    prevSibling = versicherungsstatusRow.last();

    // Krankenversicherungsschutz
    var krankenversicherungsschutzSelect = $("<select />");
    var krankenversicherungsschutzRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Bei welcher gesetzlichen Krankenkasse? *", content: krankenversicherungsschutzSelect.prop("outerHTML")}));
    krankenversicherungsschutzRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "krankenversicherungsschutzRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("krankenversicherungsschutzRow", rootElement)) {
        krankenversicherungsschutzRow.insertAfter(prevSibling);

        krankenversicherungsschutzRow.find("select").change(function() {
            var displayKoop = false;
            var selectedGKV = $(this).val();
            if (that.getBO().svKoopGKV && that.getBO().svKoopGKV.length > 0) {
                displayKoop = that.getBO().svKoopGKV.some(function(koop) {
                    return selectedGKV === koop;
                });
            }

            that.getBO().vp.aktuellerVersicherungsschutz = selectedGKV;

            if (displayKoop) {
                krankenversicherungsschutzRow.next().show();
            } else {
                krankenversicherungsschutzRow.next().hide();
                krankenversicherungsschutzRow.next().find("input").val("");
                that.getBO().vp.versicherungsnummer = "";
            }
        });
    } else {
        krankenversicherungsschutzRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
    }

    krankenversicherungsschutzSelect = krankenversicherungsschutzRow.find("select");
    krankenversicherungsschutzSelect.prop("disabled", !this.getBO().vp.gkvAuswahlMoeglich);

    krankenversicherungsschutzSelect.empty();
    krankenversicherungsschutzSelect.append($("<option>Bitte auswählen</option>"));
    if (this.getBO().svGKV) {
        this.getBO().svGKV.forEach(function(currGKV) {
            var optionKrankenversicherungsschutz = $("<option value='" + currGKV  +"'>" + currGKV + "</option>");

            if (this.getBO().vp.aktuellerVersicherungsschutz === currGKV) {
                optionKrankenversicherungsschutz.attr("selected", "selected");
            }
            krankenversicherungsschutzSelect.append(optionKrankenversicherungsschutz);
        }, this);
    }
    if (this.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT || !this.getBO().vp.versicherungsstatus) {
        krankenversicherungsschutzRow.hide();
    }

    krankenversicherungsschutzRow.find(".error").remove();
    var fnAddErrorKrankenversicherungssschutz = function(errorText) {
        var krankenversicherungsschutzLabel = krankenversicherungsschutzRow.find("label").first();
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorKrankenversicherungsschutz = $(fnErrorText({error: errorText}));

        errorKrankenversicherungsschutz.insertBefore(krankenversicherungsschutzLabel);
    };

    var validationErrorForKrankenversicherungsschutz = SchrittRendererHelper.getError(this.validationResult, "vp.gkv");
    if (validationErrorForKrankenversicherungsschutz) {
        fnAddErrorKrankenversicherungssschutz(validationErrorForKrankenversicherungsschutz);
    }

    var fnValidationKrankenversicherungsschutz = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (that.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT) {
            deferred.resolve(true);
        } else {
            if (that.getBO().vp.aktuellerVersicherungsschutz && that.getBO().vp.aktuellerVersicherungsschutz.length > 0) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        }

        return promise;
    };

    var validationKrankenversicherungsschutzObject = {
        fnErrorRemoval: function() {
            krankenversicherungsschutzRow.find(".error").remove();
        },
        fnValidation: fnValidationKrankenversicherungsschutz,
        fnAddError: function() {
            fnAddErrorKrankenversicherungssschutz("Eine Auswahl ist erforderlich.");
        }
    };
    this.fnPruefen.push(validationKrankenversicherungsschutzObject);

    prevSibling = krankenversicherungsschutzRow.last();

    // Koop Partner
    var fnKoopInput = _.template(schrittTemplate.koopInputTemplate);
    var koopInput = $(fnKoopInput({ value : ("" || this.getBO().vp.versicherungsnummer)}));

    var koopRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Bitte nennen Sie uns Ihre GKV-Versichertennummer (Diese finden Sie z.B. auf Ihrer Versichertenkarte) *", content: koopInput.prop("outerHTML")}));
    koopRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "koopRow");
    if (!SchrittRendererHelper.itemWithPseudoIdExists("koopRow", rootElement)) {
        koopRow.insertAfter(prevSibling);

        koopRow.find("input").change(function() {
            that.getBO().vp.versicherungsnummer = $(this).val();
        });
    } else {
        koopRow = SchrittRendererHelper.getItemByPseudoId("koopRow", rootElement);
    }

    var fnCheckKoopIsRequired = function() {
        if (that.getBO().vp.versicherungsstatus === PRIVAT_VESICHERT)
            return false;

        return that.getBO().svKoopGKV.some(function(koop) {
            return that.getBO().vp.aktuellerVersicherungsschutz === koop;
        });
    }

    if (this.getBO().svKoopGKV && that.getBO().svKoopGKV.length > 0) {
        if (!fnCheckKoopIsRequired()) {
            koopRow.hide();
        }
    }

    koopRow.find(".error").remove();
    var fnAddErrorKoop = function(errorText) {
        var koopLabel = koopRow.find("label");
        var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
        var errorKoop = $(fnErrorText({error: errorText}));

        errorKoop.insertBefore(koopLabel);
    };
    var validationErrorForKoop = SchrittRendererHelper.getError(this.validationResult, "vp.gkvnr");
    if (validationErrorForKoop) {
        fnAddErrorKoop(validationErrorForKoop);
    }
    var fnValidationKoop = function() {
        var deferred = $.Deferred();
        var promise = deferred.promise();

        if (!fnCheckKoopIsRequired()) {
            deferred.resolve(true);
        } else if (!that.getBO().vp.versicherungsnummer || that.getBO().vp.versicherungsnummer.trim().length === 0) {
            deferred.resolve(false);
        } else if (!that.getBO().vp.versicherungsnummer.match(/^[A-Za-z]\d{9}$/)) {
            deferred.resolve(false);
        } else {
            deferred.resolve(true);
        }

        return promise;
    };
    var validationKoopObject = {
        fnErrorRemoval: function() {
            koopRow.find(".error").remove();
        },
        fnValidation: fnValidationKoop,
        fnAddError: function() {
            if (!that.getBO().vp.versicherungsnummer || that.getBO().vp.versicherungsnummer.trim().length === 0)
                fnAddErrorKoop("Die Angabe ist erforderlich.");
            else
                fnAddErrorKoop("Die Angabe ist ungültig.");
        }
    };
    this.fnPruefen.push(validationKoopObject);
//    this.fnPruefen = this.fnBerechnen.slice(0);

    prevSibling = koopRow.last();
}

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

var Schritt1RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt1RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt1RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(77);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt1RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;
    this.fnPruefen = [];
    this.fnBerechnen = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        var fnHeadTemplate = _.template(schrittTemplate.headTemplate);

        var headContent = $(fnHeadTemplate({produkt : this.getBO().produkt, anzeigepflicht: this.getBO().anzeigepflicht}));
        headContent.filter("div.block").eq(0).attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "headContent");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("headContent", rootElement)) {
            headContent.appendTo(rootElement);

            // Beiblatt Anzeigepflicht
            headContent.find("a").eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckBeiblattAnzeigepflichtBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
        } else {
            headContent = SchrittRendererHelper.getItemByPseudoId("headContent", rootElement);
            rootElement.find(".anzeigepflicht").remove();

            var anzeigepflicht = $(this.getBO().anzeigepflicht);
            anzeigepflicht.addClass("anzeigepflicht");
            anzeigepflicht.insertAfter(SchrittRendererHelper.getItemByPseudoId("anzeigepflichtAnchor", rootElement));
        }
        SchrittRendererHelper.getItemByPseudoId("ich_beantrage", rootElement).html(
            "Ich beantrage bei der " + (Util.getProp(this.getBO(), ["einstellung", "versicherer", "name"]) || "") + "  den Abschluss der zuvor ausgewählten Krankenversicherung(en), gegebenenfalls als Vertragsänderung.");

        var lastRow = SchrittRendererHelper.getItemByPseudoId("infobox");

        // Contentbox
        var fnContentBoxWithRow = _.template(schrittTemplate.contentBoxWithRow);
        var contentBoxWithRow = $(fnContentBoxWithRow());
        contentBoxWithRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "contentBox");
        contentBoxWithRow.hide();

        if (!SchrittRendererHelper.itemWithPseudoIdExists("contentBox", rootElement)) {
            contentBoxWithRow.insertAfter(lastRow);
        } else {
            contentBoxWithRow = SchrittRendererHelper.getItemByPseudoId("contentBox", rootElement);
        }

        contentBoxWithRow.find(".commonError").remove();
        if (validationResult && validationResult.state === "NOK") {
            var commonErrors = validationResult.validationErrors.filter(function(validationError) {
                return validationError.fieldName.indexOf("vp.tarif") === 0 || validationError.fieldName === "vp.";
            });

            _.chain(commonErrors).reverse().forEach(function(commonError) {
                var fnLabeledContentWithBigAntwortRowTemlate = _.template(schrittTemplate.labeledContentWithBigAntwortRowTemlate);

                var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
                var error = $(fnErrorText({error: commonError.message}));

                var errorRow = $(fnLabeledContentWithBigAntwortRowTemlate({label: "Es liegen folgende Fehler vor:", content: error.prop("outerHTML")}));
                errorRow.addClass("commonError");
                errorRow.prependTo(contentBoxWithRow);
            });
            if (commonErrors.length > 0) {
                contentBoxWithRow.show();
            }
        }


        var fnContentBoxWithRowAndImageTemplate = _.template(schrittTemplate.contentBoxWithRowAndImageTemplate);
        var contentBoxWithRowAndImageTemplate = $(fnContentBoxWithRowAndImageTemplate({content : "Ihre eingegebenen Daten"}));
        contentBoxWithRowAndImageTemplate.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "contentBoxIhreDaten");

        var contentBoxExists = SchrittRendererHelper.itemWithPseudoIdExists("contentBoxIhreDaten", rootElement);
        if (!contentBoxExists) {
            contentBoxWithRowAndImageTemplate.insertAfter(contentBoxWithRow);
        } else {
            contentBoxWithRowAndImageTemplate = SchrittRendererHelper.getItemByPseudoId("contentBoxIhreDaten");
        }

        // Versicherungsbeginn
        var fnVersicherungsbeginnRowTemplate = _.template(schrittTemplate.versicherungsbeginnRowTemplate);
        var versicherungsbeginnRow = $(fnVersicherungsbeginnRowTemplate());
        versicherungsbeginnRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "versicherungsbeginnRow");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("versicherungsbeginnRow", rootElement)) {
            versicherungsbeginnRow.appendTo(contentBoxWithRowAndImageTemplate);

            var versicherungsbeginnInput = versicherungsbeginnRow.find("input");
            versicherungsbeginnInput.val(this.getBO().versicherungsbeginn);
            //versicherungsbeginnInput.inputmask("99.99.9999", {alias: "date"});
            versicherungsbeginnInput.inputmask({alias: "datum"});
            var inputHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().versicherungsbeginn = res;
                } else {
                    that.getBO().versicherungsbeginn = unmaskedValue;
                }
            };
            versicherungsbeginnInput.keyup(inputHandler);
            versicherungsbeginnInput.blur(inputHandler);
        } else {
            versicherungsbeginnRow = SchrittRendererHelper.getItemByPseudoId("versicherungsbeginnRow", rootElement);
        }

        var validationErrorForVersicherungsbeginn = SchrittRendererHelper.getError(this.validationResult, "vp.versicherungsbeginn");
        versicherungsbeginnRow.find(".error").remove();
        var fnAddVersicherungsbeginnError = function(errorText) {
            var versicherungsbeginnLabel = SchrittRendererHelper.getItemByPseudoId("versicherungsbeginnLabel", versicherungsbeginnRow);
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorVersicherungsbeginn = $(fnErrorText({error: errorText}));

            errorVersicherungsbeginn.insertBefore(versicherungsbeginnLabel);
        }

        if (validationErrorForVersicherungsbeginn) {
            fnAddVersicherungsbeginnError(validationErrorForVersicherungsbeginn);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

        var validationVersicherungsbeginnObject = {
            fnErrorRemoval: function() {
                versicherungsbeginnRow.find(".error").remove();
            },
            fnValidation: function() {
                var deferred = $.Deferred();
                var promise = deferred.promise();

                var ok = false;
                if (that.getBO().versicherungsbeginn) {
                    var date = Util.parseAsDateObject(that.getBO().versicherungsbeginn);

                    if (date) {
                        ok = !(Util.isInPast(date));
                    }
                }
                deferred.resolve(ok);

                return promise;
            },
            fnAddError: function() {
                fnAddVersicherungsbeginnError("Die Angabe ist ungültig.");
            }
        };
        this.fnBerechnen.push(validationVersicherungsbeginnObject);

        lastRow = versicherungsbeginnRow;

        // Geburtsdatum
        var fnGeburtsdatumRowTemplate = _.template(schrittTemplate.geburtsdatumRowTemplate);
        var geburtsdatumRow = $(fnGeburtsdatumRowTemplate());
        geburtsdatumRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "geburtsdatumRow");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("geburtsdatumRow", rootElement)) {
            geburtsdatumRow.insertAfter(lastRow);

            var geburtsdatumInput = geburtsdatumRow.find("input");
            geburtsdatumInput.val(this.getBO().vp.geburtsdatum);
            //geburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
            geburtsdatumInput.inputmask({alias: "datum"});
            var inputHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().vp.geburtsdatum = res;
                } else {
                    that.getBO().vp.geburtsdatum = unmaskedValue;
                }
            };
            $(geburtsdatumInput).keyup(inputHandler);
            $(geburtsdatumInput).blur(inputHandler);
        } else {
            geburtsdatumRow = SchrittRendererHelper.getItemByPseudoId("geburtsdatumRow", rootElement);
        }

        var validationErrorForGeburtsdatum = SchrittRendererHelper.getError(this.validationResult, "vp.geburtsdatum");
        geburtsdatumRow.find(".error").remove();
        var fnAddGeburtsdatumError = function(errorText) {
            var geburtstagLabel = SchrittRendererHelper.getItemByPseudoId("geburtstagLabel", geburtsdatumRow);
            var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
            var errorGeburtstag = $(fnErrorText({error: errorText}));

            errorGeburtstag.insertBefore(geburtstagLabel);
        }

        if (validationErrorForGeburtsdatum) {
            fnAddGeburtsdatumError(validationErrorForGeburtsdatum);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

        var validationGeburtsdatumObject = {
            fnErrorRemoval: function() {
                geburtsdatumRow.find(".error").remove();
            },
            fnValidation: function() {
                var deferred = $.Deferred();
                var promise = deferred.promise();

                var ok = false;
                if (that.getBO().vp.geburtsdatum) {
                    var date = Util.parseAsDateObject(that.getBO().vp.geburtsdatum);

                    if (date) {
                        if (Util.isToday(date) || Util.isInPast(date)) {
                            var alter = Util.calculateAlter(date);

                            if (alter < 120) {
                                ok = true;
                            }
                        }
                    }
                }
                deferred.resolve(ok);

                return promise;
            },
            fnAddError: function() {
                fnAddGeburtsdatumError("Die Angabe ist ungültig.");
            }
        };
        this.fnBerechnen.push(validationGeburtsdatumObject);


//        var validationOptKrankenversicherungsschutzObject = {
//            fnErrorRemoval: function() {
//            	//
//                //krankenversicherungsschutzRow.find(".error").remove();
//            },
//            fnValidation: function() {
//                var deferred = $.Deferred();
//                var promise = deferred.promise();
//
//                if (that.getBO().vp.aktuellerVersicherungsschutz && that.getBO().vp.aktuellerVersicherungsschutz.length > 0 && that.getBO().vp.aktuellerVersicherungsschutz=='ausländische gesetzliche Krankenversicherung') {
//                	deferred.resolve(false);
//            	} else {
//            		deferred.resolve(true);
//            	}
//
//                return promise;
//            },
//            fnAddError: function() {
//            	var fnAddErrorKrankenversicherungssschutz = function(errorText) {
//                    var krankenversicherungsschutzRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
//                    krankenversicherungsschutzRow.find(".error").remove();
//
//                    var krankenversicherungsschutzLabel = krankenversicherungsschutzRow.find("label").first();
//                    var fnErrorText = _.template(schrittTemplate.errorLabelTemplate);
//                    var errorKrankenversicherungsschutz = $(fnErrorText({error: errorText}));
//                    errorKrankenversicherungsschutz.insertBefore(krankenversicherungsschutzLabel);
//                };
//                fnAddErrorKrankenversicherungssschutz('Die Tarife können leider nicht online abgeschlossen werden, weil Frage [604] mit \"ausländische gesetzliche Krankenversicherung\" beantwortet wurde. Um die Voraussetzungen für die Versicherungsfähigkeit prüfen zu können, wenden Sie sich bitte an einen Betreuer. Danke!');
//            }
//        };
//        this.fnBerechnen.push(validationOptKrankenversicherungsschutzObject);


        lastRow = geburtsdatumRow;

        // Fragen

        function fnAddFrageValidator(oFrage, validationForFrageObject) {
            that.fnPruefen.push(validationForFrageObject);
            if (oFrage.fragetyp === "TARIFIERUNGS_FRAGE") {
                that.fnBerechnen.push(validationForFrageObject);
            }
        }

        var aTarifierungsfragen = this.getBO().vp.fragen.filter(function(oFrage) {
            return oFrage.fragetyp === "TARIFIERUNGS_FRAGE" && oFrage.angabeTyp !== "REISEZEITRAUM";
        });
        lastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, true, fnAddFrageValidator, null, aTarifierungsfragen, false, false, lastRow);

        // berechnen
        var fnBerechnenSchritt3ButtonRowTemplate = _.template(schrittTemplate.berechnenSchritt3ButtonRowTemplate);
        var berechnenSchritt3ButtonRow = $(fnBerechnenSchritt3ButtonRowTemplate());
        berechnenSchritt3ButtonRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "berechnenSchritt3ButtonRow");

        if (!SchrittRendererHelper.itemWithPseudoIdExists("berechnenSchritt3ButtonRow", rootElement)) {
            berechnenSchritt3ButtonRow.find("a").eq(0).click(function(event) {
                event.preventDefault();

                that.setBusy(true);
                that._berechneAntragsfragen().always(function() {
                    that.setBusy(false);
                });
            });

            berechnenSchritt3ButtonRow.insertAfter(lastRow);
        } else {
            berechnenSchritt3ButtonRow = SchrittRendererHelper.getItemByPseudoId("berechnenSchritt3ButtonRow", rootElement);
        }
        lastRow = berechnenSchritt3ButtonRow;

        // Allgemeine Fragen
        if (this.getBO().vp.antragsfragenBerechnet) {
            $(".antragsfragen").remove();

            if (validationResult && validationResult.vpTarife && validationResult.vpTarife.length>0) {
	            var zw = "monatlich";
	            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(validationResult.vpTarife[0], zw);
	            var zahlungsweiseUndGesamtbeitragOhneRZ = SchrittRendererHelper.determineZahlbeitragTextAndValue(validationResult.vpTarife[0].beitragOhneRZ, zw);
	            var rzTextAndBeitrag = {
	            	text: ' + Risikozuschlag',
	            	wert: null
	            };
	            if (validationResult.vpTarife.length > 0) {
	                var tarif = validationResult.vpTarife[0];
	                if (tarif.risikozuschlaege && tarif.risikozuschlaege.length>0) {
	                	var rz = 0;
	                	for (var i=0; i<tarif.risikozuschlaege.length; i++)
	                		rz += tarif.risikozuschlaege[i].ro_rzAbsolut;

	                	if (tarif.risikozuschlaege.length==1 && tarif.risikozuschlaege[0].webText && tarif.risikozuschlaege[0].webText.length>0)
	                		rzTextAndBeitrag.text = tarif.risikozuschlaege[0].webText;

	                	var rzAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(rz, zw);
	                	rzTextAndBeitrag.wert = rzAndBeitrag.value;
	                }
	            }

	            var uebersichtTemplate = _.template(schrittTemplate.uebersichtTemplate);
	            var uebersicht = $(uebersichtTemplate({
	            	produkt: this.getBO().produkt,
	            	zahlungsweise: zw,
	            	tarifbeitrag: zahlungsweiseUndGesamtbeitragOhneRZ.value,
	            	rzText: rzTextAndBeitrag.text,
	            	rzWert: rzTextAndBeitrag.wert,
	            	beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value,
	            	zahlungsweiseGesamtbeitrag: "Monatlicher Gesamtbeitrag"}));
	            uebersicht.appendTo(lastRow.parent());
	            if (rzTextAndBeitrag.wert!=null) {
	            	SchrittRendererHelper.getItemByPseudoId("tarif_rz_row").show();
	            }
            }

            contentBoxWithRowAndImageTemplate = $(fnContentBoxWithRowAndImageTemplate({content : "Angaben zur zu versichernden Person"}));
            contentBoxWithRowAndImageTemplate.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "contentBoxAngabenZurVP");
            contentBoxExists = SchrittRendererHelper.itemWithPseudoIdExists("contentBoxAngabenZurVP", rootElement);
            if (!contentBoxExists) {
                contentBoxWithRowAndImageTemplate.insertAfter(lastRow.parent());
            } else {
                contentBoxWithRowAndImageTemplate = SchrittRendererHelper.getItemByPseudoId("contentBoxAngabenZurVP");
            }

            // Angaben zur VP
//            this.fnPruefen.push(validationOptKrankenversicherungsschutzObject);
            buildAngabenZurVPAndAddToRow.call(this, schrittTemplate, contentBoxWithRowAndImageTemplate);

            var newLastRow = FrageHelper.buildAndAppendFragen.call(this, schrittTemplate, true, fnAddFrageValidator, null, this.getBO().vp.antragsfragen, false, true, contentBoxWithRowAndImageTemplate.children().last());
            lastRow.nextAll().addClass("antragsfragen");
            lastRow = newLastRow;

            if (this.getBO().vp.antragsfragen && this.getBO().vp.antragsfragen.length > 0) {
                var fnWeiterSchritt3ButtonRowTemplate = _.template(schrittTemplate.weiterSchritt3ButtonRowTemplate);
                var weiterSchritt3ButtonRow = $(fnWeiterSchritt3ButtonRowTemplate());
                weiterSchritt3ButtonRow.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "weiterSchritt3ButtonRow");

                if (!SchrittRendererHelper.itemWithPseudoIdExists("weiterSchritt3ButtonRow", rootElement)) {
                    weiterSchritt3ButtonRow.find("a").eq(0).click(function(event) {
                        event.preventDefault();

                        that.setBusy(true);
                        that._berechneUndWeiter().always(function() {
                            that.setBusy(false);
                        });
                    });

                    weiterSchritt3ButtonRow.appendTo(SchrittRendererHelper.getItemByPseudoId("hinweis_block", rootElement));
                } else {
                    weiterSchritt3ButtonRow = SchrittRendererHelper.getItemByPseudoId("weiterSchritt3ButtonRow", rootElement);
                }
                lastRow = weiterSchritt3ButtonRow;
            }

            var weiterfuehrendeInformationenRow = $(_.template(schrittTemplate.weiterfuehrendeInformationenRow)());
            if (SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement).length<1) {
                weiterfuehrendeInformationenRow.insertAfter(SchrittRendererHelper.getItemByPseudoId("hinweis_block", rootElement));
            }

            var link = SchrittRendererHelper.getItemByPseudoId("tariferklaerung");
            link.click(function(e) {
                e.preventDefault();

                that._checkDeferreds(that.fnBerechnen).then(function() {
	                var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
	                getAndOpenDocument(druckstueckBOandUrl);
                }).fail(function() {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                });
            });

            // Vorschlag
            link = SchrittRendererHelper.getItemByPseudoId("angebot");
            link.click(function(e) {
                e.preventDefault();

                that._checkDeferreds(that.fnBerechnen).then(function() {
                    var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                    getAndOpenDocument(druckstueckBOandUrl);
                }).fail(function() {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                });

            });

            link = SchrittRendererHelper.getItemByPseudoId("aussergerichtliche_streitbeilegung");
            link.prop("href", Util.getProp(this.getBO(), ["einstellung", "versicherer", "urlStreitbeilegung"]));
        }

        defer.resolve();

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            if (this.validationResult && this.validationResult.context && this.validationResult.context.performPruefen) {
                this._performPruefen();
            } else {
                SchrittRendererHelper.scrollToFirstError(this.rootElement);
            }
        }

        window.jQuery(document).trigger('if6_page_ready');

        setTimeout(function() {
            var staatsangehoerigkeitRow = SchrittRendererHelper.getItemByPseudoId("staatsangehoerigkeitRow", rootElement);
            var helpTextTemplate = _.template(schrittTemplate.helpText);
            var helpText = $(helpTextTemplate({helptext: "Bitte wählen Sie die Staatsangehörigkeit der zu versichernden Person aus."}));
            helpText.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "staatsangehoerigkeitHelpText");
            if (!SchrittRendererHelper.itemWithPseudoIdExists("staatsangehoerigkeitHelpText", rootElement)) {
                helpText.insertAfter(staatsangehoerigkeitRow.find("select"));
            }

            var taetigkeitsstatusRow = SchrittRendererHelper.getItemByPseudoId("taetigkeitsstatusRow", rootElement);
            helpText = $(helpTextTemplate({helptext: "Damit wir prüfen können, ob Sie im ausgewählten Tarif versichert werden können, benötigen wir den Tätigkeitsstatus."}));
            helpText.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "taetigkeitsstatusHelpText");
            if (!SchrittRendererHelper.itemWithPseudoIdExists("taetigkeitsstatusHelpText", rootElement)) {
                helpText.insertAfter(taetigkeitsstatusRow.find("select"));
            }

            var berufRow = SchrittRendererHelper.getItemByPseudoId("berufRow", rootElement);
            helpText = $(helpTextTemplate({helptext: "Damit wir prüfen können, ob Sie im ausgewählten Tarif versichert werden können, benötigen wir Ihren ausgeübten Beruf."}));
            helpText.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "berufHelpText");
            if (!SchrittRendererHelper.itemWithPseudoIdExists("berufHelpText", rootElement)) {
                helpText.insertAfter(berufRow.find("input"));
            }

            var gkvRow = SchrittRendererHelper.getItemByPseudoId("krankenversicherungsschutzRow", rootElement);
            helpText = $(helpTextTemplate({helptext: "Dank der Kooperation zu ausgewählten Krankenkassen können wir Ihnen einen vergünstigten Beitrag anbieten – Sollten Sie Mitglied bei dem entsprechenden Partner sein. Geben Sie hierfür bitte den Namen Ihrer Krankenkasse oder Gesellschaft an."}));
            helpText.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), "krankenversicherungsschutzHelpText");
            if (!SchrittRendererHelper.itemWithPseudoIdExists("krankenversicherungsschutzHelpText", rootElement)) {
                helpText.insertAfter(berufRow.find("select"));
            }

            window.jQuery(document).trigger('if6_page_ready');
        }, 0);


    }.bind(this));

    return defer.promise();
};

Schritt1RendererIF6.prototype._getBerufSuggestionsFor = function(taetigkeitsstatus, beruf) {
    return this.oProdukt.getBerufSuggestionsFor(taetigkeitsstatus, beruf);
};

Schritt1RendererIF6.prototype._getBerufSuggestionsFor = function(taetigkeitsstatus, beruf) {
    return this.oProdukt.getBerufSuggestionsFor(taetigkeitsstatus, beruf);
};

Schritt1RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt1RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt1RendererIF6.prototype._getDruckstueckBeiblattAnzeigepflichtBOandUrl = function() {
    return this.oProdukt.getDruckstueckBeiblattAnzeigepflichtBOandUrl(this.getBO());
};

Schritt1RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt1RendererIF6.prototype._performPruefen = function() {
    var deferred = $.Deferred();

    this._checkDeferreds(this.fnPruefen).fail(function() {
        deferred.reject();
        SchrittRendererHelper.scrollToFirstError(this.rootElement);
    }.bind(this));

    return deferred.promise();
};

Schritt1RendererIF6.prototype._berechneAntragsfragen = function() {
    var deferred = $.Deferred();

    this._checkDeferreds(this.fnBerechnen).then(function() {
        this.oProdukt.berechneAntragsfragen().then(function() {
            deferred.resolve.apply(deferred, arguments);
        }).fail(function() {
            deferred.reject.apply(deferred, arguments);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        });
    }.bind(this)).fail(function() {
        deferred.reject();
        SchrittRendererHelper.scrollToFirstError(this.rootElement);
    }.bind(this));

    return deferred.promise();
};

Schritt1RendererIF6.prototype._berechneUndWeiter = function() {
    var deferred = $.Deferred();

    this._checkDeferreds(this.fnPruefen).then(function() {
        this.oProdukt.berechne().then(function() {
            deferred.resolve.apply(deferred, arguments);
        }).fail(function() {
            deferred.reject.apply(deferred, arguments);
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        });
    }.bind(this)).fail(function() {
        deferred.reject();
        SchrittRendererHelper.scrollToFirstError(this.rootElement);
    }.bind(this));

    return deferred.promise();
};

Schritt1RendererIF6.prototype._checkDeferreds = function(fnWithDeferreds) {
    var deferred = $.Deferred();

    var promises = [];

    fnWithDeferreds.forEach(function(oFnWithDeferred) {
        oFnWithDeferred.fnErrorRemoval();

        var promise = oFnWithDeferred.fnValidation();
        promises.push(promise);

        $.when(promise).then(function(result) {
            if (!result) {
                oFnWithDeferred.fnAddError();
            }
        });
    });

    $.when.apply($, promises).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
            deferred.resolve();
        } else {
            deferred.reject();
        }
    }.bind(this));

    return deferred.promise();
};

module.exports = Schritt1RendererIF6;


/***/ }),
/* 77 */
/***/ (function(module, exports) {

module.exports = {
    headTemplate: ' \
                    <!-- Progress / Header --> \
                    <div class="block" kv_ref="kvo_content"> \
                        <ul class="progress"> \
                            <li class="active">1</li> \
                            <li class="">2</li> \
                            <li class="">3</li> \
                            <li class="">4</li> \
                        </ul>\
                        <h2>Antrag auf <%= produkt %></h2> \
                    </div> \
                    <!-- Contentbereich --> \
                    <div class="block" kv_ref="kvo-content"> \
                        <div class="bline btext-only"> \
                            <div><strong kv_ref="ich_beantrage"></strong><br> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                    </div> \
                    <div class="block" kv_ref="infobox"> \
                        <div class="bline btext-only"> \
                            <h3>Vorvertragliche Anzeigepflicht</h3> \
                            <div><span kv_ref="anzeigepflichtAnchor"></span><%= anzeigepflicht %>&nbsp;\
&nbsp;<a href="javascript:void(0);">Beiblatt zur vorvertraglichen Anzeigepflicht.</a>\
                            </div> \
                            <br class="bterm"> \
                        </div> \
                    </div> \
                    <!-- Dateneingabeblock --> \
                    <!-- Hinweisblock --> \
                    <div class="block" kv_ref="hinweis_block"> \
                        <div class="bline btext-only"> \
                            <div><strong>Hinweis:</strong> Die mit einem (*) gekennzeichneten Felder benötigen wir für die Bearbeitung Ihres Antrags.<br> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                    </div>',

    geburtsdatumRowTemplate : ' \
                                <div class="bline" kv_ref="geburtsdatumRow"> \
                                    <label class="longlabel" kv_ref="geburtstagLabel">Geburtsdatum<em>*</em>:</label> \
                                    <input type="text" name="p_geb_datum" class="il" maxlength="10" placeholder="TT.MM.JJJJ"> \
                                    <br class="bterm" /> \
                                    <br class="bterm" /> \
                                </div> \
                                ',

    versicherungsbeginnRowTemplate : ' \
                                <div class="bline" kv_ref="versicherungsbeginnRow"> \
                                    <label class="longlabel" kv_ref="versicherungsbeginnLabel">Versicherungsbeginn<em>*</em>:</label> \
                                    <input type="text" name="p_vers_beginn" class="il" maxlength="10" placeholder="TT.MM.JJJJ"> \
                                    <br class="bterm" /> \
                                    <br class="bterm" /> \
                                </div> \
                                ',

    reisebeginnRowTemplate : ' \
                                <div class="bline"> \
                                    <label>Beginn der Reise<em>*</em>:</label> \
                                    <input type="text" name="p_reise_beginn" class="il" maxlength="10" placeholder="TT.MM.JJJJ"> \
                                    <br class="bterm" /> \
                                    <br class="bterm" /> \
                                </div> \
                                ',

    dateInputTemplate : '<input type="text" class="il" maxlength="10" placeholder="TT.MM.JJJJ">',

    stringInputTemplate : '<input type="text" class="il" maxlength="30">',

    berufInputTemplate: '<input placeholder="" type="text" value="<%= beruf %>" maxlength="35" />',

    koopInputTemplate: '<input placeholder="" type="text" value="<%= value %>" maxlength="10" />',

    labeledContentWithMediumColumnsRowTemplate:
				        '<div class="bline"> \
				            <label class="longlabel" style="height: auto; float: none;" ><%= label %><%= required %></label> \
				            <%= content %> \
				            <br class="bterm" /> \
				        </div>',

    labeledFrageContentWithMediumColumnsRowTemplate:
                        '<div class="bline"> \
                            <label class="longlabel" style="height: auto; float: none; width: 90%; text-align: left;" ><%= label %></label> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    labeledNrContentWithMediumColumnsRowTemplate:
                        '<div class="bline"> \
                            <label class="longlabel" style="height: auto; float: none; width: 90%; text-align: left;" ><%= number %>. <%= label %></label> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    labeledContentWithBigAntwortRowTemlate:
                        '<div class="bline"> \
                            <label class="longlabel" style="height: auto;" ><%= label %></label> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    labeledContentNumberedWithMediumColumnsRowTemplate:
                        '<div class="bline"> \
                            <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label class="longlabel" style="height: auto;"><%= label %> <%= required %></label></div> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

    __labeledContentNumberedAndIdWithMediumColumnsRowTemplateOLD__:
                        '<div class="bline"> \
                            <div style="width: 1.6px; float: left"><%= number %>.</div><div style="margin-left: 1.6rem; margin-bottom: 0.2rem;"><label class="longlabel" style="height: auto;" ><%= label %> <small style="color: black">[<%= id %>]</small> <%= required %></label></div> \
                            <%= content %> \
                            <br class="bterm" /> \
                        </div>',

	labeledContentNumberedAndIdWithMediumColumnsRowTemplate:
					    '<div class="bline"> \
							<label class="longlabel" style="height: auto;" ><%= number %>. <%= label %></label> \
					        <div><%= content %> \
					        <br class="bterm" /></div> \
					    </div>',

    radioInputWith2ItemsTemplate: '\
                        <div class="bline"> \
                            <label class="longlabel" style="height: auto"><%= label %><em></em>:</label> \
    	                    <div>\
                            <input id="<%= idOne %>" name="<%= name %>" value="<%= valueOne %>" type="radio"> \
                            <label><%= valueOne %></label> \
                            <br class="bterm" /> \
    	                    </div>\
                        </div>  \
                        <div class="bline bcontinue"> \
                            <input id="<%= idTwo %>" name="<%= name %>" value="<%= valueTwo %>" type="radio"> \
                            <label><%= valueTwo %></label> \
                           <br class="bterm" /> \
                           <br class="bterm" /> \
                        </div>',


    radioInputWith2ItemsNumberedTemplate: '\
                        <div class="bline"> \
                            <label class="longlabel" style="height: auto"><%= number %>. <%= label %><em><%= required %></em>:</label> \
                            <div>\
                            <input id="<%= idOne %>" name="<%= name %>" value="<%= valueOne %>" type="radio"><span class="radio"></span> \
                            <label><%= valueOne %></label> \
                            <br class="bterm" /> \
                            </div>\
                        </div>  \
                        <div class="bline bcontinue"> \
                            <input id="<%= idTwo %>" name="<%= name %>" value="<%= valueTwo %>" type="radio"><span class="radio"></span> \
                            <label><%= valueTwo %></label> \
                           <br class="bterm" /> \
                           <br class="bterm" /> \
                        </div>',

    radioInputWith2ItemsNumberedWithIdTemplate:
                        '<div class="bline"> \
                            <label class="longlabel" style="height: auto"><%= number %>. <%= label %><em><small style="color: black">[<%= id %>]</small><%= required %></em>:</label> \
                            <div>\
                            <input id="<%= idOne %>" name="<%= name %>" value="<%= valueOne %>" type="radio"><span class="radio"></span> \
                            <label><%= valueOne %></label> \
    	                    <br class="bterm" /> \
                            </div>\
                        </div>  \
                        <div class="bline bcontinue"> \
                            <input id="<%= idTwo %>" name="<%= name %>" value="<%= valueTwo %>" type="radio"><span class="radio"></span> \
                            <label><%= valueTwo %></label> \
                            <br class="bterm" /> \
                        </div>',

    contentBoxWithRow: '\
                        <div class="contentbox block"> \
                            <div class="bline"> \
                            </div>  \
                        </div> \
                        ',

    contentBoxWithRowAndImageTemplate: ' \
                        <div class="contentbox block"> \
                            <h3><%= content %></h3> \
                            <div class="bline"> \
                            </div>  \
                        </div> \
                        ',

    errorLabelTemplate: '\
                        <div class="blineover error"> \
                            <div class="msgerror"> \
                                <ul> \
                                    <li><%- error %></li> \
                                </ul> \
                            </div> \
                        </div>',

    uebersichtTemplate: ' \
                        <div class="block"> \
                    	    <h1 class="text-grey">Ihre Produktauswahl</h1> \
                            <div class="table"> \
                                <table> \
                                    <tbody> \
                                        <tr> \
                                            <th class="left header">Tarifname</th> \
                                            <th class="header"><%- produkt %></th> \
                                        </tr> \
    							        <tr> \
    								        <th class="left header">Tarifbeitrag <%- zahlungsweise %></th> \
    								        <td class="header"><%- tarifbeitrag %> \u20AC</td> \
    								    </tr> \
    							        <tr kv_ref="tarif_rz_row" style="display:none"> \
    								        <th class="left header"><%= rzText %> <%- zahlungsweise %></th> \
    								        <td class="header"><%- rzWert %> \u20AC</td> \
    								    </tr> \
                                    </tbody> \
                                    <tfoot> \
                                        <tr> \
                                            <th class="left header"><%- zahlungsweiseGesamtbeitrag %></th> \
                                            <td class="header"><%- beitragGesamtbeitrag %> \u20AC</td> \
                                        </tr> \
                                    </tfoot> \
                                </table> \
                                <br class="bterm" /> \
                            </div> \
                        </div>',

    berechnenSchritt3ButtonRowTemplate: ' \
                                    <div class="buttonline"> \
                                        <div class="bgroup2"> \
                                        </div> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <a class="GesundheitGLOBALPREMIUM" href="javascript:void(0);"><input type="button" value="berechnen" onclick="javascript:void(0);" class="" title="berechnen"></input></a> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    ',

    weiterSchritt3ButtonRowTemplate: ' \
                                    <div class="buttonline"> \
                                        <div class="bgroup2"> \
                                        </div> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <a class="GesundheitGLOBALPREMIUM" href="javascript:void(0);"><input type="button" value="weiter zu Schritt 2" onclick="javascript:void(0);" class="" title="weiter zu Schritt 2"></input></a> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    ',

    weiterfuehrendeInformationenRow: '\
                <div class="block" style="height: auto;" kv_ref="weiterfuehrendeInformationenRow"> \
                    <div class="service_center_box_title">Weiterführende Informationen</div> \
                    <div class="service_center_box_parsys parsys"> \
				        <div class="parbase service_center_thema section"> \
					        <a class="service_center_thema_link" href="javascript:void(0);" kv_ref="tariferklaerung"> \
					            <span class="service_center_thema_link_text">Tariferklärung</span> \
					        </a> \
					    </div> \
				        <div class="parbase service_center_thema section"> \
					        <a class="service_center_thema_link" href="javascript:void(0);" kv_ref="angebot"> \
					            <span class="service_center_thema_link_text">Angebot drucken</span> \
					        </a> \
					    </div> \
                        <div class="parbase service_center_thema section"> \
                            <a class="service_center_thema_link" target="_blank" href="javascript:void(0);" kv_ref="aussergerichtliche_streitbeilegung"> \
                                <span class="service_center_thema_link_text">Außergerichtliche Streitbeilegung</span> \
                            </a> \
                        </div> \
                    </div> \
                </div>',

    helpText: '<div class="helptxt" title="<%= helptext %>">?</div>',

    rowSeparator: '<br class="bterm" />',

    emptyContent: '<div style="margin-bottom: 5px">'
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);
var FrageHelper = __webpack_require__(7);

function buildKontoinhaber() {
    var kontoinhaber = "";
    if (this.getBO().vn.vorname) {
        kontoinhaber = this.getBO().vn.vorname;
    }
    if (this.getBO().vn.name) {
        if (kontoinhaber.length > 0)
            kontoinhaber += " ";
        kontoinhaber += this.getBO().vn.name;
    }

    return kontoinhaber;
}

function buildPropExtractorFn(obj, prop) {
    return function() {
        return Util.getProp(obj, [prop]) || "";
    };
}

function buildDefaultValidatorFn() {
    return function(propVal) {
        if (propVal === null || propVal.trim().length === 0) {
            return false;
        }

        return true;
    };
}

function buildErrorCheckFn(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, fieldName) {
    var validationAndErrorText = {
        fnValidation : buildDefaultValidatorFn(),

        errorText : "Die Angabe im Feld " + (fieldName ? fieldName + " " : "")  + "ist erforderlich."
    }

    return buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, [validationAndErrorText]);
}

function buildErrorCheckFnWithErrorHandling(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText) {
    var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");

    return function() {
        var deferred = $.Deferred();

        var subDeferreds = [];

        aFnValidationAndErrorText.every(function(validationAndErrorText) {
            var fnValidation = validationAndErrorText.fnValidation;
            var ok = fnValidation(fnPropExtractor());

            label.parent().find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
            var addError = function() {
                var error = $(fnErrorLabelTemplate({error: validationAndErrorText.errorText}));
                error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                error.insertAfter(label);
            }

            var subDeferred = $.Deferred();
            var proceed;

            if (Util.isPromise(ok)) {
                proceed = true;
                ok.then(function() {
                    subDeferred.resolve(true);
                }).fail(function() {
                    addError();
                    subDeferred.resolve(false);
                });
            } else if (ok) {
                subDeferred.resolve(true);
                proceed = true;
            } else {
                addError();
                subDeferred.resolve(false);
                proceed = false;
            }

            subDeferreds.push(subDeferred.promise());

            return proceed;
        });

        $.when.apply($, subDeferreds).then(function() {
            if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        });

        return deferred.promise();
    };
}

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

var Schritt2Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt2Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt2Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(79);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt2Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate({
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: Util.getProp(this.getBO(), ["einstellung", "modul", "tariftyp"]) || "",
                lastschriftText: Util.getTextFromEncodedObject(this.getBO().texte.lastschrift)
            }));
            content.appendTo(rootElement);

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                that._pruefe();
            });

            var links = SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement).find("a");
            links.eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            links.eq(2).prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

            var fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);
            var errorTextInputIsRequired = "Die Angabe im Feld ist erforderlich.";

            // VP

            var anrede = this.getBO().vp.anrede === "HERR" ? "Herr" : "Frau";
            SchrittRendererHelper.getItemByPseudoId("vp_anrede", rootElement, "input").val(anrede);

            var vpVornameInput = SchrittRendererHelper.getItemByPseudoId("vp_vorname", rootElement, "input");
            vpVornameInput.val(this.getBO().vp.vorname);
            vpVornameInput.change(function() {
                that.getBO().vp.vorname = $(this).val();

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.vorname = that.getBO().vp.vorname;

                    SchrittRendererHelper.getItemByPseudoId("vn_vorname", rootElement, "input").val(that.getBO().vn.vorname);
                    var kontoinhaber = buildKontoinhaber.call(that);
                    SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vp, "vorname"), "vp_vorname", "Vorname"));

            var vpNameInput = SchrittRendererHelper.getItemByPseudoId("vp_name", rootElement, "input");
            vpNameInput.val(this.getBO().vp.name || "");
            vpNameInput.change(function() {
                that.getBO().vp.name = $(this).val();

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.name = that.getBO().vp.name;

                    SchrittRendererHelper.getItemByPseudoId("vn_name", rootElement, "input").val(that.getBO().vn.name);
                    var kontoinhaber = buildKontoinhaber.call(that);
                    SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vp, "name"), "vp_name", "Familienname"));

            SchrittRendererHelper.getItemByPseudoId("vp_geburtsdatum", rootElement, "input").val(this.getBO().vp.geburtsdatum);

            // VN

            if (!this.getBO().vp.isVn) {
                SchrittRendererHelper.getItemByPseudoId("hinweis", rootElement).show();
            } else {
                SchrittRendererHelper.getItemByPseudoId("hinweis", rootElement).hide();
            }

            var vnAnredeInput = SchrittRendererHelper.getItemByPseudoId("vn_anrede", rootElement, "select");
            if (this.getBO().vn.anrede) {
                vnAnredeInput.val(this.getBO().vn.anrede);
            }
            if (this.getBO().vp.isVn) {
                vnAnredeInput.prop("disabled", true);
            } else {
                vnAnredeInput.prop("disabled", false);
            }
            vnAnredeInput.change(function() {
                that.getBO().vn.anrede = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "anrede"), "vn_anrede", "Anrede"));

            var vnTitelInput = SchrittRendererHelper.getItemByPseudoId("vn_titel", rootElement, "input");
            vnTitelInput.val(this.getBO().vn.titel || "");
            vnTitelInput.change(function() {
                that.getBO().vn.titel = $(this).val();
            });

            var vnVornameInput = SchrittRendererHelper.getItemByPseudoId("vn_vorname", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnVornameInput.prop("disabled", true);
            } else {
                vnVornameInput.prop("disabled", false);
            }
            vnVornameInput.val(this.getBO().vn.vorname || "");
            vnVornameInput.change(function() {
                that.getBO().vn.vorname = $(this).val();

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "vorname"), "vn_vorname", "Vorname"));

            var vnNameInput = SchrittRendererHelper.getItemByPseudoId("vn_name", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnNameInput.prop("disabled", true);
            } else {
                vnNameInput.prop("disabled", false);
            }
            vnNameInput.val(this.getBO().vn.name || "");
            vnNameInput.change(function() {
                that.getBO().vn.name = $(this).val();

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "name"), "vn_name", "Familienname"));

            var vnGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId("vn_geburtsdatum", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnGeburtsdatumInput.prop("disabled", true);
            } else {
                vnGeburtsdatumInput.prop("disabled", false);
            }
            vnGeburtsdatumInput.val(this.getBO().vn.geburtsdatum || "");
            //vnGeburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
            vnGeburtsdatumInput.inputmask({alias: "datum"});
            var geburtsdatumHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().vn.geburtsdatum = res;
                } else {
                    that.getBO().vn.geburtsdatum = unmaskedValue;
                }
            };
            vnGeburtsdatumInput.keyup(geburtsdatumHandler);
            vnGeburtsdatumInput.blur(geburtsdatumHandler);
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "geburtsdatum"), "vn_geburtsdatum", [{
                fnValidation: function(propVal) {
                    return !!Util.parseAsDateAndFormatAsString(propVal);
                },

                errorText: "Die Angabe im Feld ist kein gültiges Datum."
            }, {
                fnValidation: function(propVal) {
                    var res = Util.parseAsDateObject(propVal);

                    if (res) {
                        return Util.calculateAlter(res) >= 18;
                    }
                },
                errorText: "Der/Die Versicherungsnehmer/in muss mindestens 18 Jahre alt sein."
            }]));

            var vnPlzInput = SchrittRendererHelper.getItemByPseudoId("vn_plz", rootElement, "input");
            vnPlzInput.val(this.getBO().vn.plz || "");
            vnPlzInput.change(function() {
                that.getBO().vn.plz = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "plz"), "vn_plz", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\d{5}$/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige Postleitzahl."
            }, {
                fnValidation: function(propVal) {
                    //if (!that.getBO().einstellung.betreuer && (that.getBO().einstellung.betreuerwahl && that.getBO().betreuer.manuelleAuswahl === false || !that.getBO().einstellung.betreuerwahl))  {
                        return that.oProdukt.checkBetreuergebiet(propVal);
                    /*} else {
                        return true;
                    }*/
                },

                errorText: "Die Postleitzahl befindet sich nicht in einem von uns betreuten Gebiet."
            }]));

            var vnOrtInput = SchrittRendererHelper.getItemByPseudoId("vn_ort", rootElement, "input");
            vnOrtInput.val(this.getBO().vn.ort || "");
            vnOrtInput.change(function() {
                that.getBO().vn.ort = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "ort"), "vn_ort", "Ort"));

            var vnStrasseInput = SchrittRendererHelper.getItemByPseudoId("vn_strasse", rootElement, "input");
            vnStrasseInput.val(this.getBO().vn.strasse || "");
            vnStrasseInput.change(function() {
                that.getBO().vn.strasse = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "strasse"), "vn_strasse", "Strasse"));

            var vnHausnrInput = SchrittRendererHelper.getItemByPseudoId("vn_hausnr", rootElement, "input");
            vnHausnrInput.val(this.getBO().vn.hausnr || "");
            vnHausnrInput.change(function() {
                that.getBO().vn.hausnr = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "hausnr"), "vn_hausnr", "Hausnr."));

            var vnTelefonInput = SchrittRendererHelper.getItemByPseudoId("vn_telefon", rootElement, "input");
            vnTelefonInput.val(this.getBO().vn.telefon || "");
            vnTelefonInput.change(function() {
                that.getBO().vn.telefon = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "telefon"), "vn_telefon", [{
                fnValidation: function(propVal) {
                    if (propVal === undefined || propVal === null || propVal === "")
                        return true;
                    return propVal.match(/^(?:\+\d+)?\s*(?:\(\d+\)\s*(?:[\/–-]\s*)?)?\d+(?:\s*(?:[\s\/–-]\s*)?\d+)*$/);
                },

                errorText: "Die Angabe im Feld ist keine gültige Telefonnummer."
            }]));

            var vnMailInput = SchrittRendererHelper.getItemByPseudoId("vn_mail", rootElement, "input");
            vnMailInput.val(this.getBO().vn.mail || "");
            vnMailInput.change(function() {
                that.getBO().vn.mail = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "mail"), "vn_mail", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige E-Mail Adresse."
            }]));

            SchrittRendererHelper.getItemByPseudoId("vn_zahlungsart", rootElement, "input").val(this.getBO().vn.zahlungsdaten.zahlungsart || "");

            var zahlungsweiseInput = SchrittRendererHelper.getItemByPseudoId("vn_zahlungsweise", rootElement, "select");
            //zahlungsweiseInput.val(this.getBO().vn.zahlungsdaten.zahlungsweise || "");
            if (this.getBO().zahlungsweisen) {
            	var vnzw = this.getBO().vn.zahlungsdaten.zahlungsweise;
                zahlungsweiseInput.empty();
            	zahlungsweiseInput.append($("<option value='Bitte wählen'>Bitte wählen</option>"));
                this.getBO().zahlungsweisen.forEach(function(zw) {
                    var optionZw = $("<option value='" + zw  +"'>" + zw + "</option>");
                    if (zw === vnzw) {
                    	optionZw.attr("selected", "selected");
                    }

                    zahlungsweiseInput.append(optionZw);
                }, this);
            }
            zahlungsweiseInput.change(function() {
                var zahlungsweise = $(this).val();
                that.getBO().vn.zahlungsdaten.zahlungsweise = zahlungsweise;

                var textAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(that.validationResult && that.validationResult.vpTarife.length > 0 ? that.validationResult.vpTarife[0].beitrag : null, zahlungsweise);
                var textAndBeitragOhneRZ = SchrittRendererHelper.determineZahlbeitragTextAndValue(that.validationResult && that.validationResult.vpTarife.length > 0 ? that.validationResult.vpTarife[0].beitragOhneRZ : null, zahlungsweise);
                SchrittRendererHelper.getItemByPseudoId("beitrag_row").find("label").first().text(textAndBeitrag.text);
                SchrittRendererHelper.getItemByPseudoId("beitrag_row").find("input").first().val(textAndBeitrag.value + " \u20AC");
                SchrittRendererHelper.getItemByPseudoId("detail_beitrag_gesamt_row").find("label").first().text(textAndBeitrag.text);
                SchrittRendererHelper.getItemByPseudoId("detail_beitrag_gesamt_row").find("input").first().val(textAndBeitrag.value + " \u20AC");
                SchrittRendererHelper.getItemByPseudoId("detail_beitrag_row").find("input").first().val(textAndBeitragOhneRZ.value + " \u20AC");

                if (that.validationResult.vpTarife.length > 0) {
                    var tarif = that.validationResult.vpTarife[0];
                    if (tarif.risikozuschlaege && tarif.risikozuschlaege.length>0) {
	                	var rz = 0;
	                	for (var i=0; i<tarif.risikozuschlaege.length; i++)
	                		rz += tarif.risikozuschlaege[i].ro_rzAbsolut;

	                	var rzAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(rz, zahlungsweise);
	                    SchrittRendererHelper.getItemByPseudoId("detail_rz_row").find("input").first().val(rzAndBeitrag.value + " \u20AC");
                    }
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten, "zahlungsweise"), "vn_zahlungsweise", "Zahlungsweise"));

            var kontoinhaber = buildKontoinhaber.call(this);
            SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);

            var ibanCheck = $("#p_kontotyp_iban");
            var ktoCheck = $("#p_kontotyp_kto");

            var ibanBlock = SchrittRendererHelper.getItemByPseudoId("block_iban", rootElement);
            var ktoBlock = SchrittRendererHelper.getItemByPseudoId("block_kto", rootElement);
            var bankBlock = SchrittRendererHelper.getItemByPseudoId("block_bank", rootElement);

            var ibanInput = SchrittRendererHelper.getItemByPseudoId("vn_iban", rootElement, "input");
            var bicInput = SchrittRendererHelper.getItemByPseudoId("vn_bic", rootElement, "input");
            var blzInput = SchrittRendererHelper.getItemByPseudoId("vn_blz", rootElement, "input");
            var ktoInput = SchrittRendererHelper.getItemByPseudoId("vn_kto", rootElement, "input");
            var bankInput = SchrittRendererHelper.getItemByPseudoId("vn_bank", rootElement, "input");

            if (this.getBO().vn.zahlungsdaten.iban.selected) {
                ibanCheck.prop("checked", true);
                ktoCheck.prop("checked", false);

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            } else if (this.getBO().vn.zahlungsdaten.kto.selected) {
                ibanCheck.prop("checked", false);
                ktoCheck.prop("checked", true);

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            }
            ibanInput.val(this.getBO().vn.zahlungsdaten.iban.no || "");
            bicInput.val(this.getBO().vn.zahlungsdaten.iban.bic || "");
            blzInput.val(this.getBO().vn.zahlungsdaten.kto.blz || "");
            ktoInput.val(this.getBO().vn.zahlungsdaten.kto.no || "");
            bankInput.val(this.getBO().vn.zahlungsdaten.bank || "");

            ibanCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = true;
                that.getBO().vn.zahlungsdaten.kto.selected = false;

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            });
            ktoCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = false;
                that.getBO().vn.zahlungsdaten.kto.selected = true;

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, "vn_kontotyp", [{
                fnValidation: function() {
                    return that.getBO().vn.zahlungsdaten.kto.selected === true || that.getBO().vn.zahlungsdaten.iban.selected === true ? true : false;
                },

                errorText: "Die Auswahl im Feld Kontotyp ist erforderlich."
            }]));

            bankInput.change(function() {
                that.getBO().vn.zahlungsdaten.bank = $(this).val();
            });

            $(ibanInput).change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.iban.no = val;
            });

            $(bicInput).change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });

            $(ibanInput).av_suggest_iban({
                bancfield: bankInput,
                bicfield: bicInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("ibanerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "no"), "vn_iban", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.no === null || that.getBO().vn.zahlungsdaten.iban.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d(?: \d{4} \d{4} \d{4} \d{4}) \d\d$/);
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    var deferred = $.Deferred();
                    that._checkIBAN(that.getBO().vn.zahlungsdaten.iban.no).then(function(oResult) {
                        if (oResult.state === "OK" && oResult.ergebnisIban === 0) {
                            var res = that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d (\d{4} \d{4}) \d{4} \d{4} \d\d$/);
                            if (res) {
                                that._getBLZSuggestionsFor(res[1].split(' ').join('')).then(function(oResult) {
                                    if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                        var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#(.*)/);
                                        if (bank) {
                                            that.getBO().vn.zahlungsdaten.bank = bank[1];
                                            bankInput.val(bank[1]);
                                            that.getBO().vn.zahlungsdaten.iban.bic = bank[2];
                                            bicInput.val(bank[2]);
                                            deferred.resolve(true);
                                        } else {
                                            deferred.reject(false);
                                        }
                                    } else {
                                        deferred.reject(false);
                                    }
                                }).fail(function() {
                                    deferred.reject(false);
                                });
                            } else {
                                deferred.reject(false);
                            }
                        } else {
                            deferred.reject(false);
                        }
                    }).fail(function() {
                        deferred.reject(false);
                    });

                    return deferred.promise();
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }]));

            bicInput.change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "bic"), "vn_bic", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.bic === null || that.getBO().vn.zahlungsdaten.iban.bic === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.bic.length === 0) {
                        return false;
                    }
                    return true;
                },

                errorText: "Die Angabe im Feld BIC ist ungültig."
            }]));

            ktoInput.change(function() {
                that.getBO().vn.zahlungsdaten.kto.no = $(this).val();
            });

            blzInput.change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.kto.blz = val;
            });
            blzInput.av_suggest_banc({
                bancfield: bankInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("blzerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "no"), "vn_kto", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no === null || that.getBO().vn.zahlungsdaten.kto.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.kto.no.match(/^\d{5,10}$/);
                },

                errorText: "Die Angabe im Feld Kontonummer ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no != null && that.getBO().vn.zahlungsdaten.kto.no.length > 0 &&
                        that.getBO().vn.zahlungsdaten.kto.blz != null && that.getBO().vn.zahlungsdaten.kto.blz.length > 0) {
                        var deferred = $.Deferred();
                        that._checkKonto(that.getBO().vn.zahlungsdaten.kto.blz, that.getBO().vn.zahlungsdaten.kto.no).then(function(oResult) {
                            if (oResult.state === "OK" && oResult.ergebnisKonto === 0) {
                                deferred.resolve(true);
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    }

                    return true;
                },

                errorText: "Die angegebene Bankverbindung ist ungültig."
            }]));
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_blz", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.blz === null || that.getBO().vn.zahlungsdaten.kto.blz === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.blz.length === 0) {
                        return false;
                    }
                    if (that.getBO().vn.zahlungsdaten.kto.blz.match(/^\d{5,10}$/)) {
                        var deferred = $.Deferred();

                        that._getBLZSuggestionsFor(that.getBO().vn.zahlungsdaten.kto.blz).then(function(oResult) {
                            if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#.*/);
                                if (bank) {
                                    that.getBO().vn.zahlungsdaten.bank = bank[1];
                                    bankInput.val(bank[1]);
                                    deferred.resolve(true);
                                } else {
                                    deferred.reject(false);
                                }
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    } else {
                        return false;
                    }
                },

                errorText: "Die Angabe im Feld Bankleitzahl ist ungültig."
            }]));

            //
            var ksmCheck = SchrittRendererHelper.getItemByPseudoId("vn_ksm", rootElement, "input");
            if (this.getBO().vn.zahlungsdaten.ksmSelected) {
                ksmCheck.prop("checked", true);
            }
            ksmCheck.change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vn.zahlungsdaten.ksmSelected = true;
                } else {
                    that.getBO().vn.zahlungsdaten.ksmSelected = false;
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_ksm", [{
                fnValidation: function(propVal) {
                    return (that.getBO().vn.zahlungsdaten.ksmSelected);
                },

                errorText: "Ihre Zustimmung ist erforderlich."
            }]));

            //
            if (!that.getBO().einstellung.betreuerFestDefiniert && (that.getBO().einstellung.betreuerwahl === true || that.getBO().einstellung.betreuer)) {
                var ksmBlockRow = SchrittRendererHelper.getItemByPseudoId("ksm_block", rootElement);

                var fnBetreuerSeparator = _.template(schrittTemplate.betreuerSeparator);
                var betreuerSeparator = $(fnBetreuerSeparator());
                betreuerSeparator.insertAfter(ksmBlockRow);

                var fnBetreuerauswahlRow = _.template(schrittTemplate.betreuerauswahlRow);
                var betreuerauswahlRow = $(fnBetreuerauswahlRow({beraterauswahl: that.getBO().einstellung.betreuerwahl ? "Beraterauswahl" : "Ihr Berater"}));
                betreuerauswahlRow.insertAfter(betreuerSeparator);

                var nextPositionToInsert = betreuerauswahlRow;

                if (that.getBO().einstellung.betreuer) {
                    var fnBetreuerRow =_.template(schrittTemplate.betreuerRowTemplate);
                    var betreuerLabel = that.getBO().einstellung.betreuer.beschreibungen.join("<br />");
                    var betreuerRow = $(fnBetreuerRow({betreuerLabel : betreuerLabel}));
                    betreuerRow.insertAfter(nextPositionToInsert);
                    nextPositionToInsert = betreuerRow.last();
                }
                if (that.getBO().einstellung.betreuerwahl) {
                    var fnBetreuerSelectionRow = _.template(schrittTemplate.betreuerauswahlEntscheidungRow);
                    var betreuerSelectionRow = $(fnBetreuerSelectionRow());
                    betreuerSelectionRow.insertAfter(nextPositionToInsert);

                    var fnAddBetreuerItems;

                    //

                    var fnBetreuerWaehlenRow = _.template(schrittTemplate.betreuerWaehlenRow);
                    var betreuerWaehlenRow = $(fnBetreuerWaehlenRow());

                    if (!that.getBO().betreuer.manuelleAuswahl) {
                        betreuerWaehlenRow.hide();
                    }
                    betreuerWaehlenRow.insertAfter(betreuerSelectionRow);

                    betreuerWaehlenRow.find("a").click(function() {
                        var kv_ref_name = that.getBO().einstellung.betreuerzwang ? "betreuer_waehlen_label" : "betreuer_auswahl";
                        var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                        label.parent().find(".error").remove();
                        if (!that.getBO().vn.plz || !that.getBO().vn.plz.match(/^\d{5}$/)) {
                            var error = $(fnErrorLabelTemplate({error: "Geben Sie eine PLZ an."}));
                            error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                            error.insertAfter(label);
                        } else {
                            that.setBusy(true);
                            $(".betreuerInput").remove();
                            SchrittRendererHelper.getItemByPseudoId("betreuerInDerNaehe", rootElement).hide();
                            that._getBetreuerliste().then(function(betreuerliste) {
                                that.getBO().betreuer.auswahlListe = betreuerliste;
                                if (betreuerliste) {
                                    SchrittRendererHelper.getItemByPseudoId("betreuerInDerNaehe", rootElement).show();
                                    that.getBO().betreuer.auswahlListe.forEach(fnAddBetreuerItems);
                                }
                            }).fail(function(errorText) {
                                if (!errorText) {
                                    errorText = "Die Beratersuche ist fehlgeschlagen."
                                }
                                var error = $(fnErrorLabelTemplate({error: errorText}));
                                error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                                error.insertAfter(label);
                            }).always(function() {
                                that.setBusy(false);
                            });;
                        }
                    });

                    //

                    var fnBetreuerInDerNaeheRow = _.template(schrittTemplate.betreuerInDerNaeheRow);
                    var betreuerInDerNaeheRow = $(fnBetreuerInDerNaeheRow());

                    if (!that.getBO().betreuer.manuelleAuswahl) {
                        betreuerInDerNaeheRow.hide();
                    }
                    betreuerInDerNaeheRow.insertAfter(betreuerWaehlenRow);

                    //

                    var fnBetreuerInputRowTemplate = _.template(schrittTemplate.betreuerInputRowTemplate);
                    var lastPositionToAdd = betreuerInDerNaeheRow;
                    fnAddBetreuerItems = function(betreuer, index) {
                        if (index === 0) {
                            lastPositionToAdd = betreuerInDerNaeheRow;
                        }
                        var betreuerInputRow = $(fnBetreuerInputRowTemplate({betreuerVal: index, betreuerLabel: betreuer.beschreibungen.join(", ")}));
                        if (!that.getBO().betreuer.manuelleAuswahl) {
                            betreuerInputRow.hide();
                        }
                        betreuerInputRow.insertAfter(lastPositionToAdd);
                        betreuerInputRow.find("input").click(function() {
                            var selection = $(this).val();
                            if (selection !== null && selection !== undefined) {
                                selection = parseInt(selection);
                            }
                            that.getBO().betreuer.auswahlListe.forEach(function(betreuer, index) {
                                if (index === selection)
                                    betreuer.selected = true;
                                else
                                    betreuer.selected = false;
                            });
                        });

                        lastPositionToAdd = betreuerInputRow;
                    };

                    if (that.getBO().betreuer.auswahlListe) {
                        that.getBO().betreuer.auswahlListe.forEach(fnAddBetreuerItems);

                        $(".betreuerInput :input").prop("checked", false);
                        that.getBO().betreuer.auswahlListe.some(function(betreuer, index) {
                            if (betreuer.selected) {
                                $(".betreuerInput :input").eq(index).prop("checked", true);
                                return true;
                            }
                            return  false;
                        });
                    }

                    //

                    betreuerSelectionRow.find("input").eq(0).click(function() {
                        that.getBO().betreuer.manuelleAuswahl = true;

                        SchrittRendererHelper.getItemByPseudoId("betreuer_waehlen", rootElement).show();

                    });
                    betreuerSelectionRow.find("input").eq(1).click(function() {
                        that.getBO().betreuer.manuelleAuswahl = false;

                        SchrittRendererHelper.getItemByPseudoId("betreuer_waehlen", rootElement).hide();
                        SchrittRendererHelper.getItemByPseudoId("betreuerInDerNaehe", rootElement).hide();
                        $(".betreuerInput").remove();
                        that.getBO().betreuer.auswahlListe = null;
                    });
                    if (that.getBO().betreuer.manuelleAuswahl) {
                        betreuerSelectionRow.find("input").eq(0).prop("checked", true);
                    } else if (that.getBO().betreuer.manuelleAuswahl === false) {
                        betreuerSelectionRow.find("input").eq(1).prop("checked", true);
                    }
                    if (this.getBO().einstellung.betreuerzwang) {
                        betreuerSelectionRow.hide();

                        this.getBO().betreuer.manuelleAuswahl = true;
                        SchrittRendererHelper.getItemByPseudoId("betreuer_waehlen", rootElement).show();
                    }

                    this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, that.getBO().einstellung.betreuerzwang ? "betreuer_waehlen_label" : "betreuer_auswahl", [{
                        fnValidation: function(propVal) {
                            if (that.getBO().betreuer.manuelleAuswahl === null) {
                                return false;
                            } else if (that.getBO().betreuer.manuelleAuswahl) {
                                if (!that.getBO().betreuer.auswahlListe)
                                    return false;
                                else if (!that.getBO().betreuer.auswahlListe.some(function(betreuer) {
                                    return betreuer.selected;
                                })) {
                                    return false;
                                }
                            }
                            return true;
                        },

                        errorText: "Geben Sie eine Beraterauswahl an und wählen nach Klick auf 'Betreuer wählen' Ihren Betreuer aus."
                    }]));

                    this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, this.getBO().einstellung.betreuerzwang ? "betreuer_waehlen_label" : "betreuer_auswahl", [{
                        fnValidation: function(propVal) {
                        	if (!that.getBO().einstellung.betreuer && that.getBO().einstellung.betreuerwahl && that.getBO().betreuer.manuelleAuswahl === true) {
                        		var betreuer = null;
                        		that.getBO().betreuer.auswahlListe.some(function(currentBetreuer) {
                                    if (currentBetreuer.selected) {
                                    	betreuer = currentBetreuer;
                                    	return true;
                                    }
                                    return false;
                        		});
                        		if (betreuer && betreuer.detailFetchRequired===true) {
                        			var deferred = $.Deferred();
                        	    	that.oProdukt.getBetreuerdetailsFor(betreuer).then(function(betreuer2){
                        	    		Util.merge(betreuer2, betreuer);
                        	    		deferred.resolve(true);
                        	    	}).fail(function(){
                        	    		deferred.reject(false);
                        	    	});
                        	    	return deferred.promise();
                        		}
                        	}
                        	return true;
                        },

                        errorText: "Die Betreuerdaten konnten nicht ermittelt werden. Bitte versuchen es erneut."
                    }]));
                }
            }
            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            (Util.getProp(this.getBO(), ["einstellung", "modul", "leistungen"]) || []).forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });
        }

        var nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("absicherungContent", rootElement);

        if (this.validationResult && this.validationResult.state === "OK") {
            $(".tarifbeitragContent").remove();
            $(".accordion").remove();

            if (this.validationResult.vpTarife && this.validationResult.vpTarife.length > 0) {
                this.validationResult.vpTarife.forEach(function(tarif) {
                    if (tarif.ausgewaehlt && !tarif.augesteuert) {
                        var textAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(that.validationResult && that.validationResult.vpTarife.length > 0 ? that.validationResult.vpTarife[0].beitrag : null, that.getBO().vn.zahlungsdaten.zahlungsweise);
                        var textAndBeitragOhneRZ = SchrittRendererHelper.determineZahlbeitragTextAndValue(that.validationResult && that.validationResult.vpTarife.length > 0 ? that.validationResult.vpTarife[0].beitragOhneRZ : null, that.getBO().vn.zahlungsdaten.zahlungsweise);
                        var mehrwertBoxTarifbeitragTemplate = _.template(schrittTemplate.mehrwertBoxTarifbeitragTemplate);
                        var tarifbeitragContent = $(mehrwertBoxTarifbeitragTemplate({zahlungsweiseGesamtbeitrag: textAndBeitrag.text, beitragGesamtbeitrag: textAndBeitrag.value}));

                        tarifbeitragContent.insertAfter(nextPositionToPut);
                        tarifbeitragContent.addClass("tarifbeitragContent");
                        nextPositionToPut = tarifbeitragContent[tarifbeitragContent.length-1];

                        var mehrwertBoxTarifAccordionStartTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionStartTemplate);
                        var mehrwertBoxTarifAccordionStart = $(mehrwertBoxTarifAccordionStartTemplate({text : "Zu versichernde Person, " + that.getBO().vp.geburtsdatum}));
                        mehrwertBoxTarifAccordionStart.insertAfter(nextPositionToPut);
                        nextPositionToPut = SchrittRendererHelper.getItemByPseudoId("accordion", mehrwertBoxTarifAccordionStart);

                        mehrwertBoxTarifAccordionStart.find("a").click(function(){
                            mehrwertBoxTarifAccordionStart.find("a").toggleClass("active");
                            mehrwertBoxTarifAccordionStart.find("div.content").toggleClass("active");
                        });

                        var tarifWertContentTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionTarifWertTemplate);
                        var tarifWertContent = $(tarifWertContentTemplate({tarif: that.getBO().produkt, wert: textAndBeitragOhneRZ.value}));
                        tarifWertContent.insertAfter(nextPositionToPut);
                        nextPositionToPut = tarifWertContent[tarifWertContent.length-1];

                        if (tarif.risikozuschlaege && tarif.risikozuschlaege.length>0) {
                        	var rz = 0;
                        	for (var i=0; i<tarif.risikozuschlaege.length; i++)
                        		rz += tarif.risikozuschlaege[i].ro_rzAbsolut;

                        	var rzText = tarif.risikozuschlaege.length==1 && tarif.risikozuschlaege[0].webText && tarif.risikozuschlaege[0].webText.length>0 ? ("  + " + tarif.risikozuschlaege[0].webText) : " + Risikozuschlag";
                        	var rzAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(rz, that.getBO().vn.zahlungsdaten.zahlungsweise);
                        	var rzWertContentTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionRzWertTemplate);
                        	var rzContent = $(rzWertContentTemplate({rzText: rzText, rzWert: rzAndBeitrag.value}));
                        	rzContent.insertAfter(nextPositionToPut);

                            nextPositionToPut = rzContent[rzContent.length-1];
                        }

                        var textAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(that.validationResult && that.validationResult.vpTarife.length > 0 ? that.validationResult.vpTarife[0].beitrag : null, that.getBO().vn.zahlungsdaten.zahlungsweise);
                        var accordionEndTemplate = _.template(schrittTemplate.mehrwertBoxTarifAccordionEndTemplate);
                        var accordionEnd = $(accordionEndTemplate({zahlungsweiseGesamtbeitrag: textAndBeitrag.text, beitragGesamtbeitrag: textAndBeitrag.value}));
                        accordionEnd.insertAfter(nextPositionToPut);
                    }
                }, this);
            }
        }
        if (this.getBO().vn.zahlungsdaten.zahlungsweise) {
            var textAndBeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(this.validationResult && this.validationResult.vpTarife.length > 0 ? this.validationResult.vpTarife[0] : null, this.getBO().vn.zahlungsdaten.zahlungsweise);
            SchrittRendererHelper.getItemByPseudoId("beitrag_row").find("label").first().text(textAndBeitrag.text);
            SchrittRendererHelper.getItemByPseudoId("beitrag_row").find("input").first().val(textAndBeitrag.value + " \u20AC");
//            SchrittRendererHelper.getItemByPseudoId("detail_beitrag_gesamt_row").find("label").first().text(textAndBeitrag.text);
//            SchrittRendererHelper.getItemByPseudoId("detail_beitrag_gesamt_row").find("input").first().val(textAndBeitrag.value + " \u20AC");
//
//            var textAndBeitragOhneRZ = SchrittRendererHelper.determineZahlbeitragTextAndValue(that.validationResult && that.validationResult.vpTarife.length > 0 ? that.validationResult.vpTarife[0].beitragOhneRZ : null, this.getBO().vn.zahlungsdaten.zahlungsweise);
//            SchrittRendererHelper.getItemByPseudoId("detail_beitrag_row").find("input").first().val(textAndBeitragOhneRZ.value + " \u20AC");
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }

       	window.jQuery(document).foundation();

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt2Renderer.prototype._getBetreuerliste = function() {
    return this.oProdukt.getBetreuerlisteFor(this.getBO().vn.plz);
};

Schritt2Renderer.prototype._checkKonto = function(blz, no) {
    return this.oProdukt.checkKonto(blz, no);
};

Schritt2Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt2Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt2Renderer.prototype._checkIBAN = function(iban) {
    return this.oProdukt.checkIBAN(iban);
};

Schritt2Renderer.prototype._getBLZSuggestionsFor = function(blz) {
    return this.oProdukt.getBLZSuggestionsFor(blz);
};

Schritt2Renderer.prototype._getIbanSuggestionsFor = function(iban) {
    return this.oProdukt.getIbanSuggestionsFor(iban);
};

Schritt2Renderer.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt2Renderer.prototype._pruefe = function() {
    var that = this;
    var deferreds = [];

    this.fnErrorChecks.forEach(function(fnErrorCheck) {
        deferreds.push(fnErrorCheck());
    });

    that.setBusy(true);
    $.when.apply($, deferreds).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
            return val === true;
        })) {
            that.oProdukt.weiter();
        } else {
            SchrittRendererHelper.scrollToFirstError(that.rootElement);
        }
    }).always(function() {
        that.setBusy(false);
        SchrittRendererHelper.scrollToFirstError(that.rootElement);
    });
};

module.exports = Schritt2Renderer;


/***/ }),
/* 79 */
/***/ (function(module, exports) {

module.exports = {
    mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%= produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
                                <div class="rowX"> \
                                            <ol class="progress-indicator"> \
                                                    <li class="" data-step="1"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-current" data-step="2"> \
                                                        <span>Personen- und Zahlungsdaten</span> \
                                                    </li> \
                                                    <li class="" data-step="3"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-last" data-step="4"> \
                                                        <span>Online beantragen</span> \
                                                    </li> \
                                            </ol> \
                                        </div> \
                                \
                                </div> \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <!-- Pflichtfelder, SSL --> \
                                    <div class="kvo-content-2"> \
    \
                                    <div class="kvo-title"> \
                                        <h1>Personen- und Zahlungsdaten</h1> \
                                        <div class="row"> \
                                            <div class="large-12 medium-12 columns"> \
                                                <span>Danke für Ihre Mühe bei der Beantwortung der Absicherungs-Fragen. Zur Ausstellung Ihres Versicherungssscheins benötigen wir noch einige persönliche Angaben und eine Bankverbindung.</span> \
                                                <p>&nbsp;</p> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    <div class="row"> \
                                        <div class="medium-12 contentbox"> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2><i class="fa fa-user-plus fa-2x"></i> Zu versichernde Person</h2> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label kv_ref="vp_anrede">Anrede *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input type="text" kv_ref="vp_anrede" readonly="readonly"></input> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vp_vorname"></label> <label kv_ref="vp_name"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Vorname *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Vorname" type="text" value="" maxlength="35" kv_ref="vp_vorname"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Nachname *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Nachname" type="text" value="" maxlength="35" kv_ref="vp_name"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vp_geburtsdatum">Geburtsdatum *</label> \
                                                <div class="row"> \
                                                    <div class="large-12 medium-12 small-12 columns"> \
                                                    <input class="intType autoTab" placeholder="TT.MM.JJJJ" value="" maxlength="10" readonly="readonly" kv_ref="vp_geburtsdatum" type="text"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        \
                                        <hr> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2><i class="fa fa-user-circle fa-2x"></i> Versicherungsnehmer (mindestens 18 Jahre)</h2> \
                                            </div> \
                                        </div> \
                                        <div class="row datasummary" kv_ref="hinweis" style="display: none"> \
                                            <div class="medium-9 small-9 columns"> \
                                                <i class="fa fa-info-circle"></i> <b>Hinweis:</b> Bei Versicherung von minderjährigen Kindern darf nur ein Erziehungsberechtigter als Versicherungsnehmer angegeben werden. \
                                            </div> \
                                            <div class="medium-3 small-3 columns dataEdit text-center"> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_anrede"></label><label kv_ref="vn_titel"></label>  \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Anrede *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <select kv_ref="vn_anrede"> \
                                                        <option value="">Bitte auswählen</option> \
                                                        <option value="HERR"> Herr</option> \
                                                        <option value="FRAU"> Frau</option> \
                                                    </select> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Titel (optional)</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Titel" maxlength="35" type="text" value="" kv_ref="vn_titel"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_vorname"></label><label kv_ref="vn_name"></label>  \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Vorname *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Vorname" maxlength="35" type="text" value="" kv_ref="vn_vorname"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="small-12 columns"> \
                                                    <label>Nachname *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Nachname" type="text" value="" maxlength="35" kv_ref="vn_name"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_geburtsdatum">Geburtsdatum *</label> \
                                                <div class="row"> \
                                                    <div class="large-12 medium-12 small-12 columns"> \
                                                    <input class="intType autoTab" placeholder="TT.MM.JJJJ" value="" maxlength="10" kv_ref="vn_geburtsdatum" type="text"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_plz"></label> <label kv_ref="vn_ort"></label>\
                                            </div> \
                                            <div class="large-6 medium-12 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="medium-4 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label>PLZ *</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="PLZ" type="text" value="" maxlength="5" kv_ref="vn_plz"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                    <div class="medium-8 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label>Ort *</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="Hauptwohnsitz muss in D sein" type="text" value="" maxlength="35" kv_ref="vn_ort"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_strasse"></label> <label kv_ref="vn_hausnr"></label> \
                                            </div> \
                                            <div class="large-6 medium-12 columns"> \
                                                <div class="row" data-abide> \
                                                    <div class="medium-8 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label>Strasse *</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="Strasse" type="text" value="" maxlength="35" kv_ref="vn_strasse"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                    <div class="medium-4 columns"> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <label kv_ref="vn_hausnr">Hausnr. *</label> \
                                                        </div> \
                                                    </div> \
                                                    <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <input placeholder="Nr." type="text" value="" maxlength="5" kv_ref="vn_hausnr"> \
                                                        </div> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_telefon">Telefon (optional)<span data-tooltip="" class="has-tip" title="Rückfragen zu Ihren Angaben sind am einfachsten telefonisch zu klären. Durch die Angabe Ihrer Telefonnummer helfen Sie uns, dass wir bei Unklarheiten schneller Ihren Versicherungsschutz in die Wege leiten können.">&nbsp;<a class="info">i</a></span></label> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Telefon" type="text" value="" maxlength="24" kv_ref="vn_telefon"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_mail">E-Mail *<span data-tooltip="" class="has-tip" title="Bitte geben Sie Ihre E-Mail-Adresse an, damit wir Ihnen nach Abschluss von <%= produkt %> umgehend Ihre Versicherungsbestätigung schicken können.">&nbsp;<a class="info">i</a></span></label> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="E-Mail" type="text" value="" maxlength="50" kv_ref="vn_mail"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
    \
                                        <hr> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-eur fa-stack-1x fa-inverse"></i></span> Zahlungsdaten</h2> \
                                                <p class="sumContent">SEPA-Lastschriftmandat für wiederkehrende SEPA-Basislastschriften</p> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_zahlungsart"></label> \<label kv_ref="vn_zahlungsweise"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                    <div class="small-12 columns" data-abide> \
                                                    <label>Zahlungsart<span data-tooltip="" class="has-tip" title="Bei uns können Sie Ihre fälligen Versicherungsbeiträge bequem per Lastschrift bezahlen. Wählen Sie einfach dazu noch Ihre gewünschte Zahlungsweise aus. Ein Online-Abschluss mit einem ausländischen SEPA-Konto ist leider nicht möglich. Um die Versicherung abschließen zu können, wenden Sie sich bitte an Ihren Berater.">&nbsp;<a class="info">i</a></span></label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input type="text" readonly="readonly" value="" kv_ref="vn_zahlungsart"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                    <div class="small-12 columns" data-abide> \
                                                    <label>Gewünschte Zahlungsweise *</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <select kv_ref="vn_zahlungsweise"> \
                                                        <option value="">Bitte auswählen</option> \
                                                        <option value="monatlich">monatlich</option> \
                                                        <option value="vierteljährlich">vierteljährlich</option> \
                                                        <option value="halbjährlich">halbjährlich</option> \
                                                        <option value="jährlich">jährlich</option> \
                                                    </select> \
    \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <div class="row"> \
                                                    <div class="small-12 columns" data-abide> \
                                                    <label kv_ref="vn_bank_inhaber">Kontoinhaber (Versicherungsnehmer)</label> \
                                                    </div> \
                                                </div> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input type="text" readonly="readonly" value="" kv_ref="vn_bank_inhaber"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-12 columns" data-abide> \
                                                <label kv_ref="vn_kontotyp">Angabe der Bankverbindung *</label> \
                                                <div class="row"> \
                                                    <div class="medium-6 columns"> \
                                                        <input value="ja" type="radio" id="p_kontotyp_iban" style="border: 0px; width: 20px" name="p_kontotyp"><label for="p_kontotyp_iban" class="">IBAN (22 stellig)</label> \
                                                    </div> \
                                                    <div class="medium-6 columns"> \
                                                    <input value="nein" type="radio" id="p_kontotyp_kto" style="border: 0px; width: 20px" name="p_kontotyp"><label for="p_kontotyp_kto" class="">Kontonr. und Bankleitzahl</label> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div style="display: none;" kv_ref="block_iban" class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_iban"></label> \<label kv_ref="vn_bic"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>IBAN *</label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <span role="status" aria-live="polite" class="ui-helper-hidden-accessible"></span><input maxlength="34" type="text" value="" placeholder="DE12 3456 7890 1234 5678 90" kv_ref="vn_iban"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>BIC </label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <input placeholder="BIC" maxlength="11" type="text" value="" kv_ref="vn_bic"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div  style="display: none;" kv_ref="block_kto"class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="vn_blz"></label> \<label kv_ref="vn_kto"></label> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>Bankleitzahl *</label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <span role="status" aria-live="polite" class="ui-helper-hidden-accessible"></span><input placeholder="Bankleitzahl" maxlength="8" type="text" value="" kv_ref="vn_blz"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                            <div class="medium-6 columns"> \
                                                <div class="row"> \
                                                <div class="small-12 columns" data-abide> \
                                                    <label>Kontonummer *</label> \
                                                </div> \
                                                </div> \
                                                <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <input placeholder="Kontonummer" maxlength="15" type="text" value="" kv_ref="vn_kto"> \
                                                </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div style="display: none;" class="row" kv_ref="block_bank"> \
                                            <div class="medium-6 columns" data-abide> \
                                                <label kv_ref="vn_bank">Name der Bank (wird automatisch ausgefüllt) *</label> \
                                                <div class="row"> \
                                                    <div class="small-12 columns"> \
                                                    <input placeholder="Name der Bank" maxlength="100" type="text" value="" kv_ref="vn_bank"> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="medium-12 columns" data-abide> \
                                                <label kv_ref="vn_ksm">&nbsp;</label> \
                                            </div> \
                                        </div> \
                                        <div class="row dataSummary" kv_ref="ksm_block"> \
                                            <div class="small-1 columns"> \
                                                <input value="true" type="checkbox" kv_ref="vn_ksm" id="p_ksm"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_ksm"></label> \
                                            </div> \
                                            <div class="small-11 columns"> \
                                                <%= lastschriftText %><span data-tooltip="" class="has-tip" title="Indem Sie das Häkchen setzen, geben Sie uns Ihre Einwilligung, den Versicherungsbeitrag per SEPA-Lastschrift von Ihrem Konto einziehen zu dürfen. Auch die Versicherungsleistungen überweisen wir mit dieser Einwilligung auf Ihr genanntes Konto.">&nbsp;<a class="info">i</a></span> \
                                            </div> \
                                        </div> \
                                        </div> \
                                        <!-- Buttons --> \
                                        <div class="row"> \
                                        <div class="medium-5 large-4 columns left"> \
                                            <p>&nbsp;</p> \
                                            <a class="button action-back expand back">zurück</a> \
                                            <p class="small-text button-subline">zu Schritt 1: "Antrag ausfüllen"</p> \
                                        </div> \
                                        <div class="medium-5 large-4 columns right text-right"> \
                                            <p>&nbsp;</p> \
                                            <a class="call-to-action button expand check">weiter zu Schritt 3</a> \
                                            <p class="small-text button-subline">Überprüfung der Angaben</p> \
                                        </div> \
                                        </div> \
    \
                                </div></div><div class="row ssl"> \
                                        <div class="columns medium-12 "> \
                                        <p>&nbsp;</p> \
                                        <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                        <br> \
                                        <span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                        </div> \
                                    </div> \
                                </div> \
    \
    \
                                <div class="large-4 medium-5 columns"> \
                                 	<div class="row "> \
                                        <!-- Ausgabe eingegebener Daten --> \
                                     	<div class="medium-11 small-12 summarybox right"> \
                                          	<div class="row" kv_ref="absicherungContent"> \
                                               	<div class="medium-12 columns"> \
                                                    <h2>Ihre gewünschte Absicherung</h2> \
                                                    <h1><%= produkt %></h1> \
                                                    <p><%= produktDesc %></p> \
                                                    <br kv_ref="trenner_leistungen" /> \
                                                </div> \
                                            </div> \
                                            <div class="medium-11 small-12 summarybox left"> \
                                                <div class="row" kv_ref="weiterfuehrendeInformationenRow"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Weiterführende Informationen</h2> \
                                                        <ul> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
                                                            <li><a target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                                        </ul> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                     </div> \
                                  </div> \
                              </div> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>',


    mehrwertBoxTarifbeitragTemplate: ' \
                                    <div class="row display-sum" kv_ref="beitrag_row"> \
                                        <div class="medium-7 small-8 columns"> \
                                            <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                        </div> \
                                        <div class="medium-5 small-4 columns"> \
                                            <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                        </div> \
                                    </div> \
                                        ',

    mehrwertBoxTarifAccordionStartTemplate:
                                        ' \
                                        <dl class="accordion" data-accordion=""> \
                                            <dd class="accordion-navigation active"> \
                                                <a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
                                                <div id="panel1a" class="content active"> \
                                                    <div class="row" kv_ref="accordion"> \
                                                        <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= text %></label> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </dd> \
                                        </dl> \
                                        ',

    mehrwertBoxTarifAccordionTarifWertTemplate:
                                        ' \
                                        <div class="row" kv_ref="detail_beitrag_row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label><%= tarif %></label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= wert %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        ',

    mehrwertBoxTarifAccordionRzWertTemplate:
                                        ' \
                                        <div class="row" kv_ref="detail_rz_row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label><%= rzText %></label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= rzWert %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        ',

    mehrwertBoxTarifAccordionEndTemplate:
    	                                '<hr> \
                                        <div class="row" kv_ref="detail_beitrag_gesamt_row"> \
                                            <div class="medium-7 small-8 columns mb05"> \
                                                <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                            </div> \
                                            <div class="medium-5 small-4 columns"> \
                                                <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                            </div> \
                                        </div> \
                                        ',

    betreuerauswahlRow: ' \
                        <div class="row"> \
                            <div class="medium-12 columns"> \
                                <h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-map-marker fa-stack-1x fa-inverse"></i></span> <%= beraterauswahl %></h2> \
                                <p class="sumContent"></p> \
                            </div> \
                        </div> \
                        ',

    betreuerSeparator: '<hr>',

    betreuerauswahlEntscheidungRow: ' \
                                    <div class="row"> \
                                        <div class="medium-12 columns"> \
                                            <div class="row"> \
                                            <div class="small-12 columns" data-abide> \
                                                <label kv_ref="betreuer_auswahl">Möchten Sie einen Berater in Ihrer Nähe auswählen?</label> \
                                            </div> \
                                            </div> \
                                            <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <input type="radio" value="ja" id="p_betreuerauswahl_ja" name="p_betreuerauswahl"><label for="p_betreuerauswahl_ja" class="">ja</label> \
                                                &nbsp;&nbsp; \
                                                <input type="radio" value="nein" id="p_betreuerauswahl_nein" name="p_betreuerauswahl"><label for="p_betreuerauswahl_nein" class="">nein</label> \
                                            </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    ',

    betreuerInDerNaeheRow: ' \
                        <div class="row betreuerAuswahl" kv_ref="betreuerInDerNaehe"> \
                            <div class="medium-12 columns"> \
                                <p><br>Berater in Ihrer Nähe:</p> \
                            </div> \
                        </div> \
                        ',

    betreuerInputRowTemplate: ' \
                            <div class="row betreuerAuswahl betreuerInput"> \
                            <div class="medium-12 columns"> \
                                <input type="radio" value="<%= betreuerVal %>" id="p_betreuer_<%= betreuerVal %>" name="p_betreuer"><label for="p_betreuer_<%= betreuerVal %>" class=""><%= betreuerLabel %></label> \
                            </div> \
                            </div> \
                            ',

    betreuerRowTemplate: ' \
                            <div class="row"> \
                            <div class="medium-12 columns"> \
                                <%= betreuerLabel %> \
                            </div> \
                            </div> \
                            <br /> \
                            ',

    betreuerWaehlenRow: ' \
                                <div class="row" kv_ref="betreuer_waehlen"> \
                                <div class="row"> \
                                    <div class="small-12 columns" data-abide> \
                                        <label kv_ref="betreuer_waehlen_label"></label> \
                                    </div> \
                                </div> \
                                <div class="row"> \
                                    <div class="medium-5 large-4 columns left text-right"> \
                                        <p>&nbsp;</p> \
                                        <a href="javascript:void(0);" class="button expand">Berater wählen</a> \
                                    </div> \
                                </div> \
                                </div> \
                                ',

    errorLabelTemplate: '<small style="display: block" class="error"><%- error %></small>'

};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

function buildKontoinhaber() {
    var kontoinhaber = "";
    if (this.getBO().vn.vorname) {
        kontoinhaber = this.getBO().vn.vorname;
    }
    if (this.getBO().vn.name) {
        if (kontoinhaber.length > 0)
            kontoinhaber += " ";
        kontoinhaber += this.getBO().vn.name;
    }

    return kontoinhaber;
}

function buildPropExtractorFn(obj, prop) {
    return function() {
        return Util.getProp(obj, [prop]) || "";
    };
}

function buildDefaultValidatorFn() {
    return function(propVal) {
        if (propVal === null || propVal.trim().length === 0) {
            return false;
        }

        return true;
    };
}

function buildErrorCheckFn(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, fieldName, followingFnValidationAndErrorText) {
    var validationAndErrorText = {
        fnValidation : buildDefaultValidatorFn(),

        errorText : "Die Angabe im Feld " + (fieldName ? fieldName + " " : "")  + "ist erforderlich."
    }

    var aFnValidationAndErrorText = !followingFnValidationAndErrorText ? [validationAndErrorText] : [validationAndErrorText, followingFnValidationAndErrorText];
    return buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText);
}

function buildErrorXSSValidatorObj() {
    var validationAndErrorText = {
            fnValidation : function(propVal) {
            	if (propVal) {
            		var c;
        	    	for (var i=0; i<propVal.length; i++) {
        	    		c = propVal.charAt(i);
            	    	if (c=='['  || c==';' || c=='(' || c==')'
        	        		|| c=='"'  || c=='´' || c=='`' || c==','
        	        		|| c=='<'  || c=='>' || c=='/' || c=='\\'
        	        		/*|| c=='\''*/  || c=='=' || c=='#' || c==']')
        	    		   return false;
        	    	}
        	    	return true;
        	    }
    	    	return true;
            },

            //errorText: "Die Sonderzeichen [;()\"´`,<>/\\'=#] sind nicht erlaubt."
            errorText: "Die Sonderzeichen [;()\"´`,<>/\\=#] sind nicht erlaubt."
        };

    return validationAndErrorText;
}

function buildErrorXSSValidatorFn(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, followingFnValidationAndErrorText) {
	var validationAndErrorText = buildErrorXSSValidatorObj.call(this);

    var aFnValidationAndErrorText = !followingFnValidationAndErrorText ? [validationAndErrorText] : [validationAndErrorText, followingFnValidationAndErrorText];
    return buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText);
}


function buildErrorCheckFnWithErrorHandling(fnErrorLabelTemplate, fnPropExtractor, kv_ref_name, aFnValidationAndErrorText) {
    var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");

    return function() {
        var deferred = $.Deferred();

        var subDeferreds = [];

        aFnValidationAndErrorText.every(function(validationAndErrorText) {
            var fnValidation = validationAndErrorText.fnValidation;
            var ok = fnValidation(fnPropExtractor());

            label.parent().find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
            var addError = function() {
                var error = $(fnErrorLabelTemplate({error: validationAndErrorText.errorText}));
                error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
                error.insertBefore(label);
            }

            var subDeferred = $.Deferred();
            var proceed;

            if (Util.isPromise(ok)) {
                proceed = true;
                ok.then(function() {
                    subDeferred.resolve(true);
                }).fail(function() {
                    addError();
                    subDeferred.resolve(false);
                });
            } else if (ok) {
                subDeferred.resolve(true);
                proceed = true;
            } else {
                addError();
                subDeferred.resolve(false);
                proceed = false;
            }

            subDeferreds.push(subDeferred.promise());

            return proceed;
        });

        $.when.apply($, subDeferreds).then(function() {
            if (Array.prototype.slice.call(arguments).every(function(val) {
                return val === true;
            })) {
                deferred.resolve(true);
            } else {
                deferred.resolve(false);
            }
        });

        return deferred.promise();
    };
}

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

var Schritt2RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt2RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt2RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(81);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt2RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    this.validationResult = validationResult;

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate({
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: Util.getProp(this.getBO(), ["einstellung", "modul", "tariftyp"]) || "",
                lastschriftText: Util.getTextFromEncodedObject(this.getBO().texte.lastschrift)
            }));
            content.appendTo(rootElement);

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                that._pruefe();
            });

            var fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);
            var errorTextInputIsRequired = "Die Angabe im Feld ist erforderlich.";

            // VP

            var vpAnredeHerrInput = SchrittRendererHelper.getItemByPseudoId("vp_anrede_herr", rootElement, "input");
            var vpAnredeFrauInput = SchrittRendererHelper.getItemByPseudoId("vp_anrede_frau", rootElement, "input");
            if (this.getBO().vp.anrede === "HERR") {
                vpAnredeHerrInput.prop("checked", true);
                vpAnredeFrauInput.prop("checked", false);
            } else if (this.getBO().vp.anrede === "FRAU") {
                vpAnredeHerrInput.prop("checked", false);
                vpAnredeFrauInput.prop("checked", true);
            }
            vpAnredeHerrInput.click(function() {
                that.getBO().vp.anrede = "HERR";

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.anrede = that.getBO().vp.anrede;

                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input")).prop("checked", true);
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input")).next().addClass("checked");
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input")).prop("checked", false);
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input")).next().removeClass("checked");
                }
            });
            vpAnredeFrauInput.click(function() {
                that.getBO().vp.anrede = "FRAU";

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.anrede = that.getBO().vp.anrede;

                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input")).prop("checked", false);
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input")).next().removeClass("checked");
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input")).prop("checked", true);
                    $(SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input")).next().addClass("checked");
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vp, "anrede"), "vp_anrede_herr", "Anrede"));

            var vpVornameInput = SchrittRendererHelper.getItemByPseudoId("vp_vorname", rootElement, "input");
            vpVornameInput.val(this.getBO().vp.vorname);
            vpVornameInput.change(function() {
                that.getBO().vp.vorname = $(this).val();

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.vorname = that.getBO().vp.vorname;

                    SchrittRendererHelper.getItemByPseudoId("vn_vorname", rootElement, "input").val(that.getBO().vn.vorname);
                    var kontoinhaber = buildKontoinhaber.call(that);
                    SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vp, "vorname"), "vp_vorname", "Vorname", buildErrorXSSValidatorObj.call(this)));

            var vpNameInput = SchrittRendererHelper.getItemByPseudoId("vp_name", rootElement, "input");
            vpNameInput.val(this.getBO().vp.name || "");
            vpNameInput.change(function() {
                that.getBO().vp.name = $(this).val();

                if (that.getBO().vp.isVn) {
                    that.getBO().vn.name = that.getBO().vp.name;

                    SchrittRendererHelper.getItemByPseudoId("vn_name", rootElement, "input").val(that.getBO().vn.name);
                    var kontoinhaber = buildKontoinhaber.call(that);
                    SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vp, "name"), "vp_name", "Familienname", buildErrorXSSValidatorObj.call(this)));

            SchrittRendererHelper.getItemByPseudoId("vp_geburtsdatum", rootElement, "input").val(this.getBO().vp.geburtsdatum);

            // VN

            if (!this.getBO().vp.isVn) {
                SchrittRendererHelper.getItemByPseudoId("hinweis", rootElement).show();
            } else {
                SchrittRendererHelper.getItemByPseudoId("hinweis", rootElement).hide();
            }

            var vnAnredeHerrInput = SchrittRendererHelper.getItemByPseudoId("vn_anrede_herr", rootElement, "input");
            var vnAnredeFrauInput = SchrittRendererHelper.getItemByPseudoId("vn_anrede_frau", rootElement, "input");
            if (this.getBO().vn.anrede === "HERR") {
                vnAnredeHerrInput.prop("checked", true);
                vnAnredeFrauInput.prop("checked", false);
            } else if (this.getBO().vn.anrede === "FRAU") {
                vnAnredeHerrInput.prop("checked", false);
                vnAnredeFrauInput.prop("checked", true);
            }
            if (this.getBO().vp.isVn) {
                vnAnredeHerrInput.prop("disabled", true);
                vnAnredeFrauInput.prop("disabled", true);
            } else {
                vnAnredeHerrInput.prop("disabled", false);
                vnAnredeFrauInput.prop("disabled", false);
            }
            vnAnredeHerrInput.click(function() {
                that.getBO().vn.anrede = "HERR";
            });
            vnAnredeFrauInput.click(function() {
                that.getBO().vn.anrede = "FRAU";
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "anrede"), "vn_anrede_herr", "Anrede"));

            var vnTitelInput = SchrittRendererHelper.getItemByPseudoId("vn_titel", rootElement, "input");
            vnTitelInput.val(this.getBO().vn.titel || "");
            vnTitelInput.change(function() {
                that.getBO().vn.titel = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorXSSValidatorFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "titel"), "vn_titel"));

            var vnVornameInput = SchrittRendererHelper.getItemByPseudoId("vn_vorname", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnVornameInput.prop("disabled", true);
            } else {
                vnVornameInput.prop("disabled", false);
            }
            vnVornameInput.val(this.getBO().vn.vorname || "");
            vnVornameInput.change(function() {
                that.getBO().vn.vorname = $(this).val();

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "vorname"), "vn_vorname", "Vorname", buildErrorXSSValidatorObj.call(this)));

            var vnNameInput = SchrittRendererHelper.getItemByPseudoId("vn_name", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnNameInput.prop("disabled", true);
            } else {
                vnNameInput.prop("disabled", false);
            }
            vnNameInput.val(this.getBO().vn.name || "");
            vnNameInput.change(function() {
                that.getBO().vn.name = $(this).val();

                var kontoinhaber = buildKontoinhaber.call(that);
                SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "name"), "vn_name", "Familienname", buildErrorXSSValidatorObj.call(this)));

            var vnGeburtsdatumInput = SchrittRendererHelper.getItemByPseudoId("vn_geburtsdatum", rootElement, "input");
            if (this.getBO().vp.isVn) {
                vnGeburtsdatumInput.prop("disabled", true);
            } else {
                vnGeburtsdatumInput.prop("disabled", false);
            }
            vnGeburtsdatumInput.val(this.getBO().vn.geburtsdatum || "");
            //vnGeburtsdatumInput.inputmask("99.99.9999", {alias: "date"});
            vnGeburtsdatumInput.inputmask({alias: "datum"});
            var geburtsdatumHandler = function(event) {
                var unmaskedValue = SchrittRendererHelper.getUnmaskedValue($(this), event);
                var res = Util.parseAsDateAndFormatAsString($(this).val());

                if (res) {
                    that.getBO().vn.geburtsdatum = res;
                } else {
                    that.getBO().vn.geburtsdatum = unmaskedValue;
                }
            };
            vnGeburtsdatumInput.keyup(geburtsdatumHandler);
            vnGeburtsdatumInput.blur(geburtsdatumHandler);
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "geburtsdatum"), "vn_geburtsdatum", [{
                fnValidation: function(propVal) {
                    return !!Util.parseAsDateAndFormatAsString(propVal);
                },

                errorText: "Die Angabe im Feld ist kein gültiges Datum."
            }, {
                fnValidation: function(propVal) {
                    var res = Util.parseAsDateObject(propVal);

                    if (res) {
                        return Util.calculateAlter(res) >= 18;
                    }
                },
                errorText: "Der/Die Versicherungsnehmer/in muss mindestens 18 Jahre alt sein."
            }]));

            var vnPlzInput = SchrittRendererHelper.getItemByPseudoId("vn_plz", rootElement, "input");
            vnPlzInput.val(this.getBO().vn.plz || "");
            vnPlzInput.change(function() {
                that.getBO().vn.plz = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "plz"), "vn_plz", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\d{5}$/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige Postleitzahl."
            }, {
                fnValidation: function(propVal) {
                    //if (!that.getBO().einstellung.betreuer && (that.getBO().einstellung.betreuerwahl && that.getBO().betreuer.manuelleAuswahl === false || !that.getBO().einstellung.betreuerwahl))  {
                        return that.oProdukt.checkBetreuergebiet(propVal);
                    /*} else {
                        return true;
                    }*/
                },

                errorText: "Die Postleitzahl befindet sich nicht in einem von uns betreuten Gebiet."
            }]));

            var vnOrtInput = SchrittRendererHelper.getItemByPseudoId("vn_ort", rootElement, "input");
            vnOrtInput.val(this.getBO().vn.ort || "");
            vnOrtInput.change(function() {
                that.getBO().vn.ort = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "ort"), "vn_ort", "Ort", buildErrorXSSValidatorObj.call(this)));

            var vnStrasseInput = SchrittRendererHelper.getItemByPseudoId("vn_strasse", rootElement, "input");
            vnStrasseInput.val(this.getBO().vn.strasse || "");
            vnStrasseInput.change(function() {
                that.getBO().vn.strasse = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "strasse"), "vn_strasse", "Strasse", buildErrorXSSValidatorObj.call(this)));

            var vnHausnrInput = SchrittRendererHelper.getItemByPseudoId("vn_hausnr", rootElement, "input");
            vnHausnrInput.val(this.getBO().vn.hausnr || "");
            vnHausnrInput.change(function() {
                that.getBO().vn.hausnr = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "hausnr"), "vn_hausnr", "Hausnr.", buildErrorXSSValidatorObj.call(this)));

            var vnTelefonInput = SchrittRendererHelper.getItemByPseudoId("vn_telefon", rootElement, "input");
            vnTelefonInput.val(this.getBO().vn.telefon || "");
            vnTelefonInput.change(function() {
                that.getBO().vn.telefon = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "telefon"), "vn_telefon", [{
                fnValidation: function(propVal) {
                    if (propVal === undefined || propVal === null || propVal === "")
                        return true;
                    return propVal.match(/^(?:\+\d+)?\s*(?:\(\d+\)\s*(?:[\/–-]\s*)?)?\d+(?:\s*(?:[\s\/–-]\s*)?\d+)*$/);
                },

                errorText: "Die Angabe im Feld ist keine gültige Telefonnummer."
            }]));

            var vnMailInput = SchrittRendererHelper.getItemByPseudoId("vn_mail", rootElement, "input");
            vnMailInput.val(this.getBO().vn.mail || "");
            vnMailInput.change(function() {
                that.getBO().vn.mail = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn, "mail"), "vn_mail", [{
                fnValidation: function(propVal) {
                    return propVal !== undefined && propVal !== null ? propVal.match(/^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/) : false;
                },

                errorText: "Die Angabe im Feld ist keine gültige E-Mail Adresse."
            }]));

            SchrittRendererHelper.getItemByPseudoId("vn_zahlungsart", rootElement, "input").val(this.getBO().vn.zahlungsdaten.zahlungsart || "");

            var zahlungsweiseInput = SchrittRendererHelper.getItemByPseudoId("vn_zahlungsweise", rootElement, "select");
            //zahlungsweiseInput.val(this.getBO().vn.zahlungsdaten.zahlungsweise || "");
            if (this.getBO().zahlungsweisen) {
            	var vnzw = this.getBO().vn.zahlungsdaten.zahlungsweise;
                zahlungsweiseInput.empty();
            	zahlungsweiseInput.append($("<option value='Bitte wählen'>Bitte wählen</option>"));
                this.getBO().zahlungsweisen.forEach(function(zw) {
                    var optionZw = $("<option value='" + zw  +"'>" + zw + "</option>");
                    if (zw === vnzw) {
                    	optionZw.attr("selected", "selected");
                    }

                    zahlungsweiseInput.append(optionZw);
                }, this);
            }
            zahlungsweiseInput.change(function() {
                var zahlungsweise = $(this).val();
                that.getBO().vn.zahlungsdaten.zahlungsweise = zahlungsweise;
            });
            this.fnErrorChecks.push(buildErrorCheckFn.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten, "zahlungsweise"), "vn_zahlungsweise", "Zahlungsweise"));

            var kontoinhaber = buildKontoinhaber.call(this);
            SchrittRendererHelper.getItemByPseudoId("vn_bank_inhaber", rootElement, "input").val(kontoinhaber);

            var ibanCheck = $("#p_kontotyp_iban");
            var ktoCheck = $("#p_kontotyp_kto");

            var ibanBlock = SchrittRendererHelper.getItemByPseudoId("block_iban", rootElement);
            var ktoBlock = SchrittRendererHelper.getItemByPseudoId("block_kto", rootElement);
            var bankBlock = SchrittRendererHelper.getItemByPseudoId("block_bank", rootElement);

            var ibanInput = SchrittRendererHelper.getItemByPseudoId("vn_iban", rootElement, "input");
            var bicInput = SchrittRendererHelper.getItemByPseudoId("vn_bic", rootElement, "input");
            var blzInput = SchrittRendererHelper.getItemByPseudoId("vn_blz", rootElement, "input");
            var ktoInput = SchrittRendererHelper.getItemByPseudoId("vn_kto", rootElement, "input");
            var bankInput = SchrittRendererHelper.getItemByPseudoId("vn_bank", rootElement, "input");

            if (this.getBO().vn.zahlungsdaten.iban.selected) {
                ibanCheck.prop("checked", true);
                ktoCheck.prop("checked", false);

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            } else if (this.getBO().vn.zahlungsdaten.kto.selected) {
                ibanCheck.prop("checked", false);
                ktoCheck.prop("checked", true);

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            }
            ibanInput.val(this.getBO().vn.zahlungsdaten.iban.no || "");
            bicInput.val(this.getBO().vn.zahlungsdaten.iban.bic || "");
            blzInput.val(this.getBO().vn.zahlungsdaten.kto.blz || "");
            ktoInput.val(this.getBO().vn.zahlungsdaten.kto.no || "");
            bankInput.val(this.getBO().vn.zahlungsdaten.bank || "");

            ibanCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = true;
                that.getBO().vn.zahlungsdaten.kto.selected = false;

                ibanBlock.show();
                ktoBlock.hide();
                bankBlock.show();
            });
            ktoCheck.click(function() {
                that.getBO().vn.zahlungsdaten.iban.selected = false;
                that.getBO().vn.zahlungsdaten.kto.selected = true;

                ibanBlock.hide();
                ktoBlock.show();
                bankBlock.show();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, function() {}, "vn_kontotyp", [{
                fnValidation: function() {
                    return that.getBO().vn.zahlungsdaten.kto.selected === true || that.getBO().vn.zahlungsdaten.iban.selected === true ? true : false;
                },

                errorText: "Die Auswahl im Feld Kontotyp ist erforderlich."
            }]));

            bankInput.change(function() {
                that.getBO().vn.zahlungsdaten.bank = $(this).val();
            });

            $(ibanInput).change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.iban.no = val;
            });

            $(bicInput).change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });

            $(ibanInput).av_suggest_iban({
                bancfield: bankInput,
                bicfield: bicInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("ibanerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "no"), "vn_iban", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.no === null || that.getBO().vn.zahlungsdaten.iban.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d(?: \d{4} \d{4} \d{4} \d{4}) \d\d$/);
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    var deferred = $.Deferred();
                    that._checkIBAN(that.getBO().vn.zahlungsdaten.iban.no).then(function(oResult) {
                        if (oResult.state === "OK" && oResult.ergebnisIban === 0) {
                            var res = that.getBO().vn.zahlungsdaten.iban.no.match(/^[A-Z]{2}\d\d (\d{4} \d{4}) \d{4} \d{4} \d\d$/);
                            if (res) {
                                that._getBLZSuggestionsFor(res[1].split(' ').join('')).then(function(oResult) {
                                    if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                        var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#(.*)/);
                                        if (bank) {
                                            that.getBO().vn.zahlungsdaten.bank = bank[1];
                                            bankInput.val(bank[1]);
                                            that.getBO().vn.zahlungsdaten.iban.bic = bank[2];
                                            bicInput.val(bank[2]);
                                            deferred.resolve(true);
                                        } else {
                                            deferred.reject(false);
                                        }
                                    } else {
                                        deferred.reject(false);
                                    }
                                }).fail(function() {
                                    deferred.reject(false);
                                });
                            } else {
                                deferred.reject(false);
                            }
                        } else {
                            deferred.reject(false);
                        }
                    }).fail(function() {
                        deferred.reject(false);
                    });

                    return deferred.promise();
                },

                errorText: "Die Angabe im Feld IBAN ist ungültig."
            }]));

            bicInput.change(function() {
                that.getBO().vn.zahlungsdaten.iban.bic = $(this).val();
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.iban, "bic"), "vn_bic", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.iban.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.iban.bic === null || that.getBO().vn.zahlungsdaten.iban.bic === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.iban.bic.length === 0) {
                        return false;
                    }
                    return true;
                },

                errorText: "Die Angabe im Feld BIC ist ungültig."
            }]));

            ktoInput.change(function() {
                that.getBO().vn.zahlungsdaten.kto.no = $(this).val();
            });

            blzInput.change(function() {
                var val = $(this).val();
                val = val.replace(/_/g, " ");
                that.getBO().vn.zahlungsdaten.kto.blz = val;
            });
            blzInput.av_suggest_banc({
                bancfield: bankInput,
                dataFunction: function(blz){
                    return that._getBLZSuggestionsFor(blz);
                }/*,
                onerror: function(err) {
                    //alert("ibanerror: " + err);
                    console.log("blzerror: " + err);
                }*/
                });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "no"), "vn_kto", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no === null || that.getBO().vn.zahlungsdaten.kto.no === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.no.length === 0) {
                        return false;
                    }
                    return that.getBO().vn.zahlungsdaten.kto.no.match(/^\d{5,10}$/);
                },

                errorText: "Die Angabe im Feld Kontonummer ist ungültig."
            }, {
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.no != null && that.getBO().vn.zahlungsdaten.kto.no.length > 0 &&
                        that.getBO().vn.zahlungsdaten.kto.blz != null && that.getBO().vn.zahlungsdaten.kto.blz.length > 0) {
                        var deferred = $.Deferred();
                        that._checkKonto(that.getBO().vn.zahlungsdaten.kto.blz, that.getBO().vn.zahlungsdaten.kto.no).then(function(oResult) {
                            if (oResult.state === "OK" && oResult.ergebnisKonto === 0) {
                                deferred.resolve(true);
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    }

                    return true;
                },

                errorText: "Die angegebene Bankverbindung ist ungültig."
            }]));
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_blz", [{
                fnValidation: function(propVal) {
                    if (!that.getBO().vn.zahlungsdaten.kto.selected) {
                        return true;
                    }

                    if (that.getBO().vn.zahlungsdaten.kto.blz === null || that.getBO().vn.zahlungsdaten.kto.blz === undefined) {
                        return false;
                    } else if (that.getBO().vn.zahlungsdaten.kto.blz.length === 0) {
                        return false;
                    }
                    if (that.getBO().vn.zahlungsdaten.kto.blz.match(/^\d{5,10}$/)) {
                        var deferred = $.Deferred();

                        that._getBLZSuggestionsFor(that.getBO().vn.zahlungsdaten.kto.blz).then(function(oResult) {
                            if (oResult.ergebnisBlz && oResult.ergebnisBlz.vorschlagstreffer === 1 && oResult.ergebnisBlz.vorschlaege.length === 1) {
                                var bank = oResult.ergebnisBlz.vorschlaege[0].text.match(/^\d+ (.*)#.*/);
                                if (bank) {
                                    that.getBO().vn.zahlungsdaten.bank = bank[1];
                                    bankInput.val(bank[1]);
                                    deferred.resolve(true);
                                } else {
                                    deferred.reject(false);
                                }
                            } else {
                                deferred.reject(false);
                            }
                        }).fail(function() {
                            deferred.reject(false);
                        });

                        return deferred.promise();
                    } else {
                        return false;
                    }
                },

                errorText: "Die Angabe im Feld Bankleitzahl ist ungültig."
            }]));

            //
            var ksmCheck = SchrittRendererHelper.getItemByPseudoId("vn_ksm", rootElement, "input");
            if (this.getBO().vn.zahlungsdaten.ksmSelected) {
                ksmCheck.prop("checked", true);
            }
            ksmCheck.change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vn.zahlungsdaten.ksmSelected = true;
                } else {
                    that.getBO().vn.zahlungsdaten.ksmSelected = false;
                }
            });
            this.fnErrorChecks.push(buildErrorCheckFnWithErrorHandling.call(this, fnErrorLabelTemplate, buildPropExtractorFn(this.getBO().vn.zahlungsdaten.kto, "blz"), "vn_ksm", [{
                fnValidation: function(propVal) {
                    return (that.getBO().vn.zahlungsdaten.ksmSelected);
                },

                errorText: "Ihre Zustimmung ist erforderlich."
            }]));

            //
//            if (!that.getBO().einstellung.betreuerFestDefiniert && that.getBO().einstellung.betreuer) {
//                var fnBetreuerRow =_.template(schrittTemplate.beraterTemplate);
//                var betreuerLabel = that.getBO().einstellung.betreuer.beschreibungen.join(", ");
//                var betreuerRow = $(fnBetreuerRow({berater : betreuerLabel}));
//                betreuerRow.insertBefore(SchrittRendererHelper.getItemByPseudoId("vn_block", rootElement));
//            }
        }

        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt2RendererIF6.prototype._getBetreuerliste = function() {
    return this.oProdukt.getBetreuerlisteFor(this.getBO().vn.plz);
};

Schritt2RendererIF6.prototype._checkKonto = function(blz, no) {
    return this.oProdukt.checkKonto(blz, no);
};

Schritt2RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt2RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt2RendererIF6.prototype._checkIBAN = function(iban) {
    return this.oProdukt.checkIBAN(iban);
};

Schritt2RendererIF6.prototype._getBLZSuggestionsFor = function(blz) {
    return this.oProdukt.getBLZSuggestionsFor(blz);
};

Schritt2RendererIF6.prototype._getIbanSuggestionsFor = function(iban) {
    return this.oProdukt.getIbanSuggestionsFor(iban);
};

Schritt2RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt2RendererIF6.prototype._pruefe = function() {
    var that = this;
    var deferreds = [];

    this.fnErrorChecks.forEach(function(fnErrorCheck) {
        deferreds.push(fnErrorCheck());
    });

    that.setBusy(true);
    $.when.apply($, deferreds).then(function() {
        if (Array.prototype.slice.call(arguments).every(function(val) {
            return val === true;
        })) {
            that.oProdukt.weiter();
        } else {
            SchrittRendererHelper.scrollToFirstError(that.rootElement);
        }
    }).always(function() {
        that.setBusy(false);
        SchrittRendererHelper.scrollToFirstError(that.rootElement);
    });
};

module.exports = Schritt2RendererIF6;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate : ' \
                <div kv_ref="kvo_content"> \
                    <!-- Progress / Header --> \
                    <div class="block"> \
                        <ul class="progress"> \
                            <li class="">1</li> \
                            <li class="active">2</li> \
                            <li class="">3</li> \
                            <li class="">4</li> \
                        </ul> \
                        <h2>Personen- und Zahlungsdaten zu Tarif <%= produkt %></h2> \
                    </div> \
                    <!-- Contentbereich --> \
                    <!-- Beantragungshinweisblock --> \
                    <div class="block"> \
                        <p><strong> Danke für Ihre Mühe bei der Beantwortung der Absicherungs-Fragen. Zur Ausstellung Ihres Versicherungsscheins benötigen wir noch einige persönliche Angaben und eine Bankverbindung.</strong></p> \
                    </div> \
                    <!-- Dateneingabeblock --> \
                    <!-- VPDaten --> \
                    <div class="block"> \
                        <h3>Zu versichernde Person</h3> \
                        <!-- Anrede Radiobuttons --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_anrede_herr" kv_ref="vp_anrede_herr">Anrede<em>*</em>:</label> \
                            <input id="vp_anrede_herr" name="vp_anrede" kv_ref="vp_anrede_herr" type="radio" class="" disabled="disabled"> \
                            <label for="vp_anrede_herr">Herr</label> \
                            <br class="bterm" /> \
                        </div> \
                        <div class="bline bcontinue"> \
                            <input id="vp_anrede_frau" name="vp_anrede" kv_ref="vp_anrede_frau" type="radio" class="" disabled="disabled"> \
                            <label for="vp_anrede_frau">Frau</label> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Vorname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_vorname" kv_ref="vp_vorname">Vorname<em>*</em>:</label> \
                            <input type="text" name="Vorname" id="vp_vorname" value="" class="ixl" maxlength="" placeholder="" kv_ref="vp_vorname"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Nachname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_name" kv_ref="vp_name">Nachname<em>*</em>:</label> \
                            <input type="text" name="Nachname" id="vp_name" value="" class="ixl" maxlength="" placeholder="" kv_ref="vp_name"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Geburtsdatum --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vp_geburtsdatum" kv_ref="vp_geburtsdatum">Geburtsdatum:</label> \
                            <input type="text" name="Geburtsdatum" id="vp_geburtsdatum" value="" class="il" maxlength="10" placeholder="TT.MM.JJJJ" kv_ref="vp_geburtsdatum" readonly="readonly"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                    </div> \
                    <!-- VNDaten --> \
                    <div class="block" kv_ref="vn_block"> \
                        <h3>Versicherungsnehmer (mindestens 18 Jahre)</h3> \
                        <div class="bline btext-only" kv_ref="hinweis" style="display: none"> \
                            <div><strong><b>Hinweis:</b> Bei Versicherung von minderjährigen Kindern darf nur ein Erziehungsberechtigter als Versicherungsnehmer angegeben werden.</strong><br> \
                            </div> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Anrede Radiobuttons --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_anrede" kv_ref="vn_anrede_herr">Anrede<em>*</em>:</label> \
                            <input id="vn_anrede_herr" name="vn_anrede" kv_ref="vn_anrede_herr" type="radio" class=""> \
                            <label for="vn_anrede_herr">Herr</label> \
                            <br class="bterm" /> \
                        </div> \
                        <div class="bline bcontinue"> \
                            <input id="vn_anrede_frau" name="vn_anrede" kv_ref="vn_anrede_frau" type="radio" class=""> \
                            <label for="vn_anrede_frau">Frau</label> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Titel --> \
                        <div class="bline"> \
                            <label class="longlabel" for="Titel1" kv_ref="vn_titel">Titel <em>(optional)</em>:</label> \
                            <input type="text" name="Titel" id="Titel1" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_titel"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Vorname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_vorname" kv_ref="vn_vorname">Vorname<em>*</em>:</label> \
                            <input type="text" name="Vorname" id="vn_vorname" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_vorname"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Nachname --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_name" kv_ref="vn_name">Nachname<em>*</em>:</label> \
                            <input type="text" name="Nachname" id="vn_name" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_name"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Geburtsdatum --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_geburtsdatum" kv_ref="vn_geburtsdatum">Geburtsdatum<em>*</em>:</label> \
                            <input type="text" name="Geburtsdatum" id="vn_geburtsdatum" value="" class="il" maxlength="10" placeholder="TT.MM.JJJJ" kv_ref="vn_geburtsdatum"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- PLZ --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_plz" kv_ref="vn_plz">Postleitzahl<em>*</em>:</label> \
                            <input type="text" name="PLZ" id="vn_plz" value="" class="im" maxlength="5" placeholder="" kv_ref="vn_plz"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Ort --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_ort" kv_ref="vn_ort">Ort<em>*</em>:</label> \
                            <input type="text" name="Hauptwohnsitz muss in D sein" id="vn_ort" value="" class="ixl" maxlength="20" placeholder="" kv_ref="vn_ort"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Strasse --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_strasse" kv_ref="vn_strasse">Strasse<em>*</em>:</label> \
                            <input type="text" name="Strasse" id="vn_strasse" value="" class="ixl" maxlength="30" placeholder="" kv_ref="vn_strasse"> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Hausnummer --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_hausnr" kv_ref="vn_hausnr">Hausnummer<em>*</em>:</label> \
                            <input type="text" name="Hausnummer" id="vn_hausnr" value="" class="im" maxlength="10" placeholder="" kv_ref="vn_hausnr"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Telefon --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_telefon" kv_ref="vn_telefon">Telefon <em>(optional)</em>:</label> \
                            <input type="text" name="Telefon" id="vn_telefon" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_telefon"> \
                            <div class="helptxt" title="Rückfragen zu Ihren Angaben sind am einfachsten telefonisch zu klären. Durch die Angabe Ihrer Telefonnummer helfen Sie uns, dass wir bei Unklarheiten schneller Ihren Versicherungsschutz in die Wege leiten können.">?</div> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- E-Mail --> \
                        <div class="bline"> \
                            <label class="longlabel" for="vn_mail" kv_ref="vn_mail">E-Mail<em>*</em>:</label> \
                            <input type="text" name="E-Mail" id="vn_mail" value="" class="ixl" maxlength="" placeholder="" kv_ref="vn_mail"> \
                            <div class="helptxt" title="Bitte geben Sie Ihre E-Mail-Adresse an, damit wir Ihnen nach Abschluss von <%= produkt %> umgehend Ihre Versicherungsbestätigung schicken können.">?</div> \
                            <br class="bterm" /> \
                        </div> \
                    </div> \
                    <!-- Dateneingabeblock --> \
                    <!-- Dateneingabeblock --> \
                    <!-- Zahlungsdaten --> \
                    <div class="block"> \
                        <h3>Zahlungsdaten</h3> \
                        <div class="bline btext-only"> \
                            <div><strong>SEPA-Lastschriftmandat für wiederkehrende SEPA-Basislastschriften</strong><br> \
                            </div> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Zahlungsart --> \
                        <div class="bline"> \
                            <label class=" longlabel" for="zart" kv_ref="vn_kontotyp">Zahlungsart<em>*</em>:</label> \
                            <input type="text" name="zart" id="zart" kv_ref="vn_zahlungsart" value="Bankeinzug per Lastschrift" class="ixl" maxlength="" placeholder="" disabled> \
                            <div class="helptxt" title="Bei uns können Sie Ihre fälligen Versicherungsbeiträge bequem per Lastschrift bezahlen. Wählen Sie einfach dazu noch Ihre gewünschte Zahlungsweise aus. Ein Online-Abschluss mit einem ausländischen SEPA-Konto ist leider nicht möglich. Um die Versicherung abschließen zu können, wenden Sie sich bitte an Ihren Berater.">?</div> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Zahlungweise --> \
                        <div class="bline"> \
                            <label class="longlabel" for="zarw" kv_ref="vn_zahlungsweise">Gewünschte Zahlungsweise<em>*</em>:</label> \
                            <select kv_ref="vn_zahlungsweise"> \
                                <option value="">Bitte auswählen</option> \
                                <option value="monatlich">monatlich</option> \
                                <option value="vierteljährlich">vierteljährlich</option> \
                                <option value="halbjährlich">halbjährlich</option> \
                                <option value="jährlich">jährlich</option> \
                            </select> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Kontoinhaber --> \
                        <div class="bline"> \
                            <label class="longlabel" for="Kontoinhaber" kv_ref="vn_bank_inhaber">Kontoinhaber (Versicherungsnehmer):</label> \
                            <input type="text" kv_ref="vn_bank_inhaber" id="Kontoinhaber" value="" class="ixl" maxlength="" placeholder="" disabled> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- Bankverbindung Radiobuttons --> \
                        <div class="bline"> \
                            <label class="longlabel" class="longlabel" for="Bankverbindung">Angabe der Bankverbindung<em>*</em>:</label> \
                            <input id="p_kontotyp_iban" name="Bankverbindung" type="radio" class=""> \
                            <label for="p_kontotyp_iban">IBAN (22-stellig)</label> \
                            <br class="bterm" /> \
                        </div> \
                        <div class="bline bcontinue"> \
                            <input id="p_kontotyp_kto" name="Bankverbindung" type="radio" class=""> \
                            <label for="p_kontotyp_kto">Kontonummer und Bankleitzahl</label> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- IBAN --> \
                        <div style="display: none;" kv_ref="block_iban"> \
    	                    <div class="bline"> \
                                <label class="longlabel" for="IBAN" kv_ref="vn_iban">IBAN (22-stellig)<em>*</em>:</label> \
                                <input type="text" name="IBAN" id="IBAN" value="" class="ixl" maxlength="" placeholder="DE12 3456 7890 1234 5678 90" kv_ref="vn_iban"> \
                                <br class="bterm" /> \
    	                    </div>\
                            <!-- BIC --> \
                            <div class="bline"> \
                                <label class="longlabel" for="BIC" kv_ref="vn_bic">BIC<em></em>:</label> \
                                <input type="text" name="BIC" id="BIC" value="" class="ixl" maxlength="10" placeholder="" disabled="disabled" kv_ref="vn_bic"> \
                                <br class="bterm" /> \
                            </div>\
                        </div> \
                        <!-- BLZ --> \
                        <div  style="display: none;" kv_ref="block_kto"class="bline"> \
                            <div class="bline"> \
                                <label for="Bankleitzahl" kv_ref="vn_blz">Bankleitzahl<em>*</em>:</label> \
                                <input type="text" name="Bankleitzahl" id="Bankleitzahl" value="" class="ixl" maxlength="8" placeholder="" kv_ref="vn_blz"> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- BIC --> \
                            <div class="bline"> \
                                <label for="Kontonummer" kv_ref="vn_kto">Kontonummer<em>*</em>:</label> \
                                <input type="text" name="Kontonummer" id="Kontonummer" value="" class="ixl" maxlength="15" placeholder="" kv_ref="vn_kto"> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- Bank --> \
                        <div class="bline" style="display: none;" kv_ref="block_bank"> \
                            <label class="longlabel" for="Bank" kv_ref="vn_bank">Name der Bank (wird automatisch ausgefüllt)<em>*</em>:</label> \
                            <input type="text" name="Bank" id="Bank" value="" class="ixl" maxlength="" placeholder="" disabled="disabled" kv_ref="vn_bank"> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                        <!-- SEPA-Mandat --> \
                        <div class="bline"> \
                            <label class="longlabel" kv_ref="vn_ksm">SEPA-Lastschriftmandat<em>*</em>:</label> \
                            <input id="vn_ksm" kv_ref="vn_ksm" name="checkbox" type="checkbox"> \
                            <div class="helptxt" title="Indem Sie das Häkchen setzen, geben Sie uns Ihre Einwilligung, den Versicherungsbeitrag per SEPA-Lastschrift von Ihrem Konto einziehen zu dürfen. Auch die Versicherungsleistungen überweisen wir mit dieser Einwilligung auf Ihr genanntes Konto.">?</div> \
                            <label class="longtext" style="padding-left: 240px; text-align: left;" for="vn_ksm"><%= lastschriftText %></label> \
                            <br class="bterm"> \
                            <br class="bterm"> \
                        </div> \
                    </div> \
                    <!-- Button-Actionblock --> \
                    <!-- Hinweisblock --> \
                    <div class="block"> \
                        <div class="bline btext-only"> \
                            <div><strong>Hinweis:</strong> Die mit einem (*) gekennzeichneten Felder benötigen wir für die Bearbeitung Ihres Antrags.<br> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                    </div> \
                    <!-- Button --> \
                    <div class="buttonline"> \
                        <div class="bgroup2"> \
                            <div> \
                                <a class="back" href="javascript:void(0);"><input type="button" value="zurück" onclick="javascript:void(0);" class="" title="zurück"></input></a> \
                            </div> \
                        </div> \
                        <div class="bgroup1"> \
                            <div> \
                                <a class="check" href="javascript:void(0);"><input type="button" value="weiter zu Schritt 3" onclick="javascript:void(0);" class="" title="weiter zu Schritt 3"></input></a> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                    ',

    beraterTemplate: ' \
                    <!-- Beraterdaten --> \
                    <div class="block" kv_ref="berater"> \
                        <h3>Ihr Berater</h3> \
                        <div class="bline btext-only"> \
                            <div><strong><%= berater %></strong><br> \
                            </div> \
                            <br class="bterm" /> \
                            <br class="bterm" /> \
                        </div> \
                    </div>',

    errorLabelTemplate: ' \
        <div class="blineover error"> \
            <div class="msgerror"> \
                <ul> \
                    <li><%- error %></li> \
                </ul> \
            </div> \
        </div>'
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

var Schritt3Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt3Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt3Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(83);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

Schritt3Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var laufzeit = "";
            var kuendigungsfrist = "3 Monate zum Ende eines Kalenderjahres";
            var betreuer = "";
            var hasBetreuer = false;
            var kontoArt = this.getBO().vn.zahlungsdaten.iban.selected ? "IBAN/BIC" : "Konto/BLZ";
            var konto = this.getBO().vn.zahlungsdaten.iban.selected ? this.getBO().vn.zahlungsdaten.iban.no + "/" + this.getBO().vn.zahlungsdaten.iban.bic :
                            this.getBO().vn.zahlungsdaten.kto.no + "/" + this.getBO().vn.zahlungsdaten.kto.blz;

            if (this.getBO().einstellung.betreuerFestDefiniert) {
                hasBetreuer = false;
            } else if (this.getBO().einstellung.betreuerwahl) {
                if (this.getBO().betreuer.auswahlListe && this.getBO().betreuer.manuelleAuswahl) {
                    this.getBO().betreuer.auswahlListe.some(function(currentBetreuer) {
                        if (currentBetreuer.selected) {
                            betreuer = currentBetreuer.beschreibungen.join("<br />");
                            hasBetreuer = true;
                            return true;
                        }
                        return;
                    });
                }
            } else if (this.getBO().einstellung.betreuer) {
                betreuer = this.getBO().einstellung.betreuer.beschreibungen.join("<br />");
                hasBetreuer = true;
            }

            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(validationResult.vpTarife[0], this.getBO().vn.zahlungsdaten.zahlungsweise);
            var zahlungsweiseUndGesamtbeitragOhneRZ = SchrittRendererHelper.determineZahlbeitragTextAndValue(validationResult.vpTarife[0].beitragOhneRZ, this.getBO().vn.zahlungsdaten.zahlungsweise);

            var rzTextAndBeitrag = {
            	text: ' + Risikozuschlag',
            	wert: null
            };
            if (validationResult.vpTarife.length > 0) {
                var tarif = validationResult.vpTarife[0];
                if (tarif.risikozuschlaege && tarif.risikozuschlaege.length>0) {
                	var rz = 0;
                	for (var i=0; i<tarif.risikozuschlaege.length; i++)
                		rz += tarif.risikozuschlaege[i].ro_rzAbsolut;

                	if (tarif.risikozuschlaege.length==1 && tarif.risikozuschlaege[0].webText && tarif.risikozuschlaege[0].webText.length>0)
                		rzTextAndBeitrag.text = tarif.risikozuschlaege[0].webText;

                	var rzAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(rz, this.getBO().vn.zahlungsdaten.zahlungsweise);
                	rzTextAndBeitrag.wert = rzAndBeitrag.value;
                }
            }


            var renderBO = {
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: Util.getProp(this.getBO(), ["einstellung", "modul", "tariftyp"]) || "",

                zahlungsweiseGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.text,
                beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value,
                beitragGesamtbeitragOhneRZ: zahlungsweiseUndGesamtbeitragOhneRZ.value,
                rzText: rzTextAndBeitrag.text,
                rzWert: rzTextAndBeitrag.wert,

                beitrag: validationResult.vpTarife[0].beitrag,

                versicherungsbeginn: this.getBO().versicherungsbeginn,
                laufzeit: laufzeit,
                kuendigungsfrist: kuendigungsfrist,
                vpName: this.getBO().vp.vorname + " " + this.getBO().vp.name,
                vpAnredeName: (this.getBO().vp.anrede === "HERR" ? "Herr" : "Frau") + " " + this.getBO().vp.vorname + " " + this.getBO().vp.name,
                vpGeburtsdatum: this.getBO().vp.geburtsdatum,
                vpStaatsangehoerigkeit: this.getBO().vp.staatsangehoerigkeit,
                vpTaetigkeitsstatus: this.getBO().vp.taetigkeitsstatus,
                vpBeruf: this.getBO().vp.beruf,
                vpVersicherungsstatus: this.getBO().vp.versicherungsstatus,
                vpKrankenversicherungsschutz: this.getBO().vp.aktuellerVersicherungsschutz,
                vpVersicherungsnummer: this.getBO().vp.versicherungsnummer,

                vnAnredeName: (this.getBO().vn.anrede === "HERR" ? "Herr" : "Frau") + " " + (this.getBO().vn.titel ? this.getBO().vn.titel + " " : "") + this.getBO().vn.vorname + " " + this.getBO().vn.name,
                vnGeburtsdatum: this.getBO().vn.geburtsdatum,
                vnStrasseHausnr: this.getBO().vn.strasse + " " + this.getBO().vn.hausnr,
                vnPlzOrt: this.getBO().vn.plz + " " + this.getBO().vn.ort,
                vnTelefon: this.getBO().vn.telefon,
                vnMail: this.getBO().vn.mail,
                vnBetreuer: betreuer,

                zahlungsart: this.getBO().vn.zahlungsdaten.zahlungsart,
                zahlungsweise: this.getBO().vn.zahlungsdaten.zahlungsweise,
                kontoArt: kontoArt,
                konto: konto,
                kontoinhaber: this.getBO().vn.vorname + " " + this.getBO().vn.name,
                bankName: this.getBO().vn.zahlungsdaten.bank
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));

            if (!hasBetreuer) {
                content.find("[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='betreuer_separator']").hide();
                content.find("[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='betreuer_header']").hide();
                content.find("[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='betreuer_value']").hide();
            }

            content.appendTo(rootElement);
            if (rzTextAndBeitrag.wert!=null) {
            	SchrittRendererHelper.getItemByPseudoId("detail_rz_row").show();
            	SchrittRendererHelper.getItemByPseudoId("tarif_rz_row").show();
            }

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                that._pruefe();
            });

            var links = SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement).find("a");
            links.eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            links.eq(2).prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

            if (this.getBO().vp.versicherungsnummer === null || this.getBO().vp.versicherungsnummer === undefined || this.getBO().vp.versicherungsnummer.length === 0) {
                SchrittRendererHelper.getItemByPseudoId("versicherungsnummer_row", rootElement).hide();
            } else {
                SchrittRendererHelper.getItemByPseudoId("versicherungsnummer_row", rootElement).show();
            }

            var mehrwertBoxTarifAccordion_row = SchrittRendererHelper.getItemByPseudoId("mehrwertBoxTarifAccordion_row", rootElement);
            mehrwertBoxTarifAccordion_row.find("a").click(function(){
                mehrwertBoxTarifAccordion_row.find("a").toggleClass("active");
                mehrwertBoxTarifAccordion_row.find("div.content").toggleClass("active");
            });

            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            (Util.getProp(this.getBO(), ["einstellung", "modul", "leistungen"]) || []).forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt3Renderer.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt3Renderer.prototype._pruefe = function() {
    this.oProdukt.weiter();
};

Schritt3Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt3Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

module.exports = Schritt3Renderer;


/***/ }),
/* 83 */
/***/ (function(module, exports) {

module.exports = {
	mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%= produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
                                <div class="rowX"> \
                                            <ol class="progress-indicator"> \
                                                    <li class="" data-step="1"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="2"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-current" data-step="3"> \
                                                        <span>Angaben überprüfen</span> \
                                                    </li> \
                                                    <li class="is-last" data-step="4"> \
                                                        <span>Online beantragen</span> \
                                                    </li> \
                                            </ol> \
                                        </div> \
                                \
                                </div> \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <!-- Pflichtfelder, SSL --> \
                                    <div class="kvo-content-2"> \
    \
										<div class="kvo-title"> \
											<h1>Angaben überprüfen</h1> \
											<div class="row"> \
												<div class="medium-12 columns"> \
													<span>Auf dieser Seite sehen Sie Ihre bisherigen Angaben im Überblick. Bitte überprüfen Sie Ihre eingegebenen Daten sorgfältig und beachten Sie den Beginn Ihrer gewünschten Absicherung.</span> \
													<p>&nbsp;</p> \
												</div> \
											</div> \
        	                                <hr/> \
											<div class="kvo-content"> \
												<div class="row"> \
													<div class="medium-12 contentbox"> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-shield fa-stack-1x fa-inverse"></i></span> Gewünschte Absicherung</h2> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<div class="contentbox"> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Tarif:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= produkt %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Versicherungsbeginn:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= versicherungsbeginn %></p> \
																	</div> \
																</div> \
															</div> \
															</div> \
														</div> \
													\
														<hr/> \
														<div class="row"> \
															<div class="medium-9 small-9 columns"> \
															<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-user-plus fa-stack-1x fa-inverse"></i></span> Zu versichernde Person</h2> \
															</div> \
															<div class="medium-3 small-3 columns dataEdit text-center"> \
																<a class="back" href="javascript:void(0);">Ändern <i class="fa fa-pencil"></i></a> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<div class="contentbox"> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Anrede, Name:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpAnredeName %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Geburtsdatum:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpGeburtsdatum %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Staatsangehörigkeit:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpStaatsangehoerigkeit %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Tätigkeitsstatus:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpTaetigkeitsstatus %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Ausgeübter Beruf:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpBeruf %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Versicherungsstatus:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpVersicherungsstatus %></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Aktueller Krankenversicherungsschutz:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpKrankenversicherungsschutz %></p> \
																	</div> \
																</div> \
																<div class="row" kv_ref="versicherungsnummer_row" style="display: none"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">GKV-Versichertennummer:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vpVersicherungsnummer %></p> \
																	</div> \
																</div> \
															</div> \
															</div> \
														</div> \
														\
														<hr/> \
														<div class="row"> \
															<div class="medium-9 small-9 columns"> \
																<h2><i class="fa fa-user-circle-o fa-2x"></i> Versicherungsnehmer</h2> \
															</div> \
															<div class="medium-3 small-3 columns dataEdit text-center"> \
																<a class="back" href="javascript:void(0);">Ändern <i class="fa fa-pencil"></i></a> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
																<div class="contentbox"> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Anrede, Name:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnAnredeName %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Geburtsdatum:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnGeburtsdatum %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Straße:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnStrasseHausnr %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">PLZ, Ort:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnPlzOrt %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Telefon:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnTelefon %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">E-Mail:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= vnMail %></p> \
																	</div> \
																	</div> \
																</div> \
															</div> \
														</div> \
					\
														<hr kv_ref="betreuer_separator" /> \
														<div class="row" kv_ref="betreuer_header"> \
															<div class="medium-9 small-9 columns"> \
																<h2><span class="fa-stack fa-lg"><i class="fa fa-map-marker fa-stack-2x"></i></span> Ihr Berater</h2> \
															</div> \
														</div> \
														<div class="row" kv_ref="betreuer_value"> \
															<div class="medium-12 columns"> \
																<div class="contentbox"> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class=""><b><%= vnBetreuer %></b></p> \
																	</div> \
																	</div> \
																</div> \
															</div> \
														</div> \
					\
														<hr /> \
														<div class="row"> \
															<div class="medium-9 small-9 columns"> \
																<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-eur fa-stack-1x fa-inverse"></i></span> Zahlungsdaten</h2> \
															</div> \
															<div class="medium-3 small-3 columns dataEdit text-center"> \
																<a class="back" href="javascript:void(0);">Ändern <i class="fa fa-pencil"></i></a> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
																<div class="contentbox"> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Zahlungsart:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= zahlungsart %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Gewünschte Zahlungsweise:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= zahlungsweise %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline"><%= kontoArt %>:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= konto %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Kontoinhaber:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= kontoinhaber %></p> \
																	</div> \
																	</div> \
																	<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline">Name der Bank:</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= bankName %></p> \
																	</div> \
																	</div> \
																</div> \
															</div> \
														</div> \
														\
														<hr/> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<h2><span class="fa-stack fa-lg"><i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-user-plus fa-stack-1x fa-inverse"></i></span> Ihr Gesamtbeitrag</h2> \
															</div> \
														</div> \
														<div class="row"> \
															<div class="medium-12 columns"> \
															<div class="contentbox"> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline sumContent">Zu versichernde Person</p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"></p> \
																	</div> \
																</div> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline"><%= produkt %></p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= beitragGesamtbeitragOhneRZ %> \u20AC</p> \
																	</div> \
																</div> \
																<div class="row" kv_ref="tarif_rz_row" style="display:none"> \
																	<div class="small-6 columns"> \
																		<p class="small-text button-subline"><%= rzText %></p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= rzWert %> \u20AC</p> \
																	</div> \
																</div> \
																<hr /> \
																<div class="row"> \
																	<div class="small-6 columns"> \
																		<p class="medium-text button-subline"><%= zahlungsweiseGesamtbeitrag %></p> \
																	</div> \
																	<div class="small-6 columns"> \
																		<p class="sumContent"><%= beitragGesamtbeitrag %> \u20AC</p> \
																	</div> \
																</div> \
															</div> \
															</div> \
														</div> \
														\
													<!-- Buttons --> \
														<div class="row"> \
														<div class="medium-5 large-4 columns left"> \
															<p>&nbsp;</p> \
															<a class="button action-back expand back">zurück</a> \
															<p class="small-text button-subline">zu Schritt 2: "Personen- und Zahlungsdaten"</p> \
														</div> \
														<div class="medium-5 large-4 columns right text-right"> \
															<p>&nbsp;</p> \
															<a class="call-to-action button expand check">weiter</a> \
															<p class="small-text button-subline">zu Schritt 4: Vertragsgrundlagen und Online-Antrag</p> \
														</div> \
													</div> \
													<div class="row ssl"> \
				                                        <div class="columns medium-12 "> \
                				                    	    <p>&nbsp;</p> \
                                					        <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                        					<br> \
                                        					<span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                        				</div> \
                                    				</div> \
												</div> \
											</div> \
										</div> \
									</div> \
								</div> \
								</div> \
    \
    \
                                <!-- rechte Mehrwertbox --> \
                                <div class="large-4 medium-5 columns"> \
                                 	<div class="row "> \
                                        <!-- Ausgabe eingegebener Daten --> \
                                     	<div class="medium-11 small-12 summarybox right"> \
                                          	<div class="row" kv_ref="absicherungContent"> \
                                               	<div class="medium-12 columns"> \
                                                    <h2>Ihre gewünschte Absicherung</h2> \
                                                    <h1><%= produkt %></h1> \
                                                    <p><%= produktDesc %></p> \
													<br kv_ref="trenner_leistungen" /> \
                                                </div> \
                                            </div> \
                                            <div class="row display-sum tarifbeitragContent" kv_ref="beitrag_row"> \
                                                <div class="medium-7 small-8 columns"> \
                                                    <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                                </div> \
                                                <div class="medium-5 small-4 columns"> \
                                                     <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                                </div> \
                                            </div> \
                                            <dl class="accordion" data-accordion="" kv_ref="mehrwertBoxTarifAccordion_row"> \
                                                <dd class="accordion-navigation active"> \
                                                    <a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
                                                    <div id="panel1a" class="content active"> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= vpName %>, <%= vpGeburtsdatum %><br />(Zu versichernde Person)</label> \
                                                            </div> \
                                                        </div> \
                                                        <div class="row" kv_ref="detail_beitrag_row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label><%= produkt %></label> \
                                                            </div> \
                                                            <div class="medium-5 small-4 columns"> \
                                                                <input readonly="" type="text" value="<%= beitragGesamtbeitragOhneRZ %> \u20AC"> \
                                                            </div> \
                                                        </div> \
												        <div class="row" kv_ref="detail_rz_row" style="display:none"> \
													        <div class="medium-7 small-8 columns mb05"> \
													            <label><%= rzText %></label> \
													        </div> \
													        <div class="medium-5 small-4 columns"> \
													            <input readonly="" type="text" value="<%= rzWert %> \u20AC"> \
													        </div> \
													    </div> \
                                                        <hr /> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                                            </div> \
                                                            <div class="medium-5 small-4 columns"> \
                                                                <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                </dd> \
                                            </dl> \
                                            <div class="medium-11 small-12 summarybox left"> \
                                                <div class="row" kv_ref="weiterfuehrendeInformationenRow"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Weiterführende Informationen</h2> \
                                                        <ul> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
		                                                    <li><a target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                                        </ul> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                     </div> \
                                  </div> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>'
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);

var Schritt3RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt3RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt3RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(85);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

function getAndOpenDocument(druckstueckBOandUrl) {
    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });
}

Schritt3RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var laufzeit = "";
            var kuendigungsfrist = "3 Monate zum Ende eines Kalenderjahres";
            var betreuer = "";
            var hasBetreuer = false;
            var kontoArt = this.getBO().vn.zahlungsdaten.iban.selected ? "IBAN/BIC" : "Konto/BLZ";
            var konto = this.getBO().vn.zahlungsdaten.iban.selected ? this.getBO().vn.zahlungsdaten.iban.no + "/" + this.getBO().vn.zahlungsdaten.iban.bic :
                            this.getBO().vn.zahlungsdaten.kto.no + "/" + this.getBO().vn.zahlungsdaten.kto.blz;

            if (this.getBO().einstellung.betreuerFestDefiniert) {
                hasBetreuer = false;
            } else if (this.getBO().einstellung.betreuerwahl) {
                if (this.getBO().betreuer.auswahlListe && this.getBO().betreuer.manuelleAuswahl) {
                    this.getBO().betreuer.auswahlListe.some(function(currentBetreuer) {
                        if (currentBetreuer.selected) {
                            betreuer = currentBetreuer.beschreibungen.join("<br />");
                            hasBetreuer = true;
                            return true;
                        }
                        return;
                    });
                }
            } else if (this.getBO().einstellung.betreuer) {
                betreuer = this.getBO().einstellung.betreuer.beschreibungen.join("<br />");
                hasBetreuer = true;
            }

            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(validationResult.vpTarife[0], this.getBO().vn.zahlungsdaten.zahlungsweise);
            var zahlungsweiseUndGesamtbeitragOhneRZ = SchrittRendererHelper.determineZahlbeitragTextAndValue(validationResult.vpTarife[0].beitragOhneRZ, this.getBO().vn.zahlungsdaten.zahlungsweise);

            var renderBO = {
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: Util.getProp(this.getBO(), ["einstellung", "modul", "tariftyp"]) || "",

                beitrag: validationResult.vpTarife[0].beitrag,

                versicherungsbeginn: this.getBO().versicherungsbeginn,
                laufzeit: laufzeit,
                kuendigungsfrist: kuendigungsfrist,
                vpName: this.getBO().vp.vorname + " " + this.getBO().vp.name,
                vpAnredeName: (this.getBO().vp.anrede === "HERR" ? "Herr" : "Frau") + " " + this.getBO().vp.vorname + " " + this.getBO().vp.name,
                vpGeburtsdatum: this.getBO().vp.geburtsdatum,
                vpStaatsangehoerigkeit: this.getBO().vp.staatsangehoerigkeit,
                vpTaetigkeitsstatus: this.getBO().vp.taetigkeitsstatus,
                vpBeruf: this.getBO().vp.beruf,
                vpVersicherungsstatus: this.getBO().vp.versicherungsstatus,
                vpKrankenversicherungsschutz: this.getBO().vp.aktuellerVersicherungsschutz,
                vpVersicherungsnummer: this.getBO().vp.versicherungsnummer,

                vnAnredeName: (this.getBO().vn.anrede === "HERR" ? "Herr" : "Frau") + " " + (this.getBO().vn.titel ? this.getBO().vn.titel + " " : "") + this.getBO().vn.vorname + " " + this.getBO().vn.name,
                vnGeburtsdatum: this.getBO().vn.geburtsdatum,
                vnStrasseHausnr: this.getBO().vn.strasse + " " + this.getBO().vn.hausnr,
                vnPlzOrt: this.getBO().vn.plz + " " + this.getBO().vn.ort,
                vnTelefon: this.getBO().vn.telefon,
                vnMail: this.getBO().vn.mail,
                vnBetreuer: betreuer,

                zahlungsart: this.getBO().vn.zahlungsdaten.zahlungsart,
                zahlungsweise: this.getBO().vn.zahlungsdaten.zahlungsweise,
                kontoArt: kontoArt,
                konto: konto,
                kontoinhaber: this.getBO().vn.vorname + " " + this.getBO().vn.name,
                bankName: this.getBO().vn.zahlungsdaten.bank
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));

            if (hasBetreuer) {
                SchrittRendererHelper.getItemByPseudoId("berater_block", content).show();
            }

            var rzTextAndBeitrag = {
            	text: ' + Risikozuschlag',
            	wert: null
            };
            if (validationResult.vpTarife.length > 0) {
                var tarif = validationResult.vpTarife[0];
                if (tarif.risikozuschlaege && tarif.risikozuschlaege.length>0) {
                	var rz = 0;
                	for (var i=0; i<tarif.risikozuschlaege.length; i++)
                		rz += tarif.risikozuschlaege[i].ro_rzAbsolut;

                	if (tarif.risikozuschlaege.length==1 && tarif.risikozuschlaege[0].webText && tarif.risikozuschlaege[0].webText.length>0)
                		rzTextAndBeitrag.text = tarif.risikozuschlaege[0].webText;

                	var rzAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(rz, this.getBO().vn.zahlungsdaten.zahlungsweise);
                	rzTextAndBeitrag.wert = rzAndBeitrag.value;
                }
            }

            var fnGesamtbeitragTemplate = _.template(schrittTemplate.vpGesamtbeitragTemplate);
            var gesamtbeitragRows = $(fnGesamtbeitragTemplate({
            	produkt: this.getBO().produkt,
            	zahlungsweise: this.getBO().vn.zahlungsdaten.zahlungsweise,
            	tarifbeitrag: zahlungsweiseUndGesamtbeitragOhneRZ.value,
            	rzText: rzTextAndBeitrag.text,
            	rzWert: rzTextAndBeitrag.wert,
            	beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value,
            	zahlungsweiseGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.text}));
            gesamtbeitragRows.appendTo(content);

            if (!hasBetreuer) {
                SchrittRendererHelper.getItemByPseudoId("berater_block", content).hide();
            } else {
                SchrittRendererHelper.getItemByPseudoId("berater_block", content).show();
            }

            content.appendTo(rootElement);
            if (rzTextAndBeitrag.wert!=null) {
            	//SchrittRendererHelper.getItemByPseudoId("detail_rz_row").show();
            	SchrittRendererHelper.getItemByPseudoId("tarif_rz_row").show();
            }

            var fnActionRow = _.template(schrittTemplate.actionRowTemplate);
            var actionRow = $(fnActionRow());
            actionRow.insertAfter(gesamtbeitragRows);

            actionRow.find("input.back").click(function() {
                that._zurueck();
            });
            content.find("a.back").click(function() {
                that._zurueck();
            });
            actionRow.find("input.check").click(function() {
                that._pruefe();
            });
        }

        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt3RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt3RendererIF6.prototype._pruefe = function() {
    this.oProdukt.weiter();
};

Schritt3RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt3RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

module.exports = Schritt3RendererIF6;


/***/ }),
/* 85 */
/***/ (function(module, exports) {

module.exports = {
	mainTemplate: ' \
                    <div kv_ref="kvo_content"> \
                        <!-- Progress / Header --> \
                        <div class="block"> \
                            <ul class="progress"> \
                                <li class="">1</li> \
                                <li class="">2</li> \
                                <li class="active">3</li> \
                                <li class="">4</li> \
                            </ul> \
                            <h2>Angaben zu Tarif <%- produkt %> überprüfen</h2> \
                        </div> \
                        <!-- Contentbereich --> \
                        <div class="block"> \
                            <p><strong>Auf dieser Seite sehen Sie Ihre bisherigen Angaben im Überblick. Bitte überprüfen Sie Ihre eingegebenen Daten sorgfältig und beachten Sie den Beginn Ihrer gewünschten Absicherung.</strong></p> \
                        </div> \
                        <!-- Datenausgabeblock --> \
                        <!-- Produkt --> \
                        <div class="block"> \
                            <h3>Gewünschte Absicherung</h3> \
                            <!-- Tarif --> \
                            <div class="bline"> \
                                <label for="">Tarif:</label> \
                                <span><%- produkt %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Versicherungsbeginn --> \
                            <div class="bline"> \
                                <label for="">Versicherungsbeginn:</label> \
                                <span><%- versicherungsbeginn %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- VP --> \
                        <div class="block"> \
                            <div class="bline"> \
                                <div class=""> \
                                    <h3>Zu versichernde Person</h3> \
                                </div> \
                                <div class="editbutton"> \
                                    <a class="back" href="javascript:void(0);">Ändern</a> \
                                </div> \
                                <br class="bterm" /> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Name --> \
                            <div class="bline"> \
                                <label for="">Anrede, Name:</label> \
                                <span><%- vpAnredeName %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Geburtsdatum --> \
                            <div class="bline"> \
                                <label for="">Geburtsdatum:</label> \
                                <span><%- vpGeburtsdatum %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Staatsangehoerigkeit --> \
                            <div class="bline"> \
                                <label for="">Staatsangehörigkeit:</label> \
                                <span><%- vpStaatsangehoerigkeit %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Taetigkeitsstatus --> \
                            <div class="bline"> \
                                <label for="">Tätigkeitsstatus:</label> \
                                <span><%- vpTaetigkeitsstatus %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Beruf --> \
                            <div class="bline"> \
                                <label for="">Ausgeübter Beruf:</label> \
                                <span><%- vpBeruf %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Versicherungsstatus --> \
                            <div class="bline"> \
                                <label for="">Versicherungsstatus:</label> \
                                <span><%- vpVersicherungsstatus %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Krankenversicherungsschutz --> \
                            <div class="bline"> \
                                <label for="">Aktueller Krankenversicherungsschutz:</label> \
                                <span><%- vpKrankenversicherungsschutz %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- VP-Versichertennummer --> \
                            <div class="bline" kv_ref="versicherungsnummer_row" style="display: none"> \
                                <label for="">GKV-Versichertennummer:</label> \
                                <span><%- vpVersicherungsnummer %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- VN --> \
                        <div class="block"> \
                            <!-- VN Ueberschrift --> \
                            <div class="bline"> \
                                <div class=""> \
                                    <h3>Versicherungsnehmer</h3> \
                                </div> \
                                <br class="bterm" /> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Anrede --> \
                            <div class="bline"> \
                                <label for="">Anrede, Name:</label> \
                                <span><%- vnAnredeName %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Geburtsdatum --> \
                            <div class="bline"> \
                                <label for="">Geburtsdatum:</label> \
                                <span><%- vnGeburtsdatum %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Strasse --> \
                            <div class="bline"> \
                                <label for="">Straße:</label> \
                                <span><%- vnStrasseHausnr %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Plz --> \
                            <div class="bline"> \
                                <label for="">PLZ, Ort:</label> \
                                <span><%- vnPlzOrt %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Telefon --> \
                            <div class="bline"> \
                                <label for="">Telefon:</label> \
                                <span><%- vnTelefon %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- E-Mail --> \
                            <div class="bline"> \
                                <label for="">E-Mail:</label> \
                                <span><%- vnMail %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                        <!-- Zahlungsdaten --> \
                        <div class="block"> \
                            <!-- Zahlungsdaten --> \
                            <div class="bline"> \
                                <div class=""> \
                                    <h3>Zahlungsdaten</h3> \
                                </div> \
                                <br class="bterm" /> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Zahlungsart --> \
                            <div class="bline"> \
                                <label for="">Zahlungsart:</label> \
                                <span><%- zahlungsart %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Zahlungsweise --> \
                            <div class="bline"> \
                                <label for="">Zahlungsweise:</label> \
                                <span><%- zahlungsweise %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Kontoart --> \
                            <div class="bline"> \
                                <label for=""><%- kontoArt %>:</label> \
                                <span><%- konto %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Kontoinhaber --> \
                            <div class="bline"> \
                                <label for="">Kontoinhaber:</label> \
                                <span><%- kontoinhaber %></span> \
                                <br class="bterm" /> \
                            </div> \
                            <!-- Name der Bank --> \
                            <div class="bline"> \
                                <label for="">Name der Bank:</label> \
                                <span><%- bankName %></span> \
                                <br class="bterm" /> \
                            </div> \
                        </div> \
                    </div>',

    vpGesamtbeitragTemplate: ' \
                    <div class="block"> \
                        <h1>Ihr Gesamtbeitrag</h1> \
                        <div class="table"> \
                            <table> \
                                <tbody> \
                                    <tr> \
                                        <th class="left header">Tarifname</th> \
                                        <th class="header"><%- produkt %></th> \
                                    </tr> \
							        <tr> \
								        <th class="left header">Tarifbeitrag <%- zahlungsweise %></th> \
								        <td class="header"><%- tarifbeitrag %> \u20AC</td> \
								    </tr> \
							        <tr kv_ref="tarif_rz_row" style="display:none"> \
								        <th class="left header"><%= rzText %> <%- zahlungsweise %></th> \
								        <td class="header"><%- rzWert %> \u20AC</td> \
								    </tr> \
                                </tbody> \
                                <tfoot> \
                                    <tr> \
                                        <th class="left header"><%- zahlungsweiseGesamtbeitrag %></th> \
                                        <td class="header"><%- beitragGesamtbeitrag %> \u20AC</td> \
                                    </tr> \
                                </tfoot> \
                            </table> \
                            <br class="bterm" /> \
                        </div> \
                    </div>',

    actionRowTemplate: '\
                        <div class="block" style="height: auto;"> \
                        <!-- Button --> \
                            <div class="buttonline"> \
                                <div class="bgroup2"> \
                                    <div> \
                                        <input type="submit" name="zurück" value="zurück" class="back" onclick="return false;" class="" title="zurück"> \
                                    </div> \
                                </div> \
                                <div class="bgroup1"> \
                                    <div> \
                                        <input type="submit" name="Weiter" id="defaultAction" class="check" value="Weiter" onclick="return false;" class="" title="Weiter"> \
                                    </div> \
                                </div> \
                            </div> \
                        </div'

};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);


var fnErrorLabelTemplate;

function getAndOpenDocument(druckstueckBOandUrl) {
    var deferred = $.Deferred();

    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                deferred.resolve();
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                deferred.reject();
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            deferred.reject();
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });

    return deferred.promise();
}

function clearErrors(kv_ref_name, label) {
    label.parent().find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
}

function addError(kv_ref_name, label, errorText) {
    var error = $(fnErrorLabelTemplate({error: errorText}));
    error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
    error.insertAfter(label);
}

var Schritt4Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt4Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt4Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(87);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt4Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(validationResult.vpTarife[0], this.getBO().vn.zahlungsdaten.zahlungsweise);
            var zahlungsweiseUndGesamtbeitragOhneRZ = SchrittRendererHelper.determineZahlbeitragTextAndValue(validationResult.vpTarife[0].beitragOhneRZ, this.getBO().vn.zahlungsdaten.zahlungsweise);

            var rzTextAndBeitrag = {
            	text: ' + Risikozuschlag',
            	wert: null
            };
            if (validationResult.vpTarife.length > 0) {
                var tarif = validationResult.vpTarife[0];
                if (tarif.risikozuschlaege && tarif.risikozuschlaege.length>0) {
                	var rz = 0;
                	for (var i=0; i<tarif.risikozuschlaege.length; i++)
                		rz += tarif.risikozuschlaege[i].ro_rzAbsolut;

                	if (tarif.risikozuschlaege.length==1 && tarif.risikozuschlaege[0].webText && tarif.risikozuschlaege[0].webText.length>0)
                		rzTextAndBeitrag.text = tarif.risikozuschlaege[0].webText;

                	var rzAndBeitrag = SchrittRendererHelper.determineZahlbeitragTextAndValue(rz, this.getBO().vn.zahlungsdaten.zahlungsweise);
                	rzTextAndBeitrag.wert = rzAndBeitrag.value;
                }
            }

            var textPapierverzicht = Util.getTextFromEncodedObject(this.getBO().texte.papierverzicht);
            var textAbschlusserklaerung = Util.getTextFromEncodedObject(this.getBO().texte.abschlusserklaerung);
            var textBeratungsverzicht = Util.getTextFromEncodedObject(this.getBO().texte.beratungsverzicht);
            var textVertragsinformation = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformation);

            var textDatenschutzTitle = Util.getTextFromEncodedObject(this.getBO().texte.datenschutzTitle);
            var textVertragsgrundlagen = Util.getTextFromEncodedObject(this.getBO().texte.vertragsgrundlagen);
            var textVertragsinformationTitle = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformationTitle);
            var textDatenschutz = Util.getTextFromEncodedObject(this.getBO().texte.datenschutz);

            var renderBO = {
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: Util.getProp(this.getBO(), ["einstellung", "modul", "tariftyp"]) || "",
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                vpName: this.getBO().vp.vorname + " " + this.getBO().vp.name,
                vpGeburtsdatum: this.getBO().vp.geburtsdatum,
                beitrag: this.getBO().vpTarife[0].beitrag,
                zahlungsweiseGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.text,
                beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value,
                beitragGesamtbeitragOhneRZ: zahlungsweiseUndGesamtbeitragOhneRZ.value,
                rzText: rzTextAndBeitrag.text,
                rzWert: rzTextAndBeitrag.wert,
                textPapierverzicht: textPapierverzicht,
                textAbschlusserklaerung: textAbschlusserklaerung,
                textBeratungsverzicht: textBeratungsverzicht,
                textVertragsinformation: textVertragsinformation,
                textDatenschutzTitle: textDatenschutzTitle,
                textVertragsgrundlagen: textVertragsgrundlagen,
                textVertragsinformationTitle: textVertragsinformationTitle,
                textDatenschutz: textDatenschutz
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);
            if (rzTextAndBeitrag.wert!=null) {
            	SchrittRendererHelper.getItemByPseudoId("detail_rz_row").show();
            }

            fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);

            SchrittRendererHelper.getItemByPseudoId("capt", rootElement, "input").change(function() {
                that.getBO().capt.bildCode = $(this).val();
            });
            SchrittRendererHelper.getItemByPseudoId("beratung", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noBeratung.accepted = true;
                } else {
                    that.getBO().noBeratung.accepted = false;
                }
            });
            var checkBeratung = function() {
                var kv_ref_name = "beratung";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().noBeratung.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            SchrittRendererHelper.getItemByPseudoId("papierunterlagen", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noPapierunterlagen.accepted = true;
                } else {
                    that.getBO().noPapierunterlagen.accepted = false;
                }
            });
            var checkPapierunterlagen = function() {
                var kv_ref_name = "papierunterlagen";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().noPapierunterlagen.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };

            SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vvg.accepted = true;
                } else {
                    that.getBO().vvg.accepted = false;
                }
            });
            if (!this.getBO().vvg.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", true);
            }
            SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().datenschutzerklaerung.accepted = true;
                } else {
                    that.getBO().datenschutzerklaerung.accepted = false;
                }
            });
            content.find("a.vvg").click(function() {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckVertragsinformationBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().vvg.downloaded = true;
                });
            });
            var checkVVG = function() {
                var kv_ref_name = "vvg";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().vvg.downloaded) {
                    addError(kv_ref_name, label, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().vvg.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            content.find("a.datenschutz").click(function() {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckDatenschutzBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().datenschutzerklaerung.downloaded = true;
                });
            });
            if (!this.getBO().datenschutzerklaerung.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", true);
            }
            var checkDS = function() {
                var kv_ref_name = "ds";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (!that.getBO().datenschutzerklaerung.downloaded) {
                    addError(kv_ref_name, label, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().datenschutzerklaerung.accepted) {
                    addError(kv_ref_name, label, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            var checkCaptcha = function() {
                var kv_ref_name = "capt";

                var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
                clearErrors(kv_ref_name, label);

                if (that.getBO().capt.bildCode === null || that.getBO().capt.bildCode.length === 0 || that.getBO().capt.bildCode.length > 20) {
                    addError(kv_ref_name, label, "Sie müssen den im Bild angezeigten Sicherheitscode eingeben.");
                    return false;
                }

                return true;
            }

            this._updateCaptcha();

            content.find("a.back").click(function() {
                that._zurueck();
            });
            content.find("a.check").click(function() {
                var okBeratung = checkBeratung();
                var okPapierunterlagen = checkPapierunterlagen();
                var okVVG = checkVVG();
                var okDS = checkDS();
                var okCaptcha = checkCaptcha();

                if (okBeratung && okPapierunterlagen && okVVG && okDS && okCaptcha) {
                    that._abschluss();
                } else {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                }
            });

            var links = SchrittRendererHelper.getItemByPseudoId("weiterfuehrendeInformationenRow", rootElement).find("a");
            links.eq(0).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckTariferklaerungBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            // Vorschlag
            links.eq(1).click(function(e) {
                e.preventDefault();

                var druckstueckBOandUrl = that._getDruckstueckVorschlagBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl);
            });
            links.eq(2).prop("href", this.getBO().einstellung.versicherer.urlStreitbeilegung);

            var mehrwertBoxTarifAccordion_row = SchrittRendererHelper.getItemByPseudoId("mehrwertBoxTarifAccordion_row", rootElement);
            mehrwertBoxTarifAccordion_row.find("a").click(function(){
                mehrwertBoxTarifAccordion_row.find("a").toggleClass("active");
                mehrwertBoxTarifAccordion_row.find("div.content").toggleClass("active");
            });

            // Leistungen
            var trennerLeistungen = SchrittRendererHelper.getItemByPseudoId("trenner_leistungen");
            (Util.getProp(this.getBO(), ["einstellung", "modul", "leistungen"]) || []).forEach(function(leistung) {
                $("<ul><li>" + leistung + "</li></ul>").insertAfter(trennerLeistungen);
            });
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt4Renderer.prototype._getDruckstueckDatenschutzBOandUrl = function() {
    return this.oProdukt.getDruckstueckDatenschutzBOandUrl(this.getBO());
};

Schritt4Renderer.prototype._getDruckstueckVertragsinformationBOandUrl = function() {
    return this.oProdukt.getDruckstueckVertragsinformationBOandUrl(this.getBO());
};

Schritt4Renderer.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt4Renderer.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt4Renderer.prototype._updateCaptcha = function() {
    this._getCaptcha().then(function(oResult) {
        //SchrittRendererHelper.getItemByPseudoId("capt_im", rootElement).attr("src", Config.resourceUrl + "?token=" + oResult);
        this.getBO().capt.token = oResult.token;
        SchrittRendererHelper.getItemByPseudoId("capt_im", this.rootElement).attr("src", Config.resourceUrl + "?token=" + oResult.captcha.bytes);
    }.bind(this)).fail(function(e) {
        var kv_ref_name = "commonErrors";

        var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
        clearErrors(kv_ref_name, label);

        if (e.validationErrors) {
            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });

            // wg. insertAfter am Ende
            addError(kv_ref_name, label, "Es liegen folgende Fehler vor:");

            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
    }.bind(this));
};

Schritt4Renderer.prototype._getCaptcha = function() {
    return this.oProdukt.getCaptcha(this.getBO());
};

Schritt4Renderer.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt4Renderer.prototype._abschluss = function() {
    var that = this;

    this.setBusy(true);
    this.oProdukt.abschluss(this.getBO()).then(function(oResult) {
        that.oProdukt.abschlussFinish(that.getBO(), oResult);
    }).fail(function(e) {
        if (e === "token") {
            var kv_ref_name = "capt";
            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);
            addError(kv_ref_name, label, "Der angegebene Bildcode muss mit dem angezeigten übereinstimmen.");
        } else if (e !== null && e !== undefined && typeof e === "object" && e.validationErrors) {
            var kv_ref_name = "commonErrors";

            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);

            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });
        }
        that.getBO().capt.bildCode = "";
        SchrittRendererHelper.getItemByPseudoId("capt", that.rootElement, "input").val("");

        SchrittRendererHelper.scrollToFirstError(that.rootElement);
        that._updateCaptcha();
    }).always(function() {
        that.setBusy(false);
    });
};

module.exports = Schritt4Renderer;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%= produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
                                <div class="rowX"> \
                                            <ol class="progress-indicator"> \
                                                    <li class="" data-step="1"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="2"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="" data-step="3"> \
                                                        <span></span> \
                                                    </li> \
                                                    <li class="is-current" data-step="4"> \
                                                        <span>Online beantragen</span> \
                                                    </li> \
                                            </ol> \
                                        </div> \
                                \
                                </div> \
    \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <!-- Pflichtfelder, SSL --> \
                                    <div class="kvo-content-2"> \
    \
                                        <div class="kvo-title"> \
                                           <h1>Vertragsgrundlagen und Erklärungen des Antragstellers und der zu versichernden Personen</h1> \
								            <div class="row"> \
									            <div class="large-12 medium-12 columns"> \
									                <span>In diesem Schritt finden Sie alle rechtlich notwendigen Dokumente rund um Ihre gewünschte Absicherung, bevor Sie am Ende der Seite Ihren Online-Antrag an uns absenden können.</span> \
									                <p>&nbsp;</p> \
									            </div> \
									        </div> \
                                        </div> \
        	                            <hr/> \
                                        <div class="kvo-content"> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <%= textVertragsgrundlagen %>  <a target="_blank" href="https://get.adobe.com/de/reader/"><img border="0" src="' + Config.mediaUrl + 'form/fod_style/base/resources/img/get_reader.png" type="image" name="imageField"></a>\
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns" data-abide> \
                                                    <label kv_ref="commonErrors"></label> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="beratung"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-1" type="radio" class="digit-1" id="image-radio-1"><label style="left: 5px;" for="image-radio-1"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <b>Verzicht auf Beratung</b> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_beratung" id="p_beratung" kv_ref="beratung"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_beratung"></label> \
                                                        </div> \
                                                        <%= textBeratungsverzicht %> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="vvg"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-2" type="radio" class="digit-2" id="image-radio-2"><label style="left: 5px;" for="image-radio-2"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                        <strong>Herunterladen wichtiger Vertragsinformationen</strong><br/><%= textVertragsinformationTitle %><br> \
                                                            <p>&nbsp;</p> \
                                                            <a class="button erklaerung vvg">Erklärung herunterladen</a> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_vvg" id="p_vvg" kv_ref="vvg"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_vvg"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"><%= textVertragsinformation %></div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="papierunterlagen"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-3" type="radio" class="digit-3" id="image-radio-3"><label style="left: 5px;" for="image-radio-3"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <b>Verzicht auf Papierunterlagen</b> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_papierunterlagen" id="p_papierunterlagen" kv_ref="papierunterlagen"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_papierunterlagen"></label> \
                                                        </div> \
                                                        <%= textPapierverzicht %> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="small-12 columns" data-abide> \
                                                            <label kv_ref="ds"></label> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-4" type="radio" class="digit-4" id="image-radio-4"><label style="left: 5px;" for="image-radio-4"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                             <strong>Herunterladen wichtiger Datenschutzinformationen</strong><br><%= textDatenschutzTitle %> \
                                                            <p>&nbsp;</p> \
                                                            <a class="button datenschutz">Erklärung herunterladen</a> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-12 columns"> \
                                                            <p>&nbsp;</p> \
                                                        </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input value="true" type="checkbox" name="p_ds" id="p_ds" kv_ref="ds"><label style="left: 0; margin-left: 0; margin-right: 0;" for="p_ds"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <%= textDatenschutz %> \
                                                        </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="medium-12 columns"> \
                                                    <p>&nbsp;</p> \
                                                </div> \
                                            </div> \
                                            <div class="row"> \
                                                <div class="small-12 columns"> \
                                                    <div class="dataSummary"> \
                                                        <div class="row"> \
                                                        <div class="small-1 columns"> \
                                                            <input checked="" name="digit-5" type="radio" class="digit-5" id="image-radio-5"><label style="left: 5px;" for="image-radio-5"></label> \
                                                        </div> \
                                                        <div class="small-11 columns"> \
                                                            <div class="row"> \
                                                                <div class="small-12 columns"> \
                                                                    <b>Abschließende Erklärung</b> \
                                                                    <%= textAbschlusserklaerung %> \
                                                                    <br>Die mit * gekennzeichneten Tarife werden parallel angeboten. Die Erläuterung in dem Informationsblatt "Weitere Vertragsgrundlagen und Zusatzerklärungen des Antragstellers und der zu versichernden Personen" habe ich gelesen. \
                                                                    <p>&nbsp;</p> \
                                                                </div> \
                                                            </div> \
                                                            <div class="row"> \
                                                                <div class="small-12 columns"> \
                                                                    <img kv_ref="capt_im" type="image" border="0"> \
                                                                    <p>&nbsp;</p> \
                                                                </div> \
                                                            </div> \
                                                            <div class="row"> \
                                                                <div class="small-12 columns" data-abide> \
                                                                    <label>Geben Sie hier den im oberen Bild angezeigten Sicherheitscode ein (Groß- und Kleinschreibung kann vernachlässigt werden):</label> \
                                                                    <label kv_ref="capt"></label> \
                                                                </div> \
                                                            </div> \
                                                            <div class="row"> \
                                                                <div class="small-4 columns"> \
                                                                    <input maxlength="15" type="text" class="antwort" style="text-transform: uppercase;" kv_ref="capt"> \
                                                                </div> \
                                                            </div> \
                                                        </div> \
                                                        </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                                \
                                            <!-- Buttons --> \
                                            <div class="row"> \
                                                <div class="medium-5 large-4 columns left"> \
                                                    <p>&nbsp;</p> \
                                                    <a class="button expand action-back back">zurück</a> \
                                                    <p class="small-text button-subline">zu Schritt 3: "Angaben Überprüfen"</p> \
                                                </div> \
                                                <div class="medium-5 large-4 columns right text-right"> \
                                                    <p>&nbsp;</p> \
                                                    <a class="call-to-action button expand check">Jetzt zahlungspflichtig online beantragen</a> \
                                                </div> \
                                            </div> \
                                            <div class="row ssl"> \
                                                <div class="columns medium-12 "> \
                                                    <p>&nbsp;</p> \
                                                    <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                                    <br> \
                                                    <span class="secure"> Sichere Datenübertragung per SSL. Die Daten werden von Ihrem Computer oder mobilen Gerät geschützt zu unserem Formular übermittelt, so dass Dritte diese Daten nicht einsehen können.</span> \
                                                </div> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
 \
                                <!-- rechte Mehrwertbox --> \
                                <div class="large-4 medium-5 columns"> \
                                 	<div class="row "> \
                                        <!-- Ausgabe eingegebener Daten --> \
                                     	<div class="medium-11 small-12 summarybox right"> \
                                          	<div class="row" kv_ref="absicherungContent"> \
                                               	<div class="medium-12 columns"> \
                                                    <h2>Ihre gewünschte Absicherung</h2> \
                                                    <h1><%= produkt %></h1> \
                                                    <p><%= produktDesc %></p> \
                                                    <br kv_ref="trenner_leistungen" /> \
                                                </div> \
                                            </div> \
                                            <div class="row display-sum tarifbeitragContent"> \
                                                <div class="medium-7 small-8 columns"> \
                                                    <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                                </div> \
                                                <div class="medium-5 small-4 columns"> \
                                                     <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                                </div> \
                                            </div> \
                                            <dl class="accordion" data-accordion="" kv_ref="mehrwertBoxTarifAccordion_row"> \
                                                <dd class="accordion-navigation active"> \
                                                    <a class="active follow_link" href="javascript:void(0);">Details zum Gesamtbeitrag</a> \
                                                    <div id="panel1a" class="content active"> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= vpName %>, <%= vpGeburtsdatum %><br />(Zu versichernde Person)</label> \
                                                            </div> \
                                                        </div> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label><%= produkt %></label> \
                                                            </div> \
                                                            <div class="medium-5 small-4 columns"> \
                                                                <input readonly="" type="text" value="<%= beitragGesamtbeitragOhneRZ %> \u20AC"> \
                                                            </div> \
                                                        </div> \
												        <div class="row" kv_ref="detail_rz_row" style="display:none"> \
													        <div class="medium-7 small-8 columns mb05"> \
													            <label><%= rzText %></label> \
													        </div> \
													        <div class="medium-5 small-4 columns"> \
													            <input readonly="" type="text" value="<%= rzWert %> \u20AC"> \
													        </div> \
													    </div> \
                                                        <hr /> \
                                                        <div class="row"> \
                                                            <div class="medium-7 small-8 columns mb05"> \
                                                                <label class="summary"><%= zahlungsweiseGesamtbeitrag %></label> \
                                                            </div> \
                                                            <div class="medium-5 small-4 columns"> \
                                                                <input readonly="" type="text" value="<%= beitragGesamtbeitrag %> \u20AC"> \
                                                            </div> \
                                                        </div> \
                                                    </div> \
                                                </dd> \
                                            </dl> \
                                            <div class="medium-11 small-12 summarybox left"> \
                                                <div class="row" kv_ref="weiterfuehrendeInformationenRow"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Weiterführende Informationen</h2> \
                                                        <ul> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Tariferklärung</a></li> \
                                                            <li><a href="javascript:void(0);"><i class="fa fa-caret-right"></i> Angebot drucken</a></li> \
                                                            <li><a target="_blank"><i class="fa fa-caret-right"></i> Außergerichtliche Streitbeilegung</a></li> \
                                                        </ul> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                     </div> \
                                  </div> \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>',

    errorLabelTemplate: '<small style="display: block" class="error"><%- error %></small>'
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);


var fnErrorLabelTemplate;

function getAndOpenDocument(druckstueckBOandUrl) {
    var deferred = $.Deferred();

    var win = window.open("", "_blank");
    win.document.write("Das Dokument wird geladen. Bitte warten Sie ..");
    $.ajax({
        type: "POST",
        url: druckstueckBOandUrl.serviceUrl,
        data: JSON.stringify(druckstueckBOandUrl.bo),
        contentType: "application/json",
        success: function(data) {
            if (data.state === "OK") {
                deferred.resolve();
                win.location.href = Config.resourceUrl + "?token=" + data.contentData;
            } else {
                deferred.reject();
                win.document.write("Das Dokument konnte aufgrund eines Anwendungsfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
            }
        },
        error: function(){
            deferred.reject();
            win.document.write("Das Dokument konnte aufgrund eines Netzwerkfehlers nicht geladen werden. Bitte versuchen Sie es später nochmal.");
        }

    });

    return deferred.promise();
}

function clearErrors(kv_ref_name, label) {
    label.parent().find(".error[" + SchrittRendererHelper.getAttrNameOfPseudoId() + "='" + kv_ref_name + "']").remove();
}

function addError(kv_ref_name, label, errorText) {
    var error = $(fnErrorLabelTemplate({error: errorText}));
    error.attr(SchrittRendererHelper.getAttrNameOfPseudoId(), kv_ref_name);
    error.insertBefore(label);
}

var Schritt4RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt4RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt4RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(89);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt4RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var zahlungsweiseUndGesamtbeitrag = SchrittRendererHelper.determineGesamtebeitragTextAndValue(this.getBO().vpTarife[0], this.getBO().vn.zahlungsdaten.zahlungsweise);

            var textPapierverzicht = Util.getTextFromEncodedObject(this.getBO().texte.papierverzicht);
            var textAbschlusserklaerung = Util.getTextFromEncodedObject(this.getBO().texte.abschlusserklaerung);
            var textBeratungsverzicht = Util.getTextFromEncodedObject(this.getBO().texte.beratungsverzicht);
            var textVertragsinformation = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformation);

            var textDatenschutzTitle = Util.getTextFromEncodedObject(this.getBO().texte.datenschutzTitle);
            var textVertragsgrundlagen = Util.getTextFromEncodedObject(this.getBO().texte.vertragsgrundlagen);
            var textVertragsinformationTitle = Util.getTextFromEncodedObject(this.getBO().texte.vertragsinformationTitle);
            var textDatenschutz = Util.getTextFromEncodedObject(this.getBO().texte.datenschutz);

            var renderBO = {
                produkt: this.getBO().produkt,
                produktDesc: "",
                hotline: this.getBO().einstellung.versicherer.hotline,
                hotlineTitel: this.getBO().einstellung.versicherer.hotlineTitel,
                hotlineProdukt: Util.getProp(this.getBO(), ["einstellung", "modul", "tariftyp"]) || "",
                oeffnungszeit: this.getBO().einstellung.versicherer.oeffnungszeit,
                zahlungsweiseGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.text,
                beitragGesamtbeitrag: zahlungsweiseUndGesamtbeitrag.value,
                textPapierverzicht: textPapierverzicht,
                textAbschlusserklaerung: textAbschlusserklaerung,
                textBeratungsverzicht: textBeratungsverzicht,
                textVertragsinformation: textVertragsinformation,
                textDatenschutzTitle: textDatenschutzTitle,
                textVertragsgrundlagen: textVertragsgrundlagen,
                textVertragsinformationTitle: textVertragsinformationTitle,
                textDatenschutz: textDatenschutz,
                textVisitenkarteTitle: 'Gerne möchten wir Sie darüber informieren, mit wem Sie es zu tun haben. Laden Sie dazu bitte die Vermittlerinformationen (PDF) herunter.',
                textVisitenkarte: 'Hiermit bestätige ich die Vermittlerinformationen heruntergeladen und gelesen zu haben.',
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            fnErrorLabelTemplate = _.template(schrittTemplate.errorLabelTemplate);

            if (this.getBO().iddDetails.visitenkartenURL && this.getBO().iddDetails.visitenkartenURL.length>0) {
            	SchrittRendererHelper.getItemByPseudoId("vkCont", rootElement).show();

            	SchrittRendererHelper.getItemByPseudoId("kvo_content", rootElement).find("div.consal_block_nummer").each(function(idx){
            		$(this).html('' + (idx+1));
            	});

                SchrittRendererHelper.getItemByPseudoId("vk", rootElement, "input").change(function() {
                    if($(this).is(":checked")) {
                        that.getBO().vk.accepted = true;
                    } else {
                        that.getBO().vk.accepted = false;
                    }
                });

                SchrittRendererHelper.getItemByPseudoId("vk", rootElement, "input").prop("disabled", true);
                that.getBO().vk.downloaded = false;

                content.find("input.visitenkarte").click(function() {
                    SchrittRendererHelper.getItemByPseudoId("vk", rootElement, "input").prop("disabled", false);

                    that.getBO().vk.downloaded = true;
                    var druckstueckBOandUrl = that.getBO().iddDetails.visitenkartenURL;
                    var win = window.open("", "_blank");
                    win.location.href = druckstueckBOandUrl;
                });

                SchrittRendererHelper.getItemByPseudoId("vermverinfo1", rootElement).hide();
                SchrittRendererHelper.getItemByPseudoId("vermverinfo2", rootElement).hide();
            }
            var checkVk = function() {
            	if (that.getBO().iddDetails.visitenkartenURL && that.getBO().iddDetails.visitenkartenURL.length>0) {
	                var kv_ref_name = "vk_hidden";

	                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
	                clearErrors(kv_ref_name, input);

	                if (!that.getBO().vk.accepted) {
	                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
	                    return false;
	                }
                }
                return true;
            };

            SchrittRendererHelper.getItemByPseudoId("capt", rootElement, "input").change(function() {
                that.getBO().capt.bildCode = $(this).val();
            });
            SchrittRendererHelper.getItemByPseudoId("beratung", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noBeratung.accepted = true;
                } else {
                    that.getBO().noBeratung.accepted = false;
                }
            });
            var checkBeratung = function() {
                var kv_ref_name = "beratung_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().noBeratung.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            SchrittRendererHelper.getItemByPseudoId("papierunterlagen", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().noPapierunterlagen.accepted = true;
                } else {
                    that.getBO().noPapierunterlagen.accepted = false;
                }
            });
            var checkPapierunterlagen = function() {
                var kv_ref_name = "papierunterlagen_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().noPapierunterlagen.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };

            SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().vvg.accepted = true;
                } else {
                    that.getBO().vvg.accepted = false;
                }
            });
            if (!this.getBO().vvg.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", true);
            }
            SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").change(function() {
                if($(this).is(":checked")) {
                    that.getBO().datenschutzerklaerung.accepted = true;
                } else {
                    that.getBO().datenschutzerklaerung.accepted = false;
                }
            });
            content.find("input.vvg").click(function() {
                SchrittRendererHelper.getItemByPseudoId("vvg", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckVertragsinformationBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().vvg.downloaded = true;
                });
            });
            var checkVVG = function() {
                var kv_ref_name = "vvg_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().vvg.downloaded) {
                    addError(kv_ref_name, input, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().vvg.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            content.find("input.datenschutz").click(function() {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", false);

                var druckstueckBOandUrl = that._getDruckstueckDatenschutzBOandUrl();
                getAndOpenDocument(druckstueckBOandUrl).then(function() {
                    that.getBO().datenschutzerklaerung.downloaded = true;
                });
            });
            if (!this.getBO().datenschutzerklaerung.downloaded) {
                SchrittRendererHelper.getItemByPseudoId("ds", rootElement, "input").prop("disabled", true);
            }
            var checkDS = function() {
                var kv_ref_name = "ds_hidden";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (!that.getBO().datenschutzerklaerung.downloaded) {
                    addError(kv_ref_name, input, "Das Dokument muss heruntergeladen werden.");
                    return false;
                } else if (!that.getBO().datenschutzerklaerung.accepted) {
                    addError(kv_ref_name, input, "Die Zustimmung ist erforderlich.");
                    return false;
                }

                return true;
            };
            var checkCaptcha = function() {
                var kv_ref_name = "capt";

                var input = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "input");
                clearErrors(kv_ref_name, input);

                if (that.getBO().capt.bildCode === null || that.getBO().capt.bildCode.length === 0 || that.getBO().capt.bildCode.length > 20) {
                    addError(kv_ref_name, input, "Sie müssen den im Bild angezeigten Sicherheitscode eingeben.", true);
                    return false;
                }

                return true;
            };

            this._updateCaptcha();

            content.find("input.back").click(function() {
                that._zurueck();
            });
            content.find("input.check").click(function() {
                var okBeratung = checkBeratung();
                var okPapierunterlagen = checkPapierunterlagen();
                var okVVG = checkVVG();
                var okDS = checkDS();
                var okCaptcha = checkCaptcha();
                var okVk = checkVk();

                if (okBeratung && okPapierunterlagen && okVVG && okDS && okCaptcha && okVk) {
                    that._abschluss();
                } else {
                    SchrittRendererHelper.scrollToFirstError(that.rootElement);
                }
            });
        }

        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        } else {
            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt4RendererIF6.prototype._getDruckstueckDatenschutzBOandUrl = function() {
    return this.oProdukt.getDruckstueckDatenschutzBOandUrl(this.getBO());
};

Schritt4RendererIF6.prototype._getDruckstueckVertragsinformationBOandUrl = function() {
    return this.oProdukt.getDruckstueckVertragsinformationBOandUrl(this.getBO());
};

Schritt4RendererIF6.prototype._getDruckstueckTariferklaerungBOandUrl = function() {
    return this.oProdukt.getDruckstueckTariferklaerungBOandUrl(this.getBO());
};

Schritt4RendererIF6.prototype._getDruckstueckVorschlagBOandUrl = function() {
    return this.oProdukt.getDruckstueckVorschlagBOandUrl(this.getBO());
};

Schritt4RendererIF6.prototype._updateCaptcha = function() {
    this._getCaptcha().then(function(oResult) {
        //SchrittRendererHelper.getItemByPseudoId("capt_im", rootElement).attr("src", Config.resourceUrl + "?token=" + oResult);
        this.getBO().capt.token = oResult.token;
        SchrittRendererHelper.getItemByPseudoId("capt_im", this.rootElement).attr("src", Config.resourceUrl + "?token=" + oResult.captcha.bytes);
    }.bind(this)).fail(function(e) {
        var kv_ref_name = "commonErrors";

        var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, this.rootElement, "label");
        clearErrors(kv_ref_name, label);

        if (e.validationErrors) {
            addError(kv_ref_name, label, "Es liegen folgende Fehler vor:");

            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });

            SchrittRendererHelper.scrollToFirstError(this.rootElement);
        }
    }.bind(this));
};

Schritt4RendererIF6.prototype._getCaptcha = function() {
    return this.oProdukt.getCaptcha(this.getBO());
};

Schritt4RendererIF6.prototype._zurueck = function() {
    return this.oProdukt.zurueck();
};

Schritt4RendererIF6.prototype._abschluss = function() {
    var that = this;

    this.setBusy(true);
    this.oProdukt.abschluss(this.getBO()).then(function(oResult) {
        that.oProdukt.abschlussFinish(that.getBO(), oResult);
    }).fail(function(e) {
        if (e === "token") {
            var kv_ref_name = "capt";
            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);
            addError(kv_ref_name, label, "Der angegebene Bildcode muss mit dem angezeigten übereinstimmen.");
        } else if (e !== null && e !== undefined && typeof e === "object" && e.validationErrors) {
            var kv_ref_name = "commonErrors";

            var label = SchrittRendererHelper.getItemByPseudoId(kv_ref_name, that.rootElement, "label");
            clearErrors(kv_ref_name, label);

            e.validationErrors.forEach(function(oValidationError) {
                addError(kv_ref_name, label, oValidationError.message);
            });
        }
        that.getBO().capt.bildCode = "";
        SchrittRendererHelper.getItemByPseudoId("capt", that.rootElement, "input").val("");

        SchrittRendererHelper.scrollToFirstError(that.rootElement);
        that._updateCaptcha();
    }).always(function() {
        that.setBusy(false);
    });
};

module.exports = Schritt4RendererIF6;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
                    <div kv_ref="kvo_content"> \
                        <!-- Progress / Header --> \
                        <div class="block"> \
                        <ul class="progress"> \
                            <li class="">1</li> \
                            <li class="">2</li> \
                            <li class="">3</li> \
                            <li class="active">4</li> \
                        </ul> \
                        <h2>Vertragsgrundlagen und Erklärungen des Antragstellers und der zu versichernden Person(en)</h2> \
                        </div> \
                        <!-- Contentbereich --> \
                        <!-- Hinweisblock --> \
                        <div class="block"> \
                        <p><strong>In diesem Schritt finden Sie alle rechtlich notwendigen Dokumente rund um Ihre gewünschte Absicherung, bevor Sie am Ende der Seite Ihren Online-Auftrag an uns absenden können.</strong></p> \
                        </div> \
                        <!-- Vertragsrundlagen --> \
                        <div class="block"> \
                        <%= textVertragsgrundlagen %> <a target="_blank" href="https://get.adobe.com/de/reader/"><img border="0" src="' + Config.mediaUrl + 'images/get_reader.png" type="image" name="imageField"></a> \
                        </div> \
                        <!-- Visitenkarte --> \
                        <div class="block" style="display:none" kv_ref="vkCont"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">1</div> \
                                <div class="centered_in_left_of_two_columns distanced_in_left_of_two_columns"><input id="p_ds" name="checkbox" type="checkbox" kv_ref="vk"></div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <label for="p_vk"> \
                                    <p> \
                                    <strong>Herunterladen Vermittlerinformation, §15 VersVemV, §60 VVG </strong><br><%= textVisitenkarteTitle %> \
                                    <div class="buttonline textleft"> \
                                        <div class="bgroup1"> \
                                            <div> \
                                                <input type="submit" class="visitenkarte" id="p_vk" name="Herunterladen" value="Herunterladen" onclick="return false;" title="Herunterladen"> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="vk_hidden"> \
                                    </div> \
                                    <p><br/><%= textVisitenkarte %></p> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Beratung --> \
                        <div class="block"> \
                            <div class="bline"> \
                                <label class="longlabel" kv_ref="commonErrors"></label> \
                                <br class="bterm" /> \
                            </div> \
                            <div class="left_of_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">1</div> \
                                <div class="centered_in_left_of_two_columns"><input id="p_beratung" name="checkbox" type="checkbox" kv_ref="beratung"></div> \
                            </div> \
                            <div class="right_of_two_columns"> \
                                <label for="p_beratung"> \
                                    <p> \
                                    <strong>Verzicht auf Beratung</strong><br/><%= textBeratungsverzicht %> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="beratung_hidden"> \
                                    </div> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Vertragsinfos --> \
                        <div class="block"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">2</div> \
                                <div class="centered_in_left_of_two_columns distanced_in_left_of_two_columns"><input id="p_vvg" name="checkbox" type="checkbox" kv_ref="vvg"></div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <label for="p_vvg"> \
                                    <p> \
                                    <strong>Herunterladen wichtiger Vertragsinformationen</strong><br/><%= textVertragsinformationTitle %> \
                                        <!-- Button --> \
                                        <div class="buttonline textleft"> \
                                            <div class="bgroup1"> \
                                                <div> \
                                                    <input type="submit" class="vvg" name="Erklärung herunterladen" value="Erklärung herunterladen" onclick="return false;" class="" title="Erklärung herunterladen"> \
                                                </div> \
                                            </div> \
                                        </div> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="vvg_hidden"> \
                                    </div> \
                                    <p><%= textVertragsinformation %></p> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Papierunterlagen --> \
                        <div class="block"> \
                            <div class="left_of_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">3</div> \
                                <div class="centered_in_left_of_two_columns"><input id="p_papierunterlagen" name="checkbox" type="checkbox" kv_ref="papierunterlagen"></div> \
                            </div> \
                            <div class="right_of_two_columns"> \
                                <label for="p_papierunterlagen"> \
                                    <p> \
                                    <strong>Verzicht auf Papierunterlagen</strong><br/><%= textPapierverzicht %> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="papierunterlagen_hidden"> \
                                    </div> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Einwilligungsklauseln --> \
                        <div class="block"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">4</div> \
                                <div class="centered_in_left_of_two_columns distanced_in_left_of_two_columns"><input id="p_ds" name="checkbox" type="checkbox" kv_ref="ds"></div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <label for="p_ds"> \
                                    <p> \
                                        <strong>Herunterladen wichtiger Datenschutzinformationen</strong><br><%= textDatenschutzTitle %> \
                                        <div class="buttonline textleft"> \
                                            <div class="bgroup1"> \
                                                <div> \
                                                    <input type="submit" class="datenschutz" name="Erklärung herunterladen" value="Erklärung herunterladen" onclick="return false;" class="" title="Erklärung herunterladen"> \
                                                </div> \
                                            </div> \
                                        </div> \
                                    </p> \
                                    <div class="bline"> \
                                        <input type="hidden" kv_ref="ds_hidden"> \
                                    </div> \
                                    <%= textDatenschutz %> \
                                </label> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Erklärung --> \
                        <div class="block"> \
                            <div class="left_of_two_columns fixed_height_in_two_columns"> \
                                <div class="square_in_left_of_two_columns centered_in_left_of_two_columns consal_block_nummer">5</div> \
                            </div> \
                            <div class="right_of_two_columns fixed_height_in_two_columns"> \
                                <p> \
                                    <%= textAbschlusserklaerung %> \
                                    <div class="image block-center"> \
                                        <img kv_ref="capt_im" type="image" border="0"> \
                                    </div> \
                                </p> \
                                <p>Geben Sie hier den im oberen Bild angezeigten Sicherheitscode ein:</p> \
                                <div class="bline"> \
                                    <label for="captcha" kv_ref="capt">Sicherheitscode:</label> \
                                    <input type="text" name="captcha" id="captcha" value="" class="il" maxlength="10" placeholder="" style="text-transform: uppercase;" kv_ref="capt"> \
                                    <br class="bterm" /> \
                                </div> \
                            </div> \
                            <br class="bterm"> \
                        </div> \
                        <!-- Button-Actionblock --> \
                        <!-- Hinweisblock --> \
                        <div class="block leer"> \
                        </div> \
                        <!-- Button --> \
                        <div class="buttonline"> \
                        <div class="bgroup2"> \
                            <div> \
                                <input type="submit" class="back" name="zurück" value="zurück" onclick="return false;" class="" title="zurück"> \
                            </div> \
                        </div> \
                        <div class="bgroup1"> \
                            <div> \
                                <input type="submit" class="check" name="Jetzt zahlungspflichtig online beantragen" id="defaultAction" value="Jetzt zahlungspflichtig online beantragen" onclick="return false;" class="" title="Jetzt zahlungspflichtig online beantragen"> \
                            </div> \
                        </div> \
                        </div> \
                    </div>',

    errorLabelTemplate: ' \
                    <div class="blineover error"> \
                        <div class="msgerror"> \
                            <ul> \
                                <li><%- error %></li> \
                            </ul> \
                        </div> \
                    </div>'

};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);


var fnErrorLabelTemplate;

function getUrlFor(content) {
    return Config.resourceUrl + "?token=" + content;
}

var Schritt5Renderer = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt5Renderer.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt5Renderer.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "oev":
            schritt = __webpack_require__(91);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt5Renderer.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var bo = this.getBO().bo;
            var anrede = (bo.vn.anrede === "HERR" ? "geehrter Herr" : "geehrte Frau") + " " + (bo.vn.titel ? bo.vn.titel + " " : "") + bo.vn.vorname + " " + bo.vn.name;
            var renderBO = {
                anrede: anrede,
                produkt: bo.produkt,
                antragsNr: validationResult.antragsnr,
                produktDesc: "",
                hotline: bo.einstellung.versicherer.hotline,
                oeffnungszeit: bo.einstellung.versicherer.oeffnungszeit,
                versichererName: bo.einstellung.versicherer.name,
                versichererAddr1: bo.einstellung.versicherer.adr1,
                versichererAddr2: bo.einstellung.versicherer.adr2,
                versichererTelefon: bo.einstellung.versicherer.telefon,
                versichererFax: bo.einstellung.versicherer.fax
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            var urlForContent = getUrlFor(that.getBO().result.antragstream.bytes);
            content.find("a.print").attr("href", urlForContent);
            content.find("a.save").attr("href", urlForContent);
            content.find("a.save").attr("download", "Antrag-" + validationResult.antragsnr + ".pdf");
        }

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt5Renderer.prototype._print = function() {
};

Schritt5Renderer.prototype._save = function() {
};

module.exports = Schritt5Renderer;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
            <div class="off-canvas-wrap"> \
            <div class="inner-wrap"> \
                <header> \
                <div class="sticky-wrapper" style=""> \
                    <div class="contain-to-grid sticky"> \
                        <section class="navigation"> \
                            <nav> \
                            <div class="clearfix row"> \
                                <div class="large-12 columns hide-general"> \
                                    <ul class="left"> \
                                        <li> \
                                        <h4>Tarifrechner <%= produkt %></h4> \
                                        </li> \
                                    </ul> \
                                </div> \
                            </div> \
                            </nav> \
                        </section> \
                    </div> \
                </div> \
                </header> \
                <main> \
                <div class="row"> \
                    <div class="large-12 small-12 columns content-container"> \
                        <div class="row"> \
                            <div class="large-12 columns"> \
    \
                                <!-- Content --> \
                                <!-- linker Contentbereich --> \
                                <div class="large-8 medium-7 columns kvo-content"> \
    \
                                    <div class="kvo-title"> \
                                        <h1>Sehr <%= anrede %>,</h1> \
                                        <div class="row"> \
                                            <div class="large-12 columns"> \
                                                <span>vielen Dank, dass Sie sich für die <%= versichererName %> als Ihren Partner rund um Ihre Gesundheit entschieden haben.</span> \
                                                <p>&nbsp;</p> \
                                            </div> \
                                        </div> \
                                    </div> \
                                    <div class="kvo-content"> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-file-text-o fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Ihr Antrag mit der Antragsnummer <b><%= antragsNr %></b> ist bei uns eingegangen. Sie können ihn anzeigen oder speichern.</span> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                            <div class="medium-12 columns"> \
                                            <div class="row"> \
                                                    <div class="medium-4 columns"> \
                                                        <p>&nbsp;</p> \
                                                    </div> \
                                                    <div class="medium-4 columns left text-right"> \
                                                        <p>&nbsp;</p> \
                                                        <a href="javascript:void(0);" class="button expand print" target="_blank">Antrag anzeigen</a> \
                                                    </div> \
                                                    <div class="medium-4 columns right text-right"> \
                                                        <p>&nbsp;</p> \
                                                        <a href="javascript:void(0);" class="call-to-action button expand save" download>Antrag speichern</a> \
                                                    </div> \
                                            </div> \
                                            </div> \
                                        \
                                        <div class="row"> \
                                            <div class="medium-2 columns"> \
                                            &nbsp; \
                                            </div> \
                                            </div> \
                                        \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <p>Um die Dateien zu öffnen, benötigen Sie den kostenlosen Adobe Reader. Falls Sie ihn auf Ihrem Rechner noch nicht installiert sein sollte, können Sie hier den <a  target="_blank" href="https://get.adobe.com/de/reader/"><img border="0" src="' + Config.mediaUrl + 'form/fod_style/base/resources/img/get_reader.png" type="image" name="imageField"></a> herunterladen.</p> \
                                            </div> \
                                        </div> \
        \
                                        <div class="row"> \
                                            <div class="medium-2 columns"> \
                                            &nbsp; \
                                            </div> \
                                            </div> \
                                        <div class="row"> \
                                            <div class="medium-2 columns"> \
                                            &nbsp; \
                                            </div> \
                                            </div> \
                                        \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                    <div class="row"> \
                                                    <div class="medium-12 columns"> \
                                                        <h2>Wie geht es jetzt weiter?</h2> \
                                                    </div> \
                                                    </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-shield  fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Um Ihre persönlichen Daten zu schützen, versenden wir keine E-Mail mit dem Antrags-PDF im Anhang. Eine Kopie des bei uns gespeicherten Antrags kann von Ihnen jederzeit angefordert werden.</span> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-envelope-open-o  fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Bei Fragen zu Ihrem Antrag setzen wir uns zeitnah mit Ihnen in Verbindung. Bei der Annahme Ihres Antrages senden wir Ihnen einen Versicherungsschein mit Ihrer persönlichen Versicherungsnummer per Post zu.</span> \
                                                    </div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
                                        <div class="row"> \
                                            <div class="small-12 columns"> \
                                                <div class="summarybox"> \
                                                    <div class="row"> \
                                                    <div class="small-5 columns"> \
                                                        <h2 class="text-center"><span><i class="fa fa-envelope-o  fa-3x"></i></span></h2> \
                                                    </div> \
                                                    <div class="small-7 columns"> \
                                                        <span>Wenn Sie später Leistungen einreichen wollen, können Sie dies per App oder Post erledigen.</span> \
                                                        <p><a href="https://www.ukv.de/content/service/leistungsantrag/" target="_blank"><i class="fa fa-caret-right"></i> Mehr erfahren</a> \
                                                    </p></div> \
                                                    </div> \
                                                </div> \
                                            </div> \
                                        </div> \
        \
                                        <div class="row"> \
                                            <div class="medium-12 columns"> \
                                                <h2>Vielen Dank für Ihr Vertrauen</h2> \
        \
                                                <p> \
                                                <%= versichererName %><br> \
                                                <%= versichererAddr1 %><br>  \
                                                <%= versichererAddr2 %><br>  \
                                                Telefon: <%= versichererTelefon %><br>  \
                                                Fax: <%= versichererFax %> \
                                                </p> \
                                            </div> \
                                        </div> \
                                        <div class="row ssl"> \
                                            <div class="columns medium-12 "> \
                                                <p>&nbsp;</p> \
                                                <span class="noteMandatory">Alle mit * gekennzeichneten Felder sind Pflichtfelder.</span> \
                                                <br> \
                                                <span class="secure"> Die Übertragung Ihrer Daten erfolgt verschlüsselt über einen sicheren Server.</span> \
                                            </div> \
                                        </div> \
                                    </div> \
                                </div> \
 \
                            </div> \
                        </div> \
                    </div> \
                </div> \
                </main> \
            </div> \
        </div>'
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(1);
var _ = __webpack_require__(3);

var SchrittRenderer = __webpack_require__(5);
var SchrittRendererHelper = __webpack_require__(4);
var Config = __webpack_require__(0);
var Util = __webpack_require__(2);


var fnErrorLabelTemplate;

function getUrlFor(content) {
    return Config.resourceUrl + "?token=" + content;
}

var Schritt5RendererIF6 = function(oProdukt, sRenderStyle) {
    SchrittRenderer.call(this, oProdukt, sRenderStyle);
};

Schritt5RendererIF6.prototype = Object.create(SchrittRenderer.prototype);
var _super_ = SchrittRenderer.prototype;

Schritt5RendererIF6.prototype._getTemplateImport = function() {
    var schritt;
    switch (this.sRenderStyle) {
        case "if6":
            schritt = __webpack_require__(93);
            break;
        default:
            throw new Error("unsupported render style '" + this.sRenderStyle + "'");
    }
    return schritt;
};

Schritt5RendererIF6.prototype.render = function(validationResult) {
    //console.log("rendering....please wait");

    var defer = $.Deferred();

    var rootElement = $("div.kvo-main-content-container");
    this.rootElement = rootElement;

    var add = false;
    this.fnErrorChecks = [];

    var bFirstRendering = false;

    if (!this.alreadyRendered) {
        rootElement.empty();
        $(".removableUkvTrRowItems").remove();
        this.alreadyRendered = true;
        bFirstRendering = true;

        add = true;
    }

    this._getTemplate().done(function(schrittTemplate) {
        var that = this;

        if (add) {
            var bo = this.getBO().bo;
            var anrede = (bo.vn.anrede === "HERR" ? "geehrter Herr" : "geehrte Frau") + " " + (bo.vn.titel ? bo.vn.titel + " " : "") + bo.vn.vorname + " " + bo.vn.name;
            var renderBO = {
                anrede: anrede,
                produkt: bo.produkt,
                antragsNr: validationResult.antragsnr,
                produktDesc: "",
                hotline: bo.einstellung.versicherer.hotline,
                oeffnungszeit: bo.einstellung.versicherer.oeffnungszeit,
                versichererName: bo.einstellung.versicherer.name,
                versichererAddr1: bo.einstellung.versicherer.adr1,
                versichererAddr2: bo.einstellung.versicherer.adr2,
                versichererTelefon: bo.einstellung.versicherer.telefon,
                versichererFax: bo.einstellung.versicherer.fax
            };

            var fnTemplate = _.template(schrittTemplate.mainTemplate);
            var content = $(fnTemplate(renderBO));
            content.appendTo(rootElement);

            var urlForContent = getUrlFor(that.getBO().result.antragstream.bytes);
            content.find("a.print").attr("href", urlForContent);
            content.find("a.save").attr("href", urlForContent);
            content.find("a.save").attr("download", "Antrag-" + validationResult.antragsnr + ".pdf");

            /*fnTemplate = _.template(schrittTemplate.nextPartTemplate);
            var contentNext = $(fnTemplate(renderBO));
            contentNext.appendTo(content);*/
        }

        // page ready
        window.jQuery(document).trigger('if6_page_ready');

        if (bFirstRendering) {
            SchrittRendererHelper.scrollTo(this.rootElement);
        }

        defer.resolve();
    }.bind(this));

    return defer.promise();
};

Schritt5RendererIF6.prototype._print = function() {
};

Schritt5RendererIF6.prototype._save = function() {
};

module.exports = Schritt5RendererIF6;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var Config = __webpack_require__(0);

module.exports = {
    mainTemplate: ' \
                    <div kv_ref="kvo_content"> \
                        <!-- Contentbereich --> \
                        <!-- Ansprache --> \
                        <div class="block"> \
                            <h3>Sehr <%- anrede %>,</h3> \
                            <p>vielen Dank, dass Sie sich für die <%- versichererName %> als Ihren Partner rund um Ihre Gesundheit entschieden haben. \
                            </p> \
                            <p>Ihr Antrag mit der Antragsnummer <strong><%- antragsNr %></strong> ist bei uns eingegangen. Sie können ihn jetzt anzeigen oder speichern. \
                            </p> \
                            <br class="bterm"> \
                            <!-- Buttons --> \
                            <div class="if6_buttonline section"> \
                                <span></span> \
                                <div class="buttonline_inner parsys"> \
                                <div class="secondary section"><span></span> \
                                    <a href="javascript:void(0);" class="print" target="_blank">Antrag anzeigen</a> \
                                </div> \
                                <div class="primary section"><span></span> \
                                    <a href="javascript:void(0);" class="save" download>Antrag speichern</a> \
                                </div> \
                                </div> \
                            </div> \
                        </div> \
                        <div class="block"> \
                        <!-- Adobe Reader --> \
                            <div class="if6_adobe section"> \
                                <a href="javascript:void(0);"> \
						        <div class="image"> \
						            <a href="https://get.adobe.com/de/reader/"><img src="' + Config.mediaUrl + 'images/get_reader.png" alt=""></a> \
						        </div> \
                                <div> \
                                    <p>Der Antrag wird als PDF-Dokument generiert. Falls Sie ihn auf Ihrem Rechner noch nicht installiert sein sollte, können Sie hier den Acrobat Reader herunterladen.</p> \
                                </div> \
                                </a> \
                            </div> \
                        </div> \
                        <!-- Weiter --> \
                        <div class="block-inner block"> \
                            <h3>Wie geht es jetzt weiter?</h3> \
                        </div> \
                        <div class="block-inner"> \
	                        <!-- Iconbox Datenschutz --> \
	                        <div class="cbox-small cbox cbox-icon section"> \
	                            <span class="icon icon-emblem"></span> \
	                            <h2>Datenschutz</h2> \
	                            <p>Um Ihre persönlichen Daten zu schützen, versenden wir keine E-Mail mit dem Antrags-PDF im Anhang. Eine Kopie des bei uns gespeicherten Antrags kann von Ihnen jederzeit angefordert werden.<br></p> \
	                        </div> \
	                        <!-- Iconbox Fragen zum Antrag --> \
	                        <div class="cbox-small cbox cbox-icon section"> \
	                            <span class="icon icon-letter-in-envelope"></span> \
	                            <h2>Fragen zum Antrag</h2> \
	                            <p>Bei Fragen zu Ihrem Antrag setzen wir uns zeitnah mit Ihnen in Verbindung. Bei Annahme Ihres Antrages senden wir Ihnen einen Versicherungsschein mit Ihrer persönlichen Versicherungsnummer per Post zu.<br></p> \
	                        </div> \
	                        <!-- Iconbox Leistungen einreichen --> \
	                        <div class="cbox-small cbox cbox-icon section"> \
	                            <span class="icon icon-app"></span> \
	                            <h2>Leistungen einreichen</h2> \
	                            <p>Wenn Sie später Leistungen einreichen wollen, können Sie dies per App oder Post machen.<br></p> \
	                            <div class="textbutton"><a title="Mehr erfahren" href="https://www.ukv.de/content/service/leistungsantrag/" target="_blank">Mehr erfahren</a></div> \
	                        </div> \
                        </div> \
                        <!-- Danke --> \
                        <div class="block-inner"> \
	                        <div class="cbox cbox-large cbox-banking section"> \
	                            <div class="block"> \
	                                <h3>Vielen Dank für Ihr Vertrauen!</h3> \
	                                <p><%- versichererName %><br> \
	                                    <%- versichererAddr1 %><br> \
	                                    <%- versichererAddr2 %><br> \
	                                    Telefon: <%- versichererTelefon %><br> \
	                                    Telefax: <%- versichererFax %><br> \
	                                </p> \
	                            </div> \
	                        </div> \
                        </div> \
                    </div>',

    nextPartTemplate: ' \
                <!-- Weiter --> \
                <div class="cbox cbox-large cbox-banking section"> \
                    <div class="block"> \
                        <h3>Wie geht es jetzt weiter?</h3> \
                    </div> \
                </div> \
                <!-- Iconbox Datenschutz --> \
                <div class="cbox-small cbox cbox-icon section"> \
                    <span class="icon icon-emblem"></span> \
                    <h2>Datenschutz</h2> \
                    <p>Um Ihre persönlichen Daten zu schützen, versenden wir keine E-Mail mit dem Antrags-PDF im Anhang. Eine Kopie des bei uns gespeicherten Antrags kann von Ihnen jederzeit angefordert werden.<br></p> \
                </div> \
                <!-- Iconbox Fragen zum Antrag --> \
                <div class="cbox-small cbox cbox-icon section"> \
                    <span class="icon icon-letter-in-envelope"></span> \
                    <h2>Fragen zum Antrag</h2> \
                    <p>Bei Fragen zu Ihrem Antrag setzen wir uns zeitnah mit Ihnen in Verbindung. Bei Annahme Ihres Antrages senden wir Ihnen einen Versicherungsschein mit Ihrer persönlichen Versicherungsnummer per Post zu.<br></p> \
                </div> \
                <!-- Iconbox Leistungen einreichen --> \
                <div class="cbox-small cbox cbox-icon section"> \
                    <span class="icon icon-app"></span> \
                    <h2>Leistungen einreichen</h2> \
                    <p>Wenn Sie später Leistungen einreichen wollen, können Sie dies per App oder Post machen.<br></p> \
                    <div class="textbutton"><a title="Mehr erfahren" href="https://www.ukv.de/content/service/leistungsantrag/" target="_blank">Mehr erfahren</a></div> \
                </div> \
                <!-- Danke --> \
                <div class="cbox cbox-large cbox-banking section"> \
                    <div class="block"> \
                        <h3>Vielen Dank für Ihr Vertrauen!</h3> \
                        <p><%- versichererName %><br> \
                            <%- versichererAddr1 %><br> \
                            <%- versichererAddr2 %><br> \
                            Telefon: <%- versichererTelefon %><br> \
                            Telefax: <%- versichererFax %><br> \
                        </p> \
                    </div> \
                </div> \
            '
};


/***/ })
/******/ ]);